(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4986],{76149:function(e,n,s){"use strict";s.d(n,{I:function(){return E}});var r,t=s(85893),o=s(39355),i=s(48451),a=s(62248),l=s(87339),d=s(39858),p=s(93946),c=s(69661),u=s(25464),m=s(70891),h=s(18987),b=s(59334),k=s(18972),f=s(48885),g=s(90263),_=s(11057),y=s(50657),v=s(37645),w=s(6514),C=s(78462),T=s(31425),R=s(13264),M=s(46670),P=s(41664),x=s.n(P),S=s(67294),I=s(16264),N=s(25854),X=s(8498);let j=e=>(0,t.jsx)("svg",{width:"24",height:"24",viewBox:"0 0 24 24",...e,children:(0,t.jsx)("g",{fill:null!==(r=e.color)&&void 0!==r?r:"currentColor",children:(0,t.jsx)("path",{d:"M22 24l-5.25-5l.63 2H4.5A2.5 2.5 0 0 1 2 18.5v-15A2.5 2.5 0 0 1 4.5 1h15A2.5 2.5 0 0 1 22 3.5V24M12 6.8c-2.68 0-4.56 1.15-4.56 1.15c1.03-.92 2.83-1.45 2.83-1.45l-.17-.17c-1.69.03-3.22 1.2-3.22 1.2c-1.72 3.59-1.61 6.69-1.61 6.69c1.4 1.81 3.48 1.68 3.48 1.68l.71-.9c-1.25-.27-2.04-1.38-2.04-1.38S9.3 14.9 12 14.9s4.58-1.28 4.58-1.28s-.79 1.11-2.04 1.38l.71.9s2.08.13 3.48-1.68c0 0 .11-3.1-1.61-6.69c0 0-1.53-1.17-3.22-1.2l-.17.17s1.8.53 2.83 1.45c0 0-1.88-1.15-4.56-1.15m-2.07 3.79c.65 0 1.18.57 1.17 1.27c0 .69-.52 1.27-1.17 1.27c-.64 0-1.16-.58-1.16-1.27c0-.7.51-1.27 1.16-1.27m4.17 0c.65 0 1.17.57 1.17 1.27c0 .69-.52 1.27-1.17 1.27c-.64 0-1.16-.58-1.16-1.27c0-.7.51-1.27 1.16-1.27z"})})});var z=s(85289),G=s.n(z),A=s(52792);let $=(0,R.Z)("div")(e=>{let{theme:n}=e;return{background:n.palette.secondary.dark,textAlign:"center",padding:n.spacing(1),fontSize:"80%"}}),Z=[{key:"en",name:"English"},...Object.entries(X.R).map(e=>{let[n,s]=e;return{key:n,name:s.name}})],E=(0,M.Pi)(e=>{let{size:n}=e,s=(0,I.a)(),[r,R]=(0,S.useState)(!1),M=(0,S.useRef)(null),[P,X]=(0,S.useState)(!1),{translate:z}=(0,N.q)("userMenu"),[E,D]=(0,S.useState)(!1),[F,H]=(0,S.useState)(!1),q=()=>{D(!0)},L=()=>{D(!1)};(0,S.useEffect)(()=>{H(s.loggedIn),s.loggedIn&&X(!1)},[s.loggedIn]);let O=()=>R(!1),U=()=>{s.logout()};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(A.p,{open:P,onClose:()=>X(!1)}),F?(0,t.jsxs)(p.Z,{onClick:()=>R(!r),size:n,children:[(0,t.jsx)(c.Z,{src:s.profileImage,alt:s.displayName,ref:M,style:"small"===n?{width:30,height:30}:{}}),(0,t.jsxs)(u.Z,{anchorEl:M.current,anchorOrigin:{vertical:"bottom",horizontal:"right"},open:r,onClose:O,children:[(0,t.jsxs)(m.ZP,{children:[(0,t.jsx)(h.Z,{children:(0,t.jsx)(c.Z,{src:s.profileImage,alt:s.displayName})}),(0,t.jsx)(b.Z,{primary:s.displayName,secondary:s.email})]}),s.club&&(0,t.jsx)($,{children:"CLUB MEMBER"}),(0,t.jsx)(x(),{href:"/discord",legacyBehavior:!0,passHref:!0,children:(0,t.jsxs)(k.Z,{component:"a",children:[(0,t.jsx)(f.Z,{children:(0,t.jsx)(j,{})}),(0,t.jsx)(b.Z,{children:z("userMenu.discord","Discord")})]})}),(0,t.jsx)(x(),{href:"/dashboard/projects",legacyBehavior:!0,passHref:!0,children:(0,t.jsxs)(k.Z,{component:"a",children:[(0,t.jsx)(f.Z,{children:(0,t.jsx)(o.Z,{})}),(0,t.jsx)(b.Z,{children:z("myProjects","My projects")})]})}),(0,t.jsx)(x(),{href:"/club",legacyBehavior:!0,passHref:!0,children:(0,t.jsxs)(k.Z,{component:"a",children:[(0,t.jsx)(f.Z,{children:(0,t.jsx)(i.Z,{})}),(0,t.jsx)(b.Z,{children:z("theClub","The Club")})]})}),(0,t.jsx)(x(),{href:"/features",legacyBehavior:!0,passHref:!0,children:(0,t.jsxs)(k.Z,{component:"a",children:[(0,t.jsx)(f.Z,{children:(0,t.jsx)(g.Z,{badgeContent:s.votePowers,color:"primary",children:(0,t.jsx)(a.Z,{})})}),(0,t.jsx)(b.Z,{children:z("featureRoadmap","Feature Roadmap")})]})}),(0,t.jsxs)(k.Z,{onClick:q,children:[(0,t.jsx)(f.Z,{children:(0,t.jsx)(l.Z,{})}),(0,t.jsx)(b.Z,{children:z("language","Language")})]}),(0,t.jsxs)(k.Z,{onClick:U,children:[(0,t.jsx)(f.Z,{children:(0,t.jsx)(d.Z,{})}),(0,t.jsx)(b.Z,{children:z("logout","Logout")})]})]})]}):(0,t.jsx)(_.Z,{variant:"contained",color:"primary",size:n,onClick:()=>X(!0),children:(0,t.jsxs)("span",{className:G().altContent,children:[(0,t.jsx)("span",{className:G().alt1,children:z("signIn","Sign in")}),(0,t.jsx)("span",{className:G().alt2,children:z("signUp","Sign up")})]})}),(0,t.jsxs)(y.Z,{open:E,onClose:L,"aria-labelledby":"alert-dialog-title","aria-describedby":"alert-dialog-description",children:[(0,t.jsx)(v.Z,{id:"alert-dialog-title",children:"Choose your language"}),(0,t.jsx)(w.Z,{children:(0,t.jsx)(C.Z,{children:Z.map(e=>(0,t.jsx)(m.ZP,{disableGutters:!0,button:!0,onClick:()=>{s.setLangId(e.key),L()},children:e.name},e.key))})}),(0,t.jsx)(T.Z,{children:(0,t.jsx)(_.Z,{onClick:L,autoFocus:!0,children:"close"})})]})]})})},48853:function(e,n,s){"use strict";s.d(n,{mL:function(){return m},CL:function(){return i},zd:function(){return c}});var r=s(38966),t=s.n(r),o=JSON.parse('{"Sw":{"D":"use esp_idf_sys as _; // If using the `binstart` feature of `esp-idf-sys`, always keep this module imported\\n\\nfn main() {\\n    esp_idf_sys::link_patches();\\n    println!(\\"Hello world!\\");\\n}\\n","s":"[package]\\nname = \\"rust-project-esp32\\"\\nversion = \\"0.1.0\\"\\nauthors = [\\"Sergio Gasquez <sergio.gasquez@gmail.com>\\"]\\nedition = \\"2021\\"\\nresolver = \\"2\\"\\n\\n[profile.release]\\nopt-level = \\"s\\"\\n\\n[profile.dev]\\ndebug = true    # Symbols are nice and they don\'t increase the size on Flash\\nopt-level = \\"z\\"\\n\\n[features]\\npio = [\\"esp-idf-sys/pio\\"]\\n\\n[dependencies]\\nesp-idf-sys = { version = \\"0.33.0\\", features = [\\"binstart\\"] }\\nesp-idf-hal = \\"0.41.1\\"\\nesp-idf-svc = \\"0.46.0\\"\\n\\n[build-dependencies]\\nembuild = \\"0.31.1\\"\\n"},"yV":{"D":"use esp_idf_sys as _; // If using the `binstart` feature of `esp-idf-sys`, always keep this module imported\\n\\nfn main() {\\n    esp_idf_sys::link_patches();\\n    println!(\\"Hello world!\\");\\n}\\n","s":"[package]\\nname = \\"rust-project-esp32c3\\"\\nversion = \\"0.1.0\\"\\nauthors = [\\"Sergio Gasquez <sergio.gasquez@gmail.com>\\"]\\nedition = \\"2021\\"\\nresolver = \\"2\\"\\n\\n[profile.release]\\nopt-level = \\"s\\"\\n\\n[profile.dev]\\ndebug = true    # Symbols are nice and they don\'t increase the size on Flash\\nopt-level = \\"z\\"\\n\\n[features]\\npio = [\\"esp-idf-sys/pio\\"]\\n\\n[dependencies]\\nesp-idf-sys = { version = \\"0.33.0\\", features = [\\"binstart\\"] }\\nesp-idf-hal = \\"0.41.1\\"\\nesp-idf-svc = \\"0.46.0\\"\\n\\n[build-dependencies]\\nembuild = \\"0.31.1\\"\\n"},"cq":{"D":"use esp_idf_sys as _; // If using the `binstart` feature of `esp-idf-sys`, always keep this module imported\\n\\nfn main() {\\n    esp_idf_sys::link_patches();\\n    println!(\\"Hello world!\\");\\n}\\n","s":"[package]\\nname = \\"rust-project-esp32s2\\"\\nversion = \\"0.1.0\\"\\nauthors = [\\"Sergio Gasquez <sergio.gasquez@gmail.com>\\"]\\nedition = \\"2021\\"\\nresolver = \\"2\\"\\n\\n[profile.release]\\nopt-level = \\"s\\"\\n\\n[profile.dev]\\ndebug = true    # Symbols are nice and they don\'t increase the size on Flash\\nopt-level = \\"z\\"\\n\\n[features]\\npio = [\\"esp-idf-sys/pio\\"]\\n\\n[dependencies]\\nesp-idf-sys = { version = \\"0.33.0\\", features = [\\"binstart\\"] }\\nesp-idf-hal = \\"0.41.1\\"\\nesp-idf-svc = \\"0.46.0\\"\\n\\n[build-dependencies]\\nembuild = \\"0.31.1\\"\\n"},"U6":{"D":"use esp_idf_sys as _; // If using the `binstart` feature of `esp-idf-sys`, always keep this module imported\\n\\nfn main() {\\n    esp_idf_sys::link_patches();\\n    println!(\\"Hello world!\\");\\n}\\n","s":"[package]\\nname = \\"rust-project-esp32s3\\"\\nversion = \\"0.1.0\\"\\nauthors = [\\"Sergio Gasquez <sergio.gasquez@gmail.com>\\"]\\nedition = \\"2021\\"\\nresolver = \\"2\\"\\n\\n[profile.release]\\nopt-level = \\"s\\"\\n\\n[profile.dev]\\ndebug = true    # Symbols are nice and they don\'t increase the size on Flash\\nopt-level = \\"z\\"\\n\\n[features]\\npio = [\\"esp-idf-sys/pio\\"]\\n\\n[dependencies]\\nesp-idf-sys = { version = \\"0.33.0\\", features = [\\"binstart\\"] }\\nesp-idf-hal = \\"0.41.1\\"\\nesp-idf-svc = \\"0.46.0\\"\\n\\n[build-dependencies]\\nembuild = \\"0.31.1\\"\\n"},"_y":{"D":"use esp_idf_sys as _; // If using the `binstart` feature of `esp-idf-sys`, always keep this module imported\\n\\nfn main() {\\n    esp_idf_sys::link_patches();\\n    println!(\\"Hello world!\\");\\n}\\n","s":"[package]\\nname = \\"rust-project-esp32c3\\"\\nversion = \\"0.1.0\\"\\nauthors = [\\"Sergio Gasquez <sergio.gasquez@gmail.com>\\"]\\nedition = \\"2021\\"\\nresolver = \\"2\\"\\n\\n[profile.release]\\nopt-level = \\"s\\"\\n\\n[profile.dev]\\ndebug = true    # Symbols are nice and they don\'t increase the size on Flash\\nopt-level = \\"z\\"\\n\\n[features]\\npio = [\\"esp-idf-sys/pio\\"]\\n\\n[dependencies]\\nesp-idf-sys = { version = \\"0.33.0\\", features = [\\"binstart\\"] }\\nesp-idf-hal = \\"0.41.1\\"\\nesp-idf-svc = \\"0.46.0\\"\\n\\n[build-dependencies]\\nembuild = \\"0.31.1\\"\\n"},"Yg":{"D":"#![no_std]\\n#![no_main]\\n\\nuse esp_backtrace as _;\\nuse esp_println::println;\\nuse hal::{clock::ClockControl, peripherals::Peripherals, prelude::*, timer::TimerGroup, Rtc};\\n\\n#[entry]\\nfn main() -> ! {\\n    let peripherals = Peripherals::take();\\n    let mut system = peripherals.DPORT.split();\\n    let clocks = ClockControl::boot_defaults(system.clock_control).freeze();\\n\\n    // Disable the RTC and TIMG watchdog timers\\n    let mut rtc = Rtc::new(peripherals.RTC_CNTL);\\n    let timer_group0 = TimerGroup::new(\\n        peripherals.TIMG0,\\n        &clocks,\\n        &mut system.peripheral_clock_control,\\n    );\\n    let mut wdt0 = timer_group0.wdt;\\n    let timer_group1 = TimerGroup::new(\\n        peripherals.TIMG1,\\n        &clocks,\\n        &mut system.peripheral_clock_control,\\n    );\\n    let mut wdt1 = timer_group1.wdt;\\n    rtc.rwdt.disable();\\n    wdt0.disable();\\n    wdt1.disable();\\n    println!(\\"Hello world!\\");\\n\\n    loop {}\\n}\\n","s":"[package]\\nname = \\"rust_project_esp32\\"\\nversion = \\"0.1.0\\"\\nauthors = [\\"Sergio Gasquez <sergio.gasquez@gmail.com>\\"]\\nedition = \\"2021\\"\\nlicense = \\"MIT OR Apache-2.0\\"\\n\\n[dependencies]\\nhal = { package = \\"esp32-hal\\", version = \\"0.12.0\\" }\\nesp-backtrace = { version = \\"0.7.0\\", features = [\\n    \\"esp32\\",\\n    \\"panic-handler\\",\\n    \\"print-uart\\",\\n] }\\nesp-println = { version = \\"0.5.0\\", features = [\\"esp32\\"] }\\nxtensa-lx-rt = { version = \\"0.15.0\\", features = [\\"esp32\\"], optional = true }\\n\\n[features]\\ndefault = [\\"rt\\"]\\nrt = [\\"xtensa-lx-rt\\"]\\n"},"v3":{"D":"#![no_std]\\n#![no_main]\\n\\nuse esp_backtrace as _;\\nuse esp_println::println;\\nuse hal::{clock::ClockControl, peripherals::Peripherals, prelude::*, timer::TimerGroup, Rtc};\\n\\n#[entry]\\nfn main() -> ! {\\n    let peripherals = Peripherals::take();\\n    let mut system = peripherals.SYSTEM.split();\\n    let clocks = ClockControl::boot_defaults(system.clock_control).freeze();\\n\\n    // Disable the RTC and TIMG watchdog timers\\n    let mut rtc = Rtc::new(peripherals.RTC_CNTL);\\n    let timer_group0 = TimerGroup::new(\\n        peripherals.TIMG0,\\n        &clocks,\\n        &mut system.peripheral_clock_control,\\n    );\\n    let mut wdt0 = timer_group0.wdt;\\n    let timer_group1 = TimerGroup::new(\\n        peripherals.TIMG1,\\n        &clocks,\\n        &mut system.peripheral_clock_control,\\n    );\\n    let mut wdt1 = timer_group1.wdt;\\n    rtc.swd.disable();\\n    rtc.rwdt.disable();\\n    wdt0.disable();\\n    wdt1.disable();\\n    println!(\\"Hello world!\\");\\n\\n    loop {}\\n}\\n","s":"[package]\\nname = \\"rust_project_esp32c3\\"\\nversion = \\"0.1.0\\"\\nauthors = [\\"Sergio Gasquez <sergio.gasquez@gmail.com>\\"]\\nedition = \\"2021\\"\\nlicense = \\"MIT OR Apache-2.0\\"\\n\\n[dependencies]\\nhal = { package = \\"esp32c3-hal\\", version = \\"0.9.0\\" }\\nesp-backtrace = { version = \\"0.7.0\\", features = [\\n    \\"esp32c3\\",\\n    \\"panic-handler\\",\\n    \\"exception-handler\\",\\n    \\"print-uart\\",\\n] }\\nesp-println = { version = \\"0.5.0\\", features = [\\"esp32c3\\"] }\\n"},"Gm":{"D":"#![no_std]\\n#![no_main]\\n\\nuse esp_backtrace as _;\\nuse esp_println::println;\\nuse hal::{clock::ClockControl, peripherals::Peripherals, prelude::*, timer::TimerGroup, Rtc};\\n\\n#[entry]\\nfn main() -> ! {\\n    let peripherals = Peripherals::take();\\n    let mut system = peripherals.SYSTEM.split();\\n    let clocks = ClockControl::boot_defaults(system.clock_control).freeze();\\n\\n    // Disable the RTC and TIMG watchdog timers\\n    let mut rtc = Rtc::new(peripherals.RTC_CNTL);\\n    let timer_group0 = TimerGroup::new(\\n        peripherals.TIMG0,\\n        &clocks,\\n        &mut system.peripheral_clock_control,\\n    );\\n    let mut wdt0 = timer_group0.wdt;\\n    let timer_group1 = TimerGroup::new(\\n        peripherals.TIMG1,\\n        &clocks,\\n        &mut system.peripheral_clock_control,\\n    );\\n    let mut wdt1 = timer_group1.wdt;\\n    rtc.rwdt.disable();\\n    wdt0.disable();\\n    wdt1.disable();\\n    println!(\\"Hello world!\\");\\n\\n    loop {}\\n}\\n","s":"[package]\\nname = \\"rust_project_esp32s2\\"\\nversion = \\"0.1.0\\"\\nauthors = [\\"Sergio Gasquez <sergio.gasquez@gmail.com>\\"]\\nedition = \\"2021\\"\\nlicense = \\"MIT OR Apache-2.0\\"\\n\\n[dependencies]\\nhal = { package = \\"esp32s2-hal\\", version = \\"0.9.0\\" }\\nesp-backtrace = { version = \\"0.7.0\\", features = [\\n    \\"esp32s2\\",\\n    \\"panic-handler\\",\\n    \\"exception-handler\\",\\n    \\"print-uart\\",\\n] }\\nesp-println = { version = \\"0.5.0\\", features = [\\"esp32s2\\"] }\\n"},"Hs":{"D":"#![no_std]\\n#![no_main]\\n\\nuse esp_backtrace as _;\\nuse esp_println::println;\\nuse hal::{clock::ClockControl, peripherals::Peripherals, prelude::*, timer::TimerGroup, Rtc};\\n\\n#[entry]\\nfn main() -> ! {\\n    let peripherals = Peripherals::take();\\n    let mut system = peripherals.SYSTEM.split();\\n    let clocks = ClockControl::boot_defaults(system.clock_control).freeze();\\n\\n    // Disable the RTC and TIMG watchdog timers\\n    let mut rtc = Rtc::new(peripherals.RTC_CNTL);\\n    let timer_group0 = TimerGroup::new(\\n        peripherals.TIMG0,\\n        &clocks,\\n        &mut system.peripheral_clock_control,\\n    );\\n    let mut wdt0 = timer_group0.wdt;\\n    let timer_group1 = TimerGroup::new(\\n        peripherals.TIMG1,\\n        &clocks,\\n        &mut system.peripheral_clock_control,\\n    );\\n    let mut wdt1 = timer_group1.wdt;\\n    rtc.rwdt.disable();\\n    wdt0.disable();\\n    wdt1.disable();\\n    println!(\\"Hello world!\\");\\n\\n    loop {}\\n}\\n","s":"[package]\\nname = \\"rust_project_esp32s3\\"\\nversion = \\"0.1.0\\"\\nauthors = [\\"Sergio Gasquez <sergio.gasquez@gmail.com>\\"]\\nedition = \\"2021\\"\\nlicense = \\"MIT OR Apache-2.0\\"\\n\\n[dependencies]\\nhal = { package = \\"esp32s3-hal\\", version = \\"0.9.0\\" }\\nesp-backtrace = { version = \\"0.7.0\\", features = [\\n    \\"esp32s3\\",\\n    \\"panic-handler\\",\\n    \\"exception-handler\\",\\n    \\"print-uart\\",\\n] }\\nesp-println = { version = \\"0.5.0\\", features = [\\"esp32s3\\"] }\\n"},"Im":{"D":"#![no_std]\\n#![no_main]\\n\\nuse esp_backtrace as _;\\nuse esp_println::println;\\nuse hal::{clock::ClockControl, peripherals::Peripherals, prelude::*, timer::TimerGroup, Rtc};\\n\\n#[entry]\\nfn main() -> ! {\\n    let peripherals = Peripherals::take();\\n    let mut system = peripherals.SYSTEM.split();\\n    let clocks = ClockControl::boot_defaults(system.clock_control).freeze();\\n\\n    // Disable the RTC and TIMG watchdog timers\\n    let mut rtc = Rtc::new(peripherals.RTC_CNTL);\\n    let timer_group0 = TimerGroup::new(\\n        peripherals.TIMG0,\\n        &clocks,\\n        &mut system.peripheral_clock_control,\\n    );\\n    let mut wdt0 = timer_group0.wdt;\\n    let timer_group1 = TimerGroup::new(\\n        peripherals.TIMG1,\\n        &clocks,\\n        &mut system.peripheral_clock_control,\\n    );\\n    let mut wdt1 = timer_group1.wdt;\\n    rtc.swd.disable();\\n    rtc.rwdt.disable();\\n    wdt0.disable();\\n    wdt1.disable();\\n    println!(\\"Hello world!\\");\\n\\n    loop {}\\n}\\n","s":"[package]\\nname = \\"rust_project_esp32c3\\"\\nversion = \\"0.1.0\\"\\nauthors = [\\"Sergio Gasquez <sergio.gasquez@gmail.com>\\"]\\nedition = \\"2021\\"\\nlicense = \\"MIT OR Apache-2.0\\"\\n\\n[dependencies]\\nhal = { package = \\"esp32c3-hal\\", version = \\"0.9.0\\" }\\nesp-backtrace = { version = \\"0.7.0\\", features = [\\n    \\"esp32c3\\",\\n    \\"panic-handler\\",\\n    \\"exception-handler\\",\\n    \\"print-uart\\",\\n] }\\nesp-println = { version = \\"0.5.0\\", features = [\\"esp32c3\\"] }\\n"},"hP":{"D":"#![no_std]\\n#![no_main]\\n\\nuse panic_halt as _;\\n\\n#[arduino_hal::entry]\\nfn main() -> ! {\\n    let dp = arduino_hal::Peripherals::take().unwrap();\\n    let pins = arduino_hal::pins!(dp);\\n\\n    let mut led = pins.d13.into_output();\\n\\n    loop {\\n        led.toggle();\\n        arduino_hal::delay_ms(1000);\\n    }\\n}\\n\\n","s":"[package]\\nname = \\"rust-avr-mega\\"\\nversion = \\"0.1.0\\"\\nauthors = [\\"Frederick Vollbrecht<frederick@vollbrecht.cc>\\"]\\nedition = \\"2021\\"\\nlicense = \\"MIT OR Apache-2.0\\"\\n\\n[[bin]]\\nname = \\"rust-avr-mega\\"\\ntest = false\\nbench = false\\n\\n[dependencies]\\npanic-halt = \\"0.2.0\\"\\nufmt = \\"0.1.0\\"\\nnb = \\"0.1.2\\"\\nembedded-hal = \\"0.2.3\\"\\n\\n[dependencies.arduino-hal]\\ngit = \\"https://github.com/rahix/avr-hal\\"\\nrev = \\"7dfa6d322b9df98b2d98afe0e14a97afe0187ac1\\"\\nfeatures = [\\"arduino-mega2560\\"]\\n\\n# Configure the build for minimal size - AVRs have very little program memory\\n[profile.release]\\npanic = \\"abort\\"\\ncodegen-units = 1\\ndebug = true\\nlto = true\\nopt-level = \\"s\\"\\n"},"Ui":{"D":"#![no_std]\\n#![no_main]\\n\\nuse panic_halt as _;\\n\\n#[arduino_hal::entry]\\nfn main() -> ! {\\n    let dp = arduino_hal::Peripherals::take().unwrap();\\n    let pins = arduino_hal::pins!(dp);\\n\\n    let mut led = pins.d13.into_output();\\n\\n    loop {\\n        led.toggle();\\n        arduino_hal::delay_ms(1000);\\n    }\\n}\\n","s":"[package]\\nname = \\"rust-avr-nano\\"\\nversion = \\"0.1.0\\"\\nauthors = [\\"Frederick Vollbrecht<frederick@vollbrecht.cc>\\"]\\nedition = \\"2021\\"\\nlicense = \\"MIT OR Apache-2.0\\"\\n\\n[[bin]]\\nname = \\"rust-avr-nano\\"\\ntest = false\\nbench = false\\n\\n[dependencies]\\npanic-halt = \\"0.2.0\\"\\nufmt = \\"0.1.0\\"\\nnb = \\"0.1.2\\"\\nembedded-hal = \\"0.2.3\\"\\n\\n[dependencies.arduino-hal]\\ngit = \\"https://github.com/rahix/avr-hal\\"\\nrev = \\"7dfa6d322b9df98b2d98afe0e14a97afe0187ac1\\"\\nfeatures = [\\"arduino-nano\\"]\\n\\n# Configure the build for minimal size - AVRs have very little program memory\\n[profile.release]\\npanic = \\"abort\\"\\ncodegen-units = 1\\ndebug = true\\nlto = true\\nopt-level = \\"s\\"\\n"},"xE":{"D":"#![no_std]\\n#![no_main]\\n\\nuse panic_halt as _;\\n\\n#[arduino_hal::entry]\\nfn main() -> ! {\\n    let dp = arduino_hal::Peripherals::take().unwrap();\\n    let pins = arduino_hal::pins!(dp);\\n\\n    let mut led = pins.d13.into_output();\\n\\n    loop {\\n        led.toggle();\\n        arduino_hal::delay_ms(1000);\\n    }\\n}\\n","s":"[package]\\nname = \\"rust-avr-uno\\"\\nversion = \\"0.1.0\\"\\nauthors = [\\"Frederick Vollbrecht<frederick@vollbrecht.cc>\\"]\\nedition = \\"2021\\"\\nlicense = \\"MIT OR Apache-2.0\\"\\n\\n[[bin]]\\nname = \\"rust-avr-uno\\"\\ntest = false\\nbench = false\\n\\n[dependencies]\\npanic-halt = \\"0.2.0\\"\\nufmt = \\"0.1.0\\"\\nnb = \\"0.1.2\\"\\nembedded-hal = \\"0.2.3\\"\\n\\n[dependencies.arduino-hal]\\ngit = \\"https://github.com/rahix/avr-hal\\"\\nrev = \\"7dfa6d322b9df98b2d98afe0e14a97afe0187ac1\\"\\nfeatures = [\\"arduino-uno\\"]\\n\\n# Configure the build for minimal size - AVRs have very little program memory\\n[profile.release]\\npanic = \\"abort\\"\\ncodegen-units = 1\\ndebug = true\\nlto = true\\nopt-level = \\"s\\"\\n"}}');let i="Anonymous maker",a="void setup() {\n  // put your setup code here, to run once:\n\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n\n}\n",l='void setup() {\n  // put your setup code here, to run once:\n  Serial.begin(115200);\n  Serial.println("Hello, ESP32!");\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n  delay(10); // this speeds up the simulation\n}\n',d='void setup() {\n  // put your setup code here, to run once:\n  Serial.begin(115200);\n  Serial.println("Hello, STM32!");\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n  delay(10); // this speeds up the simulation\n}\n',p='void setup() {\n  // put your setup code here, to run once:\n  Serial1.begin(115200);\n  Serial1.println("Hello, Raspberry Pi Pico!");\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n  delay(1); // this speeds up the simulation\n}\n',c={"arduino-uno":{name:"Arduino Uno",boardName:"wokwi-arduino-uno",boardId:"uno",sketch:a},"arduino-mega":{name:"Arduino Mega",boardName:"wokwi-arduino-mega",boardId:"mega",sketch:a},"arduino-nano":{name:"Arduino Nano",boardName:"wokwi-arduino-nano",boardId:"nano",sketch:a},attiny85:{name:"ATtiny85",boardName:"wokwi-attiny85",boardId:"tiny",sketch:a},esp32:{name:"ESP32",boardName:"wokwi-esp32-devkit-v1",boardId:"esp",sketch:l,defaultConnections:[["esp:TX0","$serialMonitor:RX",""],["esp:RX0","$serialMonitor:TX",""]]},"esp32-s2":{name:"ESP32-S2",boardName:"board-esp32-s2-devkitm-1",boardId:"esp",sketch:l.replace("ESP32","ESP32-S2"),defaultConnections:[["esp:TX","$serialMonitor:RX",""],["esp:RX","$serialMonitor:TX",""]]},"esp32-s3":{name:"ESP32-S3 (beta)",boardName:"board-esp32-s3-devkitc-1",boardId:"esp",sketch:l.replace("ESP32","ESP32-S3"),defaultConnections:[["esp:TX","$serialMonitor:RX",""],["esp:RX","$serialMonitor:TX",""]]},"esp32-c3":{name:"ESP32-C3",boardName:"board-esp32-c3-devkitm-1",boardId:"esp",sketch:l.replace("ESP32","ESP32-C3"),defaultConnections:[["esp:TX","$serialMonitor:RX",""],["esp:RX","$serialMonitor:TX",""]]},"micropython-esp32":{name:"MicroPython on ESP32",boardName:"wokwi-esp32-devkit-v1",boardId:"esp",boardAttrs:{env:"micropython-20230426-v1.20.0"},sketchName:"main.py",sketch:'print("Hello, ESP32!")\n',defaultConnections:[["esp:TX0","$serialMonitor:RX",""],["esp:RX0","$serialMonitor:TX",""]]},"pi-pico":{name:"Raspberry Pi Pico",boardName:"wokwi-pi-pico",boardId:"pico",sketch:p,defaultConnections:[["pico:GP0","$serialMonitor:RX",""],["pico:GP1","$serialMonitor:TX",""]]},"pi-pico-sdk":{name:"Raspberry Pi Pico (SDK)",boardName:"wokwi-pi-pico",boardId:"pico",sketchName:"main.c",sketch:'#include <stdio.h>\n#include "pico/stdlib.h"\n\nint main() {\n  stdio_init_all();\n  while (true) {\n    printf("Hello, Wokwi!\\n");\n    sleep_ms(250);\n  }\n}',boardAttrs:{builder:"pico-sdk"},defaultConnections:[["pico:GP0","$serialMonitor:RX",""],["pico:GP1","$serialMonitor:TX",""]]},"micropython-pi-pico":{name:"MicroPython on Raspberry Pi Pico",boardName:"wokwi-pi-pico",boardId:"pico",boardAttrs:{env:"micropython-20230426-v1.20.0"},sketchName:"main.py",sketch:'import time\ntime.sleep(0.1) # Wait for USB to become ready\n\nprint("Hello, Pi Pico!")\n',defaultConnections:[]},"circuitpython-pi-pico":{name:"CircuitPython on Raspberry Pi Pico",boardName:"wokwi-pi-pico",boardId:"pico",boardAttrs:{env:"circuitpython-20210914-8520c43"},sketchName:"code.py",sketch:'print("Hello, Pi Pico!")\n',defaultConnections:[]},"pi-pico-w":{name:"Raspberry Pi Pico W",boardName:"board-pi-pico-w",boardId:"pico",sketch:p.replace("Pico!","Pico W!"),defaultConnections:[["pico:GP0","$serialMonitor:RX",""],["pico:GP1","$serialMonitor:TX",""]]},"pi-pico-w-sdk":{name:"Raspberry Pi Pico W (SDK)",boardName:"board-pi-pico-w",boardId:"pico",sketchName:"main.c",sketch:'#include <stdio.h>\n#include "pico/stdlib.h"\n#include "pico/cyw43_arch.h"\n\nint main() {\n  stdio_init_all();\n  while (true) {\n    printf("Hello, Wokwi!\\n");\n    sleep_ms(250);\n  }\n}',boardAttrs:{builder:"pico-sdk"},defaultConnections:[["pico:GP0","$serialMonitor:RX",""],["pico:GP1","$serialMonitor:TX",""]]},"micropython-pi-pico-w":{name:"MicroPython on Raspberry Pi Pico W",boardName:"board-pi-pico-w",boardId:"pico",boardAttrs:{env:"micropython-20230426-v1.20.0"},sketchName:"main.py",sketch:'print("Hello, Pi Pico W!")\n',defaultConnections:[]},"st-nucleo-c031c6":{name:"STM32 Nucleo64 C031C6",boardName:"board-st-nucleo-c031c6",boardId:"nucleo",sketch:d,defaultConnections:[["$serialMonitor:TX","nucleo:PA3","",[]],["$serialMonitor:RX","nucleo:PA2","",[]]]},"st-nucleo-l031k6":{name:"STM32 Nucleo64 L031K6",boardName:"board-st-nucleo-l031k6",boardId:"nucleo",sketch:d,defaultConnections:[["$serialMonitor:TX","nucleo:VCP_RX","",[]],["$serialMonitor:RX","nucleo:VCP_TX","",[]]]},franzininho:{name:"Franzininho",boardName:"wokwi-franzininho",boardId:"franzininho",sketch:a},"franzininho-wifi":{name:"Franzininho WiFi (ESP32-S2)",boardName:"board-franzininho-wifi",boardId:"franzininho",sketch:a},"rust-esp32":{name:"Rust on ESP32",boardName:"wokwi-esp32-devkit-v1",boardId:"esp",sketch:o.Sw.D,sketchName:"main.rs",boardAttrs:{builder:"rust-std-esp"},defaultConnections:[["esp:TX0","$serialMonitor:RX",""],["esp:RX0","$serialMonitor:TX",""]],serialMonitor:{display:"terminal"},extraFiles:[{name:"Cargo.toml",content:o.Sw.s}]},"rust-esp32-c3":{name:"Rust on ESP32-C3",boardName:"board-esp32-c3-devkitm-1",boardId:"esp",sketch:o.yV.D,sketchName:"main.rs",boardAttrs:{builder:"rust-std-esp"},defaultConnections:[["esp:TX","$serialMonitor:RX",""],["esp:RX","$serialMonitor:TX",""]],serialMonitor:{display:"terminal"},extraFiles:[{name:"Cargo.toml",content:o.yV.s}]},"rust-esp32-s2":{name:"Rust on ESP32-S2",boardName:"board-esp32-s2-devkitm-1",boardId:"esp",sketch:o.cq.D,sketchName:"main.rs",boardAttrs:{builder:"rust-std-esp"},defaultConnections:[["esp:TX","$serialMonitor:RX",""],["esp:RX","$serialMonitor:TX",""]],serialMonitor:{display:"terminal"},extraFiles:[{name:"Cargo.toml",content:o.cq.s}]},"rust-esp32-s3":{name:"Rust on ESP32-S3",boardName:"board-esp32-s3-devkitc-1",boardId:"esp",sketch:o.U6.D,sketchName:"main.rs",boardAttrs:{builder:"rust-std-esp"},defaultConnections:[["esp:TX","$serialMonitor:RX",""],["esp:RX","$serialMonitor:TX",""]],serialMonitor:{display:"terminal"},extraFiles:[{name:"Cargo.toml",content:o.U6.s}]},"rust-esp32-rust-board":{name:"Rust on ESP32 Rust Board",boardName:"board-esp32-c3-rust-1",boardId:"esp",sketch:o._y.D,sketchName:"main.rs",boardAttrs:{builder:"rust-std-esp"},defaultConnections:[["esp:21","$serialMonitor:RX",""],["esp:20","$serialMonitor:TX",""]],serialMonitor:{display:"terminal"},extraFiles:[{name:"Cargo.toml",content:o._y.s}]},"rust-nostd-esp32":{name:"Rust on ESP32 (nostd)",boardName:"wokwi-esp32-devkit-v1",boardId:"esp",sketch:o.Yg.D,sketchName:"main.rs",boardAttrs:{builder:"rust-nostd-esp"},defaultConnections:[["esp:TX0","$serialMonitor:RX",""],["esp:RX0","$serialMonitor:TX",""]],serialMonitor:{display:"terminal"},extraFiles:[{name:"Cargo.toml",content:o.Yg.s}]},"rust-nostd-esp32-c3":{name:"Rust on ESP32-C3 (nostd)",boardName:"board-esp32-c3-devkitm-1",boardId:"esp",sketch:o.v3.D,sketchName:"main.rs",boardAttrs:{builder:"rust-nostd-esp"},defaultConnections:[["esp:TX","$serialMonitor:RX",""],["esp:RX","$serialMonitor:TX",""]],serialMonitor:{display:"terminal"},extraFiles:[{name:"Cargo.toml",content:o.v3.s}]},"rust-nostd-esp32-s2":{name:"Rust on ESP32-S2 (nostd)",boardName:"board-esp32-s2-devkitm-1",boardId:"esp",sketch:o.Gm.D,sketchName:"main.rs",boardAttrs:{builder:"rust-nostd-esp"},defaultConnections:[["esp:TX","$serialMonitor:RX",""],["esp:RX","$serialMonitor:TX",""]],serialMonitor:{display:"terminal"},extraFiles:[{name:"Cargo.toml",content:o.Gm.s}]},"rust-nostd-esp32-s3":{name:"Rust on ESP32-S3 (nostd)",boardName:"board-esp32-s3-devkitc-1",boardId:"esp",sketch:o.Hs.D,sketchName:"main.rs",boardAttrs:{builder:"rust-nostd-esp"},defaultConnections:[["esp:TX","$serialMonitor:RX",""],["esp:RX","$serialMonitor:TX",""]],serialMonitor:{display:"terminal"},extraFiles:[{name:"Cargo.toml",content:o.Hs.s}]},"rust-nostd-esp32-rust-board":{name:"Rust on ESP32 Rust Board (nostd)",boardName:"board-esp32-c3-rust-1",boardId:"esp",sketch:o.Im.D,sketchName:"main.rs",boardAttrs:{builder:"rust-nostd-esp"},defaultConnections:[["esp:21","$serialMonitor:RX",""],["esp:20","$serialMonitor:TX",""]],serialMonitor:{display:"terminal"},extraFiles:[{name:"Cargo.toml",content:o.Im.s}]},"rust-avr-uno":{name:"Rust on Arduino Uno",boardName:"wokwi-arduino-uno",boardId:"uno",sketch:o.xE.D,sketchName:"main.rs",boardAttrs:{builder:"rust-nostd-avr"},extraFiles:[{name:"Cargo.toml",content:o.xE.s}]},"rust-avr-mega":{name:"Rust on Arduino Mega",boardName:"wokwi-arduino-mega",boardId:"mega",sketch:o.hP.D,sketchName:"main.rs",boardAttrs:{builder:"rust-nostd-avr"},extraFiles:[{name:"Cargo.toml",content:o.hP.s}]},"rust-avr-nano":{name:"Rust on Arduino Nano",boardName:"wokwi-arduino-nano",boardId:"nano",sketch:o.Ui.D,sketchName:"main.rs",boardAttrs:{builder:"rust-nostd-avr"},extraFiles:[{name:"Cargo.toml",content:o.Ui.s}]}},u=e=>{let{boardName:n,boardId:s,boardAttrs:r,defaultConnections:o,serialMonitor:a}=e;return t()({version:1,author:i,editor:"wokwi",parts:[{id:s,type:n,attrs:r}],connections:null!=o?o:[],serialMonitor:a},null,2,100)};function m(e){var n,s;return[{name:null!==(n=e.sketchName)&&void 0!==n?n:"sketch.ino",content:e.sketch},{name:"diagram.json",content:u(e)},...null!==(s=e.extraFiles)&&void 0!==s?s:[]]}},85289:function(e){e.exports={altContent:"user-menu_altContent__PHtj5",alt1:"user-menu_alt1__swt4s",alt2:"user-menu_alt2__U4wD7","show-hide":"user-menu_show-hide__nPbXj"}}}]);