
F405_serial_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c494  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  0800c624  0800c624  0001c624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7f8  0800c7f8  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  0800c7f8  0800c7f8  0001c7f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c800  0800c800  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c800  0800c800  0001c800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c804  0800c804  0001c804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  0800c808  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020164  2**0
                  CONTENTS
 10 .bss          000016c4  20000164  20000164  00020164  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001828  20001828  00020164  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c561  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e80  00000000  00000000  0003c6f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017d8  00000000  00000000  00040578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001640  00000000  00000000  00041d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002501d  00000000  00000000  00043390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dc16  00000000  00000000  000683ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d41c6  00000000  00000000  00085fc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015a189  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006fe4  00000000  00000000  0015a1dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000164 	.word	0x20000164
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c60c 	.word	0x0800c60c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000168 	.word	0x20000168
 80001cc:	0800c60c 	.word	0x0800c60c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b5b0      	push	{r4, r5, r7, lr}
 8000576:	b09c      	sub	sp, #112	; 0x70
 8000578:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f001 f9d3 	bl	8001924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f86b 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 fc97 	bl	8000eb4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000586:	f000 fc75 	bl	8000e74 <MX_DMA_Init>
  MX_ADC1_Init();
 800058a:	f000 f8cf 	bl	800072c <MX_ADC1_Init>
  MX_ADC2_Init();
 800058e:	f000 f971 	bl	8000874 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000592:	f000 fa11 	bl	80009b8 <MX_ADC3_Init>
  MX_TIM1_Init();
 8000596:	f000 fadb 	bl	8000b50 <MX_TIM1_Init>
  MX_TIM4_Init();
 800059a:	f000 fb85 	bl	8000ca8 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 800059e:	f000 fc3f 	bl	8000e20 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 80005a2:	f000 fc07 	bl	8000db4 <MX_TIM7_Init>
  MX_SPI3_Init();
 80005a6:	f000 fa9b 	bl	8000ae0 <MX_SPI3_Init>
  MX_USB_DEVICE_Init();
 80005aa:	f00a f8f5 	bl	800a798 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin (GPIOC, GPIO_PIN_9);
 80005ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005b2:	4822      	ldr	r0, [pc, #136]	; (800063c <main+0xc8>)
 80005b4:	f002 fd0d 	bl	8002fd2 <HAL_GPIO_TogglePin>
	  HAL_Delay (120);
 80005b8:	2078      	movs	r0, #120	; 0x78
 80005ba:	f001 fa25 	bl	8001a08 <HAL_Delay>
	  char transmit_buffer[100];
	  int sizebuff;
	  milliCurrent = HAL_GetTick();
 80005be:	f001 fa17 	bl	80019f0 <HAL_GetTick>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a1e      	ldr	r2, [pc, #120]	; (8000640 <main+0xcc>)
 80005c6:	6013      	str	r3, [r2, #0]
	  if (milliReset) {
 80005c8:	4b1e      	ldr	r3, [pc, #120]	; (8000644 <main+0xd0>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d003      	beq.n	80005d8 <main+0x64>
		  // some day it would be cool if the user could reset this
		  milliStart = milliCurrent;
 80005d0:	4b1b      	ldr	r3, [pc, #108]	; (8000640 <main+0xcc>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a1c      	ldr	r2, [pc, #112]	; (8000648 <main+0xd4>)
 80005d6:	6013      	str	r3, [r2, #0]
	  }
	  milliReset = false;
 80005d8:	4b1a      	ldr	r3, [pc, #104]	; (8000644 <main+0xd0>)
 80005da:	2200      	movs	r2, #0
 80005dc:	701a      	strb	r2, [r3, #0]

	  sizebuff = sprintf(transmit_buffer,"{\"mS\":%lu, \"amps\":%d, \"volts\":%d}\r\n", (milliCurrent - milliStart), rand() %  200, rand() % 200);
 80005de:	4b18      	ldr	r3, [pc, #96]	; (8000640 <main+0xcc>)
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	4b19      	ldr	r3, [pc, #100]	; (8000648 <main+0xd4>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	1ad5      	subs	r5, r2, r3
 80005e8:	f00a fdfc 	bl	800b1e4 <rand>
 80005ec:	4603      	mov	r3, r0
 80005ee:	4a17      	ldr	r2, [pc, #92]	; (800064c <main+0xd8>)
 80005f0:	fb82 1203 	smull	r1, r2, r2, r3
 80005f4:	1191      	asrs	r1, r2, #6
 80005f6:	17da      	asrs	r2, r3, #31
 80005f8:	1a8c      	subs	r4, r1, r2
 80005fa:	22c8      	movs	r2, #200	; 0xc8
 80005fc:	fb04 f202 	mul.w	r2, r4, r2
 8000600:	1a9c      	subs	r4, r3, r2
 8000602:	f00a fdef 	bl	800b1e4 <rand>
 8000606:	4602      	mov	r2, r0
 8000608:	4b10      	ldr	r3, [pc, #64]	; (800064c <main+0xd8>)
 800060a:	fb83 1302 	smull	r1, r3, r3, r2
 800060e:	1199      	asrs	r1, r3, #6
 8000610:	17d3      	asrs	r3, r2, #31
 8000612:	1acb      	subs	r3, r1, r3
 8000614:	21c8      	movs	r1, #200	; 0xc8
 8000616:	fb01 f303 	mul.w	r3, r1, r3
 800061a:	1ad3      	subs	r3, r2, r3
 800061c:	4638      	mov	r0, r7
 800061e:	9300      	str	r3, [sp, #0]
 8000620:	4623      	mov	r3, r4
 8000622:	462a      	mov	r2, r5
 8000624:	490a      	ldr	r1, [pc, #40]	; (8000650 <main+0xdc>)
 8000626:	f00a fe1b 	bl	800b260 <siprintf>
 800062a:	6678      	str	r0, [r7, #100]	; 0x64
	  HAL_UART_Transmit_DMA(&huart3, transmit_buffer, sizebuff);
 800062c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800062e:	b29a      	uxth	r2, r3
 8000630:	463b      	mov	r3, r7
 8000632:	4619      	mov	r1, r3
 8000634:	4807      	ldr	r0, [pc, #28]	; (8000654 <main+0xe0>)
 8000636:	f005 fcc3 	bl	8005fc0 <HAL_UART_Transmit_DMA>
  {
 800063a:	e7b8      	b.n	80005ae <main+0x3a>
 800063c:	40020800 	.word	0x40020800
 8000640:	20000430 	.word	0x20000430
 8000644:	20000000 	.word	0x20000000
 8000648:	2000042c 	.word	0x2000042c
 800064c:	51eb851f 	.word	0x51eb851f
 8000650:	0800c624 	.word	0x0800c624
 8000654:	20000388 	.word	0x20000388

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b094      	sub	sp, #80	; 0x50
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	2230      	movs	r2, #48	; 0x30
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f00a fdb4 	bl	800b1d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	4b28      	ldr	r3, [pc, #160]	; (8000724 <SystemClock_Config+0xcc>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	4a27      	ldr	r2, [pc, #156]	; (8000724 <SystemClock_Config+0xcc>)
 8000686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068a:	6413      	str	r3, [r2, #64]	; 0x40
 800068c:	4b25      	ldr	r3, [pc, #148]	; (8000724 <SystemClock_Config+0xcc>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000698:	2300      	movs	r3, #0
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	4b22      	ldr	r3, [pc, #136]	; (8000728 <SystemClock_Config+0xd0>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a21      	ldr	r2, [pc, #132]	; (8000728 <SystemClock_Config+0xd0>)
 80006a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <SystemClock_Config+0xd0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b4:	2301      	movs	r3, #1
 80006b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006be:	2302      	movs	r3, #2
 80006c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006c8:	2304      	movs	r3, #4
 80006ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80006cc:	2390      	movs	r3, #144	; 0x90
 80006ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80006d4:	2306      	movs	r3, #6
 80006d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 0320 	add.w	r3, r7, #32
 80006dc:	4618      	mov	r0, r3
 80006de:	f003 ff0f 	bl	8004500 <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006e8:	f000 fc8a 	bl	8001000 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	230f      	movs	r3, #15
 80006ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f0:	2302      	movs	r3, #2
 80006f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000702:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	2104      	movs	r1, #4
 800070a:	4618      	mov	r0, r3
 800070c:	f004 f970 	bl	80049f0 <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000716:	f000 fc73 	bl	8001000 <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	3750      	adds	r7, #80	; 0x50
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800
 8000728:	40007000 	.word	0x40007000

0800072c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08c      	sub	sp, #48	; 0x30
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000732:	f107 0320 	add.w	r3, r7, #32
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000740:	463b      	mov	r3, r7
 8000742:	2220      	movs	r2, #32
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f00a fd44 	bl	800b1d4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800074c:	4b46      	ldr	r3, [pc, #280]	; (8000868 <MX_ADC1_Init+0x13c>)
 800074e:	4a47      	ldr	r2, [pc, #284]	; (800086c <MX_ADC1_Init+0x140>)
 8000750:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000752:	4b45      	ldr	r3, [pc, #276]	; (8000868 <MX_ADC1_Init+0x13c>)
 8000754:	2200      	movs	r2, #0
 8000756:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000758:	4b43      	ldr	r3, [pc, #268]	; (8000868 <MX_ADC1_Init+0x13c>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800075e:	4b42      	ldr	r3, [pc, #264]	; (8000868 <MX_ADC1_Init+0x13c>)
 8000760:	2201      	movs	r2, #1
 8000762:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000764:	4b40      	ldr	r3, [pc, #256]	; (8000868 <MX_ADC1_Init+0x13c>)
 8000766:	2200      	movs	r2, #0
 8000768:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800076a:	4b3f      	ldr	r3, [pc, #252]	; (8000868 <MX_ADC1_Init+0x13c>)
 800076c:	2200      	movs	r2, #0
 800076e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000772:	4b3d      	ldr	r3, [pc, #244]	; (8000868 <MX_ADC1_Init+0x13c>)
 8000774:	2200      	movs	r2, #0
 8000776:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000778:	4b3b      	ldr	r3, [pc, #236]	; (8000868 <MX_ADC1_Init+0x13c>)
 800077a:	4a3d      	ldr	r2, [pc, #244]	; (8000870 <MX_ADC1_Init+0x144>)
 800077c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800077e:	4b3a      	ldr	r3, [pc, #232]	; (8000868 <MX_ADC1_Init+0x13c>)
 8000780:	2200      	movs	r2, #0
 8000782:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000784:	4b38      	ldr	r3, [pc, #224]	; (8000868 <MX_ADC1_Init+0x13c>)
 8000786:	2201      	movs	r2, #1
 8000788:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800078a:	4b37      	ldr	r3, [pc, #220]	; (8000868 <MX_ADC1_Init+0x13c>)
 800078c:	2200      	movs	r2, #0
 800078e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000792:	4b35      	ldr	r3, [pc, #212]	; (8000868 <MX_ADC1_Init+0x13c>)
 8000794:	2200      	movs	r2, #0
 8000796:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000798:	4833      	ldr	r0, [pc, #204]	; (8000868 <MX_ADC1_Init+0x13c>)
 800079a:	f001 f959 	bl	8001a50 <HAL_ADC_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 80007a4:	f000 fc2c 	bl	8001000 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80007a8:	230a      	movs	r3, #10
 80007aa:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 80007ac:	2301      	movs	r3, #1
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007b0:	2300      	movs	r3, #0
 80007b2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b4:	f107 0320 	add.w	r3, r7, #32
 80007b8:	4619      	mov	r1, r3
 80007ba:	482b      	ldr	r0, [pc, #172]	; (8000868 <MX_ADC1_Init+0x13c>)
 80007bc:	f001 f98c 	bl	8001ad8 <HAL_ADC_ConfigChannel>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80007c6:	f000 fc1b 	bl	8001000 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 80007ca:	230a      	movs	r3, #10
 80007cc:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 80007ce:	2301      	movs	r3, #1
 80007d0:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 4;
 80007d2:	2304      	movs	r3, #4
 80007d4:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_15CYCLES;
 80007d6:	2301      	movs	r3, #1
 80007d8:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 80007da:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80007de:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_TRGO;
 80007e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007e4:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80007f2:	463b      	mov	r3, r7
 80007f4:	4619      	mov	r1, r3
 80007f6:	481c      	ldr	r0, [pc, #112]	; (8000868 <MX_ADC1_Init+0x13c>)
 80007f8:	f001 fb8c 	bl	8001f14 <HAL_ADCEx_InjectedConfigChannel>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000802:	f000 fbfd 	bl	8001000 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 8000806:	2300      	movs	r3, #0
 8000808:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 800080a:	2302      	movs	r3, #2
 800080c:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800080e:	463b      	mov	r3, r7
 8000810:	4619      	mov	r1, r3
 8000812:	4815      	ldr	r0, [pc, #84]	; (8000868 <MX_ADC1_Init+0x13c>)
 8000814:	f001 fb7e 	bl	8001f14 <HAL_ADCEx_InjectedConfigChannel>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 800081e:	f000 fbef 	bl	8001000 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8000822:	2305      	movs	r3, #5
 8000824:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 8000826:	2303      	movs	r3, #3
 8000828:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800082a:	463b      	mov	r3, r7
 800082c:	4619      	mov	r1, r3
 800082e:	480e      	ldr	r0, [pc, #56]	; (8000868 <MX_ADC1_Init+0x13c>)
 8000830:	f001 fb70 	bl	8001f14 <HAL_ADCEx_InjectedConfigChannel>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 800083a:	f000 fbe1 	bl	8001000 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 800083e:	2304      	movs	r3, #4
 8000840:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 4;
 8000842:	2304      	movs	r3, #4
 8000844:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800084a:	463b      	mov	r3, r7
 800084c:	4619      	mov	r1, r3
 800084e:	4806      	ldr	r0, [pc, #24]	; (8000868 <MX_ADC1_Init+0x13c>)
 8000850:	f001 fb60 	bl	8001f14 <HAL_ADCEx_InjectedConfigChannel>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800085a:	f000 fbd1 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	3730      	adds	r7, #48	; 0x30
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000180 	.word	0x20000180
 800086c:	40012000 	.word	0x40012000
 8000870:	0f000001 	.word	0x0f000001

08000874 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08c      	sub	sp, #48	; 0x30
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800087a:	f107 0320 	add.w	r3, r7, #32
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000888:	463b      	mov	r3, r7
 800088a:	2220      	movs	r2, #32
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f00a fca0 	bl	800b1d4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000894:	4b45      	ldr	r3, [pc, #276]	; (80009ac <MX_ADC2_Init+0x138>)
 8000896:	4a46      	ldr	r2, [pc, #280]	; (80009b0 <MX_ADC2_Init+0x13c>)
 8000898:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800089a:	4b44      	ldr	r3, [pc, #272]	; (80009ac <MX_ADC2_Init+0x138>)
 800089c:	2200      	movs	r2, #0
 800089e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80008a0:	4b42      	ldr	r3, [pc, #264]	; (80009ac <MX_ADC2_Init+0x138>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80008a6:	4b41      	ldr	r3, [pc, #260]	; (80009ac <MX_ADC2_Init+0x138>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80008ac:	4b3f      	ldr	r3, [pc, #252]	; (80009ac <MX_ADC2_Init+0x138>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008b2:	4b3e      	ldr	r3, [pc, #248]	; (80009ac <MX_ADC2_Init+0x138>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ba:	4b3c      	ldr	r3, [pc, #240]	; (80009ac <MX_ADC2_Init+0x138>)
 80008bc:	2200      	movs	r2, #0
 80008be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008c0:	4b3a      	ldr	r3, [pc, #232]	; (80009ac <MX_ADC2_Init+0x138>)
 80008c2:	4a3c      	ldr	r2, [pc, #240]	; (80009b4 <MX_ADC2_Init+0x140>)
 80008c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008c6:	4b39      	ldr	r3, [pc, #228]	; (80009ac <MX_ADC2_Init+0x138>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80008cc:	4b37      	ldr	r3, [pc, #220]	; (80009ac <MX_ADC2_Init+0x138>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80008d2:	4b36      	ldr	r3, [pc, #216]	; (80009ac <MX_ADC2_Init+0x138>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80008da:	4b34      	ldr	r3, [pc, #208]	; (80009ac <MX_ADC2_Init+0x138>)
 80008dc:	2200      	movs	r2, #0
 80008de:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80008e0:	4832      	ldr	r0, [pc, #200]	; (80009ac <MX_ADC2_Init+0x138>)
 80008e2:	f001 f8b5 	bl	8001a50 <HAL_ADC_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_ADC2_Init+0x7c>
  {
    Error_Handler();
 80008ec:	f000 fb88 	bl	8001000 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80008f0:	230b      	movs	r3, #11
 80008f2:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 80008f4:	2301      	movs	r3, #1
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008fc:	f107 0320 	add.w	r3, r7, #32
 8000900:	4619      	mov	r1, r3
 8000902:	482a      	ldr	r0, [pc, #168]	; (80009ac <MX_ADC2_Init+0x138>)
 8000904:	f001 f8e8 	bl	8001ad8 <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC2_Init+0x9e>
  {
    Error_Handler();
 800090e:	f000 fb77 	bl	8001000 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 8000912:	230b      	movs	r3, #11
 8000914:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8000916:	2301      	movs	r3, #1
 8000918:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 4;
 800091a:	2304      	movs	r3, #4
 800091c:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_15CYCLES;
 800091e:	2301      	movs	r3, #1
 8000920:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 8000922:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000926:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_TRGO;
 8000928:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800092c:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800092e:	2300      	movs	r3, #0
 8000930:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000932:	2300      	movs	r3, #0
 8000934:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800093a:	463b      	mov	r3, r7
 800093c:	4619      	mov	r1, r3
 800093e:	481b      	ldr	r0, [pc, #108]	; (80009ac <MX_ADC2_Init+0x138>)
 8000940:	f001 fae8 	bl	8001f14 <HAL_ADCEx_InjectedConfigChannel>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_ADC2_Init+0xda>
  {
    Error_Handler();
 800094a:	f000 fb59 	bl	8001000 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 800094e:	230e      	movs	r3, #14
 8000950:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 8000952:	2302      	movs	r3, #2
 8000954:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000956:	463b      	mov	r3, r7
 8000958:	4619      	mov	r1, r3
 800095a:	4814      	ldr	r0, [pc, #80]	; (80009ac <MX_ADC2_Init+0x138>)
 800095c:	f001 fada 	bl	8001f14 <HAL_ADCEx_InjectedConfigChannel>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_ADC2_Init+0xf6>
  {
    Error_Handler();
 8000966:	f000 fb4b 	bl	8001000 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 800096a:	2301      	movs	r3, #1
 800096c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 800096e:	2303      	movs	r3, #3
 8000970:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000972:	463b      	mov	r3, r7
 8000974:	4619      	mov	r1, r3
 8000976:	480d      	ldr	r0, [pc, #52]	; (80009ac <MX_ADC2_Init+0x138>)
 8000978:	f001 facc 	bl	8001f14 <HAL_ADCEx_InjectedConfigChannel>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_ADC2_Init+0x112>
  {
    Error_Handler();
 8000982:	f000 fb3d 	bl	8001000 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_9;
 8000986:	2309      	movs	r3, #9
 8000988:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 4;
 800098a:	2304      	movs	r3, #4
 800098c:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800098e:	463b      	mov	r3, r7
 8000990:	4619      	mov	r1, r3
 8000992:	4806      	ldr	r0, [pc, #24]	; (80009ac <MX_ADC2_Init+0x138>)
 8000994:	f001 fabe 	bl	8001f14 <HAL_ADCEx_InjectedConfigChannel>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_ADC2_Init+0x12e>
  {
    Error_Handler();
 800099e:	f000 fb2f 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	3730      	adds	r7, #48	; 0x30
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	200001c8 	.word	0x200001c8
 80009b0:	40012100 	.word	0x40012100
 80009b4:	0f000001 	.word	0x0f000001

080009b8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08c      	sub	sp, #48	; 0x30
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009be:	f107 0320 	add.w	r3, r7, #32
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80009cc:	463b      	mov	r3, r7
 80009ce:	2220      	movs	r2, #32
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f00a fbfe 	bl	800b1d4 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80009d8:	4b3e      	ldr	r3, [pc, #248]	; (8000ad4 <MX_ADC3_Init+0x11c>)
 80009da:	4a3f      	ldr	r2, [pc, #252]	; (8000ad8 <MX_ADC3_Init+0x120>)
 80009dc:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80009de:	4b3d      	ldr	r3, [pc, #244]	; (8000ad4 <MX_ADC3_Init+0x11c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80009e4:	4b3b      	ldr	r3, [pc, #236]	; (8000ad4 <MX_ADC3_Init+0x11c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 80009ea:	4b3a      	ldr	r3, [pc, #232]	; (8000ad4 <MX_ADC3_Init+0x11c>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80009f0:	4b38      	ldr	r3, [pc, #224]	; (8000ad4 <MX_ADC3_Init+0x11c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80009f6:	4b37      	ldr	r3, [pc, #220]	; (8000ad4 <MX_ADC3_Init+0x11c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009fe:	4b35      	ldr	r3, [pc, #212]	; (8000ad4 <MX_ADC3_Init+0x11c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a04:	4b33      	ldr	r3, [pc, #204]	; (8000ad4 <MX_ADC3_Init+0x11c>)
 8000a06:	4a35      	ldr	r2, [pc, #212]	; (8000adc <MX_ADC3_Init+0x124>)
 8000a08:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a0a:	4b32      	ldr	r3, [pc, #200]	; (8000ad4 <MX_ADC3_Init+0x11c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000a10:	4b30      	ldr	r3, [pc, #192]	; (8000ad4 <MX_ADC3_Init+0x11c>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000a16:	4b2f      	ldr	r3, [pc, #188]	; (8000ad4 <MX_ADC3_Init+0x11c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000a1e:	4b2d      	ldr	r3, [pc, #180]	; (8000ad4 <MX_ADC3_Init+0x11c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000a24:	482b      	ldr	r0, [pc, #172]	; (8000ad4 <MX_ADC3_Init+0x11c>)
 8000a26:	f001 f813 	bl	8001a50 <HAL_ADC_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_ADC3_Init+0x7c>
  {
    Error_Handler();
 8000a30:	f000 fae6 	bl	8001000 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000a34:	230c      	movs	r3, #12
 8000a36:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a40:	f107 0320 	add.w	r3, r7, #32
 8000a44:	4619      	mov	r1, r3
 8000a46:	4823      	ldr	r0, [pc, #140]	; (8000ad4 <MX_ADC3_Init+0x11c>)
 8000a48:	f001 f846 	bl	8001ad8 <HAL_ADC_ConfigChannel>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_ADC3_Init+0x9e>
  {
    Error_Handler();
 8000a52:	f000 fad5 	bl	8001000 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8000a56:	230c      	movs	r3, #12
 8000a58:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000a5e:	2303      	movs	r3, #3
 8000a60:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000a62:	2301      	movs	r3, #1
 8000a64:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 8000a66:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000a6a:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_TRGO;
 8000a6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a70:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000a72:	2300      	movs	r3, #0
 8000a74:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000a76:	2300      	movs	r3, #0
 8000a78:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000a7e:	463b      	mov	r3, r7
 8000a80:	4619      	mov	r1, r3
 8000a82:	4814      	ldr	r0, [pc, #80]	; (8000ad4 <MX_ADC3_Init+0x11c>)
 8000a84:	f001 fa46 	bl	8001f14 <HAL_ADCEx_InjectedConfigChannel>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_ADC3_Init+0xda>
  {
    Error_Handler();
 8000a8e:	f000 fab7 	bl	8001000 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_13;
 8000a92:	230d      	movs	r3, #13
 8000a94:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 8000a96:	2302      	movs	r3, #2
 8000a98:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000a9a:	463b      	mov	r3, r7
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	480d      	ldr	r0, [pc, #52]	; (8000ad4 <MX_ADC3_Init+0x11c>)
 8000aa0:	f001 fa38 	bl	8001f14 <HAL_ADCEx_InjectedConfigChannel>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_ADC3_Init+0xf6>
  {
    Error_Handler();
 8000aaa:	f000 faa9 	bl	8001000 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000ab6:	463b      	mov	r3, r7
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4806      	ldr	r0, [pc, #24]	; (8000ad4 <MX_ADC3_Init+0x11c>)
 8000abc:	f001 fa2a 	bl	8001f14 <HAL_ADCEx_InjectedConfigChannel>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_ADC3_Init+0x112>
  {
    Error_Handler();
 8000ac6:	f000 fa9b 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000aca:	bf00      	nop
 8000acc:	3730      	adds	r7, #48	; 0x30
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000210 	.word	0x20000210
 8000ad8:	40012200 	.word	0x40012200
 8000adc:	0f000001 	.word	0x0f000001

08000ae0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000ae4:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <MX_SPI3_Init+0x68>)
 8000ae6:	4a19      	ldr	r2, [pc, #100]	; (8000b4c <MX_SPI3_Init+0x6c>)
 8000ae8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000aea:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <MX_SPI3_Init+0x68>)
 8000aec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000af0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8000af2:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <MX_SPI3_Init+0x68>)
 8000af4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000af8:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8000afa:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <MX_SPI3_Init+0x68>)
 8000afc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b00:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <MX_SPI3_Init+0x68>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <MX_SPI3_Init+0x68>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <MX_SPI3_Init+0x68>)
 8000b10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b14:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000b16:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <MX_SPI3_Init+0x68>)
 8000b18:	2210      	movs	r2, #16
 8000b1a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <MX_SPI3_Init+0x68>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <MX_SPI3_Init+0x68>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b28:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <MX_SPI3_Init+0x68>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <MX_SPI3_Init+0x68>)
 8000b30:	220a      	movs	r2, #10
 8000b32:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b34:	4804      	ldr	r0, [pc, #16]	; (8000b48 <MX_SPI3_Init+0x68>)
 8000b36:	f004 f97b 	bl	8004e30 <HAL_SPI_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8000b40:	f000 fa5e 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000258 	.word	0x20000258
 8000b4c:	40003c00 	.word	0x40003c00

08000b50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b092      	sub	sp, #72	; 0x48
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
 8000b70:	615a      	str	r2, [r3, #20]
 8000b72:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2220      	movs	r2, #32
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f00a fb2a 	bl	800b1d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b80:	4b47      	ldr	r3, [pc, #284]	; (8000ca0 <MX_TIM1_Init+0x150>)
 8000b82:	4a48      	ldr	r2, [pc, #288]	; (8000ca4 <MX_TIM1_Init+0x154>)
 8000b84:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8000b86:	4b46      	ldr	r3, [pc, #280]	; (8000ca0 <MX_TIM1_Init+0x150>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000b8c:	4b44      	ldr	r3, [pc, #272]	; (8000ca0 <MX_TIM1_Init+0x150>)
 8000b8e:	2220      	movs	r2, #32
 8000b90:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 8000b92:	4b43      	ldr	r3, [pc, #268]	; (8000ca0 <MX_TIM1_Init+0x150>)
 8000b94:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000b98:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b9a:	4b41      	ldr	r3, [pc, #260]	; (8000ca0 <MX_TIM1_Init+0x150>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ba0:	4b3f      	ldr	r3, [pc, #252]	; (8000ca0 <MX_TIM1_Init+0x150>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba6:	4b3e      	ldr	r3, [pc, #248]	; (8000ca0 <MX_TIM1_Init+0x150>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000bac:	483c      	ldr	r0, [pc, #240]	; (8000ca0 <MX_TIM1_Init+0x150>)
 8000bae:	f004 fa17 	bl	8004fe0 <HAL_TIM_PWM_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000bb8:	f000 fa22 	bl	8001000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000bbc:	2370      	movs	r3, #112	; 0x70
 8000bbe:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bc4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4835      	ldr	r0, [pc, #212]	; (8000ca0 <MX_TIM1_Init+0x150>)
 8000bcc:	f005 f8dc 	bl	8005d88 <HAL_TIMEx_MasterConfigSynchronization>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000bd6:	f000 fa13 	bl	8001000 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bda:	2360      	movs	r3, #96	; 0x60
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 512;
 8000bde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000be8:	2300      	movs	r3, #0
 8000bea:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4827      	ldr	r0, [pc, #156]	; (8000ca0 <MX_TIM1_Init+0x150>)
 8000c02:	f004 fb31 	bl	8005268 <HAL_TIM_PWM_ConfigChannel>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000c0c:	f000 f9f8 	bl	8001000 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c14:	2204      	movs	r2, #4
 8000c16:	4619      	mov	r1, r3
 8000c18:	4821      	ldr	r0, [pc, #132]	; (8000ca0 <MX_TIM1_Init+0x150>)
 8000c1a:	f004 fb25 	bl	8005268 <HAL_TIM_PWM_ConfigChannel>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8000c24:	f000 f9ec 	bl	8001000 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2c:	2208      	movs	r2, #8
 8000c2e:	4619      	mov	r1, r3
 8000c30:	481b      	ldr	r0, [pc, #108]	; (8000ca0 <MX_TIM1_Init+0x150>)
 8000c32:	f004 fb19 	bl	8005268 <HAL_TIM_PWM_ConfigChannel>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000c3c:	f000 f9e0 	bl	8001000 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c48:	220c      	movs	r2, #12
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4814      	ldr	r0, [pc, #80]	; (8000ca0 <MX_TIM1_Init+0x150>)
 8000c4e:	f004 fb0b 	bl	8005268 <HAL_TIM_PWM_ConfigChannel>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000c58:	f000 f9d2 	bl	8001000 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000c5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c60:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000c62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c66:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 50;
 8000c6c:	2332      	movs	r3, #50	; 0x32
 8000c6e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000c70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c74:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	4619      	mov	r1, r3
 8000c82:	4807      	ldr	r0, [pc, #28]	; (8000ca0 <MX_TIM1_Init+0x150>)
 8000c84:	f005 f8fc 	bl	8005e80 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000c8e:	f000 f9b7 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c92:	4803      	ldr	r0, [pc, #12]	; (8000ca0 <MX_TIM1_Init+0x150>)
 8000c94:	f000 fc08 	bl	80014a8 <HAL_TIM_MspPostInit>

}
 8000c98:	bf00      	nop
 8000c9a:	3748      	adds	r7, #72	; 0x48
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	200002b0 	.word	0x200002b0
 8000ca4:	40010000 	.word	0x40010000

08000ca8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08c      	sub	sp, #48	; 0x30
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000cae:	f107 031c 	add.w	r3, r7, #28
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000cd4:	4b35      	ldr	r3, [pc, #212]	; (8000dac <MX_TIM4_Init+0x104>)
 8000cd6:	4a36      	ldr	r2, [pc, #216]	; (8000db0 <MX_TIM4_Init+0x108>)
 8000cd8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8000cda:	4b34      	ldr	r3, [pc, #208]	; (8000dac <MX_TIM4_Init+0x104>)
 8000cdc:	2247      	movs	r2, #71	; 0x47
 8000cde:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce0:	4b32      	ldr	r3, [pc, #200]	; (8000dac <MX_TIM4_Init+0x104>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000;
 8000ce6:	4b31      	ldr	r3, [pc, #196]	; (8000dac <MX_TIM4_Init+0x104>)
 8000ce8:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000cec:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cee:	4b2f      	ldr	r3, [pc, #188]	; (8000dac <MX_TIM4_Init+0x104>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf4:	4b2d      	ldr	r3, [pc, #180]	; (8000dac <MX_TIM4_Init+0x104>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000cfa:	482c      	ldr	r0, [pc, #176]	; (8000dac <MX_TIM4_Init+0x104>)
 8000cfc:	f004 f921 	bl	8004f42 <HAL_TIM_Base_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8000d06:	f000 f97b 	bl	8001000 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000d0a:	4828      	ldr	r0, [pc, #160]	; (8000dac <MX_TIM4_Init+0x104>)
 8000d0c:	f004 f9b7 	bl	800507e <HAL_TIM_IC_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8000d16:	f000 f973 	bl	8001000 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000d1a:	2304      	movs	r3, #4
 8000d1c:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000d1e:	2350      	movs	r3, #80	; 0x50
 8000d20:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d22:	2300      	movs	r3, #0
 8000d24:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000d2a:	f107 031c 	add.w	r3, r7, #28
 8000d2e:	4619      	mov	r1, r3
 8000d30:	481e      	ldr	r0, [pc, #120]	; (8000dac <MX_TIM4_Init+0x104>)
 8000d32:	f004 fb5b 	bl	80053ec <HAL_TIM_SlaveConfigSynchro>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000d3c:	f000 f960 	bl	8001000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4817      	ldr	r0, [pc, #92]	; (8000dac <MX_TIM4_Init+0x104>)
 8000d50:	f005 f81a 	bl	8005d88 <HAL_TIMEx_MasterConfigSynchronization>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8000d5a:	f000 f951 	bl	8001000 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d62:	2301      	movs	r3, #1
 8000d64:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	2200      	movs	r2, #0
 8000d72:	4619      	mov	r1, r3
 8000d74:	480d      	ldr	r0, [pc, #52]	; (8000dac <MX_TIM4_Init+0x104>)
 8000d76:	f004 f9db 	bl	8005130 <HAL_TIM_IC_ConfigChannel>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8000d80:	f000 f93e 	bl	8001000 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000d84:	2302      	movs	r3, #2
 8000d86:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	2204      	movs	r2, #4
 8000d90:	4619      	mov	r1, r3
 8000d92:	4806      	ldr	r0, [pc, #24]	; (8000dac <MX_TIM4_Init+0x104>)
 8000d94:	f004 f9cc 	bl	8005130 <HAL_TIM_IC_ConfigChannel>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_TIM4_Init+0xfa>
  {
    Error_Handler();
 8000d9e:	f000 f92f 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000da2:	bf00      	nop
 8000da4:	3730      	adds	r7, #48	; 0x30
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	200002f8 	.word	0x200002f8
 8000db0:	40000800 	.word	0x40000800

08000db4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dba:	463b      	mov	r3, r7
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <MX_TIM7_Init+0x64>)
 8000dc4:	4a15      	ldr	r2, [pc, #84]	; (8000e1c <MX_TIM7_Init+0x68>)
 8000dc6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000dc8:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <MX_TIM7_Init+0x64>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dce:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <MX_TIM7_Init+0x64>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000dd4:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <MX_TIM7_Init+0x64>)
 8000dd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dda:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ddc:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <MX_TIM7_Init+0x64>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000de2:	480d      	ldr	r0, [pc, #52]	; (8000e18 <MX_TIM7_Init+0x64>)
 8000de4:	f004 f8ad 	bl	8004f42 <HAL_TIM_Base_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000dee:	f000 f907 	bl	8001000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df2:	2300      	movs	r3, #0
 8000df4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df6:	2300      	movs	r3, #0
 8000df8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4806      	ldr	r0, [pc, #24]	; (8000e18 <MX_TIM7_Init+0x64>)
 8000e00:	f004 ffc2 	bl	8005d88 <HAL_TIMEx_MasterConfigSynchronization>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000e0a:	f000 f8f9 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000340 	.word	0x20000340
 8000e1c:	40001400 	.word	0x40001400

08000e20 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e24:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <MX_USART3_UART_Init+0x4c>)
 8000e26:	4a12      	ldr	r2, [pc, #72]	; (8000e70 <MX_USART3_UART_Init+0x50>)
 8000e28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e2a:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <MX_USART3_UART_Init+0x4c>)
 8000e2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e32:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <MX_USART3_UART_Init+0x4c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e38:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <MX_USART3_UART_Init+0x4c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e3e:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <MX_USART3_UART_Init+0x4c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e44:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <MX_USART3_UART_Init+0x4c>)
 8000e46:	220c      	movs	r2, #12
 8000e48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e4a:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <MX_USART3_UART_Init+0x4c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <MX_USART3_UART_Init+0x4c>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e56:	4805      	ldr	r0, [pc, #20]	; (8000e6c <MX_USART3_UART_Init+0x4c>)
 8000e58:	f005 f864 	bl	8005f24 <HAL_UART_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000e62:	f000 f8cd 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000388 	.word	0x20000388
 8000e70:	40004800 	.word	0x40004800

08000e74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <MX_DMA_Init+0x3c>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a0b      	ldr	r2, [pc, #44]	; (8000eb0 <MX_DMA_Init+0x3c>)
 8000e84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <MX_DMA_Init+0x3c>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 1, 0);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2101      	movs	r1, #1
 8000e9a:	200e      	movs	r0, #14
 8000e9c:	f001 faab 	bl	80023f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ea0:	200e      	movs	r0, #14
 8000ea2:	f001 fac4 	bl	800242e <HAL_NVIC_EnableIRQ>

}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40023800 	.word	0x40023800

08000eb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08a      	sub	sp, #40	; 0x28
 8000eb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
 8000ec8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	4b48      	ldr	r3, [pc, #288]	; (8000ff0 <MX_GPIO_Init+0x13c>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a47      	ldr	r2, [pc, #284]	; (8000ff0 <MX_GPIO_Init+0x13c>)
 8000ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b45      	ldr	r3, [pc, #276]	; (8000ff0 <MX_GPIO_Init+0x13c>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	4b41      	ldr	r3, [pc, #260]	; (8000ff0 <MX_GPIO_Init+0x13c>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a40      	ldr	r2, [pc, #256]	; (8000ff0 <MX_GPIO_Init+0x13c>)
 8000ef0:	f043 0304 	orr.w	r3, r3, #4
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b3e      	ldr	r3, [pc, #248]	; (8000ff0 <MX_GPIO_Init+0x13c>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0304 	and.w	r3, r3, #4
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	4b3a      	ldr	r3, [pc, #232]	; (8000ff0 <MX_GPIO_Init+0x13c>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a39      	ldr	r2, [pc, #228]	; (8000ff0 <MX_GPIO_Init+0x13c>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b37      	ldr	r3, [pc, #220]	; (8000ff0 <MX_GPIO_Init+0x13c>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	4b33      	ldr	r3, [pc, #204]	; (8000ff0 <MX_GPIO_Init+0x13c>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a32      	ldr	r2, [pc, #200]	; (8000ff0 <MX_GPIO_Init+0x13c>)
 8000f28:	f043 0302 	orr.w	r3, r3, #2
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b30      	ldr	r3, [pc, #192]	; (8000ff0 <MX_GPIO_Init+0x13c>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	603b      	str	r3, [r7, #0]
 8000f3e:	4b2c      	ldr	r3, [pc, #176]	; (8000ff0 <MX_GPIO_Init+0x13c>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a2b      	ldr	r2, [pc, #172]	; (8000ff0 <MX_GPIO_Init+0x13c>)
 8000f44:	f043 0308 	orr.w	r3, r3, #8
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b29      	ldr	r3, [pc, #164]	; (8000ff0 <MX_GPIO_Init+0x13c>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0308 	and.w	r3, r3, #8
 8000f52:	603b      	str	r3, [r7, #0]
 8000f54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f5c:	4825      	ldr	r0, [pc, #148]	; (8000ff4 <MX_GPIO_Init+0x140>)
 8000f5e:	f002 f81f 	bl	8002fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2104      	movs	r1, #4
 8000f66:	4824      	ldr	r0, [pc, #144]	; (8000ff8 <MX_GPIO_Init+0x144>)
 8000f68:	f002 f81a 	bl	8002fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	21a0      	movs	r1, #160	; 0xa0
 8000f70:	4822      	ldr	r0, [pc, #136]	; (8000ffc <MX_GPIO_Init+0x148>)
 8000f72:	f002 f815 	bl	8002fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC6 PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000f76:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000f7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	4619      	mov	r1, r3
 8000f8a:	481a      	ldr	r0, [pc, #104]	; (8000ff4 <MX_GPIO_Init+0x140>)
 8000f8c:	f001 fe6c 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f96:	2301      	movs	r3, #1
 8000f98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4812      	ldr	r0, [pc, #72]	; (8000ff4 <MX_GPIO_Init+0x140>)
 8000faa:	f001 fe5d 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fae:	2304      	movs	r3, #4
 8000fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	480c      	ldr	r0, [pc, #48]	; (8000ff8 <MX_GPIO_Init+0x144>)
 8000fc6:	f001 fe4f 	bl	8002c68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000fca:	23a0      	movs	r3, #160	; 0xa0
 8000fcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4806      	ldr	r0, [pc, #24]	; (8000ffc <MX_GPIO_Init+0x148>)
 8000fe2:	f001 fe41 	bl	8002c68 <HAL_GPIO_Init>

}
 8000fe6:	bf00      	nop
 8000fe8:	3728      	adds	r7, #40	; 0x28
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40020800 	.word	0x40020800
 8000ff8:	40020c00 	.word	0x40020c00
 8000ffc:	40020400 	.word	0x40020400

08001000 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001004:	b672      	cpsid	i
}
 8001006:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001008:	e7fe      	b.n	8001008 <Error_Handler+0x8>
	...

0800100c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <HAL_MspInit+0x4c>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101a:	4a0f      	ldr	r2, [pc, #60]	; (8001058 <HAL_MspInit+0x4c>)
 800101c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001020:	6453      	str	r3, [r2, #68]	; 0x44
 8001022:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <HAL_MspInit+0x4c>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	603b      	str	r3, [r7, #0]
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <HAL_MspInit+0x4c>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	4a08      	ldr	r2, [pc, #32]	; (8001058 <HAL_MspInit+0x4c>)
 8001038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800103c:	6413      	str	r3, [r2, #64]	; 0x40
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_MspInit+0x4c>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001046:	603b      	str	r3, [r7, #0]
 8001048:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	40023800 	.word	0x40023800

0800105c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b092      	sub	sp, #72	; 0x48
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a85      	ldr	r2, [pc, #532]	; (8001290 <HAL_ADC_MspInit+0x234>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d14a      	bne.n	8001114 <HAL_ADC_MspInit+0xb8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	633b      	str	r3, [r7, #48]	; 0x30
 8001082:	4b84      	ldr	r3, [pc, #528]	; (8001294 <HAL_ADC_MspInit+0x238>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	4a83      	ldr	r2, [pc, #524]	; (8001294 <HAL_ADC_MspInit+0x238>)
 8001088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800108c:	6453      	str	r3, [r2, #68]	; 0x44
 800108e:	4b81      	ldr	r3, [pc, #516]	; (8001294 <HAL_ADC_MspInit+0x238>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001096:	633b      	str	r3, [r7, #48]	; 0x30
 8001098:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800109e:	4b7d      	ldr	r3, [pc, #500]	; (8001294 <HAL_ADC_MspInit+0x238>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a7c      	ldr	r2, [pc, #496]	; (8001294 <HAL_ADC_MspInit+0x238>)
 80010a4:	f043 0304 	orr.w	r3, r3, #4
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b7a      	ldr	r3, [pc, #488]	; (8001294 <HAL_ADC_MspInit+0x238>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0304 	and.w	r3, r3, #4
 80010b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80010ba:	4b76      	ldr	r3, [pc, #472]	; (8001294 <HAL_ADC_MspInit+0x238>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a75      	ldr	r2, [pc, #468]	; (8001294 <HAL_ADC_MspInit+0x238>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b73      	ldr	r3, [pc, #460]	; (8001294 <HAL_ADC_MspInit+0x238>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80010d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PA0-WKUP     ------> ADC1_IN0
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 80010d2:	2321      	movs	r3, #33	; 0x21
 80010d4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010d6:	2303      	movs	r3, #3
 80010d8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010e2:	4619      	mov	r1, r3
 80010e4:	486c      	ldr	r0, [pc, #432]	; (8001298 <HAL_ADC_MspInit+0x23c>)
 80010e6:	f001 fdbf 	bl	8002c68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5;
 80010ea:	2331      	movs	r3, #49	; 0x31
 80010ec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ee:	2303      	movs	r3, #3
 80010f0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010fa:	4619      	mov	r1, r3
 80010fc:	4867      	ldr	r0, [pc, #412]	; (800129c <HAL_ADC_MspInit+0x240>)
 80010fe:	f001 fdb3 	bl	8002c68 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	2100      	movs	r1, #0
 8001106:	2012      	movs	r0, #18
 8001108:	f001 f975 	bl	80023f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800110c:	2012      	movs	r0, #18
 800110e:	f001 f98e 	bl	800242e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001112:	e0b8      	b.n	8001286 <HAL_ADC_MspInit+0x22a>
  else if(hadc->Instance==ADC2)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a61      	ldr	r2, [pc, #388]	; (80012a0 <HAL_ADC_MspInit+0x244>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d164      	bne.n	80011e8 <HAL_ADC_MspInit+0x18c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
 8001122:	4b5c      	ldr	r3, [pc, #368]	; (8001294 <HAL_ADC_MspInit+0x238>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	4a5b      	ldr	r2, [pc, #364]	; (8001294 <HAL_ADC_MspInit+0x238>)
 8001128:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800112c:	6453      	str	r3, [r2, #68]	; 0x44
 800112e:	4b59      	ldr	r3, [pc, #356]	; (8001294 <HAL_ADC_MspInit+0x238>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
 8001138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	623b      	str	r3, [r7, #32]
 800113e:	4b55      	ldr	r3, [pc, #340]	; (8001294 <HAL_ADC_MspInit+0x238>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a54      	ldr	r2, [pc, #336]	; (8001294 <HAL_ADC_MspInit+0x238>)
 8001144:	f043 0304 	orr.w	r3, r3, #4
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b52      	ldr	r3, [pc, #328]	; (8001294 <HAL_ADC_MspInit+0x238>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0304 	and.w	r3, r3, #4
 8001152:	623b      	str	r3, [r7, #32]
 8001154:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
 800115a:	4b4e      	ldr	r3, [pc, #312]	; (8001294 <HAL_ADC_MspInit+0x238>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a4d      	ldr	r2, [pc, #308]	; (8001294 <HAL_ADC_MspInit+0x238>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b4b      	ldr	r3, [pc, #300]	; (8001294 <HAL_ADC_MspInit+0x238>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	61fb      	str	r3, [r7, #28]
 8001170:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	61bb      	str	r3, [r7, #24]
 8001176:	4b47      	ldr	r3, [pc, #284]	; (8001294 <HAL_ADC_MspInit+0x238>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a46      	ldr	r2, [pc, #280]	; (8001294 <HAL_ADC_MspInit+0x238>)
 800117c:	f043 0302 	orr.w	r3, r3, #2
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b44      	ldr	r3, [pc, #272]	; (8001294 <HAL_ADC_MspInit+0x238>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	61bb      	str	r3, [r7, #24]
 800118c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 800118e:	2312      	movs	r3, #18
 8001190:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001192:	2303      	movs	r3, #3
 8001194:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800119a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800119e:	4619      	mov	r1, r3
 80011a0:	483d      	ldr	r0, [pc, #244]	; (8001298 <HAL_ADC_MspInit+0x23c>)
 80011a2:	f001 fd61 	bl	8002c68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011a6:	2302      	movs	r3, #2
 80011a8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011aa:	2303      	movs	r3, #3
 80011ac:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011b6:	4619      	mov	r1, r3
 80011b8:	4838      	ldr	r0, [pc, #224]	; (800129c <HAL_ADC_MspInit+0x240>)
 80011ba:	f001 fd55 	bl	8002c68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011be:	2302      	movs	r3, #2
 80011c0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c2:	2303      	movs	r3, #3
 80011c4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011ce:	4619      	mov	r1, r3
 80011d0:	4834      	ldr	r0, [pc, #208]	; (80012a4 <HAL_ADC_MspInit+0x248>)
 80011d2:	f001 fd49 	bl	8002c68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2100      	movs	r1, #0
 80011da:	2012      	movs	r0, #18
 80011dc:	f001 f90b 	bl	80023f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80011e0:	2012      	movs	r0, #18
 80011e2:	f001 f924 	bl	800242e <HAL_NVIC_EnableIRQ>
}
 80011e6:	e04e      	b.n	8001286 <HAL_ADC_MspInit+0x22a>
  else if(hadc->Instance==ADC3)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a2e      	ldr	r2, [pc, #184]	; (80012a8 <HAL_ADC_MspInit+0x24c>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d149      	bne.n	8001286 <HAL_ADC_MspInit+0x22a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
 80011f6:	4b27      	ldr	r3, [pc, #156]	; (8001294 <HAL_ADC_MspInit+0x238>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	4a26      	ldr	r2, [pc, #152]	; (8001294 <HAL_ADC_MspInit+0x238>)
 80011fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001200:	6453      	str	r3, [r2, #68]	; 0x44
 8001202:	4b24      	ldr	r3, [pc, #144]	; (8001294 <HAL_ADC_MspInit+0x238>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800120a:	617b      	str	r3, [r7, #20]
 800120c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
 8001212:	4b20      	ldr	r3, [pc, #128]	; (8001294 <HAL_ADC_MspInit+0x238>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a1f      	ldr	r2, [pc, #124]	; (8001294 <HAL_ADC_MspInit+0x238>)
 8001218:	f043 0304 	orr.w	r3, r3, #4
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <HAL_ADC_MspInit+0x238>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0304 	and.w	r3, r3, #4
 8001226:	613b      	str	r3, [r7, #16]
 8001228:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	4b19      	ldr	r3, [pc, #100]	; (8001294 <HAL_ADC_MspInit+0x238>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a18      	ldr	r2, [pc, #96]	; (8001294 <HAL_ADC_MspInit+0x238>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b16      	ldr	r3, [pc, #88]	; (8001294 <HAL_ADC_MspInit+0x238>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001246:	230c      	movs	r3, #12
 8001248:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800124a:	2303      	movs	r3, #3
 800124c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001252:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001256:	4619      	mov	r1, r3
 8001258:	480f      	ldr	r0, [pc, #60]	; (8001298 <HAL_ADC_MspInit+0x23c>)
 800125a:	f001 fd05 	bl	8002c68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800125e:	2304      	movs	r3, #4
 8001260:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001262:	2303      	movs	r3, #3
 8001264:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800126e:	4619      	mov	r1, r3
 8001270:	480a      	ldr	r0, [pc, #40]	; (800129c <HAL_ADC_MspInit+0x240>)
 8001272:	f001 fcf9 	bl	8002c68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	2100      	movs	r1, #0
 800127a:	2012      	movs	r0, #18
 800127c:	f001 f8bb 	bl	80023f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001280:	2012      	movs	r0, #18
 8001282:	f001 f8d4 	bl	800242e <HAL_NVIC_EnableIRQ>
}
 8001286:	bf00      	nop
 8001288:	3748      	adds	r7, #72	; 0x48
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40012000 	.word	0x40012000
 8001294:	40023800 	.word	0x40023800
 8001298:	40020800 	.word	0x40020800
 800129c:	40020000 	.word	0x40020000
 80012a0:	40012100 	.word	0x40012100
 80012a4:	40020400 	.word	0x40020400
 80012a8:	40012200 	.word	0x40012200

080012ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	; 0x28
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a19      	ldr	r2, [pc, #100]	; (8001330 <HAL_SPI_MspInit+0x84>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d12c      	bne.n	8001328 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	4b18      	ldr	r3, [pc, #96]	; (8001334 <HAL_SPI_MspInit+0x88>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	4a17      	ldr	r2, [pc, #92]	; (8001334 <HAL_SPI_MspInit+0x88>)
 80012d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012dc:	6413      	str	r3, [r2, #64]	; 0x40
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <HAL_SPI_MspInit+0x88>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	4b11      	ldr	r3, [pc, #68]	; (8001334 <HAL_SPI_MspInit+0x88>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a10      	ldr	r2, [pc, #64]	; (8001334 <HAL_SPI_MspInit+0x88>)
 80012f4:	f043 0304 	orr.w	r3, r3, #4
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <HAL_SPI_MspInit+0x88>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0304 	and.w	r3, r3, #4
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001306:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800130a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130c:	2302      	movs	r3, #2
 800130e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001314:	2303      	movs	r3, #3
 8001316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001318:	2306      	movs	r3, #6
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4619      	mov	r1, r3
 8001322:	4805      	ldr	r0, [pc, #20]	; (8001338 <HAL_SPI_MspInit+0x8c>)
 8001324:	f001 fca0 	bl	8002c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001328:	bf00      	nop
 800132a:	3728      	adds	r7, #40	; 0x28
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40003c00 	.word	0x40003c00
 8001334:	40023800 	.word	0x40023800
 8001338:	40020800 	.word	0x40020800

0800133c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08a      	sub	sp, #40	; 0x28
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a1d      	ldr	r2, [pc, #116]	; (80013d0 <HAL_TIM_PWM_MspInit+0x94>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d134      	bne.n	80013c8 <HAL_TIM_PWM_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
 8001362:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <HAL_TIM_PWM_MspInit+0x98>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	4a1b      	ldr	r2, [pc, #108]	; (80013d4 <HAL_TIM_PWM_MspInit+0x98>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6453      	str	r3, [r2, #68]	; 0x44
 800136e:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <HAL_TIM_PWM_MspInit+0x98>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <HAL_TIM_PWM_MspInit+0x98>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a14      	ldr	r2, [pc, #80]	; (80013d4 <HAL_TIM_PWM_MspInit+0x98>)
 8001384:	f043 0302 	orr.w	r3, r3, #2
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <HAL_TIM_PWM_MspInit+0x98>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB12     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001396:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800139a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139c:	2302      	movs	r3, #2
 800139e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a4:	2300      	movs	r3, #0
 80013a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80013a8:	2301      	movs	r3, #1
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	4619      	mov	r1, r3
 80013b2:	4809      	ldr	r0, [pc, #36]	; (80013d8 <HAL_TIM_PWM_MspInit+0x9c>)
 80013b4:	f001 fc58 	bl	8002c68 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 80013b8:	2200      	movs	r2, #0
 80013ba:	2101      	movs	r1, #1
 80013bc:	2019      	movs	r0, #25
 80013be:	f001 f81a 	bl	80023f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80013c2:	2019      	movs	r0, #25
 80013c4:	f001 f833 	bl	800242e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80013c8:	bf00      	nop
 80013ca:	3728      	adds	r7, #40	; 0x28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40010000 	.word	0x40010000
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40020400 	.word	0x40020400

080013dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08a      	sub	sp, #40	; 0x28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM4)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a27      	ldr	r2, [pc, #156]	; (8001498 <HAL_TIM_Base_MspInit+0xbc>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d134      	bne.n	8001468 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	613b      	str	r3, [r7, #16]
 8001402:	4b26      	ldr	r3, [pc, #152]	; (800149c <HAL_TIM_Base_MspInit+0xc0>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	4a25      	ldr	r2, [pc, #148]	; (800149c <HAL_TIM_Base_MspInit+0xc0>)
 8001408:	f043 0304 	orr.w	r3, r3, #4
 800140c:	6413      	str	r3, [r2, #64]	; 0x40
 800140e:	4b23      	ldr	r3, [pc, #140]	; (800149c <HAL_TIM_Base_MspInit+0xc0>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	f003 0304 	and.w	r3, r3, #4
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	4b1f      	ldr	r3, [pc, #124]	; (800149c <HAL_TIM_Base_MspInit+0xc0>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a1e      	ldr	r2, [pc, #120]	; (800149c <HAL_TIM_Base_MspInit+0xc0>)
 8001424:	f043 0302 	orr.w	r3, r3, #2
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b1c      	ldr	r3, [pc, #112]	; (800149c <HAL_TIM_Base_MspInit+0xc0>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001436:	2340      	movs	r3, #64	; 0x40
 8001438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2300      	movs	r3, #0
 8001444:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001446:	2302      	movs	r3, #2
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	4619      	mov	r1, r3
 8001450:	4813      	ldr	r0, [pc, #76]	; (80014a0 <HAL_TIM_Base_MspInit+0xc4>)
 8001452:	f001 fc09 	bl	8002c68 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	2102      	movs	r1, #2
 800145a:	201e      	movs	r0, #30
 800145c:	f000 ffcb 	bl	80023f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001460:	201e      	movs	r0, #30
 8001462:	f000 ffe4 	bl	800242e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001466:	e012      	b.n	800148e <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM7)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a0d      	ldr	r2, [pc, #52]	; (80014a4 <HAL_TIM_Base_MspInit+0xc8>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d10d      	bne.n	800148e <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	4b09      	ldr	r3, [pc, #36]	; (800149c <HAL_TIM_Base_MspInit+0xc0>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	4a08      	ldr	r2, [pc, #32]	; (800149c <HAL_TIM_Base_MspInit+0xc0>)
 800147c:	f043 0320 	orr.w	r3, r3, #32
 8001480:	6413      	str	r3, [r2, #64]	; 0x40
 8001482:	4b06      	ldr	r3, [pc, #24]	; (800149c <HAL_TIM_Base_MspInit+0xc0>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f003 0320 	and.w	r3, r3, #32
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	68bb      	ldr	r3, [r7, #8]
}
 800148e:	bf00      	nop
 8001490:	3728      	adds	r7, #40	; 0x28
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40000800 	.word	0x40000800
 800149c:	40023800 	.word	0x40023800
 80014a0:	40020400 	.word	0x40020400
 80014a4:	40001400 	.word	0x40001400

080014a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08a      	sub	sp, #40	; 0x28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a22      	ldr	r2, [pc, #136]	; (8001550 <HAL_TIM_MspPostInit+0xa8>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d13d      	bne.n	8001546 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	4b21      	ldr	r3, [pc, #132]	; (8001554 <HAL_TIM_MspPostInit+0xac>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a20      	ldr	r2, [pc, #128]	; (8001554 <HAL_TIM_MspPostInit+0xac>)
 80014d4:	f043 0302 	orr.w	r3, r3, #2
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b1e      	ldr	r3, [pc, #120]	; (8001554 <HAL_TIM_MspPostInit+0xac>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	4b1a      	ldr	r3, [pc, #104]	; (8001554 <HAL_TIM_MspPostInit+0xac>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a19      	ldr	r2, [pc, #100]	; (8001554 <HAL_TIM_MspPostInit+0xac>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b17      	ldr	r3, [pc, #92]	; (8001554 <HAL_TIM_MspPostInit+0xac>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001502:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001508:	2302      	movs	r3, #2
 800150a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	2300      	movs	r3, #0
 8001512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001514:	2301      	movs	r3, #1
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	4619      	mov	r1, r3
 800151e:	480e      	ldr	r0, [pc, #56]	; (8001558 <HAL_TIM_MspPostInit+0xb0>)
 8001520:	f001 fba2 	bl	8002c68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001524:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001528:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152a:	2302      	movs	r3, #2
 800152c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001532:	2300      	movs	r3, #0
 8001534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001536:	2301      	movs	r3, #1
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	4619      	mov	r1, r3
 8001540:	4806      	ldr	r0, [pc, #24]	; (800155c <HAL_TIM_MspPostInit+0xb4>)
 8001542:	f001 fb91 	bl	8002c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001546:	bf00      	nop
 8001548:	3728      	adds	r7, #40	; 0x28
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40010000 	.word	0x40010000
 8001554:	40023800 	.word	0x40023800
 8001558:	40020400 	.word	0x40020400
 800155c:	40020000 	.word	0x40020000

08001560 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08a      	sub	sp, #40	; 0x28
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a34      	ldr	r2, [pc, #208]	; (8001650 <HAL_UART_MspInit+0xf0>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d162      	bne.n	8001648 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
 8001586:	4b33      	ldr	r3, [pc, #204]	; (8001654 <HAL_UART_MspInit+0xf4>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	4a32      	ldr	r2, [pc, #200]	; (8001654 <HAL_UART_MspInit+0xf4>)
 800158c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001590:	6413      	str	r3, [r2, #64]	; 0x40
 8001592:	4b30      	ldr	r3, [pc, #192]	; (8001654 <HAL_UART_MspInit+0xf4>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800159a:	613b      	str	r3, [r7, #16]
 800159c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	4b2c      	ldr	r3, [pc, #176]	; (8001654 <HAL_UART_MspInit+0xf4>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a2b      	ldr	r2, [pc, #172]	; (8001654 <HAL_UART_MspInit+0xf4>)
 80015a8:	f043 0302 	orr.w	r3, r3, #2
 80015ac:	6313      	str	r3, [r2, #48]	; 0x30
 80015ae:	4b29      	ldr	r3, [pc, #164]	; (8001654 <HAL_UART_MspInit+0xf4>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80015ba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80015be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c0:	2302      	movs	r3, #2
 80015c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c8:	2303      	movs	r3, #3
 80015ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015cc:	2307      	movs	r3, #7
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	4619      	mov	r1, r3
 80015d6:	4820      	ldr	r0, [pc, #128]	; (8001658 <HAL_UART_MspInit+0xf8>)
 80015d8:	f001 fb46 	bl	8002c68 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80015dc:	4b1f      	ldr	r3, [pc, #124]	; (800165c <HAL_UART_MspInit+0xfc>)
 80015de:	4a20      	ldr	r2, [pc, #128]	; (8001660 <HAL_UART_MspInit+0x100>)
 80015e0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80015e2:	4b1e      	ldr	r3, [pc, #120]	; (800165c <HAL_UART_MspInit+0xfc>)
 80015e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015e8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015ea:	4b1c      	ldr	r3, [pc, #112]	; (800165c <HAL_UART_MspInit+0xfc>)
 80015ec:	2240      	movs	r2, #64	; 0x40
 80015ee:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015f0:	4b1a      	ldr	r3, [pc, #104]	; (800165c <HAL_UART_MspInit+0xfc>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015f6:	4b19      	ldr	r3, [pc, #100]	; (800165c <HAL_UART_MspInit+0xfc>)
 80015f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015fc:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015fe:	4b17      	ldr	r3, [pc, #92]	; (800165c <HAL_UART_MspInit+0xfc>)
 8001600:	2200      	movs	r2, #0
 8001602:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001604:	4b15      	ldr	r3, [pc, #84]	; (800165c <HAL_UART_MspInit+0xfc>)
 8001606:	2200      	movs	r2, #0
 8001608:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800160a:	4b14      	ldr	r3, [pc, #80]	; (800165c <HAL_UART_MspInit+0xfc>)
 800160c:	2200      	movs	r2, #0
 800160e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_UART_MspInit+0xfc>)
 8001612:	2200      	movs	r2, #0
 8001614:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001616:	4b11      	ldr	r3, [pc, #68]	; (800165c <HAL_UART_MspInit+0xfc>)
 8001618:	2200      	movs	r2, #0
 800161a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800161c:	480f      	ldr	r0, [pc, #60]	; (800165c <HAL_UART_MspInit+0xfc>)
 800161e:	f000 ff21 	bl	8002464 <HAL_DMA_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001628:	f7ff fcea 	bl	8001000 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a0b      	ldr	r2, [pc, #44]	; (800165c <HAL_UART_MspInit+0xfc>)
 8001630:	635a      	str	r2, [r3, #52]	; 0x34
 8001632:	4a0a      	ldr	r2, [pc, #40]	; (800165c <HAL_UART_MspInit+0xfc>)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 8001638:	2200      	movs	r2, #0
 800163a:	2102      	movs	r1, #2
 800163c:	2027      	movs	r0, #39	; 0x27
 800163e:	f000 feda 	bl	80023f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001642:	2027      	movs	r0, #39	; 0x27
 8001644:	f000 fef3 	bl	800242e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001648:	bf00      	nop
 800164a:	3728      	adds	r7, #40	; 0x28
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40004800 	.word	0x40004800
 8001654:	40023800 	.word	0x40023800
 8001658:	40020400 	.word	0x40020400
 800165c:	200003cc 	.word	0x200003cc
 8001660:	40026058 	.word	0x40026058

08001664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <NMI_Handler+0x4>

0800166a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800166e:	e7fe      	b.n	800166e <HardFault_Handler+0x4>

08001670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001674:	e7fe      	b.n	8001674 <MemManage_Handler+0x4>

08001676 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800167a:	e7fe      	b.n	800167a <BusFault_Handler+0x4>

0800167c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001680:	e7fe      	b.n	8001680 <UsageFault_Handler+0x4>

08001682 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016b0:	f000 f98a 	bl	80019c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80016bc:	4802      	ldr	r0, [pc, #8]	; (80016c8 <DMA1_Stream3_IRQHandler+0x10>)
 80016be:	f001 f869 	bl	8002794 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200003cc 	.word	0x200003cc

080016cc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_IRQn 0 */
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0

  /* USER CODE END TIM4_IRQn 0 */
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
	...

080016f8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80016fc:	4802      	ldr	r0, [pc, #8]	; (8001708 <USART3_IRQHandler+0x10>)
 80016fe:	f004 fcdd 	bl	80060bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000388 	.word	0x20000388

0800170c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001710:	4802      	ldr	r0, [pc, #8]	; (800171c <OTG_FS_IRQHandler+0x10>)
 8001712:	f001 fdc8 	bl	80032a6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	200010ec 	.word	0x200010ec

08001720 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
	return 1;
 8001724:	2301      	movs	r3, #1
}
 8001726:	4618      	mov	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <_kill>:

int _kill(int pid, int sig)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800173a:	f009 fd21 	bl	800b180 <__errno>
 800173e:	4603      	mov	r3, r0
 8001740:	2216      	movs	r2, #22
 8001742:	601a      	str	r2, [r3, #0]
	return -1;
 8001744:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001748:	4618      	mov	r0, r3
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <_exit>:

void _exit (int status)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001758:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff ffe7 	bl	8001730 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001762:	e7fe      	b.n	8001762 <_exit+0x12>

08001764 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
 8001774:	e00a      	b.n	800178c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001776:	f3af 8000 	nop.w
 800177a:	4601      	mov	r1, r0
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	1c5a      	adds	r2, r3, #1
 8001780:	60ba      	str	r2, [r7, #8]
 8001782:	b2ca      	uxtb	r2, r1
 8001784:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	3301      	adds	r3, #1
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	429a      	cmp	r2, r3
 8001792:	dbf0      	blt.n	8001776 <_read+0x12>
	}

return len;
 8001794:	687b      	ldr	r3, [r7, #4]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b086      	sub	sp, #24
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	60f8      	str	r0, [r7, #12]
 80017a6:	60b9      	str	r1, [r7, #8]
 80017a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	e009      	b.n	80017c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	1c5a      	adds	r2, r3, #1
 80017b4:	60ba      	str	r2, [r7, #8]
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	3301      	adds	r3, #1
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	dbf1      	blt.n	80017b0 <_write+0x12>
	}
	return len;
 80017cc:	687b      	ldr	r3, [r7, #4]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <_close>:

int _close(int file)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
	return -1;
 80017de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
 80017f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017fe:	605a      	str	r2, [r3, #4]
	return 0;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <_isatty>:

int _isatty(int file)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
	return 1;
 8001816:	2301      	movs	r3, #1
}
 8001818:	4618      	mov	r0, r3
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
	return 0;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
	...

08001840 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001848:	4a14      	ldr	r2, [pc, #80]	; (800189c <_sbrk+0x5c>)
 800184a:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <_sbrk+0x60>)
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001854:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <_sbrk+0x64>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d102      	bne.n	8001862 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <_sbrk+0x64>)
 800185e:	4a12      	ldr	r2, [pc, #72]	; (80018a8 <_sbrk+0x68>)
 8001860:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001862:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <_sbrk+0x64>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4413      	add	r3, r2
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	429a      	cmp	r2, r3
 800186e:	d207      	bcs.n	8001880 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001870:	f009 fc86 	bl	800b180 <__errno>
 8001874:	4603      	mov	r3, r0
 8001876:	220c      	movs	r2, #12
 8001878:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800187a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800187e:	e009      	b.n	8001894 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <_sbrk+0x64>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001886:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <_sbrk+0x64>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	4a05      	ldr	r2, [pc, #20]	; (80018a4 <_sbrk+0x64>)
 8001890:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001892:	68fb      	ldr	r3, [r7, #12]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20020000 	.word	0x20020000
 80018a0:	00000400 	.word	0x00000400
 80018a4:	20000434 	.word	0x20000434
 80018a8:	20001828 	.word	0x20001828

080018ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <SystemInit+0x20>)
 80018b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018b6:	4a05      	ldr	r2, [pc, #20]	; (80018cc <SystemInit+0x20>)
 80018b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001908 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018d4:	480d      	ldr	r0, [pc, #52]	; (800190c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018d6:	490e      	ldr	r1, [pc, #56]	; (8001910 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018d8:	4a0e      	ldr	r2, [pc, #56]	; (8001914 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018dc:	e002      	b.n	80018e4 <LoopCopyDataInit>

080018de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e2:	3304      	adds	r3, #4

080018e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e8:	d3f9      	bcc.n	80018de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ea:	4a0b      	ldr	r2, [pc, #44]	; (8001918 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018ec:	4c0b      	ldr	r4, [pc, #44]	; (800191c <LoopFillZerobss+0x26>)
  movs r3, #0
 80018ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f0:	e001      	b.n	80018f6 <LoopFillZerobss>

080018f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f4:	3204      	adds	r2, #4

080018f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f8:	d3fb      	bcc.n	80018f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018fa:	f7ff ffd7 	bl	80018ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018fe:	f009 fc45 	bl	800b18c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001902:	f7fe fe37 	bl	8000574 <main>
  bx  lr    
 8001906:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001908:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800190c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001910:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8001914:	0800c808 	.word	0x0800c808
  ldr r2, =_sbss
 8001918:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 800191c:	20001828 	.word	0x20001828

08001920 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001920:	e7fe      	b.n	8001920 <CAN1_RX0_IRQHandler>
	...

08001924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001928:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <HAL_Init+0x40>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a0d      	ldr	r2, [pc, #52]	; (8001964 <HAL_Init+0x40>)
 800192e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001932:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001934:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <HAL_Init+0x40>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a0a      	ldr	r2, [pc, #40]	; (8001964 <HAL_Init+0x40>)
 800193a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800193e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001940:	4b08      	ldr	r3, [pc, #32]	; (8001964 <HAL_Init+0x40>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a07      	ldr	r2, [pc, #28]	; (8001964 <HAL_Init+0x40>)
 8001946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800194a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800194c:	2003      	movs	r0, #3
 800194e:	f000 fd47 	bl	80023e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001952:	2001      	movs	r0, #1
 8001954:	f000 f808 	bl	8001968 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001958:	f7ff fb58 	bl	800100c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40023c00 	.word	0x40023c00

08001968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001970:	4b12      	ldr	r3, [pc, #72]	; (80019bc <HAL_InitTick+0x54>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <HAL_InitTick+0x58>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	4619      	mov	r1, r3
 800197a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800197e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001982:	fbb2 f3f3 	udiv	r3, r2, r3
 8001986:	4618      	mov	r0, r3
 8001988:	f000 fd5f 	bl	800244a <HAL_SYSTICK_Config>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e00e      	b.n	80019b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b0f      	cmp	r3, #15
 800199a:	d80a      	bhi.n	80019b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800199c:	2200      	movs	r2, #0
 800199e:	6879      	ldr	r1, [r7, #4]
 80019a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019a4:	f000 fd27 	bl	80023f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019a8:	4a06      	ldr	r2, [pc, #24]	; (80019c4 <HAL_InitTick+0x5c>)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
 80019b0:	e000      	b.n	80019b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20000004 	.word	0x20000004
 80019c0:	2000000c 	.word	0x2000000c
 80019c4:	20000008 	.word	0x20000008

080019c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019cc:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_IncTick+0x20>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	461a      	mov	r2, r3
 80019d2:	4b06      	ldr	r3, [pc, #24]	; (80019ec <HAL_IncTick+0x24>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4413      	add	r3, r2
 80019d8:	4a04      	ldr	r2, [pc, #16]	; (80019ec <HAL_IncTick+0x24>)
 80019da:	6013      	str	r3, [r2, #0]
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	2000000c 	.word	0x2000000c
 80019ec:	20000438 	.word	0x20000438

080019f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  return uwTick;
 80019f4:	4b03      	ldr	r3, [pc, #12]	; (8001a04 <HAL_GetTick+0x14>)
 80019f6:	681b      	ldr	r3, [r3, #0]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	20000438 	.word	0x20000438

08001a08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a10:	f7ff ffee 	bl	80019f0 <HAL_GetTick>
 8001a14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a20:	d005      	beq.n	8001a2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a22:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <HAL_Delay+0x44>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	461a      	mov	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a2e:	bf00      	nop
 8001a30:	f7ff ffde 	bl	80019f0 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d8f7      	bhi.n	8001a30 <HAL_Delay+0x28>
  {
  }
}
 8001a40:	bf00      	nop
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	2000000c 	.word	0x2000000c

08001a50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e033      	b.n	8001ace <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d109      	bne.n	8001a82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff faf4 	bl	800105c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	f003 0310 	and.w	r3, r3, #16
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d118      	bne.n	8001ac0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a96:	f023 0302 	bic.w	r3, r3, #2
 8001a9a:	f043 0202 	orr.w	r2, r3, #2
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f93a 	bl	8001d1c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	f023 0303 	bic.w	r3, r3, #3
 8001ab6:	f043 0201 	orr.w	r2, r3, #1
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	641a      	str	r2, [r3, #64]	; 0x40
 8001abe:	e001      	b.n	8001ac4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d101      	bne.n	8001af4 <HAL_ADC_ConfigChannel+0x1c>
 8001af0:	2302      	movs	r3, #2
 8001af2:	e105      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x228>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b09      	cmp	r3, #9
 8001b02:	d925      	bls.n	8001b50 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68d9      	ldr	r1, [r3, #12]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	461a      	mov	r2, r3
 8001b12:	4613      	mov	r3, r2
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	4413      	add	r3, r2
 8001b18:	3b1e      	subs	r3, #30
 8001b1a:	2207      	movs	r2, #7
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43da      	mvns	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	400a      	ands	r2, r1
 8001b28:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68d9      	ldr	r1, [r3, #12]
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	4403      	add	r3, r0
 8001b42:	3b1e      	subs	r3, #30
 8001b44:	409a      	lsls	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	e022      	b.n	8001b96 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6919      	ldr	r1, [r3, #16]
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	4613      	mov	r3, r2
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	4413      	add	r3, r2
 8001b64:	2207      	movs	r2, #7
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43da      	mvns	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	400a      	ands	r2, r1
 8001b72:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6919      	ldr	r1, [r3, #16]
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	4618      	mov	r0, r3
 8001b86:	4603      	mov	r3, r0
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	4403      	add	r3, r0
 8001b8c:	409a      	lsls	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b06      	cmp	r3, #6
 8001b9c:	d824      	bhi.n	8001be8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4413      	add	r3, r2
 8001bae:	3b05      	subs	r3, #5
 8001bb0:	221f      	movs	r2, #31
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43da      	mvns	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	400a      	ands	r2, r1
 8001bbe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	4618      	mov	r0, r3
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685a      	ldr	r2, [r3, #4]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	3b05      	subs	r3, #5
 8001bda:	fa00 f203 	lsl.w	r2, r0, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	635a      	str	r2, [r3, #52]	; 0x34
 8001be6:	e04c      	b.n	8001c82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2b0c      	cmp	r3, #12
 8001bee:	d824      	bhi.n	8001c3a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	3b23      	subs	r3, #35	; 0x23
 8001c02:	221f      	movs	r2, #31
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	43da      	mvns	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	400a      	ands	r2, r1
 8001c10:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	4618      	mov	r0, r3
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685a      	ldr	r2, [r3, #4]
 8001c24:	4613      	mov	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4413      	add	r3, r2
 8001c2a:	3b23      	subs	r3, #35	; 0x23
 8001c2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	631a      	str	r2, [r3, #48]	; 0x30
 8001c38:	e023      	b.n	8001c82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	4613      	mov	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4413      	add	r3, r2
 8001c4a:	3b41      	subs	r3, #65	; 0x41
 8001c4c:	221f      	movs	r2, #31
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	43da      	mvns	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	400a      	ands	r2, r1
 8001c5a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	4618      	mov	r0, r3
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685a      	ldr	r2, [r3, #4]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4413      	add	r3, r2
 8001c74:	3b41      	subs	r3, #65	; 0x41
 8001c76:	fa00 f203 	lsl.w	r2, r0, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c82:	4b22      	ldr	r3, [pc, #136]	; (8001d0c <HAL_ADC_ConfigChannel+0x234>)
 8001c84:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a21      	ldr	r2, [pc, #132]	; (8001d10 <HAL_ADC_ConfigChannel+0x238>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d109      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x1cc>
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2b12      	cmp	r3, #18
 8001c96:	d105      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a19      	ldr	r2, [pc, #100]	; (8001d10 <HAL_ADC_ConfigChannel+0x238>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d123      	bne.n	8001cf6 <HAL_ADC_ConfigChannel+0x21e>
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2b10      	cmp	r3, #16
 8001cb4:	d003      	beq.n	8001cbe <HAL_ADC_ConfigChannel+0x1e6>
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2b11      	cmp	r3, #17
 8001cbc:	d11b      	bne.n	8001cf6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2b10      	cmp	r3, #16
 8001cd0:	d111      	bne.n	8001cf6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cd2:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <HAL_ADC_ConfigChannel+0x23c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a10      	ldr	r2, [pc, #64]	; (8001d18 <HAL_ADC_ConfigChannel+0x240>)
 8001cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cdc:	0c9a      	lsrs	r2, r3, #18
 8001cde:	4613      	mov	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ce8:	e002      	b.n	8001cf0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	3b01      	subs	r3, #1
 8001cee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f9      	bne.n	8001cea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	40012300 	.word	0x40012300
 8001d10:	40012000 	.word	0x40012000
 8001d14:	20000004 	.word	0x20000004
 8001d18:	431bde83 	.word	0x431bde83

08001d1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d24:	4b79      	ldr	r3, [pc, #484]	; (8001f0c <ADC_Init+0x1f0>)
 8001d26:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6859      	ldr	r1, [r3, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	021a      	lsls	r2, r3, #8
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	430a      	orrs	r2, r1
 8001d64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6859      	ldr	r1, [r3, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	430a      	orrs	r2, r1
 8001d86:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689a      	ldr	r2, [r3, #8]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6899      	ldr	r1, [r3, #8]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	68da      	ldr	r2, [r3, #12]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dae:	4a58      	ldr	r2, [pc, #352]	; (8001f10 <ADC_Init+0x1f4>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d022      	beq.n	8001dfa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	689a      	ldr	r2, [r3, #8]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dc2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6899      	ldr	r1, [r3, #8]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001de4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6899      	ldr	r1, [r3, #8]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	e00f      	b.n	8001e1a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e18:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 0202 	bic.w	r2, r2, #2
 8001e28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6899      	ldr	r1, [r3, #8]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	7e1b      	ldrb	r3, [r3, #24]
 8001e34:	005a      	lsls	r2, r3, #1
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d01b      	beq.n	8001e80 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e56:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e66:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6859      	ldr	r1, [r3, #4]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e72:	3b01      	subs	r3, #1
 8001e74:	035a      	lsls	r2, r3, #13
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	e007      	b.n	8001e90 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e8e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	051a      	lsls	r2, r3, #20
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ec4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6899      	ldr	r1, [r3, #8]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ed2:	025a      	lsls	r2, r3, #9
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6899      	ldr	r1, [r3, #8]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	029a      	lsls	r2, r3, #10
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	609a      	str	r2, [r3, #8]
}
 8001f00:	bf00      	nop
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	40012300 	.word	0x40012300
 8001f10:	0f000001 	.word	0x0f000001

08001f14 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d101      	bne.n	8001f2c <HAL_ADCEx_InjectedConfigChannel+0x18>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	e17d      	b.n	8002228 <HAL_ADCEx_InjectedConfigChannel+0x314>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2b09      	cmp	r3, #9
 8001f3a:	d925      	bls.n	8001f88 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68d9      	ldr	r1, [r3, #12]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	4413      	add	r3, r2
 8001f50:	3b1e      	subs	r3, #30
 8001f52:	2207      	movs	r2, #7
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43da      	mvns	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	400a      	ands	r2, r1
 8001f60:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68d9      	ldr	r1, [r3, #12]
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	4618      	mov	r0, r3
 8001f74:	4603      	mov	r3, r0
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	4403      	add	r3, r0
 8001f7a:	3b1e      	subs	r3, #30
 8001f7c:	409a      	lsls	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	e022      	b.n	8001fce <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6919      	ldr	r1, [r3, #16]
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	461a      	mov	r2, r3
 8001f96:	4613      	mov	r3, r2
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	4413      	add	r3, r2
 8001f9c:	2207      	movs	r2, #7
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43da      	mvns	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	400a      	ands	r2, r1
 8001faa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6919      	ldr	r1, [r3, #16]
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	689a      	ldr	r2, [r3, #8]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	4403      	add	r3, r0
 8001fc4:	409a      	lsls	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001fdc:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	051a      	lsls	r2, r3, #20
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	b2db      	uxtb	r3, r3
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	b2db      	uxtb	r3, r3
 800200a:	3303      	adds	r3, #3
 800200c:	b2db      	uxtb	r3, r3
 800200e:	461a      	mov	r2, r3
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	221f      	movs	r2, #31
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43da      	mvns	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	400a      	ands	r2, r1
 8002024:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	b29b      	uxth	r3, r3
 8002032:	4618      	mov	r0, r3
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	b2da      	uxtb	r2, r3
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	b2db      	uxtb	r3, r3
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	b2db      	uxtb	r3, r3
 8002044:	3303      	adds	r3, #3
 8002046:	b2db      	uxtb	r3, r3
 8002048:	461a      	mov	r2, r3
 800204a:	4613      	mov	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	fa00 f203 	lsl.w	r2, r0, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	430a      	orrs	r2, r1
 800205a:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	699b      	ldr	r3, [r3, #24]
 8002060:	4a74      	ldr	r2, [pc, #464]	; (8002234 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d022      	beq.n	80020ac <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8002074:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6899      	ldr	r1, [r3, #8]
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	699a      	ldr	r2, [r3, #24]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689a      	ldr	r2, [r3, #8]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002096:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6899      	ldr	r1, [r3, #8]
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	69da      	ldr	r2, [r3, #28]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	609a      	str	r2, [r3, #8]
 80020aa:	e00f      	b.n	80020cc <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	689a      	ldr	r2, [r3, #8]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80020ba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80020ca:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	7d5b      	ldrb	r3, [r3, #21]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d008      	beq.n	80020e6 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80020e2:	605a      	str	r2, [r3, #4]
 80020e4:	e007      	b.n	80020f6 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020f4:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	7d1b      	ldrb	r3, [r3, #20]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d008      	beq.n	8002110 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	e007      	b.n	8002120 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800211e:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b03      	cmp	r3, #3
 8002126:	d02e      	beq.n	8002186 <HAL_ADCEx_InjectedConfigChannel+0x272>
 8002128:	2b03      	cmp	r3, #3
 800212a:	d840      	bhi.n	80021ae <HAL_ADCEx_InjectedConfigChannel+0x29a>
 800212c:	2b01      	cmp	r3, #1
 800212e:	d002      	beq.n	8002136 <HAL_ADCEx_InjectedConfigChannel+0x222>
 8002130:	2b02      	cmp	r3, #2
 8002132:	d014      	beq.n	800215e <HAL_ADCEx_InjectedConfigChannel+0x24a>
 8002134:	e03b      	b.n	80021ae <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	6812      	ldr	r2, [r2, #0]
 8002140:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002144:	f023 030f 	bic.w	r3, r3, #15
 8002148:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6959      	ldr	r1, [r3, #20]
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	68da      	ldr	r2, [r3, #12]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	430a      	orrs	r2, r1
 800215a:	615a      	str	r2, [r3, #20]
      break;
 800215c:	e03b      	b.n	80021d6 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6812      	ldr	r2, [r2, #0]
 8002168:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800216c:	f023 030f 	bic.w	r3, r3, #15
 8002170:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6999      	ldr	r1, [r3, #24]
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	68da      	ldr	r2, [r3, #12]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	430a      	orrs	r2, r1
 8002182:	619a      	str	r2, [r3, #24]
      break;
 8002184:	e027      	b.n	80021d6 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	6812      	ldr	r2, [r2, #0]
 8002190:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002194:	f023 030f 	bic.w	r3, r3, #15
 8002198:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	69d9      	ldr	r1, [r3, #28]
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	68da      	ldr	r2, [r3, #12]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	61da      	str	r2, [r3, #28]
      break;
 80021ac:	e013      	b.n	80021d6 <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6812      	ldr	r2, [r2, #0]
 80021b8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80021bc:	f023 030f 	bic.w	r3, r3, #15
 80021c0:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6a19      	ldr	r1, [r3, #32]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	68da      	ldr	r2, [r3, #12]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	621a      	str	r2, [r3, #32]
      break;
 80021d4:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021d6:	4b18      	ldr	r3, [pc, #96]	; (8002238 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 80021d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a17      	ldr	r2, [pc, #92]	; (800223c <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d109      	bne.n	80021f8 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b12      	cmp	r3, #18
 80021ea:	d105      	bne.n	80021f8 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a0f      	ldr	r2, [pc, #60]	; (800223c <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d10d      	bne.n	800221e <HAL_ADCEx_InjectedConfigChannel+0x30a>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2b10      	cmp	r3, #16
 8002208:	d003      	beq.n	8002212 <HAL_ADCEx_InjectedConfigChannel+0x2fe>
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2b11      	cmp	r3, #17
 8002210:	d105      	bne.n	800221e <HAL_ADCEx_InjectedConfigChannel+0x30a>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	000f0001 	.word	0x000f0001
 8002238:	40012300 	.word	0x40012300
 800223c:	40012000 	.word	0x40012000

08002240 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002250:	4b0c      	ldr	r3, [pc, #48]	; (8002284 <__NVIC_SetPriorityGrouping+0x44>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800225c:	4013      	ands	r3, r2
 800225e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002268:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800226c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002270:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002272:	4a04      	ldr	r2, [pc, #16]	; (8002284 <__NVIC_SetPriorityGrouping+0x44>)
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	60d3      	str	r3, [r2, #12]
}
 8002278:	bf00      	nop
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800228c:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <__NVIC_GetPriorityGrouping+0x18>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	0a1b      	lsrs	r3, r3, #8
 8002292:	f003 0307 	and.w	r3, r3, #7
}
 8002296:	4618      	mov	r0, r3
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	e000ed00 	.word	0xe000ed00

080022a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	db0b      	blt.n	80022ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	f003 021f 	and.w	r2, r3, #31
 80022bc:	4907      	ldr	r1, [pc, #28]	; (80022dc <__NVIC_EnableIRQ+0x38>)
 80022be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c2:	095b      	lsrs	r3, r3, #5
 80022c4:	2001      	movs	r0, #1
 80022c6:	fa00 f202 	lsl.w	r2, r0, r2
 80022ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	e000e100 	.word	0xe000e100

080022e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	6039      	str	r1, [r7, #0]
 80022ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	db0a      	blt.n	800230a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	490c      	ldr	r1, [pc, #48]	; (800232c <__NVIC_SetPriority+0x4c>)
 80022fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fe:	0112      	lsls	r2, r2, #4
 8002300:	b2d2      	uxtb	r2, r2
 8002302:	440b      	add	r3, r1
 8002304:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002308:	e00a      	b.n	8002320 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	b2da      	uxtb	r2, r3
 800230e:	4908      	ldr	r1, [pc, #32]	; (8002330 <__NVIC_SetPriority+0x50>)
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	3b04      	subs	r3, #4
 8002318:	0112      	lsls	r2, r2, #4
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	440b      	add	r3, r1
 800231e:	761a      	strb	r2, [r3, #24]
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	e000e100 	.word	0xe000e100
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002334:	b480      	push	{r7}
 8002336:	b089      	sub	sp, #36	; 0x24
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f1c3 0307 	rsb	r3, r3, #7
 800234e:	2b04      	cmp	r3, #4
 8002350:	bf28      	it	cs
 8002352:	2304      	movcs	r3, #4
 8002354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	3304      	adds	r3, #4
 800235a:	2b06      	cmp	r3, #6
 800235c:	d902      	bls.n	8002364 <NVIC_EncodePriority+0x30>
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	3b03      	subs	r3, #3
 8002362:	e000      	b.n	8002366 <NVIC_EncodePriority+0x32>
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002368:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43da      	mvns	r2, r3
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	401a      	ands	r2, r3
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800237c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	fa01 f303 	lsl.w	r3, r1, r3
 8002386:	43d9      	mvns	r1, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800238c:	4313      	orrs	r3, r2
         );
}
 800238e:	4618      	mov	r0, r3
 8002390:	3724      	adds	r7, #36	; 0x24
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
	...

0800239c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023ac:	d301      	bcc.n	80023b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ae:	2301      	movs	r3, #1
 80023b0:	e00f      	b.n	80023d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023b2:	4a0a      	ldr	r2, [pc, #40]	; (80023dc <SysTick_Config+0x40>)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ba:	210f      	movs	r1, #15
 80023bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023c0:	f7ff ff8e 	bl	80022e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023c4:	4b05      	ldr	r3, [pc, #20]	; (80023dc <SysTick_Config+0x40>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ca:	4b04      	ldr	r3, [pc, #16]	; (80023dc <SysTick_Config+0x40>)
 80023cc:	2207      	movs	r2, #7
 80023ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	e000e010 	.word	0xe000e010

080023e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7ff ff29 	bl	8002240 <__NVIC_SetPriorityGrouping>
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b086      	sub	sp, #24
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	4603      	mov	r3, r0
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	607a      	str	r2, [r7, #4]
 8002402:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002408:	f7ff ff3e 	bl	8002288 <__NVIC_GetPriorityGrouping>
 800240c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	68b9      	ldr	r1, [r7, #8]
 8002412:	6978      	ldr	r0, [r7, #20]
 8002414:	f7ff ff8e 	bl	8002334 <NVIC_EncodePriority>
 8002418:	4602      	mov	r2, r0
 800241a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800241e:	4611      	mov	r1, r2
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff ff5d 	bl	80022e0 <__NVIC_SetPriority>
}
 8002426:	bf00      	nop
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b082      	sub	sp, #8
 8002432:	af00      	add	r7, sp, #0
 8002434:	4603      	mov	r3, r0
 8002436:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff ff31 	bl	80022a4 <__NVIC_EnableIRQ>
}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7ff ffa2 	bl	800239c <SysTick_Config>
 8002458:	4603      	mov	r3, r0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
	...

08002464 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800246c:	2300      	movs	r3, #0
 800246e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002470:	f7ff fabe 	bl	80019f0 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e099      	b.n	80025b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2202      	movs	r2, #2
 8002484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0201 	bic.w	r2, r2, #1
 800249e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024a0:	e00f      	b.n	80024c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024a2:	f7ff faa5 	bl	80019f0 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b05      	cmp	r3, #5
 80024ae:	d908      	bls.n	80024c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2220      	movs	r2, #32
 80024b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2203      	movs	r2, #3
 80024ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e078      	b.n	80025b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1e8      	bne.n	80024a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024d8:	697a      	ldr	r2, [r7, #20]
 80024da:	4b38      	ldr	r3, [pc, #224]	; (80025bc <HAL_DMA_Init+0x158>)
 80024dc:	4013      	ands	r3, r2
 80024de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685a      	ldr	r2, [r3, #4]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002506:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	4313      	orrs	r3, r2
 8002512:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	2b04      	cmp	r3, #4
 800251a:	d107      	bne.n	800252c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002524:	4313      	orrs	r3, r2
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	4313      	orrs	r3, r2
 800252a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f023 0307 	bic.w	r3, r3, #7
 8002542:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002548:	697a      	ldr	r2, [r7, #20]
 800254a:	4313      	orrs	r3, r2
 800254c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002552:	2b04      	cmp	r3, #4
 8002554:	d117      	bne.n	8002586 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	4313      	orrs	r3, r2
 800255e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00e      	beq.n	8002586 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f000 fb01 	bl	8002b70 <DMA_CheckFifoParam>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d008      	beq.n	8002586 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2240      	movs	r2, #64	; 0x40
 8002578:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002582:	2301      	movs	r3, #1
 8002584:	e016      	b.n	80025b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 fab8 	bl	8002b04 <DMA_CalcBaseAndBitshift>
 8002594:	4603      	mov	r3, r0
 8002596:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259c:	223f      	movs	r2, #63	; 0x3f
 800259e:	409a      	lsls	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3718      	adds	r7, #24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	f010803f 	.word	0xf010803f

080025c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
 80025cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025ce:	2300      	movs	r3, #0
 80025d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d101      	bne.n	80025e6 <HAL_DMA_Start_IT+0x26>
 80025e2:	2302      	movs	r3, #2
 80025e4:	e040      	b.n	8002668 <HAL_DMA_Start_IT+0xa8>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d12f      	bne.n	800265a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2202      	movs	r2, #2
 80025fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	68b9      	ldr	r1, [r7, #8]
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f000 fa4a 	bl	8002aa8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002618:	223f      	movs	r2, #63	; 0x3f
 800261a:	409a      	lsls	r2, r3
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f042 0216 	orr.w	r2, r2, #22
 800262e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002634:	2b00      	cmp	r3, #0
 8002636:	d007      	beq.n	8002648 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f042 0208 	orr.w	r2, r2, #8
 8002646:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0201 	orr.w	r2, r2, #1
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	e005      	b.n	8002666 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002662:	2302      	movs	r3, #2
 8002664:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002666:	7dfb      	ldrb	r3, [r7, #23]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800267e:	f7ff f9b7 	bl	80019f0 <HAL_GetTick>
 8002682:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d008      	beq.n	80026a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2280      	movs	r2, #128	; 0x80
 8002694:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e052      	b.n	8002748 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 0216 	bic.w	r2, r2, #22
 80026b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	695a      	ldr	r2, [r3, #20]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d103      	bne.n	80026d2 <HAL_DMA_Abort+0x62>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d007      	beq.n	80026e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0208 	bic.w	r2, r2, #8
 80026e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 0201 	bic.w	r2, r2, #1
 80026f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026f2:	e013      	b.n	800271c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026f4:	f7ff f97c 	bl	80019f0 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b05      	cmp	r3, #5
 8002700:	d90c      	bls.n	800271c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2220      	movs	r2, #32
 8002706:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2203      	movs	r2, #3
 800270c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e015      	b.n	8002748 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1e4      	bne.n	80026f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272e:	223f      	movs	r2, #63	; 0x3f
 8002730:	409a      	lsls	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d004      	beq.n	800276e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2280      	movs	r2, #128	; 0x80
 8002768:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e00c      	b.n	8002788 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2205      	movs	r2, #5
 8002772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 0201 	bic.w	r2, r2, #1
 8002784:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800279c:	2300      	movs	r3, #0
 800279e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027a0:	4b8e      	ldr	r3, [pc, #568]	; (80029dc <HAL_DMA_IRQHandler+0x248>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a8e      	ldr	r2, [pc, #568]	; (80029e0 <HAL_DMA_IRQHandler+0x24c>)
 80027a6:	fba2 2303 	umull	r2, r3, r2, r3
 80027aa:	0a9b      	lsrs	r3, r3, #10
 80027ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027be:	2208      	movs	r2, #8
 80027c0:	409a      	lsls	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	4013      	ands	r3, r2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d01a      	beq.n	8002800 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d013      	beq.n	8002800 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0204 	bic.w	r2, r2, #4
 80027e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ec:	2208      	movs	r2, #8
 80027ee:	409a      	lsls	r2, r3
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f8:	f043 0201 	orr.w	r2, r3, #1
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002804:	2201      	movs	r2, #1
 8002806:	409a      	lsls	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4013      	ands	r3, r2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d012      	beq.n	8002836 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00b      	beq.n	8002836 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002822:	2201      	movs	r2, #1
 8002824:	409a      	lsls	r2, r3
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282e:	f043 0202 	orr.w	r2, r3, #2
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283a:	2204      	movs	r2, #4
 800283c:	409a      	lsls	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	4013      	ands	r3, r2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d012      	beq.n	800286c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00b      	beq.n	800286c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002858:	2204      	movs	r2, #4
 800285a:	409a      	lsls	r2, r3
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002864:	f043 0204 	orr.w	r2, r3, #4
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002870:	2210      	movs	r2, #16
 8002872:	409a      	lsls	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	4013      	ands	r3, r2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d043      	beq.n	8002904 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0308 	and.w	r3, r3, #8
 8002886:	2b00      	cmp	r3, #0
 8002888:	d03c      	beq.n	8002904 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288e:	2210      	movs	r2, #16
 8002890:	409a      	lsls	r2, r3
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d018      	beq.n	80028d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d108      	bne.n	80028c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d024      	beq.n	8002904 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	4798      	blx	r3
 80028c2:	e01f      	b.n	8002904 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d01b      	beq.n	8002904 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	4798      	blx	r3
 80028d4:	e016      	b.n	8002904 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d107      	bne.n	80028f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f022 0208 	bic.w	r2, r2, #8
 80028f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d003      	beq.n	8002904 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002908:	2220      	movs	r2, #32
 800290a:	409a      	lsls	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	4013      	ands	r3, r2
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 808f 	beq.w	8002a34 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0310 	and.w	r3, r3, #16
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 8087 	beq.w	8002a34 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292a:	2220      	movs	r2, #32
 800292c:	409a      	lsls	r2, r3
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b05      	cmp	r3, #5
 800293c:	d136      	bne.n	80029ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 0216 	bic.w	r2, r2, #22
 800294c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	695a      	ldr	r2, [r3, #20]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800295c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	2b00      	cmp	r3, #0
 8002964:	d103      	bne.n	800296e <HAL_DMA_IRQHandler+0x1da>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800296a:	2b00      	cmp	r3, #0
 800296c:	d007      	beq.n	800297e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 0208 	bic.w	r2, r2, #8
 800297c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002982:	223f      	movs	r2, #63	; 0x3f
 8002984:	409a      	lsls	r2, r3
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d07e      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	4798      	blx	r3
        }
        return;
 80029aa:	e079      	b.n	8002aa0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d01d      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10d      	bne.n	80029e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d031      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	4798      	blx	r3
 80029d8:	e02c      	b.n	8002a34 <HAL_DMA_IRQHandler+0x2a0>
 80029da:	bf00      	nop
 80029dc:	20000004 	.word	0x20000004
 80029e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d023      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	4798      	blx	r3
 80029f4:	e01e      	b.n	8002a34 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10f      	bne.n	8002a24 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 0210 	bic.w	r2, r2, #16
 8002a12:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d003      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d032      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d022      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2205      	movs	r2, #5
 8002a4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0201 	bic.w	r2, r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	3301      	adds	r3, #1
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d307      	bcc.n	8002a7c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f2      	bne.n	8002a60 <HAL_DMA_IRQHandler+0x2cc>
 8002a7a:	e000      	b.n	8002a7e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a7c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d005      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	4798      	blx	r3
 8002a9e:	e000      	b.n	8002aa2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002aa0:	bf00      	nop
    }
  }
}
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
 8002ab4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ac4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	2b40      	cmp	r3, #64	; 0x40
 8002ad4:	d108      	bne.n	8002ae8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ae6:	e007      	b.n	8002af8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68ba      	ldr	r2, [r7, #8]
 8002aee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	60da      	str	r2, [r3, #12]
}
 8002af8:	bf00      	nop
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	3b10      	subs	r3, #16
 8002b14:	4a14      	ldr	r2, [pc, #80]	; (8002b68 <DMA_CalcBaseAndBitshift+0x64>)
 8002b16:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1a:	091b      	lsrs	r3, r3, #4
 8002b1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b1e:	4a13      	ldr	r2, [pc, #76]	; (8002b6c <DMA_CalcBaseAndBitshift+0x68>)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	4413      	add	r3, r2
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	461a      	mov	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2b03      	cmp	r3, #3
 8002b30:	d909      	bls.n	8002b46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b3a:	f023 0303 	bic.w	r3, r3, #3
 8002b3e:	1d1a      	adds	r2, r3, #4
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	659a      	str	r2, [r3, #88]	; 0x58
 8002b44:	e007      	b.n	8002b56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b4e:	f023 0303 	bic.w	r3, r3, #3
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3714      	adds	r7, #20
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	aaaaaaab 	.word	0xaaaaaaab
 8002b6c:	0800c6a8 	.word	0x0800c6a8

08002b70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d11f      	bne.n	8002bca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	2b03      	cmp	r3, #3
 8002b8e:	d856      	bhi.n	8002c3e <DMA_CheckFifoParam+0xce>
 8002b90:	a201      	add	r2, pc, #4	; (adr r2, 8002b98 <DMA_CheckFifoParam+0x28>)
 8002b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b96:	bf00      	nop
 8002b98:	08002ba9 	.word	0x08002ba9
 8002b9c:	08002bbb 	.word	0x08002bbb
 8002ba0:	08002ba9 	.word	0x08002ba9
 8002ba4:	08002c3f 	.word	0x08002c3f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d046      	beq.n	8002c42 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bb8:	e043      	b.n	8002c42 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bc2:	d140      	bne.n	8002c46 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bc8:	e03d      	b.n	8002c46 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bd2:	d121      	bne.n	8002c18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2b03      	cmp	r3, #3
 8002bd8:	d837      	bhi.n	8002c4a <DMA_CheckFifoParam+0xda>
 8002bda:	a201      	add	r2, pc, #4	; (adr r2, 8002be0 <DMA_CheckFifoParam+0x70>)
 8002bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be0:	08002bf1 	.word	0x08002bf1
 8002be4:	08002bf7 	.word	0x08002bf7
 8002be8:	08002bf1 	.word	0x08002bf1
 8002bec:	08002c09 	.word	0x08002c09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	73fb      	strb	r3, [r7, #15]
      break;
 8002bf4:	e030      	b.n	8002c58 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d025      	beq.n	8002c4e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c06:	e022      	b.n	8002c4e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c10:	d11f      	bne.n	8002c52 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c16:	e01c      	b.n	8002c52 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d903      	bls.n	8002c26 <DMA_CheckFifoParam+0xb6>
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	2b03      	cmp	r3, #3
 8002c22:	d003      	beq.n	8002c2c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c24:	e018      	b.n	8002c58 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	73fb      	strb	r3, [r7, #15]
      break;
 8002c2a:	e015      	b.n	8002c58 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00e      	beq.n	8002c56 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c3c:	e00b      	b.n	8002c56 <DMA_CheckFifoParam+0xe6>
      break;
 8002c3e:	bf00      	nop
 8002c40:	e00a      	b.n	8002c58 <DMA_CheckFifoParam+0xe8>
      break;
 8002c42:	bf00      	nop
 8002c44:	e008      	b.n	8002c58 <DMA_CheckFifoParam+0xe8>
      break;
 8002c46:	bf00      	nop
 8002c48:	e006      	b.n	8002c58 <DMA_CheckFifoParam+0xe8>
      break;
 8002c4a:	bf00      	nop
 8002c4c:	e004      	b.n	8002c58 <DMA_CheckFifoParam+0xe8>
      break;
 8002c4e:	bf00      	nop
 8002c50:	e002      	b.n	8002c58 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c52:	bf00      	nop
 8002c54:	e000      	b.n	8002c58 <DMA_CheckFifoParam+0xe8>
      break;
 8002c56:	bf00      	nop
    }
  } 
  
  return status; 
 8002c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop

08002c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b089      	sub	sp, #36	; 0x24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c72:	2300      	movs	r3, #0
 8002c74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c7e:	2300      	movs	r3, #0
 8002c80:	61fb      	str	r3, [r7, #28]
 8002c82:	e16b      	b.n	8002f5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c84:	2201      	movs	r2, #1
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	4013      	ands	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	f040 815a 	bne.w	8002f56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d005      	beq.n	8002cba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d130      	bne.n	8002d1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	2203      	movs	r2, #3
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	68da      	ldr	r2, [r3, #12]
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	091b      	lsrs	r3, r3, #4
 8002d06:	f003 0201 	and.w	r2, r3, #1
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 0303 	and.w	r3, r3, #3
 8002d24:	2b03      	cmp	r3, #3
 8002d26:	d017      	beq.n	8002d58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	2203      	movs	r2, #3
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f003 0303 	and.w	r3, r3, #3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d123      	bne.n	8002dac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	08da      	lsrs	r2, r3, #3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	3208      	adds	r2, #8
 8002d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	220f      	movs	r2, #15
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	43db      	mvns	r3, r3
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	4013      	ands	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	691a      	ldr	r2, [r3, #16]
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	08da      	lsrs	r2, r3, #3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	3208      	adds	r2, #8
 8002da6:	69b9      	ldr	r1, [r7, #24]
 8002da8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	2203      	movs	r2, #3
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 0203 	and.w	r2, r3, #3
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f000 80b4 	beq.w	8002f56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	4b60      	ldr	r3, [pc, #384]	; (8002f74 <HAL_GPIO_Init+0x30c>)
 8002df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df6:	4a5f      	ldr	r2, [pc, #380]	; (8002f74 <HAL_GPIO_Init+0x30c>)
 8002df8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8002dfe:	4b5d      	ldr	r3, [pc, #372]	; (8002f74 <HAL_GPIO_Init+0x30c>)
 8002e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e0a:	4a5b      	ldr	r2, [pc, #364]	; (8002f78 <HAL_GPIO_Init+0x310>)
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	089b      	lsrs	r3, r3, #2
 8002e10:	3302      	adds	r3, #2
 8002e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	220f      	movs	r2, #15
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	43db      	mvns	r3, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a52      	ldr	r2, [pc, #328]	; (8002f7c <HAL_GPIO_Init+0x314>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d02b      	beq.n	8002e8e <HAL_GPIO_Init+0x226>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a51      	ldr	r2, [pc, #324]	; (8002f80 <HAL_GPIO_Init+0x318>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d025      	beq.n	8002e8a <HAL_GPIO_Init+0x222>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a50      	ldr	r2, [pc, #320]	; (8002f84 <HAL_GPIO_Init+0x31c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d01f      	beq.n	8002e86 <HAL_GPIO_Init+0x21e>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a4f      	ldr	r2, [pc, #316]	; (8002f88 <HAL_GPIO_Init+0x320>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d019      	beq.n	8002e82 <HAL_GPIO_Init+0x21a>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a4e      	ldr	r2, [pc, #312]	; (8002f8c <HAL_GPIO_Init+0x324>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d013      	beq.n	8002e7e <HAL_GPIO_Init+0x216>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a4d      	ldr	r2, [pc, #308]	; (8002f90 <HAL_GPIO_Init+0x328>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d00d      	beq.n	8002e7a <HAL_GPIO_Init+0x212>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a4c      	ldr	r2, [pc, #304]	; (8002f94 <HAL_GPIO_Init+0x32c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d007      	beq.n	8002e76 <HAL_GPIO_Init+0x20e>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a4b      	ldr	r2, [pc, #300]	; (8002f98 <HAL_GPIO_Init+0x330>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d101      	bne.n	8002e72 <HAL_GPIO_Init+0x20a>
 8002e6e:	2307      	movs	r3, #7
 8002e70:	e00e      	b.n	8002e90 <HAL_GPIO_Init+0x228>
 8002e72:	2308      	movs	r3, #8
 8002e74:	e00c      	b.n	8002e90 <HAL_GPIO_Init+0x228>
 8002e76:	2306      	movs	r3, #6
 8002e78:	e00a      	b.n	8002e90 <HAL_GPIO_Init+0x228>
 8002e7a:	2305      	movs	r3, #5
 8002e7c:	e008      	b.n	8002e90 <HAL_GPIO_Init+0x228>
 8002e7e:	2304      	movs	r3, #4
 8002e80:	e006      	b.n	8002e90 <HAL_GPIO_Init+0x228>
 8002e82:	2303      	movs	r3, #3
 8002e84:	e004      	b.n	8002e90 <HAL_GPIO_Init+0x228>
 8002e86:	2302      	movs	r3, #2
 8002e88:	e002      	b.n	8002e90 <HAL_GPIO_Init+0x228>
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e000      	b.n	8002e90 <HAL_GPIO_Init+0x228>
 8002e8e:	2300      	movs	r3, #0
 8002e90:	69fa      	ldr	r2, [r7, #28]
 8002e92:	f002 0203 	and.w	r2, r2, #3
 8002e96:	0092      	lsls	r2, r2, #2
 8002e98:	4093      	lsls	r3, r2
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ea0:	4935      	ldr	r1, [pc, #212]	; (8002f78 <HAL_GPIO_Init+0x310>)
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	089b      	lsrs	r3, r3, #2
 8002ea6:	3302      	adds	r3, #2
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002eae:	4b3b      	ldr	r3, [pc, #236]	; (8002f9c <HAL_GPIO_Init+0x334>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ed2:	4a32      	ldr	r2, [pc, #200]	; (8002f9c <HAL_GPIO_Init+0x334>)
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ed8:	4b30      	ldr	r3, [pc, #192]	; (8002f9c <HAL_GPIO_Init+0x334>)
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d003      	beq.n	8002efc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002efc:	4a27      	ldr	r2, [pc, #156]	; (8002f9c <HAL_GPIO_Init+0x334>)
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f02:	4b26      	ldr	r3, [pc, #152]	; (8002f9c <HAL_GPIO_Init+0x334>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f26:	4a1d      	ldr	r2, [pc, #116]	; (8002f9c <HAL_GPIO_Init+0x334>)
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f2c:	4b1b      	ldr	r3, [pc, #108]	; (8002f9c <HAL_GPIO_Init+0x334>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	43db      	mvns	r3, r3
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f50:	4a12      	ldr	r2, [pc, #72]	; (8002f9c <HAL_GPIO_Init+0x334>)
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	61fb      	str	r3, [r7, #28]
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	2b0f      	cmp	r3, #15
 8002f60:	f67f ae90 	bls.w	8002c84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f64:	bf00      	nop
 8002f66:	bf00      	nop
 8002f68:	3724      	adds	r7, #36	; 0x24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	40023800 	.word	0x40023800
 8002f78:	40013800 	.word	0x40013800
 8002f7c:	40020000 	.word	0x40020000
 8002f80:	40020400 	.word	0x40020400
 8002f84:	40020800 	.word	0x40020800
 8002f88:	40020c00 	.word	0x40020c00
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	40021400 	.word	0x40021400
 8002f94:	40021800 	.word	0x40021800
 8002f98:	40021c00 	.word	0x40021c00
 8002f9c:	40013c00 	.word	0x40013c00

08002fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	807b      	strh	r3, [r7, #2]
 8002fac:	4613      	mov	r3, r2
 8002fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fb0:	787b      	ldrb	r3, [r7, #1]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fb6:	887a      	ldrh	r2, [r7, #2]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fbc:	e003      	b.n	8002fc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fbe:	887b      	ldrh	r3, [r7, #2]
 8002fc0:	041a      	lsls	r2, r3, #16
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	619a      	str	r2, [r3, #24]
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b085      	sub	sp, #20
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
 8002fda:	460b      	mov	r3, r1
 8002fdc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002fe4:	887a      	ldrh	r2, [r7, #2]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	041a      	lsls	r2, r3, #16
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	43d9      	mvns	r1, r3
 8002ff0:	887b      	ldrh	r3, [r7, #2]
 8002ff2:	400b      	ands	r3, r1
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	619a      	str	r2, [r3, #24]
}
 8002ffa:	bf00      	nop
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003006:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003008:	b08f      	sub	sp, #60	; 0x3c
 800300a:	af0a      	add	r7, sp, #40	; 0x28
 800300c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e10f      	b.n	8003238 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d106      	bne.n	8003038 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f007 fd90 	bl	800ab58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2203      	movs	r2, #3
 800303c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003048:	2b00      	cmp	r3, #0
 800304a:	d102      	bne.n	8003052 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f004 f8e3 	bl	8007222 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	603b      	str	r3, [r7, #0]
 8003062:	687e      	ldr	r6, [r7, #4]
 8003064:	466d      	mov	r5, sp
 8003066:	f106 0410 	add.w	r4, r6, #16
 800306a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800306c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800306e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003070:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003072:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003076:	e885 0003 	stmia.w	r5, {r0, r1}
 800307a:	1d33      	adds	r3, r6, #4
 800307c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800307e:	6838      	ldr	r0, [r7, #0]
 8003080:	f003 ffba 	bl	8006ff8 <USB_CoreInit>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d005      	beq.n	8003096 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2202      	movs	r2, #2
 800308e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e0d0      	b.n	8003238 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2100      	movs	r1, #0
 800309c:	4618      	mov	r0, r3
 800309e:	f004 f8d1 	bl	8007244 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030a2:	2300      	movs	r3, #0
 80030a4:	73fb      	strb	r3, [r7, #15]
 80030a6:	e04a      	b.n	800313e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80030a8:	7bfa      	ldrb	r2, [r7, #15]
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	4613      	mov	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	4413      	add	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	440b      	add	r3, r1
 80030b6:	333d      	adds	r3, #61	; 0x3d
 80030b8:	2201      	movs	r2, #1
 80030ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80030bc:	7bfa      	ldrb	r2, [r7, #15]
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	4413      	add	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	333c      	adds	r3, #60	; 0x3c
 80030cc:	7bfa      	ldrb	r2, [r7, #15]
 80030ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80030d0:	7bfa      	ldrb	r2, [r7, #15]
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	b298      	uxth	r0, r3
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	4613      	mov	r3, r2
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	4413      	add	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	3344      	adds	r3, #68	; 0x44
 80030e4:	4602      	mov	r2, r0
 80030e6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030e8:	7bfa      	ldrb	r2, [r7, #15]
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	4613      	mov	r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	3340      	adds	r3, #64	; 0x40
 80030f8:	2200      	movs	r2, #0
 80030fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030fc:	7bfa      	ldrb	r2, [r7, #15]
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	4613      	mov	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	4413      	add	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	3348      	adds	r3, #72	; 0x48
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003110:	7bfa      	ldrb	r2, [r7, #15]
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	4613      	mov	r3, r2
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	4413      	add	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	334c      	adds	r3, #76	; 0x4c
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003124:	7bfa      	ldrb	r2, [r7, #15]
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	4413      	add	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	3354      	adds	r3, #84	; 0x54
 8003134:	2200      	movs	r2, #0
 8003136:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003138:	7bfb      	ldrb	r3, [r7, #15]
 800313a:	3301      	adds	r3, #1
 800313c:	73fb      	strb	r3, [r7, #15]
 800313e:	7bfa      	ldrb	r2, [r7, #15]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	429a      	cmp	r2, r3
 8003146:	d3af      	bcc.n	80030a8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003148:	2300      	movs	r3, #0
 800314a:	73fb      	strb	r3, [r7, #15]
 800314c:	e044      	b.n	80031d8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800314e:	7bfa      	ldrb	r2, [r7, #15]
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	4413      	add	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	440b      	add	r3, r1
 800315c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003160:	2200      	movs	r2, #0
 8003162:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003164:	7bfa      	ldrb	r2, [r7, #15]
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	4413      	add	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003176:	7bfa      	ldrb	r2, [r7, #15]
 8003178:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800317a:	7bfa      	ldrb	r2, [r7, #15]
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	4613      	mov	r3, r2
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	4413      	add	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	440b      	add	r3, r1
 8003188:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800318c:	2200      	movs	r2, #0
 800318e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003190:	7bfa      	ldrb	r2, [r7, #15]
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	4613      	mov	r3, r2
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	4413      	add	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	440b      	add	r3, r1
 800319e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031a6:	7bfa      	ldrb	r2, [r7, #15]
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	4613      	mov	r3, r2
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	4413      	add	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	440b      	add	r3, r1
 80031b4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031bc:	7bfa      	ldrb	r2, [r7, #15]
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	4613      	mov	r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	4413      	add	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80031ce:	2200      	movs	r2, #0
 80031d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031d2:	7bfb      	ldrb	r3, [r7, #15]
 80031d4:	3301      	adds	r3, #1
 80031d6:	73fb      	strb	r3, [r7, #15]
 80031d8:	7bfa      	ldrb	r2, [r7, #15]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d3b5      	bcc.n	800314e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	603b      	str	r3, [r7, #0]
 80031e8:	687e      	ldr	r6, [r7, #4]
 80031ea:	466d      	mov	r5, sp
 80031ec:	f106 0410 	add.w	r4, r6, #16
 80031f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8003200:	1d33      	adds	r3, r6, #4
 8003202:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003204:	6838      	ldr	r0, [r7, #0]
 8003206:	f004 f869 	bl	80072dc <USB_DevInit>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d005      	beq.n	800321c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2202      	movs	r2, #2
 8003214:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e00d      	b.n	8003238 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f005 f9b8 	bl	80085a6 <USB_DevDisconnect>

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3714      	adds	r7, #20
 800323c:	46bd      	mov	sp, r7
 800323e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003240 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003254:	2b01      	cmp	r3, #1
 8003256:	d101      	bne.n	800325c <HAL_PCD_Start+0x1c>
 8003258:	2302      	movs	r3, #2
 800325a:	e020      	b.n	800329e <HAL_PCD_Start+0x5e>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003268:	2b01      	cmp	r3, #1
 800326a:	d109      	bne.n	8003280 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003270:	2b01      	cmp	r3, #1
 8003272:	d005      	beq.n	8003280 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003278:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4618      	mov	r0, r3
 8003286:	f003 ffbb 	bl	8007200 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f005 f968 	bl	8008564 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80032a6:	b590      	push	{r4, r7, lr}
 80032a8:	b08d      	sub	sp, #52	; 0x34
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4618      	mov	r0, r3
 80032be:	f005 fa26 	bl	800870e <USB_GetMode>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f040 848a 	bne.w	8003bde <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f005 f98a 	bl	80085e8 <USB_ReadInterrupts>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	f000 8480 	beq.w	8003bdc <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	0a1b      	lsrs	r3, r3, #8
 80032e6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f005 f977 	bl	80085e8 <USB_ReadInterrupts>
 80032fa:	4603      	mov	r3, r0
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b02      	cmp	r3, #2
 8003302:	d107      	bne.n	8003314 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695a      	ldr	r2, [r3, #20]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f002 0202 	and.w	r2, r2, #2
 8003312:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4618      	mov	r0, r3
 800331a:	f005 f965 	bl	80085e8 <USB_ReadInterrupts>
 800331e:	4603      	mov	r3, r0
 8003320:	f003 0310 	and.w	r3, r3, #16
 8003324:	2b10      	cmp	r3, #16
 8003326:	d161      	bne.n	80033ec <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	699a      	ldr	r2, [r3, #24]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0210 	bic.w	r2, r2, #16
 8003336:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003338:	6a3b      	ldr	r3, [r7, #32]
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	f003 020f 	and.w	r2, r3, #15
 8003344:	4613      	mov	r3, r2
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	4413      	add	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	4413      	add	r3, r2
 8003354:	3304      	adds	r3, #4
 8003356:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	0c5b      	lsrs	r3, r3, #17
 800335c:	f003 030f 	and.w	r3, r3, #15
 8003360:	2b02      	cmp	r3, #2
 8003362:	d124      	bne.n	80033ae <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800336a:	4013      	ands	r3, r2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d035      	beq.n	80033dc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	091b      	lsrs	r3, r3, #4
 8003378:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800337a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800337e:	b29b      	uxth	r3, r3
 8003380:	461a      	mov	r2, r3
 8003382:	6a38      	ldr	r0, [r7, #32]
 8003384:	f004 ff9c 	bl	80082c0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	691a      	ldr	r2, [r3, #16]
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	091b      	lsrs	r3, r3, #4
 8003390:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003394:	441a      	add	r2, r3
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	6a1a      	ldr	r2, [r3, #32]
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	091b      	lsrs	r3, r3, #4
 80033a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033a6:	441a      	add	r2, r3
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	621a      	str	r2, [r3, #32]
 80033ac:	e016      	b.n	80033dc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	0c5b      	lsrs	r3, r3, #17
 80033b2:	f003 030f 	and.w	r3, r3, #15
 80033b6:	2b06      	cmp	r3, #6
 80033b8:	d110      	bne.n	80033dc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033c0:	2208      	movs	r2, #8
 80033c2:	4619      	mov	r1, r3
 80033c4:	6a38      	ldr	r0, [r7, #32]
 80033c6:	f004 ff7b 	bl	80082c0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	6a1a      	ldr	r2, [r3, #32]
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	091b      	lsrs	r3, r3, #4
 80033d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033d6:	441a      	add	r2, r3
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	699a      	ldr	r2, [r3, #24]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 0210 	orr.w	r2, r2, #16
 80033ea:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f005 f8f9 	bl	80085e8 <USB_ReadInterrupts>
 80033f6:	4603      	mov	r3, r0
 80033f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003400:	f040 80a7 	bne.w	8003552 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003404:	2300      	movs	r3, #0
 8003406:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f005 f8fe 	bl	800860e <USB_ReadDevAllOutEpInterrupt>
 8003412:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003414:	e099      	b.n	800354a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 808e 	beq.w	800353e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003428:	b2d2      	uxtb	r2, r2
 800342a:	4611      	mov	r1, r2
 800342c:	4618      	mov	r0, r3
 800342e:	f005 f922 	bl	8008676 <USB_ReadDevOutEPInterrupt>
 8003432:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00c      	beq.n	8003458 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	015a      	lsls	r2, r3, #5
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	4413      	add	r3, r2
 8003446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800344a:	461a      	mov	r2, r3
 800344c:	2301      	movs	r3, #1
 800344e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003450:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 fec2 	bl	80041dc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	f003 0308 	and.w	r3, r3, #8
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00c      	beq.n	800347c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003464:	015a      	lsls	r2, r3, #5
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	4413      	add	r3, r2
 800346a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800346e:	461a      	mov	r2, r3
 8003470:	2308      	movs	r3, #8
 8003472:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003474:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 ff98 	bl	80043ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	f003 0310 	and.w	r3, r3, #16
 8003482:	2b00      	cmp	r3, #0
 8003484:	d008      	beq.n	8003498 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	015a      	lsls	r2, r3, #5
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	4413      	add	r3, r2
 800348e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003492:	461a      	mov	r2, r3
 8003494:	2310      	movs	r3, #16
 8003496:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d030      	beq.n	8003504 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80034a2:	6a3b      	ldr	r3, [r7, #32]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034aa:	2b80      	cmp	r3, #128	; 0x80
 80034ac:	d109      	bne.n	80034c2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	69fa      	ldr	r2, [r7, #28]
 80034b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034c0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80034c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c4:	4613      	mov	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	4413      	add	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	4413      	add	r3, r2
 80034d4:	3304      	adds	r3, #4
 80034d6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	78db      	ldrb	r3, [r3, #3]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d108      	bne.n	80034f2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	2200      	movs	r2, #0
 80034e4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	4619      	mov	r1, r3
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f007 fc39 	bl	800ad64 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	015a      	lsls	r2, r3, #5
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	4413      	add	r3, r2
 80034fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034fe:	461a      	mov	r2, r3
 8003500:	2302      	movs	r3, #2
 8003502:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	f003 0320 	and.w	r3, r3, #32
 800350a:	2b00      	cmp	r3, #0
 800350c:	d008      	beq.n	8003520 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	015a      	lsls	r2, r3, #5
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	4413      	add	r3, r2
 8003516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800351a:	461a      	mov	r2, r3
 800351c:	2320      	movs	r3, #32
 800351e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d009      	beq.n	800353e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	015a      	lsls	r2, r3, #5
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	4413      	add	r3, r2
 8003532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003536:	461a      	mov	r2, r3
 8003538:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800353c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	3301      	adds	r3, #1
 8003542:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003546:	085b      	lsrs	r3, r3, #1
 8003548:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800354a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354c:	2b00      	cmp	r3, #0
 800354e:	f47f af62 	bne.w	8003416 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f005 f846 	bl	80085e8 <USB_ReadInterrupts>
 800355c:	4603      	mov	r3, r0
 800355e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003562:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003566:	f040 80db 	bne.w	8003720 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4618      	mov	r0, r3
 8003570:	f005 f867 	bl	8008642 <USB_ReadDevAllInEpInterrupt>
 8003574:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003576:	2300      	movs	r3, #0
 8003578:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800357a:	e0cd      	b.n	8003718 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800357c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 80c2 	beq.w	800370c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800358e:	b2d2      	uxtb	r2, r2
 8003590:	4611      	mov	r1, r2
 8003592:	4618      	mov	r0, r3
 8003594:	f005 f88d 	bl	80086b2 <USB_ReadDevInEPInterrupt>
 8003598:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d057      	beq.n	8003654 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	f003 030f 	and.w	r3, r3, #15
 80035aa:	2201      	movs	r2, #1
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	43db      	mvns	r3, r3
 80035be:	69f9      	ldr	r1, [r7, #28]
 80035c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035c4:	4013      	ands	r3, r2
 80035c6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	015a      	lsls	r2, r3, #5
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035d4:	461a      	mov	r2, r3
 80035d6:	2301      	movs	r3, #1
 80035d8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d132      	bne.n	8003648 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e6:	4613      	mov	r3, r2
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	4413      	add	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	440b      	add	r3, r1
 80035f0:	334c      	adds	r3, #76	; 0x4c
 80035f2:	6819      	ldr	r1, [r3, #0]
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f8:	4613      	mov	r3, r2
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	4413      	add	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4403      	add	r3, r0
 8003602:	3348      	adds	r3, #72	; 0x48
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4419      	add	r1, r3
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800360c:	4613      	mov	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	4413      	add	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4403      	add	r3, r0
 8003616:	334c      	adds	r3, #76	; 0x4c
 8003618:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	2b00      	cmp	r3, #0
 800361e:	d113      	bne.n	8003648 <HAL_PCD_IRQHandler+0x3a2>
 8003620:	6879      	ldr	r1, [r7, #4]
 8003622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003624:	4613      	mov	r3, r2
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	4413      	add	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	3354      	adds	r3, #84	; 0x54
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d108      	bne.n	8003648 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6818      	ldr	r0, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003640:	461a      	mov	r2, r3
 8003642:	2101      	movs	r1, #1
 8003644:	f005 f894 	bl	8008770 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364a:	b2db      	uxtb	r3, r3
 800364c:	4619      	mov	r1, r3
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f007 fb03 	bl	800ac5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	f003 0308 	and.w	r3, r3, #8
 800365a:	2b00      	cmp	r3, #0
 800365c:	d008      	beq.n	8003670 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	015a      	lsls	r2, r3, #5
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	4413      	add	r3, r2
 8003666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800366a:	461a      	mov	r2, r3
 800366c:	2308      	movs	r3, #8
 800366e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	f003 0310 	and.w	r3, r3, #16
 8003676:	2b00      	cmp	r3, #0
 8003678:	d008      	beq.n	800368c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	015a      	lsls	r2, r3, #5
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	4413      	add	r3, r2
 8003682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003686:	461a      	mov	r2, r3
 8003688:	2310      	movs	r3, #16
 800368a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003692:	2b00      	cmp	r3, #0
 8003694:	d008      	beq.n	80036a8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	015a      	lsls	r2, r3, #5
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	4413      	add	r3, r2
 800369e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036a2:	461a      	mov	r2, r3
 80036a4:	2340      	movs	r3, #64	; 0x40
 80036a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d023      	beq.n	80036fa <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80036b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036b4:	6a38      	ldr	r0, [r7, #32]
 80036b6:	f003 ff75 	bl	80075a4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80036ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036bc:	4613      	mov	r3, r2
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	4413      	add	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	3338      	adds	r3, #56	; 0x38
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	4413      	add	r3, r2
 80036ca:	3304      	adds	r3, #4
 80036cc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	78db      	ldrb	r3, [r3, #3]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d108      	bne.n	80036e8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	2200      	movs	r2, #0
 80036da:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80036dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	4619      	mov	r1, r3
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f007 fb50 	bl	800ad88 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80036e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ea:	015a      	lsls	r2, r3, #5
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036f4:	461a      	mov	r2, r3
 80036f6:	2302      	movs	r3, #2
 80036f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003700:	2b00      	cmp	r3, #0
 8003702:	d003      	beq.n	800370c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003704:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 fcdb 	bl	80040c2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370e:	3301      	adds	r3, #1
 8003710:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003714:	085b      	lsrs	r3, r3, #1
 8003716:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371a:	2b00      	cmp	r3, #0
 800371c:	f47f af2e 	bne.w	800357c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	f004 ff5f 	bl	80085e8 <USB_ReadInterrupts>
 800372a:	4603      	mov	r3, r0
 800372c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003730:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003734:	d122      	bne.n	800377c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	69fa      	ldr	r2, [r7, #28]
 8003740:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003744:	f023 0301 	bic.w	r3, r3, #1
 8003748:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003750:	2b01      	cmp	r3, #1
 8003752:	d108      	bne.n	8003766 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800375c:	2100      	movs	r1, #0
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 fec2 	bl	80044e8 <HAL_PCDEx_LPM_Callback>
 8003764:	e002      	b.n	800376c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f007 faee 	bl	800ad48 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	695a      	ldr	r2, [r3, #20]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800377a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4618      	mov	r0, r3
 8003782:	f004 ff31 	bl	80085e8 <USB_ReadInterrupts>
 8003786:	4603      	mov	r3, r0
 8003788:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800378c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003790:	d112      	bne.n	80037b8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d102      	bne.n	80037a8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f007 faaa 	bl	800acfc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695a      	ldr	r2, [r3, #20]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80037b6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4618      	mov	r0, r3
 80037be:	f004 ff13 	bl	80085e8 <USB_ReadInterrupts>
 80037c2:	4603      	mov	r3, r0
 80037c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037cc:	f040 80b7 	bne.w	800393e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	69fa      	ldr	r2, [r7, #28]
 80037da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037de:	f023 0301 	bic.w	r3, r3, #1
 80037e2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2110      	movs	r1, #16
 80037ea:	4618      	mov	r0, r3
 80037ec:	f003 feda 	bl	80075a4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037f0:	2300      	movs	r3, #0
 80037f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037f4:	e046      	b.n	8003884 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80037f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f8:	015a      	lsls	r2, r3, #5
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	4413      	add	r3, r2
 80037fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003802:	461a      	mov	r2, r3
 8003804:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003808:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800380a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800380c:	015a      	lsls	r2, r3, #5
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	4413      	add	r3, r2
 8003812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800381a:	0151      	lsls	r1, r2, #5
 800381c:	69fa      	ldr	r2, [r7, #28]
 800381e:	440a      	add	r2, r1
 8003820:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003824:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003828:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800382a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800382c:	015a      	lsls	r2, r3, #5
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	4413      	add	r3, r2
 8003832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003836:	461a      	mov	r2, r3
 8003838:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800383c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800383e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003840:	015a      	lsls	r2, r3, #5
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	4413      	add	r3, r2
 8003846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800384e:	0151      	lsls	r1, r2, #5
 8003850:	69fa      	ldr	r2, [r7, #28]
 8003852:	440a      	add	r2, r1
 8003854:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003858:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800385c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800385e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003860:	015a      	lsls	r2, r3, #5
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	4413      	add	r3, r2
 8003866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800386e:	0151      	lsls	r1, r2, #5
 8003870:	69fa      	ldr	r2, [r7, #28]
 8003872:	440a      	add	r2, r1
 8003874:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003878:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800387c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800387e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003880:	3301      	adds	r3, #1
 8003882:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800388a:	429a      	cmp	r2, r3
 800388c:	d3b3      	bcc.n	80037f6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003894:	69db      	ldr	r3, [r3, #28]
 8003896:	69fa      	ldr	r2, [r7, #28]
 8003898:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800389c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80038a0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d016      	beq.n	80038d8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038b4:	69fa      	ldr	r2, [r7, #28]
 80038b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038ba:	f043 030b 	orr.w	r3, r3, #11
 80038be:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ca:	69fa      	ldr	r2, [r7, #28]
 80038cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038d0:	f043 030b 	orr.w	r3, r3, #11
 80038d4:	6453      	str	r3, [r2, #68]	; 0x44
 80038d6:	e015      	b.n	8003904 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	69fa      	ldr	r2, [r7, #28]
 80038e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80038ea:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80038ee:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	69fa      	ldr	r2, [r7, #28]
 80038fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038fe:	f043 030b 	orr.w	r3, r3, #11
 8003902:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	69fa      	ldr	r2, [r7, #28]
 800390e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003912:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003916:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6818      	ldr	r0, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003928:	461a      	mov	r2, r3
 800392a:	f004 ff21 	bl	8008770 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	695a      	ldr	r2, [r3, #20]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800393c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f004 fe50 	bl	80085e8 <USB_ReadInterrupts>
 8003948:	4603      	mov	r3, r0
 800394a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800394e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003952:	d124      	bne.n	800399e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4618      	mov	r0, r3
 800395a:	f004 fee6 	bl	800872a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f003 fe9b 	bl	800769e <USB_GetDevSpeed>
 8003968:	4603      	mov	r3, r0
 800396a:	461a      	mov	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681c      	ldr	r4, [r3, #0]
 8003974:	f001 fa28 	bl	8004dc8 <HAL_RCC_GetHCLKFreq>
 8003978:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800397e:	b2db      	uxtb	r3, r3
 8003980:	461a      	mov	r2, r3
 8003982:	4620      	mov	r0, r4
 8003984:	f003 fb9a 	bl	80070bc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f007 f98e 	bl	800acaa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	695a      	ldr	r2, [r3, #20]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800399c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f004 fe20 	bl	80085e8 <USB_ReadInterrupts>
 80039a8:	4603      	mov	r3, r0
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b08      	cmp	r3, #8
 80039b0:	d10a      	bne.n	80039c8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f007 f96b 	bl	800ac8e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	695a      	ldr	r2, [r3, #20]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f002 0208 	and.w	r2, r2, #8
 80039c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f004 fe0b 	bl	80085e8 <USB_ReadInterrupts>
 80039d2:	4603      	mov	r3, r0
 80039d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039d8:	2b80      	cmp	r3, #128	; 0x80
 80039da:	d122      	bne.n	8003a22 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039e4:	6a3b      	ldr	r3, [r7, #32]
 80039e6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039e8:	2301      	movs	r3, #1
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24
 80039ec:	e014      	b.n	8003a18 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f2:	4613      	mov	r3, r2
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	4413      	add	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	440b      	add	r3, r1
 80039fc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d105      	bne.n	8003a12 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 fb27 	bl	8004060 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	3301      	adds	r3, #1
 8003a16:	627b      	str	r3, [r7, #36]	; 0x24
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d3e5      	bcc.n	80039ee <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f004 fdde 	bl	80085e8 <USB_ReadInterrupts>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a36:	d13b      	bne.n	8003ab0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a38:	2301      	movs	r3, #1
 8003a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a3c:	e02b      	b.n	8003a96 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a40:	015a      	lsls	r2, r3, #5
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	4413      	add	r3, r2
 8003a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a52:	4613      	mov	r3, r2
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	4413      	add	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	440b      	add	r3, r1
 8003a5c:	3340      	adds	r3, #64	; 0x40
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d115      	bne.n	8003a90 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003a64:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	da12      	bge.n	8003a90 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a6e:	4613      	mov	r3, r2
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	4413      	add	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	440b      	add	r3, r1
 8003a78:	333f      	adds	r3, #63	; 0x3f
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	4619      	mov	r1, r3
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 fae8 	bl	8004060 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a92:	3301      	adds	r3, #1
 8003a94:	627b      	str	r3, [r7, #36]	; 0x24
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d3ce      	bcc.n	8003a3e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695a      	ldr	r2, [r3, #20]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003aae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f004 fd97 	bl	80085e8 <USB_ReadInterrupts>
 8003aba:	4603      	mov	r3, r0
 8003abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ac0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ac4:	d155      	bne.n	8003b72 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aca:	e045      	b.n	8003b58 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	015a      	lsls	r2, r3, #5
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	4413      	add	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	440b      	add	r3, r1
 8003aea:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d12e      	bne.n	8003b52 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003af4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	da2b      	bge.n	8003b52 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003b06:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d121      	bne.n	8003b52 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003b0e:	6879      	ldr	r1, [r7, #4]
 8003b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b12:	4613      	mov	r3, r2
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	4413      	add	r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	440b      	add	r3, r1
 8003b1c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003b20:	2201      	movs	r2, #1
 8003b22:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003b24:	6a3b      	ldr	r3, [r7, #32]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003b30:	6a3b      	ldr	r3, [r7, #32]
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10a      	bne.n	8003b52 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	69fa      	ldr	r2, [r7, #28]
 8003b46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b4e:	6053      	str	r3, [r2, #4]
            break;
 8003b50:	e007      	b.n	8003b62 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b54:	3301      	adds	r3, #1
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d3b4      	bcc.n	8003acc <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	695a      	ldr	r2, [r3, #20]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003b70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f004 fd36 	bl	80085e8 <USB_ReadInterrupts>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b86:	d10a      	bne.n	8003b9e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f007 f90f 	bl	800adac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	695a      	ldr	r2, [r3, #20]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003b9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f004 fd20 	bl	80085e8 <USB_ReadInterrupts>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	f003 0304 	and.w	r3, r3, #4
 8003bae:	2b04      	cmp	r3, #4
 8003bb0:	d115      	bne.n	8003bde <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d002      	beq.n	8003bca <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f007 f8ff 	bl	800adc8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6859      	ldr	r1, [r3, #4]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	605a      	str	r2, [r3, #4]
 8003bda:	e000      	b.n	8003bde <HAL_PCD_IRQHandler+0x938>
      return;
 8003bdc:	bf00      	nop
    }
  }
}
 8003bde:	3734      	adds	r7, #52	; 0x34
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd90      	pop	{r4, r7, pc}

08003be4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	460b      	mov	r3, r1
 8003bee:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d101      	bne.n	8003bfe <HAL_PCD_SetAddress+0x1a>
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	e013      	b.n	8003c26 <HAL_PCD_SetAddress+0x42>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	78fa      	ldrb	r2, [r7, #3]
 8003c0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	78fa      	ldrb	r2, [r7, #3]
 8003c14:	4611      	mov	r1, r2
 8003c16:	4618      	mov	r0, r3
 8003c18:	f004 fc7e 	bl	8008518 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b084      	sub	sp, #16
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
 8003c36:	4608      	mov	r0, r1
 8003c38:	4611      	mov	r1, r2
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	70fb      	strb	r3, [r7, #3]
 8003c40:	460b      	mov	r3, r1
 8003c42:	803b      	strh	r3, [r7, #0]
 8003c44:	4613      	mov	r3, r2
 8003c46:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	da0f      	bge.n	8003c74 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c54:	78fb      	ldrb	r3, [r7, #3]
 8003c56:	f003 020f 	and.w	r2, r3, #15
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	4413      	add	r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	3338      	adds	r3, #56	; 0x38
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	4413      	add	r3, r2
 8003c68:	3304      	adds	r3, #4
 8003c6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	705a      	strb	r2, [r3, #1]
 8003c72:	e00f      	b.n	8003c94 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c74:	78fb      	ldrb	r3, [r7, #3]
 8003c76:	f003 020f 	and.w	r2, r3, #15
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	4413      	add	r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	4413      	add	r3, r2
 8003c8a:	3304      	adds	r3, #4
 8003c8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003c94:	78fb      	ldrb	r3, [r7, #3]
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	b2da      	uxtb	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003ca0:	883a      	ldrh	r2, [r7, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	78ba      	ldrb	r2, [r7, #2]
 8003caa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	785b      	ldrb	r3, [r3, #1]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d004      	beq.n	8003cbe <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003cbe:	78bb      	ldrb	r3, [r7, #2]
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d102      	bne.n	8003cca <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d101      	bne.n	8003cd8 <HAL_PCD_EP_Open+0xaa>
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	e00e      	b.n	8003cf6 <HAL_PCD_EP_Open+0xc8>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68f9      	ldr	r1, [r7, #12]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f003 fcfe 	bl	80076e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003cf4:	7afb      	ldrb	r3, [r7, #11]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b084      	sub	sp, #16
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
 8003d06:	460b      	mov	r3, r1
 8003d08:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	da0f      	bge.n	8003d32 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d12:	78fb      	ldrb	r3, [r7, #3]
 8003d14:	f003 020f 	and.w	r2, r3, #15
 8003d18:	4613      	mov	r3, r2
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	4413      	add	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	3338      	adds	r3, #56	; 0x38
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	4413      	add	r3, r2
 8003d26:	3304      	adds	r3, #4
 8003d28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	705a      	strb	r2, [r3, #1]
 8003d30:	e00f      	b.n	8003d52 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d32:	78fb      	ldrb	r3, [r7, #3]
 8003d34:	f003 020f 	and.w	r2, r3, #15
 8003d38:	4613      	mov	r3, r2
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	4413      	add	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	4413      	add	r3, r2
 8003d48:	3304      	adds	r3, #4
 8003d4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003d52:	78fb      	ldrb	r3, [r7, #3]
 8003d54:	f003 030f 	and.w	r3, r3, #15
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_PCD_EP_Close+0x6e>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e00e      	b.n	8003d8a <HAL_PCD_EP_Close+0x8c>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68f9      	ldr	r1, [r7, #12]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f003 fd3c 	bl	80077f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b086      	sub	sp, #24
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	60f8      	str	r0, [r7, #12]
 8003d9a:	607a      	str	r2, [r7, #4]
 8003d9c:	603b      	str	r3, [r7, #0]
 8003d9e:	460b      	mov	r3, r1
 8003da0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003da2:	7afb      	ldrb	r3, [r7, #11]
 8003da4:	f003 020f 	and.w	r2, r3, #15
 8003da8:	4613      	mov	r3, r2
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	4413      	add	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	4413      	add	r3, r2
 8003db8:	3304      	adds	r3, #4
 8003dba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dd4:	7afb      	ldrb	r3, [r7, #11]
 8003dd6:	f003 030f 	and.w	r3, r3, #15
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d102      	bne.n	8003dee <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003dee:	7afb      	ldrb	r3, [r7, #11]
 8003df0:	f003 030f 	and.w	r3, r3, #15
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d109      	bne.n	8003e0c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6818      	ldr	r0, [r3, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	461a      	mov	r2, r3
 8003e04:	6979      	ldr	r1, [r7, #20]
 8003e06:	f004 f81b 	bl	8007e40 <USB_EP0StartXfer>
 8003e0a:	e008      	b.n	8003e1e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6818      	ldr	r0, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	461a      	mov	r2, r3
 8003e18:	6979      	ldr	r1, [r7, #20]
 8003e1a:	f003 fdc9 	bl	80079b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3718      	adds	r7, #24
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	460b      	mov	r3, r1
 8003e32:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003e34:	78fb      	ldrb	r3, [r7, #3]
 8003e36:	f003 020f 	and.w	r2, r3, #15
 8003e3a:	6879      	ldr	r1, [r7, #4]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	4413      	add	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	440b      	add	r3, r1
 8003e46:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003e4a:	681b      	ldr	r3, [r3, #0]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	607a      	str	r2, [r7, #4]
 8003e62:	603b      	str	r3, [r7, #0]
 8003e64:	460b      	mov	r3, r1
 8003e66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e68:	7afb      	ldrb	r3, [r7, #11]
 8003e6a:	f003 020f 	and.w	r2, r3, #15
 8003e6e:	4613      	mov	r3, r2
 8003e70:	00db      	lsls	r3, r3, #3
 8003e72:	4413      	add	r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	3338      	adds	r3, #56	; 0x38
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	2201      	movs	r2, #1
 8003e96:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e98:	7afb      	ldrb	r3, [r7, #11]
 8003e9a:	f003 030f 	and.w	r3, r3, #15
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d102      	bne.n	8003eb2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003eb2:	7afb      	ldrb	r3, [r7, #11]
 8003eb4:	f003 030f 	and.w	r3, r3, #15
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d109      	bne.n	8003ed0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6818      	ldr	r0, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	6979      	ldr	r1, [r7, #20]
 8003eca:	f003 ffb9 	bl	8007e40 <USB_EP0StartXfer>
 8003ece:	e008      	b.n	8003ee2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6818      	ldr	r0, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	461a      	mov	r2, r3
 8003edc:	6979      	ldr	r1, [r7, #20]
 8003ede:	f003 fd67 	bl	80079b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3718      	adds	r7, #24
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003ef8:	78fb      	ldrb	r3, [r7, #3]
 8003efa:	f003 020f 	and.w	r2, r3, #15
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d901      	bls.n	8003f0a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e050      	b.n	8003fac <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	da0f      	bge.n	8003f32 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f12:	78fb      	ldrb	r3, [r7, #3]
 8003f14:	f003 020f 	and.w	r2, r3, #15
 8003f18:	4613      	mov	r3, r2
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	4413      	add	r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	3338      	adds	r3, #56	; 0x38
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	4413      	add	r3, r2
 8003f26:	3304      	adds	r3, #4
 8003f28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	705a      	strb	r2, [r3, #1]
 8003f30:	e00d      	b.n	8003f4e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f32:	78fa      	ldrb	r2, [r7, #3]
 8003f34:	4613      	mov	r3, r2
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	4413      	add	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	4413      	add	r3, r2
 8003f44:	3304      	adds	r3, #4
 8003f46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2201      	movs	r2, #1
 8003f52:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f54:	78fb      	ldrb	r3, [r7, #3]
 8003f56:	f003 030f 	and.w	r3, r3, #15
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d101      	bne.n	8003f6e <HAL_PCD_EP_SetStall+0x82>
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	e01e      	b.n	8003fac <HAL_PCD_EP_SetStall+0xc0>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68f9      	ldr	r1, [r7, #12]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f004 f9f7 	bl	8008370 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f82:	78fb      	ldrb	r3, [r7, #3]
 8003f84:	f003 030f 	and.w	r3, r3, #15
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10a      	bne.n	8003fa2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6818      	ldr	r0, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	b2d9      	uxtb	r1, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	f004 fbe7 	bl	8008770 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003fc0:	78fb      	ldrb	r3, [r7, #3]
 8003fc2:	f003 020f 	and.w	r2, r3, #15
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d901      	bls.n	8003fd2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e042      	b.n	8004058 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	da0f      	bge.n	8003ffa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fda:	78fb      	ldrb	r3, [r7, #3]
 8003fdc:	f003 020f 	and.w	r2, r3, #15
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	4413      	add	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	3338      	adds	r3, #56	; 0x38
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	4413      	add	r3, r2
 8003fee:	3304      	adds	r3, #4
 8003ff0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	705a      	strb	r2, [r3, #1]
 8003ff8:	e00f      	b.n	800401a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ffa:	78fb      	ldrb	r3, [r7, #3]
 8003ffc:	f003 020f 	and.w	r2, r3, #15
 8004000:	4613      	mov	r3, r2
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	4413      	add	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	4413      	add	r3, r2
 8004010:	3304      	adds	r3, #4
 8004012:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004020:	78fb      	ldrb	r3, [r7, #3]
 8004022:	f003 030f 	and.w	r3, r3, #15
 8004026:	b2da      	uxtb	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004032:	2b01      	cmp	r3, #1
 8004034:	d101      	bne.n	800403a <HAL_PCD_EP_ClrStall+0x86>
 8004036:	2302      	movs	r3, #2
 8004038:	e00e      	b.n	8004058 <HAL_PCD_EP_ClrStall+0xa4>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68f9      	ldr	r1, [r7, #12]
 8004048:	4618      	mov	r0, r3
 800404a:	f004 f9ff 	bl	800844c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	460b      	mov	r3, r1
 800406a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800406c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004070:	2b00      	cmp	r3, #0
 8004072:	da0c      	bge.n	800408e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004074:	78fb      	ldrb	r3, [r7, #3]
 8004076:	f003 020f 	and.w	r2, r3, #15
 800407a:	4613      	mov	r3, r2
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	4413      	add	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	3338      	adds	r3, #56	; 0x38
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	4413      	add	r3, r2
 8004088:	3304      	adds	r3, #4
 800408a:	60fb      	str	r3, [r7, #12]
 800408c:	e00c      	b.n	80040a8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800408e:	78fb      	ldrb	r3, [r7, #3]
 8004090:	f003 020f 	and.w	r2, r3, #15
 8004094:	4613      	mov	r3, r2
 8004096:	00db      	lsls	r3, r3, #3
 8004098:	4413      	add	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	4413      	add	r3, r2
 80040a4:	3304      	adds	r3, #4
 80040a6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68f9      	ldr	r1, [r7, #12]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f004 f81e 	bl	80080f0 <USB_EPStopXfer>
 80040b4:	4603      	mov	r3, r0
 80040b6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80040b8:	7afb      	ldrb	r3, [r7, #11]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b08a      	sub	sp, #40	; 0x28
 80040c6:	af02      	add	r7, sp, #8
 80040c8:	6078      	str	r0, [r7, #4]
 80040ca:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	4613      	mov	r3, r2
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	4413      	add	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	3338      	adds	r3, #56	; 0x38
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	4413      	add	r3, r2
 80040e6:	3304      	adds	r3, #4
 80040e8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6a1a      	ldr	r2, [r3, #32]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d901      	bls.n	80040fa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e06c      	b.n	80041d4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	699a      	ldr	r2, [r3, #24]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	69fa      	ldr	r2, [r7, #28]
 800410c:	429a      	cmp	r2, r3
 800410e:	d902      	bls.n	8004116 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	3303      	adds	r3, #3
 800411a:	089b      	lsrs	r3, r3, #2
 800411c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800411e:	e02b      	b.n	8004178 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	699a      	ldr	r2, [r3, #24]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6a1b      	ldr	r3, [r3, #32]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	69fa      	ldr	r2, [r7, #28]
 8004132:	429a      	cmp	r2, r3
 8004134:	d902      	bls.n	800413c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	3303      	adds	r3, #3
 8004140:	089b      	lsrs	r3, r3, #2
 8004142:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6919      	ldr	r1, [r3, #16]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	b2da      	uxtb	r2, r3
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004154:	b2db      	uxtb	r3, r3
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	4603      	mov	r3, r0
 800415a:	6978      	ldr	r0, [r7, #20]
 800415c:	f004 f872 	bl	8008244 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	691a      	ldr	r2, [r3, #16]
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	441a      	add	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6a1a      	ldr	r2, [r3, #32]
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	441a      	add	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	015a      	lsls	r2, r3, #5
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	4413      	add	r3, r2
 8004180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	b29b      	uxth	r3, r3
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	429a      	cmp	r2, r3
 800418c:	d809      	bhi.n	80041a2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6a1a      	ldr	r2, [r3, #32]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004196:	429a      	cmp	r2, r3
 8004198:	d203      	bcs.n	80041a2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1be      	bne.n	8004120 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	699a      	ldr	r2, [r3, #24]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d811      	bhi.n	80041d2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	f003 030f 	and.w	r3, r3, #15
 80041b4:	2201      	movs	r2, #1
 80041b6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ba:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	43db      	mvns	r3, r3
 80041c8:	6939      	ldr	r1, [r7, #16]
 80041ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041ce:	4013      	ands	r3, r2
 80041d0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3720      	adds	r7, #32
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b088      	sub	sp, #32
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	333c      	adds	r3, #60	; 0x3c
 80041f4:	3304      	adds	r3, #4
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	015a      	lsls	r2, r3, #5
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	4413      	add	r3, r2
 8004202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d17b      	bne.n	800430a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	f003 0308 	and.w	r3, r3, #8
 8004218:	2b00      	cmp	r3, #0
 800421a:	d015      	beq.n	8004248 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	4a61      	ldr	r2, [pc, #388]	; (80043a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004220:	4293      	cmp	r3, r2
 8004222:	f240 80b9 	bls.w	8004398 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 80b3 	beq.w	8004398 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	015a      	lsls	r2, r3, #5
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	4413      	add	r3, r2
 800423a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800423e:	461a      	mov	r2, r3
 8004240:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004244:	6093      	str	r3, [r2, #8]
 8004246:	e0a7      	b.n	8004398 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	f003 0320 	and.w	r3, r3, #32
 800424e:	2b00      	cmp	r3, #0
 8004250:	d009      	beq.n	8004266 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	015a      	lsls	r2, r3, #5
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	4413      	add	r3, r2
 800425a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800425e:	461a      	mov	r2, r3
 8004260:	2320      	movs	r3, #32
 8004262:	6093      	str	r3, [r2, #8]
 8004264:	e098      	b.n	8004398 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800426c:	2b00      	cmp	r3, #0
 800426e:	f040 8093 	bne.w	8004398 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	4a4b      	ldr	r2, [pc, #300]	; (80043a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d90f      	bls.n	800429a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00a      	beq.n	800429a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	015a      	lsls	r2, r3, #5
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	4413      	add	r3, r2
 800428c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004290:	461a      	mov	r2, r3
 8004292:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004296:	6093      	str	r3, [r2, #8]
 8004298:	e07e      	b.n	8004398 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800429a:	683a      	ldr	r2, [r7, #0]
 800429c:	4613      	mov	r3, r2
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	4413      	add	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	4413      	add	r3, r2
 80042ac:	3304      	adds	r3, #4
 80042ae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	69da      	ldr	r2, [r3, #28]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	0159      	lsls	r1, r3, #5
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	440b      	add	r3, r1
 80042bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042c6:	1ad2      	subs	r2, r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d114      	bne.n	80042fc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d109      	bne.n	80042ee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6818      	ldr	r0, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80042e4:	461a      	mov	r2, r3
 80042e6:	2101      	movs	r1, #1
 80042e8:	f004 fa42 	bl	8008770 <USB_EP0_OutStart>
 80042ec:	e006      	b.n	80042fc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	691a      	ldr	r2, [r3, #16]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	441a      	add	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	4619      	mov	r1, r3
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f006 fc8e 	bl	800ac24 <HAL_PCD_DataOutStageCallback>
 8004308:	e046      	b.n	8004398 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	4a26      	ldr	r2, [pc, #152]	; (80043a8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d124      	bne.n	800435c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00a      	beq.n	8004332 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	015a      	lsls	r2, r3, #5
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	4413      	add	r3, r2
 8004324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004328:	461a      	mov	r2, r3
 800432a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800432e:	6093      	str	r3, [r2, #8]
 8004330:	e032      	b.n	8004398 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	f003 0320 	and.w	r3, r3, #32
 8004338:	2b00      	cmp	r3, #0
 800433a:	d008      	beq.n	800434e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	015a      	lsls	r2, r3, #5
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	4413      	add	r3, r2
 8004344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004348:	461a      	mov	r2, r3
 800434a:	2320      	movs	r3, #32
 800434c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	b2db      	uxtb	r3, r3
 8004352:	4619      	mov	r1, r3
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f006 fc65 	bl	800ac24 <HAL_PCD_DataOutStageCallback>
 800435a:	e01d      	b.n	8004398 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d114      	bne.n	800438c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004362:	6879      	ldr	r1, [r7, #4]
 8004364:	683a      	ldr	r2, [r7, #0]
 8004366:	4613      	mov	r3, r2
 8004368:	00db      	lsls	r3, r3, #3
 800436a:	4413      	add	r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	440b      	add	r3, r1
 8004370:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d108      	bne.n	800438c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6818      	ldr	r0, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004384:	461a      	mov	r2, r3
 8004386:	2100      	movs	r1, #0
 8004388:	f004 f9f2 	bl	8008770 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	b2db      	uxtb	r3, r3
 8004390:	4619      	mov	r1, r3
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f006 fc46 	bl	800ac24 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3720      	adds	r7, #32
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	4f54300a 	.word	0x4f54300a
 80043a8:	4f54310a 	.word	0x4f54310a

080043ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	333c      	adds	r3, #60	; 0x3c
 80043c4:	3304      	adds	r3, #4
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	015a      	lsls	r2, r3, #5
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	4413      	add	r3, r2
 80043d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	4a15      	ldr	r2, [pc, #84]	; (8004434 <PCD_EP_OutSetupPacket_int+0x88>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d90e      	bls.n	8004400 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d009      	beq.n	8004400 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	015a      	lsls	r2, r3, #5
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	4413      	add	r3, r2
 80043f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f8:	461a      	mov	r2, r3
 80043fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f006 fbfd 	bl	800ac00 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	4a0a      	ldr	r2, [pc, #40]	; (8004434 <PCD_EP_OutSetupPacket_int+0x88>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d90c      	bls.n	8004428 <PCD_EP_OutSetupPacket_int+0x7c>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d108      	bne.n	8004428 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6818      	ldr	r0, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004420:	461a      	mov	r2, r3
 8004422:	2101      	movs	r1, #1
 8004424:	f004 f9a4 	bl	8008770 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3718      	adds	r7, #24
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	4f54300a 	.word	0x4f54300a

08004438 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	460b      	mov	r3, r1
 8004442:	70fb      	strb	r3, [r7, #3]
 8004444:	4613      	mov	r3, r2
 8004446:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004450:	78fb      	ldrb	r3, [r7, #3]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d107      	bne.n	8004466 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004456:	883b      	ldrh	r3, [r7, #0]
 8004458:	0419      	lsls	r1, r3, #16
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	430a      	orrs	r2, r1
 8004462:	629a      	str	r2, [r3, #40]	; 0x28
 8004464:	e028      	b.n	80044b8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446c:	0c1b      	lsrs	r3, r3, #16
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	4413      	add	r3, r2
 8004472:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004474:	2300      	movs	r3, #0
 8004476:	73fb      	strb	r3, [r7, #15]
 8004478:	e00d      	b.n	8004496 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	7bfb      	ldrb	r3, [r7, #15]
 8004480:	3340      	adds	r3, #64	; 0x40
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	4413      	add	r3, r2
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	0c1b      	lsrs	r3, r3, #16
 800448a:	68ba      	ldr	r2, [r7, #8]
 800448c:	4413      	add	r3, r2
 800448e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004490:	7bfb      	ldrb	r3, [r7, #15]
 8004492:	3301      	adds	r3, #1
 8004494:	73fb      	strb	r3, [r7, #15]
 8004496:	7bfa      	ldrb	r2, [r7, #15]
 8004498:	78fb      	ldrb	r3, [r7, #3]
 800449a:	3b01      	subs	r3, #1
 800449c:	429a      	cmp	r2, r3
 800449e:	d3ec      	bcc.n	800447a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80044a0:	883b      	ldrh	r3, [r7, #0]
 80044a2:	0418      	lsls	r0, r3, #16
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6819      	ldr	r1, [r3, #0]
 80044a8:	78fb      	ldrb	r3, [r7, #3]
 80044aa:	3b01      	subs	r3, #1
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	4302      	orrs	r2, r0
 80044b0:	3340      	adds	r3, #64	; 0x40
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	440b      	add	r3, r1
 80044b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b083      	sub	sp, #12
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
 80044ce:	460b      	mov	r3, r1
 80044d0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	887a      	ldrh	r2, [r7, #2]
 80044d8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	460b      	mov	r3, r1
 80044f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e267      	b.n	80049e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	d075      	beq.n	800460a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800451e:	4b88      	ldr	r3, [pc, #544]	; (8004740 <HAL_RCC_OscConfig+0x240>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f003 030c 	and.w	r3, r3, #12
 8004526:	2b04      	cmp	r3, #4
 8004528:	d00c      	beq.n	8004544 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800452a:	4b85      	ldr	r3, [pc, #532]	; (8004740 <HAL_RCC_OscConfig+0x240>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004532:	2b08      	cmp	r3, #8
 8004534:	d112      	bne.n	800455c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004536:	4b82      	ldr	r3, [pc, #520]	; (8004740 <HAL_RCC_OscConfig+0x240>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800453e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004542:	d10b      	bne.n	800455c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004544:	4b7e      	ldr	r3, [pc, #504]	; (8004740 <HAL_RCC_OscConfig+0x240>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d05b      	beq.n	8004608 <HAL_RCC_OscConfig+0x108>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d157      	bne.n	8004608 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e242      	b.n	80049e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004564:	d106      	bne.n	8004574 <HAL_RCC_OscConfig+0x74>
 8004566:	4b76      	ldr	r3, [pc, #472]	; (8004740 <HAL_RCC_OscConfig+0x240>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a75      	ldr	r2, [pc, #468]	; (8004740 <HAL_RCC_OscConfig+0x240>)
 800456c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004570:	6013      	str	r3, [r2, #0]
 8004572:	e01d      	b.n	80045b0 <HAL_RCC_OscConfig+0xb0>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800457c:	d10c      	bne.n	8004598 <HAL_RCC_OscConfig+0x98>
 800457e:	4b70      	ldr	r3, [pc, #448]	; (8004740 <HAL_RCC_OscConfig+0x240>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a6f      	ldr	r2, [pc, #444]	; (8004740 <HAL_RCC_OscConfig+0x240>)
 8004584:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004588:	6013      	str	r3, [r2, #0]
 800458a:	4b6d      	ldr	r3, [pc, #436]	; (8004740 <HAL_RCC_OscConfig+0x240>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a6c      	ldr	r2, [pc, #432]	; (8004740 <HAL_RCC_OscConfig+0x240>)
 8004590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	e00b      	b.n	80045b0 <HAL_RCC_OscConfig+0xb0>
 8004598:	4b69      	ldr	r3, [pc, #420]	; (8004740 <HAL_RCC_OscConfig+0x240>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a68      	ldr	r2, [pc, #416]	; (8004740 <HAL_RCC_OscConfig+0x240>)
 800459e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045a2:	6013      	str	r3, [r2, #0]
 80045a4:	4b66      	ldr	r3, [pc, #408]	; (8004740 <HAL_RCC_OscConfig+0x240>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a65      	ldr	r2, [pc, #404]	; (8004740 <HAL_RCC_OscConfig+0x240>)
 80045aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d013      	beq.n	80045e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b8:	f7fd fa1a 	bl	80019f0 <HAL_GetTick>
 80045bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045be:	e008      	b.n	80045d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045c0:	f7fd fa16 	bl	80019f0 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b64      	cmp	r3, #100	; 0x64
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e207      	b.n	80049e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045d2:	4b5b      	ldr	r3, [pc, #364]	; (8004740 <HAL_RCC_OscConfig+0x240>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d0f0      	beq.n	80045c0 <HAL_RCC_OscConfig+0xc0>
 80045de:	e014      	b.n	800460a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e0:	f7fd fa06 	bl	80019f0 <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045e6:	e008      	b.n	80045fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045e8:	f7fd fa02 	bl	80019f0 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b64      	cmp	r3, #100	; 0x64
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e1f3      	b.n	80049e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045fa:	4b51      	ldr	r3, [pc, #324]	; (8004740 <HAL_RCC_OscConfig+0x240>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1f0      	bne.n	80045e8 <HAL_RCC_OscConfig+0xe8>
 8004606:	e000      	b.n	800460a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d063      	beq.n	80046de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004616:	4b4a      	ldr	r3, [pc, #296]	; (8004740 <HAL_RCC_OscConfig+0x240>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f003 030c 	and.w	r3, r3, #12
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00b      	beq.n	800463a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004622:	4b47      	ldr	r3, [pc, #284]	; (8004740 <HAL_RCC_OscConfig+0x240>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800462a:	2b08      	cmp	r3, #8
 800462c:	d11c      	bne.n	8004668 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800462e:	4b44      	ldr	r3, [pc, #272]	; (8004740 <HAL_RCC_OscConfig+0x240>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d116      	bne.n	8004668 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800463a:	4b41      	ldr	r3, [pc, #260]	; (8004740 <HAL_RCC_OscConfig+0x240>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b00      	cmp	r3, #0
 8004644:	d005      	beq.n	8004652 <HAL_RCC_OscConfig+0x152>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d001      	beq.n	8004652 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e1c7      	b.n	80049e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004652:	4b3b      	ldr	r3, [pc, #236]	; (8004740 <HAL_RCC_OscConfig+0x240>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	4937      	ldr	r1, [pc, #220]	; (8004740 <HAL_RCC_OscConfig+0x240>)
 8004662:	4313      	orrs	r3, r2
 8004664:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004666:	e03a      	b.n	80046de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d020      	beq.n	80046b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004670:	4b34      	ldr	r3, [pc, #208]	; (8004744 <HAL_RCC_OscConfig+0x244>)
 8004672:	2201      	movs	r2, #1
 8004674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004676:	f7fd f9bb 	bl	80019f0 <HAL_GetTick>
 800467a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800467c:	e008      	b.n	8004690 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800467e:	f7fd f9b7 	bl	80019f0 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e1a8      	b.n	80049e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004690:	4b2b      	ldr	r3, [pc, #172]	; (8004740 <HAL_RCC_OscConfig+0x240>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0f0      	beq.n	800467e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800469c:	4b28      	ldr	r3, [pc, #160]	; (8004740 <HAL_RCC_OscConfig+0x240>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	00db      	lsls	r3, r3, #3
 80046aa:	4925      	ldr	r1, [pc, #148]	; (8004740 <HAL_RCC_OscConfig+0x240>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	600b      	str	r3, [r1, #0]
 80046b0:	e015      	b.n	80046de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046b2:	4b24      	ldr	r3, [pc, #144]	; (8004744 <HAL_RCC_OscConfig+0x244>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b8:	f7fd f99a 	bl	80019f0 <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046c0:	f7fd f996 	bl	80019f0 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e187      	b.n	80049e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046d2:	4b1b      	ldr	r3, [pc, #108]	; (8004740 <HAL_RCC_OscConfig+0x240>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1f0      	bne.n	80046c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0308 	and.w	r3, r3, #8
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d036      	beq.n	8004758 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d016      	beq.n	8004720 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046f2:	4b15      	ldr	r3, [pc, #84]	; (8004748 <HAL_RCC_OscConfig+0x248>)
 80046f4:	2201      	movs	r2, #1
 80046f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f8:	f7fd f97a 	bl	80019f0 <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004700:	f7fd f976 	bl	80019f0 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e167      	b.n	80049e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004712:	4b0b      	ldr	r3, [pc, #44]	; (8004740 <HAL_RCC_OscConfig+0x240>)
 8004714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d0f0      	beq.n	8004700 <HAL_RCC_OscConfig+0x200>
 800471e:	e01b      	b.n	8004758 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004720:	4b09      	ldr	r3, [pc, #36]	; (8004748 <HAL_RCC_OscConfig+0x248>)
 8004722:	2200      	movs	r2, #0
 8004724:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004726:	f7fd f963 	bl	80019f0 <HAL_GetTick>
 800472a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800472c:	e00e      	b.n	800474c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800472e:	f7fd f95f 	bl	80019f0 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b02      	cmp	r3, #2
 800473a:	d907      	bls.n	800474c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e150      	b.n	80049e2 <HAL_RCC_OscConfig+0x4e2>
 8004740:	40023800 	.word	0x40023800
 8004744:	42470000 	.word	0x42470000
 8004748:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800474c:	4b88      	ldr	r3, [pc, #544]	; (8004970 <HAL_RCC_OscConfig+0x470>)
 800474e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1ea      	bne.n	800472e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0304 	and.w	r3, r3, #4
 8004760:	2b00      	cmp	r3, #0
 8004762:	f000 8097 	beq.w	8004894 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004766:	2300      	movs	r3, #0
 8004768:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800476a:	4b81      	ldr	r3, [pc, #516]	; (8004970 <HAL_RCC_OscConfig+0x470>)
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10f      	bne.n	8004796 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004776:	2300      	movs	r3, #0
 8004778:	60bb      	str	r3, [r7, #8]
 800477a:	4b7d      	ldr	r3, [pc, #500]	; (8004970 <HAL_RCC_OscConfig+0x470>)
 800477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477e:	4a7c      	ldr	r2, [pc, #496]	; (8004970 <HAL_RCC_OscConfig+0x470>)
 8004780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004784:	6413      	str	r3, [r2, #64]	; 0x40
 8004786:	4b7a      	ldr	r3, [pc, #488]	; (8004970 <HAL_RCC_OscConfig+0x470>)
 8004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800478e:	60bb      	str	r3, [r7, #8]
 8004790:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004792:	2301      	movs	r3, #1
 8004794:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004796:	4b77      	ldr	r3, [pc, #476]	; (8004974 <HAL_RCC_OscConfig+0x474>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d118      	bne.n	80047d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047a2:	4b74      	ldr	r3, [pc, #464]	; (8004974 <HAL_RCC_OscConfig+0x474>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a73      	ldr	r2, [pc, #460]	; (8004974 <HAL_RCC_OscConfig+0x474>)
 80047a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047ae:	f7fd f91f 	bl	80019f0 <HAL_GetTick>
 80047b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047b4:	e008      	b.n	80047c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047b6:	f7fd f91b 	bl	80019f0 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d901      	bls.n	80047c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e10c      	b.n	80049e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c8:	4b6a      	ldr	r3, [pc, #424]	; (8004974 <HAL_RCC_OscConfig+0x474>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d0f0      	beq.n	80047b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d106      	bne.n	80047ea <HAL_RCC_OscConfig+0x2ea>
 80047dc:	4b64      	ldr	r3, [pc, #400]	; (8004970 <HAL_RCC_OscConfig+0x470>)
 80047de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e0:	4a63      	ldr	r2, [pc, #396]	; (8004970 <HAL_RCC_OscConfig+0x470>)
 80047e2:	f043 0301 	orr.w	r3, r3, #1
 80047e6:	6713      	str	r3, [r2, #112]	; 0x70
 80047e8:	e01c      	b.n	8004824 <HAL_RCC_OscConfig+0x324>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	2b05      	cmp	r3, #5
 80047f0:	d10c      	bne.n	800480c <HAL_RCC_OscConfig+0x30c>
 80047f2:	4b5f      	ldr	r3, [pc, #380]	; (8004970 <HAL_RCC_OscConfig+0x470>)
 80047f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f6:	4a5e      	ldr	r2, [pc, #376]	; (8004970 <HAL_RCC_OscConfig+0x470>)
 80047f8:	f043 0304 	orr.w	r3, r3, #4
 80047fc:	6713      	str	r3, [r2, #112]	; 0x70
 80047fe:	4b5c      	ldr	r3, [pc, #368]	; (8004970 <HAL_RCC_OscConfig+0x470>)
 8004800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004802:	4a5b      	ldr	r2, [pc, #364]	; (8004970 <HAL_RCC_OscConfig+0x470>)
 8004804:	f043 0301 	orr.w	r3, r3, #1
 8004808:	6713      	str	r3, [r2, #112]	; 0x70
 800480a:	e00b      	b.n	8004824 <HAL_RCC_OscConfig+0x324>
 800480c:	4b58      	ldr	r3, [pc, #352]	; (8004970 <HAL_RCC_OscConfig+0x470>)
 800480e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004810:	4a57      	ldr	r2, [pc, #348]	; (8004970 <HAL_RCC_OscConfig+0x470>)
 8004812:	f023 0301 	bic.w	r3, r3, #1
 8004816:	6713      	str	r3, [r2, #112]	; 0x70
 8004818:	4b55      	ldr	r3, [pc, #340]	; (8004970 <HAL_RCC_OscConfig+0x470>)
 800481a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481c:	4a54      	ldr	r2, [pc, #336]	; (8004970 <HAL_RCC_OscConfig+0x470>)
 800481e:	f023 0304 	bic.w	r3, r3, #4
 8004822:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d015      	beq.n	8004858 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800482c:	f7fd f8e0 	bl	80019f0 <HAL_GetTick>
 8004830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004832:	e00a      	b.n	800484a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004834:	f7fd f8dc 	bl	80019f0 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004842:	4293      	cmp	r3, r2
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e0cb      	b.n	80049e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800484a:	4b49      	ldr	r3, [pc, #292]	; (8004970 <HAL_RCC_OscConfig+0x470>)
 800484c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d0ee      	beq.n	8004834 <HAL_RCC_OscConfig+0x334>
 8004856:	e014      	b.n	8004882 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004858:	f7fd f8ca 	bl	80019f0 <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800485e:	e00a      	b.n	8004876 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004860:	f7fd f8c6 	bl	80019f0 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	f241 3288 	movw	r2, #5000	; 0x1388
 800486e:	4293      	cmp	r3, r2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e0b5      	b.n	80049e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004876:	4b3e      	ldr	r3, [pc, #248]	; (8004970 <HAL_RCC_OscConfig+0x470>)
 8004878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1ee      	bne.n	8004860 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004882:	7dfb      	ldrb	r3, [r7, #23]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d105      	bne.n	8004894 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004888:	4b39      	ldr	r3, [pc, #228]	; (8004970 <HAL_RCC_OscConfig+0x470>)
 800488a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488c:	4a38      	ldr	r2, [pc, #224]	; (8004970 <HAL_RCC_OscConfig+0x470>)
 800488e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004892:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	2b00      	cmp	r3, #0
 800489a:	f000 80a1 	beq.w	80049e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800489e:	4b34      	ldr	r3, [pc, #208]	; (8004970 <HAL_RCC_OscConfig+0x470>)
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f003 030c 	and.w	r3, r3, #12
 80048a6:	2b08      	cmp	r3, #8
 80048a8:	d05c      	beq.n	8004964 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d141      	bne.n	8004936 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048b2:	4b31      	ldr	r3, [pc, #196]	; (8004978 <HAL_RCC_OscConfig+0x478>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b8:	f7fd f89a 	bl	80019f0 <HAL_GetTick>
 80048bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048be:	e008      	b.n	80048d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048c0:	f7fd f896 	bl	80019f0 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e087      	b.n	80049e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048d2:	4b27      	ldr	r3, [pc, #156]	; (8004970 <HAL_RCC_OscConfig+0x470>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1f0      	bne.n	80048c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	69da      	ldr	r2, [r3, #28]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	431a      	orrs	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	019b      	lsls	r3, r3, #6
 80048ee:	431a      	orrs	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f4:	085b      	lsrs	r3, r3, #1
 80048f6:	3b01      	subs	r3, #1
 80048f8:	041b      	lsls	r3, r3, #16
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004900:	061b      	lsls	r3, r3, #24
 8004902:	491b      	ldr	r1, [pc, #108]	; (8004970 <HAL_RCC_OscConfig+0x470>)
 8004904:	4313      	orrs	r3, r2
 8004906:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004908:	4b1b      	ldr	r3, [pc, #108]	; (8004978 <HAL_RCC_OscConfig+0x478>)
 800490a:	2201      	movs	r2, #1
 800490c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800490e:	f7fd f86f 	bl	80019f0 <HAL_GetTick>
 8004912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004914:	e008      	b.n	8004928 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004916:	f7fd f86b 	bl	80019f0 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	2b02      	cmp	r3, #2
 8004922:	d901      	bls.n	8004928 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e05c      	b.n	80049e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004928:	4b11      	ldr	r3, [pc, #68]	; (8004970 <HAL_RCC_OscConfig+0x470>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d0f0      	beq.n	8004916 <HAL_RCC_OscConfig+0x416>
 8004934:	e054      	b.n	80049e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004936:	4b10      	ldr	r3, [pc, #64]	; (8004978 <HAL_RCC_OscConfig+0x478>)
 8004938:	2200      	movs	r2, #0
 800493a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800493c:	f7fd f858 	bl	80019f0 <HAL_GetTick>
 8004940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004942:	e008      	b.n	8004956 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004944:	f7fd f854 	bl	80019f0 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	2b02      	cmp	r3, #2
 8004950:	d901      	bls.n	8004956 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e045      	b.n	80049e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004956:	4b06      	ldr	r3, [pc, #24]	; (8004970 <HAL_RCC_OscConfig+0x470>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1f0      	bne.n	8004944 <HAL_RCC_OscConfig+0x444>
 8004962:	e03d      	b.n	80049e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d107      	bne.n	800497c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e038      	b.n	80049e2 <HAL_RCC_OscConfig+0x4e2>
 8004970:	40023800 	.word	0x40023800
 8004974:	40007000 	.word	0x40007000
 8004978:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800497c:	4b1b      	ldr	r3, [pc, #108]	; (80049ec <HAL_RCC_OscConfig+0x4ec>)
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d028      	beq.n	80049dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004994:	429a      	cmp	r2, r3
 8004996:	d121      	bne.n	80049dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d11a      	bne.n	80049dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049ac:	4013      	ands	r3, r2
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d111      	bne.n	80049dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c2:	085b      	lsrs	r3, r3, #1
 80049c4:	3b01      	subs	r3, #1
 80049c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d107      	bne.n	80049dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049d8:	429a      	cmp	r2, r3
 80049da:	d001      	beq.n	80049e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e000      	b.n	80049e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3718      	adds	r7, #24
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	40023800 	.word	0x40023800

080049f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e0cc      	b.n	8004b9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a04:	4b68      	ldr	r3, [pc, #416]	; (8004ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0307 	and.w	r3, r3, #7
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d90c      	bls.n	8004a2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a12:	4b65      	ldr	r3, [pc, #404]	; (8004ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a14:	683a      	ldr	r2, [r7, #0]
 8004a16:	b2d2      	uxtb	r2, r2
 8004a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a1a:	4b63      	ldr	r3, [pc, #396]	; (8004ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0307 	and.w	r3, r3, #7
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d001      	beq.n	8004a2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e0b8      	b.n	8004b9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d020      	beq.n	8004a7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0304 	and.w	r3, r3, #4
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d005      	beq.n	8004a50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a44:	4b59      	ldr	r3, [pc, #356]	; (8004bac <HAL_RCC_ClockConfig+0x1bc>)
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	4a58      	ldr	r2, [pc, #352]	; (8004bac <HAL_RCC_ClockConfig+0x1bc>)
 8004a4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0308 	and.w	r3, r3, #8
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d005      	beq.n	8004a68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a5c:	4b53      	ldr	r3, [pc, #332]	; (8004bac <HAL_RCC_ClockConfig+0x1bc>)
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	4a52      	ldr	r2, [pc, #328]	; (8004bac <HAL_RCC_ClockConfig+0x1bc>)
 8004a62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a68:	4b50      	ldr	r3, [pc, #320]	; (8004bac <HAL_RCC_ClockConfig+0x1bc>)
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	494d      	ldr	r1, [pc, #308]	; (8004bac <HAL_RCC_ClockConfig+0x1bc>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d044      	beq.n	8004b10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d107      	bne.n	8004a9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a8e:	4b47      	ldr	r3, [pc, #284]	; (8004bac <HAL_RCC_ClockConfig+0x1bc>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d119      	bne.n	8004ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e07f      	b.n	8004b9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d003      	beq.n	8004aae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004aaa:	2b03      	cmp	r3, #3
 8004aac:	d107      	bne.n	8004abe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aae:	4b3f      	ldr	r3, [pc, #252]	; (8004bac <HAL_RCC_ClockConfig+0x1bc>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d109      	bne.n	8004ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e06f      	b.n	8004b9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004abe:	4b3b      	ldr	r3, [pc, #236]	; (8004bac <HAL_RCC_ClockConfig+0x1bc>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e067      	b.n	8004b9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ace:	4b37      	ldr	r3, [pc, #220]	; (8004bac <HAL_RCC_ClockConfig+0x1bc>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f023 0203 	bic.w	r2, r3, #3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	4934      	ldr	r1, [pc, #208]	; (8004bac <HAL_RCC_ClockConfig+0x1bc>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ae0:	f7fc ff86 	bl	80019f0 <HAL_GetTick>
 8004ae4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ae6:	e00a      	b.n	8004afe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ae8:	f7fc ff82 	bl	80019f0 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e04f      	b.n	8004b9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004afe:	4b2b      	ldr	r3, [pc, #172]	; (8004bac <HAL_RCC_ClockConfig+0x1bc>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f003 020c 	and.w	r2, r3, #12
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d1eb      	bne.n	8004ae8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b10:	4b25      	ldr	r3, [pc, #148]	; (8004ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0307 	and.w	r3, r3, #7
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d20c      	bcs.n	8004b38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b1e:	4b22      	ldr	r3, [pc, #136]	; (8004ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	b2d2      	uxtb	r2, r2
 8004b24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b26:	4b20      	ldr	r3, [pc, #128]	; (8004ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0307 	and.w	r3, r3, #7
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d001      	beq.n	8004b38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e032      	b.n	8004b9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0304 	and.w	r3, r3, #4
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d008      	beq.n	8004b56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b44:	4b19      	ldr	r3, [pc, #100]	; (8004bac <HAL_RCC_ClockConfig+0x1bc>)
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	4916      	ldr	r1, [pc, #88]	; (8004bac <HAL_RCC_ClockConfig+0x1bc>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0308 	and.w	r3, r3, #8
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d009      	beq.n	8004b76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b62:	4b12      	ldr	r3, [pc, #72]	; (8004bac <HAL_RCC_ClockConfig+0x1bc>)
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	00db      	lsls	r3, r3, #3
 8004b70:	490e      	ldr	r1, [pc, #56]	; (8004bac <HAL_RCC_ClockConfig+0x1bc>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b76:	f000 f821 	bl	8004bbc <HAL_RCC_GetSysClockFreq>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	4b0b      	ldr	r3, [pc, #44]	; (8004bac <HAL_RCC_ClockConfig+0x1bc>)
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	091b      	lsrs	r3, r3, #4
 8004b82:	f003 030f 	and.w	r3, r3, #15
 8004b86:	490a      	ldr	r1, [pc, #40]	; (8004bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b88:	5ccb      	ldrb	r3, [r1, r3]
 8004b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b8e:	4a09      	ldr	r2, [pc, #36]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b92:	4b09      	ldr	r3, [pc, #36]	; (8004bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7fc fee6 	bl	8001968 <HAL_InitTick>

  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	40023c00 	.word	0x40023c00
 8004bac:	40023800 	.word	0x40023800
 8004bb0:	0800c690 	.word	0x0800c690
 8004bb4:	20000004 	.word	0x20000004
 8004bb8:	20000008 	.word	0x20000008

08004bbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bc0:	b094      	sub	sp, #80	; 0x50
 8004bc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	647b      	str	r3, [r7, #68]	; 0x44
 8004bc8:	2300      	movs	r3, #0
 8004bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bcc:	2300      	movs	r3, #0
 8004bce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bd4:	4b79      	ldr	r3, [pc, #484]	; (8004dbc <HAL_RCC_GetSysClockFreq+0x200>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f003 030c 	and.w	r3, r3, #12
 8004bdc:	2b08      	cmp	r3, #8
 8004bde:	d00d      	beq.n	8004bfc <HAL_RCC_GetSysClockFreq+0x40>
 8004be0:	2b08      	cmp	r3, #8
 8004be2:	f200 80e1 	bhi.w	8004da8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d002      	beq.n	8004bf0 <HAL_RCC_GetSysClockFreq+0x34>
 8004bea:	2b04      	cmp	r3, #4
 8004bec:	d003      	beq.n	8004bf6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004bee:	e0db      	b.n	8004da8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bf0:	4b73      	ldr	r3, [pc, #460]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bf2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004bf4:	e0db      	b.n	8004dae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bf6:	4b73      	ldr	r3, [pc, #460]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004bf8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004bfa:	e0d8      	b.n	8004dae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bfc:	4b6f      	ldr	r3, [pc, #444]	; (8004dbc <HAL_RCC_GetSysClockFreq+0x200>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c04:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c06:	4b6d      	ldr	r3, [pc, #436]	; (8004dbc <HAL_RCC_GetSysClockFreq+0x200>)
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d063      	beq.n	8004cda <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c12:	4b6a      	ldr	r3, [pc, #424]	; (8004dbc <HAL_RCC_GetSysClockFreq+0x200>)
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	099b      	lsrs	r3, r3, #6
 8004c18:	2200      	movs	r2, #0
 8004c1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c1c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c24:	633b      	str	r3, [r7, #48]	; 0x30
 8004c26:	2300      	movs	r3, #0
 8004c28:	637b      	str	r3, [r7, #52]	; 0x34
 8004c2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c2e:	4622      	mov	r2, r4
 8004c30:	462b      	mov	r3, r5
 8004c32:	f04f 0000 	mov.w	r0, #0
 8004c36:	f04f 0100 	mov.w	r1, #0
 8004c3a:	0159      	lsls	r1, r3, #5
 8004c3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c40:	0150      	lsls	r0, r2, #5
 8004c42:	4602      	mov	r2, r0
 8004c44:	460b      	mov	r3, r1
 8004c46:	4621      	mov	r1, r4
 8004c48:	1a51      	subs	r1, r2, r1
 8004c4a:	6139      	str	r1, [r7, #16]
 8004c4c:	4629      	mov	r1, r5
 8004c4e:	eb63 0301 	sbc.w	r3, r3, r1
 8004c52:	617b      	str	r3, [r7, #20]
 8004c54:	f04f 0200 	mov.w	r2, #0
 8004c58:	f04f 0300 	mov.w	r3, #0
 8004c5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c60:	4659      	mov	r1, fp
 8004c62:	018b      	lsls	r3, r1, #6
 8004c64:	4651      	mov	r1, sl
 8004c66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c6a:	4651      	mov	r1, sl
 8004c6c:	018a      	lsls	r2, r1, #6
 8004c6e:	4651      	mov	r1, sl
 8004c70:	ebb2 0801 	subs.w	r8, r2, r1
 8004c74:	4659      	mov	r1, fp
 8004c76:	eb63 0901 	sbc.w	r9, r3, r1
 8004c7a:	f04f 0200 	mov.w	r2, #0
 8004c7e:	f04f 0300 	mov.w	r3, #0
 8004c82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c8e:	4690      	mov	r8, r2
 8004c90:	4699      	mov	r9, r3
 8004c92:	4623      	mov	r3, r4
 8004c94:	eb18 0303 	adds.w	r3, r8, r3
 8004c98:	60bb      	str	r3, [r7, #8]
 8004c9a:	462b      	mov	r3, r5
 8004c9c:	eb49 0303 	adc.w	r3, r9, r3
 8004ca0:	60fb      	str	r3, [r7, #12]
 8004ca2:	f04f 0200 	mov.w	r2, #0
 8004ca6:	f04f 0300 	mov.w	r3, #0
 8004caa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004cae:	4629      	mov	r1, r5
 8004cb0:	024b      	lsls	r3, r1, #9
 8004cb2:	4621      	mov	r1, r4
 8004cb4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004cb8:	4621      	mov	r1, r4
 8004cba:	024a      	lsls	r2, r1, #9
 8004cbc:	4610      	mov	r0, r2
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cc8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ccc:	f7fb fad0 	bl	8000270 <__aeabi_uldivmod>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cd8:	e058      	b.n	8004d8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cda:	4b38      	ldr	r3, [pc, #224]	; (8004dbc <HAL_RCC_GetSysClockFreq+0x200>)
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	099b      	lsrs	r3, r3, #6
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	4611      	mov	r1, r2
 8004ce6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004cea:	623b      	str	r3, [r7, #32]
 8004cec:	2300      	movs	r3, #0
 8004cee:	627b      	str	r3, [r7, #36]	; 0x24
 8004cf0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004cf4:	4642      	mov	r2, r8
 8004cf6:	464b      	mov	r3, r9
 8004cf8:	f04f 0000 	mov.w	r0, #0
 8004cfc:	f04f 0100 	mov.w	r1, #0
 8004d00:	0159      	lsls	r1, r3, #5
 8004d02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d06:	0150      	lsls	r0, r2, #5
 8004d08:	4602      	mov	r2, r0
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	4641      	mov	r1, r8
 8004d0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d12:	4649      	mov	r1, r9
 8004d14:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d18:	f04f 0200 	mov.w	r2, #0
 8004d1c:	f04f 0300 	mov.w	r3, #0
 8004d20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d2c:	ebb2 040a 	subs.w	r4, r2, sl
 8004d30:	eb63 050b 	sbc.w	r5, r3, fp
 8004d34:	f04f 0200 	mov.w	r2, #0
 8004d38:	f04f 0300 	mov.w	r3, #0
 8004d3c:	00eb      	lsls	r3, r5, #3
 8004d3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d42:	00e2      	lsls	r2, r4, #3
 8004d44:	4614      	mov	r4, r2
 8004d46:	461d      	mov	r5, r3
 8004d48:	4643      	mov	r3, r8
 8004d4a:	18e3      	adds	r3, r4, r3
 8004d4c:	603b      	str	r3, [r7, #0]
 8004d4e:	464b      	mov	r3, r9
 8004d50:	eb45 0303 	adc.w	r3, r5, r3
 8004d54:	607b      	str	r3, [r7, #4]
 8004d56:	f04f 0200 	mov.w	r2, #0
 8004d5a:	f04f 0300 	mov.w	r3, #0
 8004d5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d62:	4629      	mov	r1, r5
 8004d64:	028b      	lsls	r3, r1, #10
 8004d66:	4621      	mov	r1, r4
 8004d68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d6c:	4621      	mov	r1, r4
 8004d6e:	028a      	lsls	r2, r1, #10
 8004d70:	4610      	mov	r0, r2
 8004d72:	4619      	mov	r1, r3
 8004d74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d76:	2200      	movs	r2, #0
 8004d78:	61bb      	str	r3, [r7, #24]
 8004d7a:	61fa      	str	r2, [r7, #28]
 8004d7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d80:	f7fb fa76 	bl	8000270 <__aeabi_uldivmod>
 8004d84:	4602      	mov	r2, r0
 8004d86:	460b      	mov	r3, r1
 8004d88:	4613      	mov	r3, r2
 8004d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d8c:	4b0b      	ldr	r3, [pc, #44]	; (8004dbc <HAL_RCC_GetSysClockFreq+0x200>)
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	0c1b      	lsrs	r3, r3, #16
 8004d92:	f003 0303 	and.w	r3, r3, #3
 8004d96:	3301      	adds	r3, #1
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004d9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004da6:	e002      	b.n	8004dae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004da8:	4b05      	ldr	r3, [pc, #20]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004daa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3750      	adds	r7, #80	; 0x50
 8004db4:	46bd      	mov	sp, r7
 8004db6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dba:	bf00      	nop
 8004dbc:	40023800 	.word	0x40023800
 8004dc0:	00f42400 	.word	0x00f42400
 8004dc4:	007a1200 	.word	0x007a1200

08004dc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dcc:	4b03      	ldr	r3, [pc, #12]	; (8004ddc <HAL_RCC_GetHCLKFreq+0x14>)
 8004dce:	681b      	ldr	r3, [r3, #0]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	20000004 	.word	0x20000004

08004de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004de4:	f7ff fff0 	bl	8004dc8 <HAL_RCC_GetHCLKFreq>
 8004de8:	4602      	mov	r2, r0
 8004dea:	4b05      	ldr	r3, [pc, #20]	; (8004e00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	0a9b      	lsrs	r3, r3, #10
 8004df0:	f003 0307 	and.w	r3, r3, #7
 8004df4:	4903      	ldr	r1, [pc, #12]	; (8004e04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004df6:	5ccb      	ldrb	r3, [r1, r3]
 8004df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	40023800 	.word	0x40023800
 8004e04:	0800c6a0 	.word	0x0800c6a0

08004e08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e0c:	f7ff ffdc 	bl	8004dc8 <HAL_RCC_GetHCLKFreq>
 8004e10:	4602      	mov	r2, r0
 8004e12:	4b05      	ldr	r3, [pc, #20]	; (8004e28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	0b5b      	lsrs	r3, r3, #13
 8004e18:	f003 0307 	and.w	r3, r3, #7
 8004e1c:	4903      	ldr	r1, [pc, #12]	; (8004e2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e1e:	5ccb      	ldrb	r3, [r1, r3]
 8004e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	40023800 	.word	0x40023800
 8004e2c:	0800c6a0 	.word	0x0800c6a0

08004e30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e07b      	b.n	8004f3a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d108      	bne.n	8004e5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e52:	d009      	beq.n	8004e68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	61da      	str	r2, [r3, #28]
 8004e5a:	e005      	b.n	8004e68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d106      	bne.n	8004e88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f7fc fa12 	bl	80012ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004eb0:	431a      	orrs	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a1b      	ldr	r3, [r3, #32]
 8004ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eec:	ea42 0103 	orr.w	r1, r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	430a      	orrs	r2, r1
 8004efe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	0c1b      	lsrs	r3, r3, #16
 8004f06:	f003 0104 	and.w	r1, r3, #4
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	f003 0210 	and.w	r2, r3, #16
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	69da      	ldr	r2, [r3, #28]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b082      	sub	sp, #8
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d101      	bne.n	8004f54 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e041      	b.n	8004fd8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d106      	bne.n	8004f6e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f7fc fa37 	bl	80013dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2202      	movs	r2, #2
 8004f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	3304      	adds	r3, #4
 8004f7e:	4619      	mov	r1, r3
 8004f80:	4610      	mov	r0, r2
 8004f82:	f000 fa75 	bl	8005470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3708      	adds	r7, #8
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e041      	b.n	8005076 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d106      	bne.n	800500c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7fc f998 	bl	800133c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2202      	movs	r2, #2
 8005010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	3304      	adds	r3, #4
 800501c:	4619      	mov	r1, r3
 800501e:	4610      	mov	r0, r2
 8005020:	f000 fa26 	bl	8005470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800507e:	b580      	push	{r7, lr}
 8005080:	b082      	sub	sp, #8
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d101      	bne.n	8005090 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e041      	b.n	8005114 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	d106      	bne.n	80050aa <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 f839 	bl	800511c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2202      	movs	r2, #2
 80050ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	3304      	adds	r3, #4
 80050ba:	4619      	mov	r1, r3
 80050bc:	4610      	mov	r0, r2
 80050be:	f000 f9d7 	bl	8005470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2201      	movs	r2, #1
 80050e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3708      	adds	r7, #8
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800513c:	2300      	movs	r3, #0
 800513e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005146:	2b01      	cmp	r3, #1
 8005148:	d101      	bne.n	800514e <HAL_TIM_IC_ConfigChannel+0x1e>
 800514a:	2302      	movs	r3, #2
 800514c:	e088      	b.n	8005260 <HAL_TIM_IC_ConfigChannel+0x130>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d11b      	bne.n	8005194 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6818      	ldr	r0, [r3, #0]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	6819      	ldr	r1, [r3, #0]
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	f000 fc62 	bl	8005a34 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	699a      	ldr	r2, [r3, #24]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f022 020c 	bic.w	r2, r2, #12
 800517e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6999      	ldr	r1, [r3, #24]
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	689a      	ldr	r2, [r3, #8]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	430a      	orrs	r2, r1
 8005190:	619a      	str	r2, [r3, #24]
 8005192:	e060      	b.n	8005256 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2b04      	cmp	r3, #4
 8005198:	d11c      	bne.n	80051d4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6818      	ldr	r0, [r3, #0]
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	6819      	ldr	r1, [r3, #0]
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	f000 fce6 	bl	8005b7a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	699a      	ldr	r2, [r3, #24]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80051bc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	6999      	ldr	r1, [r3, #24]
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	021a      	lsls	r2, r3, #8
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	430a      	orrs	r2, r1
 80051d0:	619a      	str	r2, [r3, #24]
 80051d2:	e040      	b.n	8005256 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b08      	cmp	r3, #8
 80051d8:	d11b      	bne.n	8005212 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6818      	ldr	r0, [r3, #0]
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	6819      	ldr	r1, [r3, #0]
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	f000 fd33 	bl	8005c54 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	69da      	ldr	r2, [r3, #28]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 020c 	bic.w	r2, r2, #12
 80051fc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	69d9      	ldr	r1, [r3, #28]
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	689a      	ldr	r2, [r3, #8]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	430a      	orrs	r2, r1
 800520e:	61da      	str	r2, [r3, #28]
 8005210:	e021      	b.n	8005256 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2b0c      	cmp	r3, #12
 8005216:	d11c      	bne.n	8005252 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6818      	ldr	r0, [r3, #0]
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	6819      	ldr	r1, [r3, #0]
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	685a      	ldr	r2, [r3, #4]
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	f000 fd50 	bl	8005ccc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	69da      	ldr	r2, [r3, #28]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800523a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	69d9      	ldr	r1, [r3, #28]
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	021a      	lsls	r2, r3, #8
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	430a      	orrs	r2, r1
 800524e:	61da      	str	r2, [r3, #28]
 8005250:	e001      	b.n	8005256 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800525e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005260:	4618      	mov	r0, r3
 8005262:	3718      	adds	r7, #24
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005274:	2300      	movs	r3, #0
 8005276:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800527e:	2b01      	cmp	r3, #1
 8005280:	d101      	bne.n	8005286 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005282:	2302      	movs	r3, #2
 8005284:	e0ae      	b.n	80053e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b0c      	cmp	r3, #12
 8005292:	f200 809f 	bhi.w	80053d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005296:	a201      	add	r2, pc, #4	; (adr r2, 800529c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800529c:	080052d1 	.word	0x080052d1
 80052a0:	080053d5 	.word	0x080053d5
 80052a4:	080053d5 	.word	0x080053d5
 80052a8:	080053d5 	.word	0x080053d5
 80052ac:	08005311 	.word	0x08005311
 80052b0:	080053d5 	.word	0x080053d5
 80052b4:	080053d5 	.word	0x080053d5
 80052b8:	080053d5 	.word	0x080053d5
 80052bc:	08005353 	.word	0x08005353
 80052c0:	080053d5 	.word	0x080053d5
 80052c4:	080053d5 	.word	0x080053d5
 80052c8:	080053d5 	.word	0x080053d5
 80052cc:	08005393 	.word	0x08005393
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68b9      	ldr	r1, [r7, #8]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 f96a 	bl	80055b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	699a      	ldr	r2, [r3, #24]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f042 0208 	orr.w	r2, r2, #8
 80052ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699a      	ldr	r2, [r3, #24]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f022 0204 	bic.w	r2, r2, #4
 80052fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6999      	ldr	r1, [r3, #24]
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	691a      	ldr	r2, [r3, #16]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	430a      	orrs	r2, r1
 800530c:	619a      	str	r2, [r3, #24]
      break;
 800530e:	e064      	b.n	80053da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68b9      	ldr	r1, [r7, #8]
 8005316:	4618      	mov	r0, r3
 8005318:	f000 f9ba 	bl	8005690 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	699a      	ldr	r2, [r3, #24]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800532a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	699a      	ldr	r2, [r3, #24]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800533a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6999      	ldr	r1, [r3, #24]
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	021a      	lsls	r2, r3, #8
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	430a      	orrs	r2, r1
 800534e:	619a      	str	r2, [r3, #24]
      break;
 8005350:	e043      	b.n	80053da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68b9      	ldr	r1, [r7, #8]
 8005358:	4618      	mov	r0, r3
 800535a:	f000 fa0f 	bl	800577c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	69da      	ldr	r2, [r3, #28]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f042 0208 	orr.w	r2, r2, #8
 800536c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	69da      	ldr	r2, [r3, #28]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f022 0204 	bic.w	r2, r2, #4
 800537c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	69d9      	ldr	r1, [r3, #28]
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	691a      	ldr	r2, [r3, #16]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	430a      	orrs	r2, r1
 800538e:	61da      	str	r2, [r3, #28]
      break;
 8005390:	e023      	b.n	80053da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68b9      	ldr	r1, [r7, #8]
 8005398:	4618      	mov	r0, r3
 800539a:	f000 fa63 	bl	8005864 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	69da      	ldr	r2, [r3, #28]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	69da      	ldr	r2, [r3, #28]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	69d9      	ldr	r1, [r3, #28]
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	021a      	lsls	r2, r3, #8
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	61da      	str	r2, [r3, #28]
      break;
 80053d2:	e002      	b.n	80053da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	75fb      	strb	r3, [r7, #23]
      break;
 80053d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3718      	adds	r7, #24
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d101      	bne.n	8005404 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005400:	2302      	movs	r3, #2
 8005402:	e031      	b.n	8005468 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2202      	movs	r2, #2
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005414:	6839      	ldr	r1, [r7, #0]
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 fa7a 	bl	8005910 <TIM_SlaveTimer_SetConfig>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d009      	beq.n	8005436 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e018      	b.n	8005468 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68da      	ldr	r2, [r3, #12]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005444:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68da      	ldr	r2, [r3, #12]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005454:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3708      	adds	r7, #8
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a40      	ldr	r2, [pc, #256]	; (8005584 <TIM_Base_SetConfig+0x114>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d013      	beq.n	80054b0 <TIM_Base_SetConfig+0x40>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800548e:	d00f      	beq.n	80054b0 <TIM_Base_SetConfig+0x40>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a3d      	ldr	r2, [pc, #244]	; (8005588 <TIM_Base_SetConfig+0x118>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d00b      	beq.n	80054b0 <TIM_Base_SetConfig+0x40>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a3c      	ldr	r2, [pc, #240]	; (800558c <TIM_Base_SetConfig+0x11c>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d007      	beq.n	80054b0 <TIM_Base_SetConfig+0x40>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a3b      	ldr	r2, [pc, #236]	; (8005590 <TIM_Base_SetConfig+0x120>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d003      	beq.n	80054b0 <TIM_Base_SetConfig+0x40>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a3a      	ldr	r2, [pc, #232]	; (8005594 <TIM_Base_SetConfig+0x124>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d108      	bne.n	80054c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	4313      	orrs	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a2f      	ldr	r2, [pc, #188]	; (8005584 <TIM_Base_SetConfig+0x114>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d02b      	beq.n	8005522 <TIM_Base_SetConfig+0xb2>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054d0:	d027      	beq.n	8005522 <TIM_Base_SetConfig+0xb2>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a2c      	ldr	r2, [pc, #176]	; (8005588 <TIM_Base_SetConfig+0x118>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d023      	beq.n	8005522 <TIM_Base_SetConfig+0xb2>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a2b      	ldr	r2, [pc, #172]	; (800558c <TIM_Base_SetConfig+0x11c>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d01f      	beq.n	8005522 <TIM_Base_SetConfig+0xb2>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a2a      	ldr	r2, [pc, #168]	; (8005590 <TIM_Base_SetConfig+0x120>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d01b      	beq.n	8005522 <TIM_Base_SetConfig+0xb2>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a29      	ldr	r2, [pc, #164]	; (8005594 <TIM_Base_SetConfig+0x124>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d017      	beq.n	8005522 <TIM_Base_SetConfig+0xb2>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a28      	ldr	r2, [pc, #160]	; (8005598 <TIM_Base_SetConfig+0x128>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d013      	beq.n	8005522 <TIM_Base_SetConfig+0xb2>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a27      	ldr	r2, [pc, #156]	; (800559c <TIM_Base_SetConfig+0x12c>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d00f      	beq.n	8005522 <TIM_Base_SetConfig+0xb2>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a26      	ldr	r2, [pc, #152]	; (80055a0 <TIM_Base_SetConfig+0x130>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d00b      	beq.n	8005522 <TIM_Base_SetConfig+0xb2>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a25      	ldr	r2, [pc, #148]	; (80055a4 <TIM_Base_SetConfig+0x134>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d007      	beq.n	8005522 <TIM_Base_SetConfig+0xb2>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a24      	ldr	r2, [pc, #144]	; (80055a8 <TIM_Base_SetConfig+0x138>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d003      	beq.n	8005522 <TIM_Base_SetConfig+0xb2>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a23      	ldr	r2, [pc, #140]	; (80055ac <TIM_Base_SetConfig+0x13c>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d108      	bne.n	8005534 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005528:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	4313      	orrs	r3, r2
 8005532:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	4313      	orrs	r3, r2
 8005540:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	689a      	ldr	r2, [r3, #8]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a0a      	ldr	r2, [pc, #40]	; (8005584 <TIM_Base_SetConfig+0x114>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d003      	beq.n	8005568 <TIM_Base_SetConfig+0xf8>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a0c      	ldr	r2, [pc, #48]	; (8005594 <TIM_Base_SetConfig+0x124>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d103      	bne.n	8005570 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	691a      	ldr	r2, [r3, #16]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	615a      	str	r2, [r3, #20]
}
 8005576:	bf00      	nop
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	40010000 	.word	0x40010000
 8005588:	40000400 	.word	0x40000400
 800558c:	40000800 	.word	0x40000800
 8005590:	40000c00 	.word	0x40000c00
 8005594:	40010400 	.word	0x40010400
 8005598:	40014000 	.word	0x40014000
 800559c:	40014400 	.word	0x40014400
 80055a0:	40014800 	.word	0x40014800
 80055a4:	40001800 	.word	0x40001800
 80055a8:	40001c00 	.word	0x40001c00
 80055ac:	40002000 	.word	0x40002000

080055b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b087      	sub	sp, #28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	f023 0201 	bic.w	r2, r3, #1
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f023 0303 	bic.w	r3, r3, #3
 80055e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f023 0302 	bic.w	r3, r3, #2
 80055f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	4313      	orrs	r3, r2
 8005602:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a20      	ldr	r2, [pc, #128]	; (8005688 <TIM_OC1_SetConfig+0xd8>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d003      	beq.n	8005614 <TIM_OC1_SetConfig+0x64>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a1f      	ldr	r2, [pc, #124]	; (800568c <TIM_OC1_SetConfig+0xdc>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d10c      	bne.n	800562e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	f023 0308 	bic.w	r3, r3, #8
 800561a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	4313      	orrs	r3, r2
 8005624:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f023 0304 	bic.w	r3, r3, #4
 800562c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a15      	ldr	r2, [pc, #84]	; (8005688 <TIM_OC1_SetConfig+0xd8>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d003      	beq.n	800563e <TIM_OC1_SetConfig+0x8e>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a14      	ldr	r2, [pc, #80]	; (800568c <TIM_OC1_SetConfig+0xdc>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d111      	bne.n	8005662 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005644:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800564c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	693a      	ldr	r2, [r7, #16]
 8005654:	4313      	orrs	r3, r2
 8005656:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	693a      	ldr	r2, [r7, #16]
 800565e:	4313      	orrs	r3, r2
 8005660:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	685a      	ldr	r2, [r3, #4]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	621a      	str	r2, [r3, #32]
}
 800567c:	bf00      	nop
 800567e:	371c      	adds	r7, #28
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr
 8005688:	40010000 	.word	0x40010000
 800568c:	40010400 	.word	0x40010400

08005690 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005690:	b480      	push	{r7}
 8005692:	b087      	sub	sp, #28
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	f023 0210 	bic.w	r2, r3, #16
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	021b      	lsls	r3, r3, #8
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	f023 0320 	bic.w	r3, r3, #32
 80056da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	011b      	lsls	r3, r3, #4
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a22      	ldr	r2, [pc, #136]	; (8005774 <TIM_OC2_SetConfig+0xe4>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d003      	beq.n	80056f8 <TIM_OC2_SetConfig+0x68>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a21      	ldr	r2, [pc, #132]	; (8005778 <TIM_OC2_SetConfig+0xe8>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d10d      	bne.n	8005714 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	011b      	lsls	r3, r3, #4
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	4313      	orrs	r3, r2
 800570a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005712:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a17      	ldr	r2, [pc, #92]	; (8005774 <TIM_OC2_SetConfig+0xe4>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d003      	beq.n	8005724 <TIM_OC2_SetConfig+0x94>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a16      	ldr	r2, [pc, #88]	; (8005778 <TIM_OC2_SetConfig+0xe8>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d113      	bne.n	800574c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800572a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005732:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	695b      	ldr	r3, [r3, #20]
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	4313      	orrs	r3, r2
 800573e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	4313      	orrs	r3, r2
 800574a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	621a      	str	r2, [r3, #32]
}
 8005766:	bf00      	nop
 8005768:	371c      	adds	r7, #28
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	40010000 	.word	0x40010000
 8005778:	40010400 	.word	0x40010400

0800577c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800577c:	b480      	push	{r7}
 800577e:	b087      	sub	sp, #28
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f023 0303 	bic.w	r3, r3, #3
 80057b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	021b      	lsls	r3, r3, #8
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a21      	ldr	r2, [pc, #132]	; (800585c <TIM_OC3_SetConfig+0xe0>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d003      	beq.n	80057e2 <TIM_OC3_SetConfig+0x66>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a20      	ldr	r2, [pc, #128]	; (8005860 <TIM_OC3_SetConfig+0xe4>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d10d      	bne.n	80057fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	021b      	lsls	r3, r3, #8
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a16      	ldr	r2, [pc, #88]	; (800585c <TIM_OC3_SetConfig+0xe0>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d003      	beq.n	800580e <TIM_OC3_SetConfig+0x92>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a15      	ldr	r2, [pc, #84]	; (8005860 <TIM_OC3_SetConfig+0xe4>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d113      	bne.n	8005836 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005814:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800581c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	011b      	lsls	r3, r3, #4
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	4313      	orrs	r3, r2
 8005828:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	011b      	lsls	r3, r3, #4
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	4313      	orrs	r3, r2
 8005834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	697a      	ldr	r2, [r7, #20]
 800584e:	621a      	str	r2, [r3, #32]
}
 8005850:	bf00      	nop
 8005852:	371c      	adds	r7, #28
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr
 800585c:	40010000 	.word	0x40010000
 8005860:	40010400 	.word	0x40010400

08005864 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005864:	b480      	push	{r7}
 8005866:	b087      	sub	sp, #28
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	69db      	ldr	r3, [r3, #28]
 800588a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800589a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	021b      	lsls	r3, r3, #8
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	031b      	lsls	r3, r3, #12
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a12      	ldr	r2, [pc, #72]	; (8005908 <TIM_OC4_SetConfig+0xa4>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d003      	beq.n	80058cc <TIM_OC4_SetConfig+0x68>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a11      	ldr	r2, [pc, #68]	; (800590c <TIM_OC4_SetConfig+0xa8>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d109      	bne.n	80058e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	695b      	ldr	r3, [r3, #20]
 80058d8:	019b      	lsls	r3, r3, #6
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	4313      	orrs	r3, r2
 80058de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	685a      	ldr	r2, [r3, #4]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	621a      	str	r2, [r3, #32]
}
 80058fa:	bf00      	nop
 80058fc:	371c      	adds	r7, #28
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	40010000 	.word	0x40010000
 800590c:	40010400 	.word	0x40010400

08005910 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800591a:	2300      	movs	r3, #0
 800591c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800592c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	693a      	ldr	r2, [r7, #16]
 8005934:	4313      	orrs	r3, r2
 8005936:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	f023 0307 	bic.w	r3, r3, #7
 800593e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	4313      	orrs	r3, r2
 8005948:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	2b70      	cmp	r3, #112	; 0x70
 8005958:	d01a      	beq.n	8005990 <TIM_SlaveTimer_SetConfig+0x80>
 800595a:	2b70      	cmp	r3, #112	; 0x70
 800595c:	d860      	bhi.n	8005a20 <TIM_SlaveTimer_SetConfig+0x110>
 800595e:	2b60      	cmp	r3, #96	; 0x60
 8005960:	d054      	beq.n	8005a0c <TIM_SlaveTimer_SetConfig+0xfc>
 8005962:	2b60      	cmp	r3, #96	; 0x60
 8005964:	d85c      	bhi.n	8005a20 <TIM_SlaveTimer_SetConfig+0x110>
 8005966:	2b50      	cmp	r3, #80	; 0x50
 8005968:	d046      	beq.n	80059f8 <TIM_SlaveTimer_SetConfig+0xe8>
 800596a:	2b50      	cmp	r3, #80	; 0x50
 800596c:	d858      	bhi.n	8005a20 <TIM_SlaveTimer_SetConfig+0x110>
 800596e:	2b40      	cmp	r3, #64	; 0x40
 8005970:	d019      	beq.n	80059a6 <TIM_SlaveTimer_SetConfig+0x96>
 8005972:	2b40      	cmp	r3, #64	; 0x40
 8005974:	d854      	bhi.n	8005a20 <TIM_SlaveTimer_SetConfig+0x110>
 8005976:	2b30      	cmp	r3, #48	; 0x30
 8005978:	d055      	beq.n	8005a26 <TIM_SlaveTimer_SetConfig+0x116>
 800597a:	2b30      	cmp	r3, #48	; 0x30
 800597c:	d850      	bhi.n	8005a20 <TIM_SlaveTimer_SetConfig+0x110>
 800597e:	2b20      	cmp	r3, #32
 8005980:	d051      	beq.n	8005a26 <TIM_SlaveTimer_SetConfig+0x116>
 8005982:	2b20      	cmp	r3, #32
 8005984:	d84c      	bhi.n	8005a20 <TIM_SlaveTimer_SetConfig+0x110>
 8005986:	2b00      	cmp	r3, #0
 8005988:	d04d      	beq.n	8005a26 <TIM_SlaveTimer_SetConfig+0x116>
 800598a:	2b10      	cmp	r3, #16
 800598c:	d04b      	beq.n	8005a26 <TIM_SlaveTimer_SetConfig+0x116>
 800598e:	e047      	b.n	8005a20 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6818      	ldr	r0, [r3, #0]
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	68d9      	ldr	r1, [r3, #12]
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	689a      	ldr	r2, [r3, #8]
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	f000 f9d1 	bl	8005d46 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80059a4:	e040      	b.n	8005a28 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2b05      	cmp	r3, #5
 80059ac:	d101      	bne.n	80059b2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e03b      	b.n	8005a2a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	6a1b      	ldr	r3, [r3, #32]
 80059b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	6a1a      	ldr	r2, [r3, #32]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f022 0201 	bic.w	r2, r2, #1
 80059c8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059d8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	011b      	lsls	r3, r3, #4
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	621a      	str	r2, [r3, #32]
      break;
 80059f6:	e017      	b.n	8005a28 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6818      	ldr	r0, [r3, #0]
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	6899      	ldr	r1, [r3, #8]
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	461a      	mov	r2, r3
 8005a06:	f000 f889 	bl	8005b1c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005a0a:	e00d      	b.n	8005a28 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6818      	ldr	r0, [r3, #0]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	6899      	ldr	r1, [r3, #8]
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	461a      	mov	r2, r3
 8005a1a:	f000 f8eb 	bl	8005bf4 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005a1e:	e003      	b.n	8005a28 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	75fb      	strb	r3, [r7, #23]
      break;
 8005a24:	e000      	b.n	8005a28 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8005a26:	bf00      	nop
  }

  return status;
 8005a28:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3718      	adds	r7, #24
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
	...

08005a34 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b087      	sub	sp, #28
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
 8005a40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	f023 0201 	bic.w	r2, r3, #1
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6a1b      	ldr	r3, [r3, #32]
 8005a58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	4a28      	ldr	r2, [pc, #160]	; (8005b00 <TIM_TI1_SetConfig+0xcc>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d01b      	beq.n	8005a9a <TIM_TI1_SetConfig+0x66>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a68:	d017      	beq.n	8005a9a <TIM_TI1_SetConfig+0x66>
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	4a25      	ldr	r2, [pc, #148]	; (8005b04 <TIM_TI1_SetConfig+0xd0>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d013      	beq.n	8005a9a <TIM_TI1_SetConfig+0x66>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	4a24      	ldr	r2, [pc, #144]	; (8005b08 <TIM_TI1_SetConfig+0xd4>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d00f      	beq.n	8005a9a <TIM_TI1_SetConfig+0x66>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	4a23      	ldr	r2, [pc, #140]	; (8005b0c <TIM_TI1_SetConfig+0xd8>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d00b      	beq.n	8005a9a <TIM_TI1_SetConfig+0x66>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	4a22      	ldr	r2, [pc, #136]	; (8005b10 <TIM_TI1_SetConfig+0xdc>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d007      	beq.n	8005a9a <TIM_TI1_SetConfig+0x66>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	4a21      	ldr	r2, [pc, #132]	; (8005b14 <TIM_TI1_SetConfig+0xe0>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d003      	beq.n	8005a9a <TIM_TI1_SetConfig+0x66>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	4a20      	ldr	r2, [pc, #128]	; (8005b18 <TIM_TI1_SetConfig+0xe4>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d101      	bne.n	8005a9e <TIM_TI1_SetConfig+0x6a>
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e000      	b.n	8005aa0 <TIM_TI1_SetConfig+0x6c>
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d008      	beq.n	8005ab6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f023 0303 	bic.w	r3, r3, #3
 8005aaa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	617b      	str	r3, [r7, #20]
 8005ab4:	e003      	b.n	8005abe <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	f043 0301 	orr.w	r3, r3, #1
 8005abc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ac4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	011b      	lsls	r3, r3, #4
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	f023 030a 	bic.w	r3, r3, #10
 8005ad8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	f003 030a 	and.w	r3, r3, #10
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	693a      	ldr	r2, [r7, #16]
 8005af0:	621a      	str	r2, [r3, #32]
}
 8005af2:	bf00      	nop
 8005af4:	371c      	adds	r7, #28
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	40010000 	.word	0x40010000
 8005b04:	40000400 	.word	0x40000400
 8005b08:	40000800 	.word	0x40000800
 8005b0c:	40000c00 	.word	0x40000c00
 8005b10:	40010400 	.word	0x40010400
 8005b14:	40014000 	.word	0x40014000
 8005b18:	40001800 	.word	0x40001800

08005b1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b087      	sub	sp, #28
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6a1b      	ldr	r3, [r3, #32]
 8005b2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	f023 0201 	bic.w	r2, r3, #1
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	011b      	lsls	r3, r3, #4
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f023 030a 	bic.w	r3, r3, #10
 8005b58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	621a      	str	r2, [r3, #32]
}
 8005b6e:	bf00      	nop
 8005b70:	371c      	adds	r7, #28
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b087      	sub	sp, #28
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	60f8      	str	r0, [r7, #12]
 8005b82:	60b9      	str	r1, [r7, #8]
 8005b84:	607a      	str	r2, [r7, #4]
 8005b86:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
 8005b8c:	f023 0210 	bic.w	r2, r3, #16
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6a1b      	ldr	r3, [r3, #32]
 8005b9e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ba6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	021b      	lsls	r3, r3, #8
 8005bac:	697a      	ldr	r2, [r7, #20]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bb8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	031b      	lsls	r3, r3, #12
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bcc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	011b      	lsls	r3, r3, #4
 8005bd2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005bd6:	693a      	ldr	r2, [r7, #16]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	621a      	str	r2, [r3, #32]
}
 8005be8:	bf00      	nop
 8005bea:	371c      	adds	r7, #28
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b087      	sub	sp, #28
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6a1b      	ldr	r3, [r3, #32]
 8005c04:	f023 0210 	bic.w	r2, r3, #16
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c1e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	031b      	lsls	r3, r3, #12
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	011b      	lsls	r3, r3, #4
 8005c36:	693a      	ldr	r2, [r7, #16]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	693a      	ldr	r2, [r7, #16]
 8005c46:	621a      	str	r2, [r3, #32]
}
 8005c48:	bf00      	nop
 8005c4a:	371c      	adds	r7, #28
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b087      	sub	sp, #28
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
 8005c60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f023 0303 	bic.w	r3, r3, #3
 8005c80:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c90:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	011b      	lsls	r3, r3, #4
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005ca4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	021b      	lsls	r3, r3, #8
 8005caa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	621a      	str	r2, [r3, #32]
}
 8005cc0:	bf00      	nop
 8005cc2:	371c      	adds	r7, #28
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b087      	sub	sp, #28
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
 8005cd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	69db      	ldr	r3, [r3, #28]
 8005cea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6a1b      	ldr	r3, [r3, #32]
 8005cf0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cf8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	021b      	lsls	r3, r3, #8
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d0a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	031b      	lsls	r3, r3, #12
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005d1e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	031b      	lsls	r3, r3, #12
 8005d24:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	621a      	str	r2, [r3, #32]
}
 8005d3a:	bf00      	nop
 8005d3c:	371c      	adds	r7, #28
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b087      	sub	sp, #28
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	60f8      	str	r0, [r7, #12]
 8005d4e:	60b9      	str	r1, [r7, #8]
 8005d50:	607a      	str	r2, [r7, #4]
 8005d52:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d60:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	021a      	lsls	r2, r3, #8
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	431a      	orrs	r2, r3
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	609a      	str	r2, [r3, #8]
}
 8005d7a:	bf00      	nop
 8005d7c:	371c      	adds	r7, #28
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
	...

08005d88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d101      	bne.n	8005da0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	e05a      	b.n	8005e56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2202      	movs	r2, #2
 8005dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a21      	ldr	r2, [pc, #132]	; (8005e64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d022      	beq.n	8005e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dec:	d01d      	beq.n	8005e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a1d      	ldr	r2, [pc, #116]	; (8005e68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d018      	beq.n	8005e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a1b      	ldr	r2, [pc, #108]	; (8005e6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d013      	beq.n	8005e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a1a      	ldr	r2, [pc, #104]	; (8005e70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d00e      	beq.n	8005e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a18      	ldr	r2, [pc, #96]	; (8005e74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d009      	beq.n	8005e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a17      	ldr	r2, [pc, #92]	; (8005e78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d004      	beq.n	8005e2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a15      	ldr	r2, [pc, #84]	; (8005e7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d10c      	bne.n	8005e44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3714      	adds	r7, #20
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	40010000 	.word	0x40010000
 8005e68:	40000400 	.word	0x40000400
 8005e6c:	40000800 	.word	0x40000800
 8005e70:	40000c00 	.word	0x40000c00
 8005e74:	40010400 	.word	0x40010400
 8005e78:	40014000 	.word	0x40014000
 8005e7c:	40001800 	.word	0x40001800

08005e80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d101      	bne.n	8005e9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005e98:	2302      	movs	r3, #2
 8005e9a:	e03d      	b.n	8005f18 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	695b      	ldr	r3, [r3, #20]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	69db      	ldr	r3, [r3, #28]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3714      	adds	r7, #20
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d101      	bne.n	8005f36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e03f      	b.n	8005fb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d106      	bne.n	8005f50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f7fb fb08 	bl	8001560 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2224      	movs	r2, #36	; 0x24
 8005f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68da      	ldr	r2, [r3, #12]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 fdd1 	bl	8006b10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	691a      	ldr	r2, [r3, #16]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	695a      	ldr	r2, [r3, #20]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68da      	ldr	r2, [r3, #12]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2220      	movs	r2, #32
 8005fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2220      	movs	r2, #32
 8005fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3708      	adds	r7, #8
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
	...

08005fc0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b08c      	sub	sp, #48	; 0x30
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	2b20      	cmp	r3, #32
 8005fd8:	d165      	bne.n	80060a6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d002      	beq.n	8005fe6 <HAL_UART_Transmit_DMA+0x26>
 8005fe0:	88fb      	ldrh	r3, [r7, #6]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d101      	bne.n	8005fea <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e05e      	b.n	80060a8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d101      	bne.n	8005ff8 <HAL_UART_Transmit_DMA+0x38>
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	e057      	b.n	80060a8 <HAL_UART_Transmit_DMA+0xe8>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006000:	68ba      	ldr	r2, [r7, #8]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	88fa      	ldrh	r2, [r7, #6]
 800600a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	88fa      	ldrh	r2, [r7, #6]
 8006010:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2221      	movs	r2, #33	; 0x21
 800601c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006024:	4a22      	ldr	r2, [pc, #136]	; (80060b0 <HAL_UART_Transmit_DMA+0xf0>)
 8006026:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800602c:	4a21      	ldr	r2, [pc, #132]	; (80060b4 <HAL_UART_Transmit_DMA+0xf4>)
 800602e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006034:	4a20      	ldr	r2, [pc, #128]	; (80060b8 <HAL_UART_Transmit_DMA+0xf8>)
 8006036:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800603c:	2200      	movs	r2, #0
 800603e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006040:	f107 0308 	add.w	r3, r7, #8
 8006044:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800604a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604c:	6819      	ldr	r1, [r3, #0]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	3304      	adds	r3, #4
 8006054:	461a      	mov	r2, r3
 8006056:	88fb      	ldrh	r3, [r7, #6]
 8006058:	f7fc fab2 	bl	80025c0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006064:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	3314      	adds	r3, #20
 8006074:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	e853 3f00 	ldrex	r3, [r3]
 800607c:	617b      	str	r3, [r7, #20]
   return(result);
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006084:	62bb      	str	r3, [r7, #40]	; 0x28
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	3314      	adds	r3, #20
 800608c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800608e:	627a      	str	r2, [r7, #36]	; 0x24
 8006090:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006092:	6a39      	ldr	r1, [r7, #32]
 8006094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006096:	e841 2300 	strex	r3, r2, [r1]
 800609a:	61fb      	str	r3, [r7, #28]
   return(result);
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1e5      	bne.n	800606e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80060a2:	2300      	movs	r3, #0
 80060a4:	e000      	b.n	80060a8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80060a6:	2302      	movs	r3, #2
  }
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3730      	adds	r7, #48	; 0x30
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	08006641 	.word	0x08006641
 80060b4:	080066db 	.word	0x080066db
 80060b8:	080066f7 	.word	0x080066f7

080060bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b0ba      	sub	sp, #232	; 0xe8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80060e2:	2300      	movs	r3, #0
 80060e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80060e8:	2300      	movs	r3, #0
 80060ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80060ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060f2:	f003 030f 	and.w	r3, r3, #15
 80060f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80060fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d10f      	bne.n	8006122 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006106:	f003 0320 	and.w	r3, r3, #32
 800610a:	2b00      	cmp	r3, #0
 800610c:	d009      	beq.n	8006122 <HAL_UART_IRQHandler+0x66>
 800610e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006112:	f003 0320 	and.w	r3, r3, #32
 8006116:	2b00      	cmp	r3, #0
 8006118:	d003      	beq.n	8006122 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 fc3c 	bl	8006998 <UART_Receive_IT>
      return;
 8006120:	e256      	b.n	80065d0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006122:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006126:	2b00      	cmp	r3, #0
 8006128:	f000 80de 	beq.w	80062e8 <HAL_UART_IRQHandler+0x22c>
 800612c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006130:	f003 0301 	and.w	r3, r3, #1
 8006134:	2b00      	cmp	r3, #0
 8006136:	d106      	bne.n	8006146 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800613c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006140:	2b00      	cmp	r3, #0
 8006142:	f000 80d1 	beq.w	80062e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00b      	beq.n	800616a <HAL_UART_IRQHandler+0xae>
 8006152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800615a:	2b00      	cmp	r3, #0
 800615c:	d005      	beq.n	800616a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006162:	f043 0201 	orr.w	r2, r3, #1
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800616a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800616e:	f003 0304 	and.w	r3, r3, #4
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00b      	beq.n	800618e <HAL_UART_IRQHandler+0xd2>
 8006176:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800617a:	f003 0301 	and.w	r3, r3, #1
 800617e:	2b00      	cmp	r3, #0
 8006180:	d005      	beq.n	800618e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006186:	f043 0202 	orr.w	r2, r3, #2
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800618e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006192:	f003 0302 	and.w	r3, r3, #2
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00b      	beq.n	80061b2 <HAL_UART_IRQHandler+0xf6>
 800619a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d005      	beq.n	80061b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061aa:	f043 0204 	orr.w	r2, r3, #4
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80061b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061b6:	f003 0308 	and.w	r3, r3, #8
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d011      	beq.n	80061e2 <HAL_UART_IRQHandler+0x126>
 80061be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061c2:	f003 0320 	and.w	r3, r3, #32
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d105      	bne.n	80061d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80061ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061ce:	f003 0301 	and.w	r3, r3, #1
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d005      	beq.n	80061e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061da:	f043 0208 	orr.w	r2, r3, #8
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f000 81ed 	beq.w	80065c6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061f0:	f003 0320 	and.w	r3, r3, #32
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d008      	beq.n	800620a <HAL_UART_IRQHandler+0x14e>
 80061f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061fc:	f003 0320 	and.w	r3, r3, #32
 8006200:	2b00      	cmp	r3, #0
 8006202:	d002      	beq.n	800620a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 fbc7 	bl	8006998 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	695b      	ldr	r3, [r3, #20]
 8006210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006214:	2b40      	cmp	r3, #64	; 0x40
 8006216:	bf0c      	ite	eq
 8006218:	2301      	moveq	r3, #1
 800621a:	2300      	movne	r3, #0
 800621c:	b2db      	uxtb	r3, r3
 800621e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006226:	f003 0308 	and.w	r3, r3, #8
 800622a:	2b00      	cmp	r3, #0
 800622c:	d103      	bne.n	8006236 <HAL_UART_IRQHandler+0x17a>
 800622e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006232:	2b00      	cmp	r3, #0
 8006234:	d04f      	beq.n	80062d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 facf 	bl	80067da <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	695b      	ldr	r3, [r3, #20]
 8006242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006246:	2b40      	cmp	r3, #64	; 0x40
 8006248:	d141      	bne.n	80062ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	3314      	adds	r3, #20
 8006250:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006254:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006258:	e853 3f00 	ldrex	r3, [r3]
 800625c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006260:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006264:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006268:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	3314      	adds	r3, #20
 8006272:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006276:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800627a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006282:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006286:	e841 2300 	strex	r3, r2, [r1]
 800628a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800628e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1d9      	bne.n	800624a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629a:	2b00      	cmp	r3, #0
 800629c:	d013      	beq.n	80062c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a2:	4a7d      	ldr	r2, [pc, #500]	; (8006498 <HAL_UART_IRQHandler+0x3dc>)
 80062a4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7fc fa50 	bl	8002750 <HAL_DMA_Abort_IT>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d016      	beq.n	80062e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80062c0:	4610      	mov	r0, r2
 80062c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062c4:	e00e      	b.n	80062e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 f9a4 	bl	8006614 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062cc:	e00a      	b.n	80062e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 f9a0 	bl	8006614 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062d4:	e006      	b.n	80062e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 f99c 	bl	8006614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80062e2:	e170      	b.n	80065c6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062e4:	bf00      	nop
    return;
 80062e6:	e16e      	b.n	80065c6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	f040 814a 	bne.w	8006586 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80062f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062f6:	f003 0310 	and.w	r3, r3, #16
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f000 8143 	beq.w	8006586 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006304:	f003 0310 	and.w	r3, r3, #16
 8006308:	2b00      	cmp	r3, #0
 800630a:	f000 813c 	beq.w	8006586 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800630e:	2300      	movs	r3, #0
 8006310:	60bb      	str	r3, [r7, #8]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	60bb      	str	r3, [r7, #8]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	60bb      	str	r3, [r7, #8]
 8006322:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800632e:	2b40      	cmp	r3, #64	; 0x40
 8006330:	f040 80b4 	bne.w	800649c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006340:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006344:	2b00      	cmp	r3, #0
 8006346:	f000 8140 	beq.w	80065ca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800634e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006352:	429a      	cmp	r2, r3
 8006354:	f080 8139 	bcs.w	80065ca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800635e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006364:	69db      	ldr	r3, [r3, #28]
 8006366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800636a:	f000 8088 	beq.w	800647e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	330c      	adds	r3, #12
 8006374:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006378:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800637c:	e853 3f00 	ldrex	r3, [r3]
 8006380:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006384:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006388:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800638c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	330c      	adds	r3, #12
 8006396:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800639a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800639e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80063a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80063aa:	e841 2300 	strex	r3, r2, [r1]
 80063ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80063b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d1d9      	bne.n	800636e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	3314      	adds	r3, #20
 80063c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063c4:	e853 3f00 	ldrex	r3, [r3]
 80063c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80063ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063cc:	f023 0301 	bic.w	r3, r3, #1
 80063d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	3314      	adds	r3, #20
 80063da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80063de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80063e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80063e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80063ea:	e841 2300 	strex	r3, r2, [r1]
 80063ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80063f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d1e1      	bne.n	80063ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	3314      	adds	r3, #20
 80063fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006400:	e853 3f00 	ldrex	r3, [r3]
 8006404:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006406:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006408:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800640c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	3314      	adds	r3, #20
 8006416:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800641a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800641c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006420:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006422:	e841 2300 	strex	r3, r2, [r1]
 8006426:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006428:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800642a:	2b00      	cmp	r3, #0
 800642c:	d1e3      	bne.n	80063f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2220      	movs	r2, #32
 8006432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	330c      	adds	r3, #12
 8006442:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006444:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006446:	e853 3f00 	ldrex	r3, [r3]
 800644a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800644c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800644e:	f023 0310 	bic.w	r3, r3, #16
 8006452:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	330c      	adds	r3, #12
 800645c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006460:	65ba      	str	r2, [r7, #88]	; 0x58
 8006462:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006464:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006466:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006468:	e841 2300 	strex	r3, r2, [r1]
 800646c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800646e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006470:	2b00      	cmp	r3, #0
 8006472:	d1e3      	bne.n	800643c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006478:	4618      	mov	r0, r3
 800647a:	f7fc f8f9 	bl	8002670 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006486:	b29b      	uxth	r3, r3
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	b29b      	uxth	r3, r3
 800648c:	4619      	mov	r1, r3
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 f8ca 	bl	8006628 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006494:	e099      	b.n	80065ca <HAL_UART_IRQHandler+0x50e>
 8006496:	bf00      	nop
 8006498:	080068a1 	.word	0x080068a1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f000 808b 	beq.w	80065ce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80064b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f000 8086 	beq.w	80065ce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	330c      	adds	r3, #12
 80064c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064cc:	e853 3f00 	ldrex	r3, [r3]
 80064d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80064d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	330c      	adds	r3, #12
 80064e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80064e6:	647a      	str	r2, [r7, #68]	; 0x44
 80064e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80064ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064ee:	e841 2300 	strex	r3, r2, [r1]
 80064f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d1e3      	bne.n	80064c2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	3314      	adds	r3, #20
 8006500:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006504:	e853 3f00 	ldrex	r3, [r3]
 8006508:	623b      	str	r3, [r7, #32]
   return(result);
 800650a:	6a3b      	ldr	r3, [r7, #32]
 800650c:	f023 0301 	bic.w	r3, r3, #1
 8006510:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	3314      	adds	r3, #20
 800651a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800651e:	633a      	str	r2, [r7, #48]	; 0x30
 8006520:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006522:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006526:	e841 2300 	strex	r3, r2, [r1]
 800652a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800652c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1e3      	bne.n	80064fa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2220      	movs	r2, #32
 8006536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	330c      	adds	r3, #12
 8006546:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	e853 3f00 	ldrex	r3, [r3]
 800654e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f023 0310 	bic.w	r3, r3, #16
 8006556:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	330c      	adds	r3, #12
 8006560:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006564:	61fa      	str	r2, [r7, #28]
 8006566:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006568:	69b9      	ldr	r1, [r7, #24]
 800656a:	69fa      	ldr	r2, [r7, #28]
 800656c:	e841 2300 	strex	r3, r2, [r1]
 8006570:	617b      	str	r3, [r7, #20]
   return(result);
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d1e3      	bne.n	8006540 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006578:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800657c:	4619      	mov	r1, r3
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 f852 	bl	8006628 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006584:	e023      	b.n	80065ce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800658a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800658e:	2b00      	cmp	r3, #0
 8006590:	d009      	beq.n	80065a6 <HAL_UART_IRQHandler+0x4ea>
 8006592:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800659a:	2b00      	cmp	r3, #0
 800659c:	d003      	beq.n	80065a6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 f992 	bl	80068c8 <UART_Transmit_IT>
    return;
 80065a4:	e014      	b.n	80065d0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80065a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00e      	beq.n	80065d0 <HAL_UART_IRQHandler+0x514>
 80065b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d008      	beq.n	80065d0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f9d2 	bl	8006968 <UART_EndTransmit_IT>
    return;
 80065c4:	e004      	b.n	80065d0 <HAL_UART_IRQHandler+0x514>
    return;
 80065c6:	bf00      	nop
 80065c8:	e002      	b.n	80065d0 <HAL_UART_IRQHandler+0x514>
      return;
 80065ca:	bf00      	nop
 80065cc:	e000      	b.n	80065d0 <HAL_UART_IRQHandler+0x514>
      return;
 80065ce:	bf00      	nop
  }
}
 80065d0:	37e8      	adds	r7, #232	; 0xe8
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop

080065d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80065e0:	bf00      	nop
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80065f4:	bf00      	nop
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800661c:	bf00      	nop
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	460b      	mov	r3, r1
 8006632:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006634:	bf00      	nop
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b090      	sub	sp, #64	; 0x40
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006658:	2b00      	cmp	r3, #0
 800665a:	d137      	bne.n	80066cc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800665c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800665e:	2200      	movs	r2, #0
 8006660:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	3314      	adds	r3, #20
 8006668:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666c:	e853 3f00 	ldrex	r3, [r3]
 8006670:	623b      	str	r3, [r7, #32]
   return(result);
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006678:	63bb      	str	r3, [r7, #56]	; 0x38
 800667a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	3314      	adds	r3, #20
 8006680:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006682:	633a      	str	r2, [r7, #48]	; 0x30
 8006684:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006686:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800668a:	e841 2300 	strex	r3, r2, [r1]
 800668e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1e5      	bne.n	8006662 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	330c      	adds	r3, #12
 800669c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	e853 3f00 	ldrex	r3, [r3]
 80066a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066ac:	637b      	str	r3, [r7, #52]	; 0x34
 80066ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	330c      	adds	r3, #12
 80066b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066b6:	61fa      	str	r2, [r7, #28]
 80066b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ba:	69b9      	ldr	r1, [r7, #24]
 80066bc:	69fa      	ldr	r2, [r7, #28]
 80066be:	e841 2300 	strex	r3, r2, [r1]
 80066c2:	617b      	str	r3, [r7, #20]
   return(result);
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1e5      	bne.n	8006696 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80066ca:	e002      	b.n	80066d2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80066cc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80066ce:	f7ff ff83 	bl	80065d8 <HAL_UART_TxCpltCallback>
}
 80066d2:	bf00      	nop
 80066d4:	3740      	adds	r7, #64	; 0x40
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b084      	sub	sp, #16
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f7ff ff7f 	bl	80065ec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066ee:	bf00      	nop
 80066f0:	3710      	adds	r7, #16
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b084      	sub	sp, #16
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80066fe:	2300      	movs	r3, #0
 8006700:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006706:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	695b      	ldr	r3, [r3, #20]
 800670e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006712:	2b80      	cmp	r3, #128	; 0x80
 8006714:	bf0c      	ite	eq
 8006716:	2301      	moveq	r3, #1
 8006718:	2300      	movne	r3, #0
 800671a:	b2db      	uxtb	r3, r3
 800671c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b21      	cmp	r3, #33	; 0x21
 8006728:	d108      	bne.n	800673c <UART_DMAError+0x46>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d005      	beq.n	800673c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	2200      	movs	r2, #0
 8006734:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006736:	68b8      	ldr	r0, [r7, #8]
 8006738:	f000 f827 	bl	800678a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006746:	2b40      	cmp	r3, #64	; 0x40
 8006748:	bf0c      	ite	eq
 800674a:	2301      	moveq	r3, #1
 800674c:	2300      	movne	r3, #0
 800674e:	b2db      	uxtb	r3, r3
 8006750:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006758:	b2db      	uxtb	r3, r3
 800675a:	2b22      	cmp	r3, #34	; 0x22
 800675c:	d108      	bne.n	8006770 <UART_DMAError+0x7a>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d005      	beq.n	8006770 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	2200      	movs	r2, #0
 8006768:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800676a:	68b8      	ldr	r0, [r7, #8]
 800676c:	f000 f835 	bl	80067da <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006774:	f043 0210 	orr.w	r2, r3, #16
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800677c:	68b8      	ldr	r0, [r7, #8]
 800677e:	f7ff ff49 	bl	8006614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006782:	bf00      	nop
 8006784:	3710      	adds	r7, #16
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800678a:	b480      	push	{r7}
 800678c:	b089      	sub	sp, #36	; 0x24
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	330c      	adds	r3, #12
 8006798:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	e853 3f00 	ldrex	r3, [r3]
 80067a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80067a8:	61fb      	str	r3, [r7, #28]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	330c      	adds	r3, #12
 80067b0:	69fa      	ldr	r2, [r7, #28]
 80067b2:	61ba      	str	r2, [r7, #24]
 80067b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b6:	6979      	ldr	r1, [r7, #20]
 80067b8:	69ba      	ldr	r2, [r7, #24]
 80067ba:	e841 2300 	strex	r3, r2, [r1]
 80067be:	613b      	str	r3, [r7, #16]
   return(result);
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d1e5      	bne.n	8006792 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2220      	movs	r2, #32
 80067ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80067ce:	bf00      	nop
 80067d0:	3724      	adds	r7, #36	; 0x24
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr

080067da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067da:	b480      	push	{r7}
 80067dc:	b095      	sub	sp, #84	; 0x54
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	330c      	adds	r3, #12
 80067e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ec:	e853 3f00 	ldrex	r3, [r3]
 80067f0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80067f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	330c      	adds	r3, #12
 8006800:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006802:	643a      	str	r2, [r7, #64]	; 0x40
 8006804:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006806:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006808:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800680a:	e841 2300 	strex	r3, r2, [r1]
 800680e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1e5      	bne.n	80067e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	3314      	adds	r3, #20
 800681c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681e:	6a3b      	ldr	r3, [r7, #32]
 8006820:	e853 3f00 	ldrex	r3, [r3]
 8006824:	61fb      	str	r3, [r7, #28]
   return(result);
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	f023 0301 	bic.w	r3, r3, #1
 800682c:	64bb      	str	r3, [r7, #72]	; 0x48
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	3314      	adds	r3, #20
 8006834:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006836:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006838:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800683c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800683e:	e841 2300 	strex	r3, r2, [r1]
 8006842:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1e5      	bne.n	8006816 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684e:	2b01      	cmp	r3, #1
 8006850:	d119      	bne.n	8006886 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	330c      	adds	r3, #12
 8006858:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	e853 3f00 	ldrex	r3, [r3]
 8006860:	60bb      	str	r3, [r7, #8]
   return(result);
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	f023 0310 	bic.w	r3, r3, #16
 8006868:	647b      	str	r3, [r7, #68]	; 0x44
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	330c      	adds	r3, #12
 8006870:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006872:	61ba      	str	r2, [r7, #24]
 8006874:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006876:	6979      	ldr	r1, [r7, #20]
 8006878:	69ba      	ldr	r2, [r7, #24]
 800687a:	e841 2300 	strex	r3, r2, [r1]
 800687e:	613b      	str	r3, [r7, #16]
   return(result);
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1e5      	bne.n	8006852 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2220      	movs	r2, #32
 800688a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006894:	bf00      	nop
 8006896:	3754      	adds	r7, #84	; 0x54
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f7ff feaa 	bl	8006614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068c0:	bf00      	nop
 80068c2:	3710      	adds	r7, #16
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	2b21      	cmp	r3, #33	; 0x21
 80068da:	d13e      	bne.n	800695a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068e4:	d114      	bne.n	8006910 <UART_Transmit_IT+0x48>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d110      	bne.n	8006910 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a1b      	ldr	r3, [r3, #32]
 80068f2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	881b      	ldrh	r3, [r3, #0]
 80068f8:	461a      	mov	r2, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006902:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a1b      	ldr	r3, [r3, #32]
 8006908:	1c9a      	adds	r2, r3, #2
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	621a      	str	r2, [r3, #32]
 800690e:	e008      	b.n	8006922 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a1b      	ldr	r3, [r3, #32]
 8006914:	1c59      	adds	r1, r3, #1
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	6211      	str	r1, [r2, #32]
 800691a:	781a      	ldrb	r2, [r3, #0]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006926:	b29b      	uxth	r3, r3
 8006928:	3b01      	subs	r3, #1
 800692a:	b29b      	uxth	r3, r3
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	4619      	mov	r1, r3
 8006930:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006932:	2b00      	cmp	r3, #0
 8006934:	d10f      	bne.n	8006956 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68da      	ldr	r2, [r3, #12]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006944:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68da      	ldr	r2, [r3, #12]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006954:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006956:	2300      	movs	r3, #0
 8006958:	e000      	b.n	800695c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800695a:	2302      	movs	r3, #2
  }
}
 800695c:	4618      	mov	r0, r3
 800695e:	3714      	adds	r7, #20
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68da      	ldr	r2, [r3, #12]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800697e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2220      	movs	r2, #32
 8006984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f7ff fe25 	bl	80065d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	3708      	adds	r7, #8
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b08c      	sub	sp, #48	; 0x30
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	2b22      	cmp	r3, #34	; 0x22
 80069aa:	f040 80ab 	bne.w	8006b04 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069b6:	d117      	bne.n	80069e8 <UART_Receive_IT+0x50>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d113      	bne.n	80069e8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80069c0:	2300      	movs	r3, #0
 80069c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069da:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e0:	1c9a      	adds	r2, r3, #2
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	629a      	str	r2, [r3, #40]	; 0x28
 80069e6:	e026      	b.n	8006a36 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80069ee:	2300      	movs	r3, #0
 80069f0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069fa:	d007      	beq.n	8006a0c <UART_Receive_IT+0x74>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d10a      	bne.n	8006a1a <UART_Receive_IT+0x82>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d106      	bne.n	8006a1a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	b2da      	uxtb	r2, r3
 8006a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a16:	701a      	strb	r2, [r3, #0]
 8006a18:	e008      	b.n	8006a2c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a26:	b2da      	uxtb	r2, r3
 8006a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a2a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a30:	1c5a      	adds	r2, r3, #1
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	4619      	mov	r1, r3
 8006a44:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d15a      	bne.n	8006b00 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68da      	ldr	r2, [r3, #12]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f022 0220 	bic.w	r2, r2, #32
 8006a58:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68da      	ldr	r2, [r3, #12]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a68:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	695a      	ldr	r2, [r3, #20]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f022 0201 	bic.w	r2, r2, #1
 8006a78:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2220      	movs	r2, #32
 8006a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d135      	bne.n	8006af6 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	330c      	adds	r3, #12
 8006a96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	e853 3f00 	ldrex	r3, [r3]
 8006a9e:	613b      	str	r3, [r7, #16]
   return(result);
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	f023 0310 	bic.w	r3, r3, #16
 8006aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	330c      	adds	r3, #12
 8006aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ab0:	623a      	str	r2, [r7, #32]
 8006ab2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab4:	69f9      	ldr	r1, [r7, #28]
 8006ab6:	6a3a      	ldr	r2, [r7, #32]
 8006ab8:	e841 2300 	strex	r3, r2, [r1]
 8006abc:	61bb      	str	r3, [r7, #24]
   return(result);
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d1e5      	bne.n	8006a90 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 0310 	and.w	r3, r3, #16
 8006ace:	2b10      	cmp	r3, #16
 8006ad0:	d10a      	bne.n	8006ae8 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	60fb      	str	r3, [r7, #12]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	60fb      	str	r3, [r7, #12]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	60fb      	str	r3, [r7, #12]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006aec:	4619      	mov	r1, r3
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f7ff fd9a 	bl	8006628 <HAL_UARTEx_RxEventCallback>
 8006af4:	e002      	b.n	8006afc <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f7ff fd82 	bl	8006600 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006afc:	2300      	movs	r3, #0
 8006afe:	e002      	b.n	8006b06 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006b00:	2300      	movs	r3, #0
 8006b02:	e000      	b.n	8006b06 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006b04:	2302      	movs	r3, #2
  }
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3730      	adds	r7, #48	; 0x30
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
	...

08006b10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b14:	b0c0      	sub	sp, #256	; 0x100
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b2c:	68d9      	ldr	r1, [r3, #12]
 8006b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	ea40 0301 	orr.w	r3, r0, r1
 8006b38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b3e:	689a      	ldr	r2, [r3, #8]
 8006b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	431a      	orrs	r2, r3
 8006b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	431a      	orrs	r2, r3
 8006b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b54:	69db      	ldr	r3, [r3, #28]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006b68:	f021 010c 	bic.w	r1, r1, #12
 8006b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b76:	430b      	orrs	r3, r1
 8006b78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b8a:	6999      	ldr	r1, [r3, #24]
 8006b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	ea40 0301 	orr.w	r3, r0, r1
 8006b96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	4b8f      	ldr	r3, [pc, #572]	; (8006ddc <UART_SetConfig+0x2cc>)
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d005      	beq.n	8006bb0 <UART_SetConfig+0xa0>
 8006ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	4b8d      	ldr	r3, [pc, #564]	; (8006de0 <UART_SetConfig+0x2d0>)
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d104      	bne.n	8006bba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006bb0:	f7fe f92a 	bl	8004e08 <HAL_RCC_GetPCLK2Freq>
 8006bb4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006bb8:	e003      	b.n	8006bc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006bba:	f7fe f911 	bl	8004de0 <HAL_RCC_GetPCLK1Freq>
 8006bbe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bc6:	69db      	ldr	r3, [r3, #28]
 8006bc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bcc:	f040 810c 	bne.w	8006de8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006bd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006bda:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006bde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006be2:	4622      	mov	r2, r4
 8006be4:	462b      	mov	r3, r5
 8006be6:	1891      	adds	r1, r2, r2
 8006be8:	65b9      	str	r1, [r7, #88]	; 0x58
 8006bea:	415b      	adcs	r3, r3
 8006bec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006bf2:	4621      	mov	r1, r4
 8006bf4:	eb12 0801 	adds.w	r8, r2, r1
 8006bf8:	4629      	mov	r1, r5
 8006bfa:	eb43 0901 	adc.w	r9, r3, r1
 8006bfe:	f04f 0200 	mov.w	r2, #0
 8006c02:	f04f 0300 	mov.w	r3, #0
 8006c06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c12:	4690      	mov	r8, r2
 8006c14:	4699      	mov	r9, r3
 8006c16:	4623      	mov	r3, r4
 8006c18:	eb18 0303 	adds.w	r3, r8, r3
 8006c1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c20:	462b      	mov	r3, r5
 8006c22:	eb49 0303 	adc.w	r3, r9, r3
 8006c26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c36:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006c3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006c3e:	460b      	mov	r3, r1
 8006c40:	18db      	adds	r3, r3, r3
 8006c42:	653b      	str	r3, [r7, #80]	; 0x50
 8006c44:	4613      	mov	r3, r2
 8006c46:	eb42 0303 	adc.w	r3, r2, r3
 8006c4a:	657b      	str	r3, [r7, #84]	; 0x54
 8006c4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006c50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006c54:	f7f9 fb0c 	bl	8000270 <__aeabi_uldivmod>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	4b61      	ldr	r3, [pc, #388]	; (8006de4 <UART_SetConfig+0x2d4>)
 8006c5e:	fba3 2302 	umull	r2, r3, r3, r2
 8006c62:	095b      	lsrs	r3, r3, #5
 8006c64:	011c      	lsls	r4, r3, #4
 8006c66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c70:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006c74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006c78:	4642      	mov	r2, r8
 8006c7a:	464b      	mov	r3, r9
 8006c7c:	1891      	adds	r1, r2, r2
 8006c7e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006c80:	415b      	adcs	r3, r3
 8006c82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006c88:	4641      	mov	r1, r8
 8006c8a:	eb12 0a01 	adds.w	sl, r2, r1
 8006c8e:	4649      	mov	r1, r9
 8006c90:	eb43 0b01 	adc.w	fp, r3, r1
 8006c94:	f04f 0200 	mov.w	r2, #0
 8006c98:	f04f 0300 	mov.w	r3, #0
 8006c9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ca0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006ca4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ca8:	4692      	mov	sl, r2
 8006caa:	469b      	mov	fp, r3
 8006cac:	4643      	mov	r3, r8
 8006cae:	eb1a 0303 	adds.w	r3, sl, r3
 8006cb2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006cb6:	464b      	mov	r3, r9
 8006cb8:	eb4b 0303 	adc.w	r3, fp, r3
 8006cbc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ccc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006cd0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	18db      	adds	r3, r3, r3
 8006cd8:	643b      	str	r3, [r7, #64]	; 0x40
 8006cda:	4613      	mov	r3, r2
 8006cdc:	eb42 0303 	adc.w	r3, r2, r3
 8006ce0:	647b      	str	r3, [r7, #68]	; 0x44
 8006ce2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006ce6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006cea:	f7f9 fac1 	bl	8000270 <__aeabi_uldivmod>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	4611      	mov	r1, r2
 8006cf4:	4b3b      	ldr	r3, [pc, #236]	; (8006de4 <UART_SetConfig+0x2d4>)
 8006cf6:	fba3 2301 	umull	r2, r3, r3, r1
 8006cfa:	095b      	lsrs	r3, r3, #5
 8006cfc:	2264      	movs	r2, #100	; 0x64
 8006cfe:	fb02 f303 	mul.w	r3, r2, r3
 8006d02:	1acb      	subs	r3, r1, r3
 8006d04:	00db      	lsls	r3, r3, #3
 8006d06:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006d0a:	4b36      	ldr	r3, [pc, #216]	; (8006de4 <UART_SetConfig+0x2d4>)
 8006d0c:	fba3 2302 	umull	r2, r3, r3, r2
 8006d10:	095b      	lsrs	r3, r3, #5
 8006d12:	005b      	lsls	r3, r3, #1
 8006d14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d18:	441c      	add	r4, r3
 8006d1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d24:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006d28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006d2c:	4642      	mov	r2, r8
 8006d2e:	464b      	mov	r3, r9
 8006d30:	1891      	adds	r1, r2, r2
 8006d32:	63b9      	str	r1, [r7, #56]	; 0x38
 8006d34:	415b      	adcs	r3, r3
 8006d36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006d3c:	4641      	mov	r1, r8
 8006d3e:	1851      	adds	r1, r2, r1
 8006d40:	6339      	str	r1, [r7, #48]	; 0x30
 8006d42:	4649      	mov	r1, r9
 8006d44:	414b      	adcs	r3, r1
 8006d46:	637b      	str	r3, [r7, #52]	; 0x34
 8006d48:	f04f 0200 	mov.w	r2, #0
 8006d4c:	f04f 0300 	mov.w	r3, #0
 8006d50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006d54:	4659      	mov	r1, fp
 8006d56:	00cb      	lsls	r3, r1, #3
 8006d58:	4651      	mov	r1, sl
 8006d5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d5e:	4651      	mov	r1, sl
 8006d60:	00ca      	lsls	r2, r1, #3
 8006d62:	4610      	mov	r0, r2
 8006d64:	4619      	mov	r1, r3
 8006d66:	4603      	mov	r3, r0
 8006d68:	4642      	mov	r2, r8
 8006d6a:	189b      	adds	r3, r3, r2
 8006d6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d70:	464b      	mov	r3, r9
 8006d72:	460a      	mov	r2, r1
 8006d74:	eb42 0303 	adc.w	r3, r2, r3
 8006d78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006d88:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006d8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006d90:	460b      	mov	r3, r1
 8006d92:	18db      	adds	r3, r3, r3
 8006d94:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d96:	4613      	mov	r3, r2
 8006d98:	eb42 0303 	adc.w	r3, r2, r3
 8006d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006da2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006da6:	f7f9 fa63 	bl	8000270 <__aeabi_uldivmod>
 8006daa:	4602      	mov	r2, r0
 8006dac:	460b      	mov	r3, r1
 8006dae:	4b0d      	ldr	r3, [pc, #52]	; (8006de4 <UART_SetConfig+0x2d4>)
 8006db0:	fba3 1302 	umull	r1, r3, r3, r2
 8006db4:	095b      	lsrs	r3, r3, #5
 8006db6:	2164      	movs	r1, #100	; 0x64
 8006db8:	fb01 f303 	mul.w	r3, r1, r3
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	00db      	lsls	r3, r3, #3
 8006dc0:	3332      	adds	r3, #50	; 0x32
 8006dc2:	4a08      	ldr	r2, [pc, #32]	; (8006de4 <UART_SetConfig+0x2d4>)
 8006dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc8:	095b      	lsrs	r3, r3, #5
 8006dca:	f003 0207 	and.w	r2, r3, #7
 8006dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4422      	add	r2, r4
 8006dd6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006dd8:	e105      	b.n	8006fe6 <UART_SetConfig+0x4d6>
 8006dda:	bf00      	nop
 8006ddc:	40011000 	.word	0x40011000
 8006de0:	40011400 	.word	0x40011400
 8006de4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006de8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dec:	2200      	movs	r2, #0
 8006dee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006df2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006df6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006dfa:	4642      	mov	r2, r8
 8006dfc:	464b      	mov	r3, r9
 8006dfe:	1891      	adds	r1, r2, r2
 8006e00:	6239      	str	r1, [r7, #32]
 8006e02:	415b      	adcs	r3, r3
 8006e04:	627b      	str	r3, [r7, #36]	; 0x24
 8006e06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e0a:	4641      	mov	r1, r8
 8006e0c:	1854      	adds	r4, r2, r1
 8006e0e:	4649      	mov	r1, r9
 8006e10:	eb43 0501 	adc.w	r5, r3, r1
 8006e14:	f04f 0200 	mov.w	r2, #0
 8006e18:	f04f 0300 	mov.w	r3, #0
 8006e1c:	00eb      	lsls	r3, r5, #3
 8006e1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e22:	00e2      	lsls	r2, r4, #3
 8006e24:	4614      	mov	r4, r2
 8006e26:	461d      	mov	r5, r3
 8006e28:	4643      	mov	r3, r8
 8006e2a:	18e3      	adds	r3, r4, r3
 8006e2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006e30:	464b      	mov	r3, r9
 8006e32:	eb45 0303 	adc.w	r3, r5, r3
 8006e36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006e4a:	f04f 0200 	mov.w	r2, #0
 8006e4e:	f04f 0300 	mov.w	r3, #0
 8006e52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006e56:	4629      	mov	r1, r5
 8006e58:	008b      	lsls	r3, r1, #2
 8006e5a:	4621      	mov	r1, r4
 8006e5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e60:	4621      	mov	r1, r4
 8006e62:	008a      	lsls	r2, r1, #2
 8006e64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006e68:	f7f9 fa02 	bl	8000270 <__aeabi_uldivmod>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	460b      	mov	r3, r1
 8006e70:	4b60      	ldr	r3, [pc, #384]	; (8006ff4 <UART_SetConfig+0x4e4>)
 8006e72:	fba3 2302 	umull	r2, r3, r3, r2
 8006e76:	095b      	lsrs	r3, r3, #5
 8006e78:	011c      	lsls	r4, r3, #4
 8006e7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006e84:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006e88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006e8c:	4642      	mov	r2, r8
 8006e8e:	464b      	mov	r3, r9
 8006e90:	1891      	adds	r1, r2, r2
 8006e92:	61b9      	str	r1, [r7, #24]
 8006e94:	415b      	adcs	r3, r3
 8006e96:	61fb      	str	r3, [r7, #28]
 8006e98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e9c:	4641      	mov	r1, r8
 8006e9e:	1851      	adds	r1, r2, r1
 8006ea0:	6139      	str	r1, [r7, #16]
 8006ea2:	4649      	mov	r1, r9
 8006ea4:	414b      	adcs	r3, r1
 8006ea6:	617b      	str	r3, [r7, #20]
 8006ea8:	f04f 0200 	mov.w	r2, #0
 8006eac:	f04f 0300 	mov.w	r3, #0
 8006eb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006eb4:	4659      	mov	r1, fp
 8006eb6:	00cb      	lsls	r3, r1, #3
 8006eb8:	4651      	mov	r1, sl
 8006eba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ebe:	4651      	mov	r1, sl
 8006ec0:	00ca      	lsls	r2, r1, #3
 8006ec2:	4610      	mov	r0, r2
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	4642      	mov	r2, r8
 8006eca:	189b      	adds	r3, r3, r2
 8006ecc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006ed0:	464b      	mov	r3, r9
 8006ed2:	460a      	mov	r2, r1
 8006ed4:	eb42 0303 	adc.w	r3, r2, r3
 8006ed8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	67bb      	str	r3, [r7, #120]	; 0x78
 8006ee6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006ee8:	f04f 0200 	mov.w	r2, #0
 8006eec:	f04f 0300 	mov.w	r3, #0
 8006ef0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006ef4:	4649      	mov	r1, r9
 8006ef6:	008b      	lsls	r3, r1, #2
 8006ef8:	4641      	mov	r1, r8
 8006efa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006efe:	4641      	mov	r1, r8
 8006f00:	008a      	lsls	r2, r1, #2
 8006f02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006f06:	f7f9 f9b3 	bl	8000270 <__aeabi_uldivmod>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	4b39      	ldr	r3, [pc, #228]	; (8006ff4 <UART_SetConfig+0x4e4>)
 8006f10:	fba3 1302 	umull	r1, r3, r3, r2
 8006f14:	095b      	lsrs	r3, r3, #5
 8006f16:	2164      	movs	r1, #100	; 0x64
 8006f18:	fb01 f303 	mul.w	r3, r1, r3
 8006f1c:	1ad3      	subs	r3, r2, r3
 8006f1e:	011b      	lsls	r3, r3, #4
 8006f20:	3332      	adds	r3, #50	; 0x32
 8006f22:	4a34      	ldr	r2, [pc, #208]	; (8006ff4 <UART_SetConfig+0x4e4>)
 8006f24:	fba2 2303 	umull	r2, r3, r2, r3
 8006f28:	095b      	lsrs	r3, r3, #5
 8006f2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f2e:	441c      	add	r4, r3
 8006f30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f34:	2200      	movs	r2, #0
 8006f36:	673b      	str	r3, [r7, #112]	; 0x70
 8006f38:	677a      	str	r2, [r7, #116]	; 0x74
 8006f3a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006f3e:	4642      	mov	r2, r8
 8006f40:	464b      	mov	r3, r9
 8006f42:	1891      	adds	r1, r2, r2
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	415b      	adcs	r3, r3
 8006f48:	60fb      	str	r3, [r7, #12]
 8006f4a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f4e:	4641      	mov	r1, r8
 8006f50:	1851      	adds	r1, r2, r1
 8006f52:	6039      	str	r1, [r7, #0]
 8006f54:	4649      	mov	r1, r9
 8006f56:	414b      	adcs	r3, r1
 8006f58:	607b      	str	r3, [r7, #4]
 8006f5a:	f04f 0200 	mov.w	r2, #0
 8006f5e:	f04f 0300 	mov.w	r3, #0
 8006f62:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006f66:	4659      	mov	r1, fp
 8006f68:	00cb      	lsls	r3, r1, #3
 8006f6a:	4651      	mov	r1, sl
 8006f6c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f70:	4651      	mov	r1, sl
 8006f72:	00ca      	lsls	r2, r1, #3
 8006f74:	4610      	mov	r0, r2
 8006f76:	4619      	mov	r1, r3
 8006f78:	4603      	mov	r3, r0
 8006f7a:	4642      	mov	r2, r8
 8006f7c:	189b      	adds	r3, r3, r2
 8006f7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f80:	464b      	mov	r3, r9
 8006f82:	460a      	mov	r2, r1
 8006f84:	eb42 0303 	adc.w	r3, r2, r3
 8006f88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	663b      	str	r3, [r7, #96]	; 0x60
 8006f94:	667a      	str	r2, [r7, #100]	; 0x64
 8006f96:	f04f 0200 	mov.w	r2, #0
 8006f9a:	f04f 0300 	mov.w	r3, #0
 8006f9e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006fa2:	4649      	mov	r1, r9
 8006fa4:	008b      	lsls	r3, r1, #2
 8006fa6:	4641      	mov	r1, r8
 8006fa8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fac:	4641      	mov	r1, r8
 8006fae:	008a      	lsls	r2, r1, #2
 8006fb0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006fb4:	f7f9 f95c 	bl	8000270 <__aeabi_uldivmod>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	460b      	mov	r3, r1
 8006fbc:	4b0d      	ldr	r3, [pc, #52]	; (8006ff4 <UART_SetConfig+0x4e4>)
 8006fbe:	fba3 1302 	umull	r1, r3, r3, r2
 8006fc2:	095b      	lsrs	r3, r3, #5
 8006fc4:	2164      	movs	r1, #100	; 0x64
 8006fc6:	fb01 f303 	mul.w	r3, r1, r3
 8006fca:	1ad3      	subs	r3, r2, r3
 8006fcc:	011b      	lsls	r3, r3, #4
 8006fce:	3332      	adds	r3, #50	; 0x32
 8006fd0:	4a08      	ldr	r2, [pc, #32]	; (8006ff4 <UART_SetConfig+0x4e4>)
 8006fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd6:	095b      	lsrs	r3, r3, #5
 8006fd8:	f003 020f 	and.w	r2, r3, #15
 8006fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4422      	add	r2, r4
 8006fe4:	609a      	str	r2, [r3, #8]
}
 8006fe6:	bf00      	nop
 8006fe8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006fec:	46bd      	mov	sp, r7
 8006fee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ff2:	bf00      	nop
 8006ff4:	51eb851f 	.word	0x51eb851f

08006ff8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ff8:	b084      	sub	sp, #16
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b084      	sub	sp, #16
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
 8007002:	f107 001c 	add.w	r0, r7, #28
 8007006:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800700a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700c:	2b01      	cmp	r3, #1
 800700e:	d122      	bne.n	8007056 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007014:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007024:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800703a:	2b01      	cmp	r3, #1
 800703c:	d105      	bne.n	800704a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f001 fbee 	bl	800882c <USB_CoreReset>
 8007050:	4603      	mov	r3, r0
 8007052:	73fb      	strb	r3, [r7, #15]
 8007054:	e01a      	b.n	800708c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f001 fbe2 	bl	800882c <USB_CoreReset>
 8007068:	4603      	mov	r3, r0
 800706a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800706c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800706e:	2b00      	cmp	r3, #0
 8007070:	d106      	bne.n	8007080 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007076:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	639a      	str	r2, [r3, #56]	; 0x38
 800707e:	e005      	b.n	800708c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007084:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800708c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708e:	2b01      	cmp	r3, #1
 8007090:	d10b      	bne.n	80070aa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	f043 0206 	orr.w	r2, r3, #6
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f043 0220 	orr.w	r2, r3, #32
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80070aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3710      	adds	r7, #16
 80070b0:	46bd      	mov	sp, r7
 80070b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070b6:	b004      	add	sp, #16
 80070b8:	4770      	bx	lr
	...

080070bc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80070bc:	b480      	push	{r7}
 80070be:	b087      	sub	sp, #28
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	4613      	mov	r3, r2
 80070c8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80070ca:	79fb      	ldrb	r3, [r7, #7]
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d165      	bne.n	800719c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	4a41      	ldr	r2, [pc, #260]	; (80071d8 <USB_SetTurnaroundTime+0x11c>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d906      	bls.n	80070e6 <USB_SetTurnaroundTime+0x2a>
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	4a40      	ldr	r2, [pc, #256]	; (80071dc <USB_SetTurnaroundTime+0x120>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d202      	bcs.n	80070e6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80070e0:	230f      	movs	r3, #15
 80070e2:	617b      	str	r3, [r7, #20]
 80070e4:	e062      	b.n	80071ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	4a3c      	ldr	r2, [pc, #240]	; (80071dc <USB_SetTurnaroundTime+0x120>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d306      	bcc.n	80070fc <USB_SetTurnaroundTime+0x40>
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	4a3b      	ldr	r2, [pc, #236]	; (80071e0 <USB_SetTurnaroundTime+0x124>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d202      	bcs.n	80070fc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80070f6:	230e      	movs	r3, #14
 80070f8:	617b      	str	r3, [r7, #20]
 80070fa:	e057      	b.n	80071ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	4a38      	ldr	r2, [pc, #224]	; (80071e0 <USB_SetTurnaroundTime+0x124>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d306      	bcc.n	8007112 <USB_SetTurnaroundTime+0x56>
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	4a37      	ldr	r2, [pc, #220]	; (80071e4 <USB_SetTurnaroundTime+0x128>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d202      	bcs.n	8007112 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800710c:	230d      	movs	r3, #13
 800710e:	617b      	str	r3, [r7, #20]
 8007110:	e04c      	b.n	80071ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	4a33      	ldr	r2, [pc, #204]	; (80071e4 <USB_SetTurnaroundTime+0x128>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d306      	bcc.n	8007128 <USB_SetTurnaroundTime+0x6c>
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	4a32      	ldr	r2, [pc, #200]	; (80071e8 <USB_SetTurnaroundTime+0x12c>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d802      	bhi.n	8007128 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007122:	230c      	movs	r3, #12
 8007124:	617b      	str	r3, [r7, #20]
 8007126:	e041      	b.n	80071ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	4a2f      	ldr	r2, [pc, #188]	; (80071e8 <USB_SetTurnaroundTime+0x12c>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d906      	bls.n	800713e <USB_SetTurnaroundTime+0x82>
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	4a2e      	ldr	r2, [pc, #184]	; (80071ec <USB_SetTurnaroundTime+0x130>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d802      	bhi.n	800713e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007138:	230b      	movs	r3, #11
 800713a:	617b      	str	r3, [r7, #20]
 800713c:	e036      	b.n	80071ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	4a2a      	ldr	r2, [pc, #168]	; (80071ec <USB_SetTurnaroundTime+0x130>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d906      	bls.n	8007154 <USB_SetTurnaroundTime+0x98>
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	4a29      	ldr	r2, [pc, #164]	; (80071f0 <USB_SetTurnaroundTime+0x134>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d802      	bhi.n	8007154 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800714e:	230a      	movs	r3, #10
 8007150:	617b      	str	r3, [r7, #20]
 8007152:	e02b      	b.n	80071ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	4a26      	ldr	r2, [pc, #152]	; (80071f0 <USB_SetTurnaroundTime+0x134>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d906      	bls.n	800716a <USB_SetTurnaroundTime+0xae>
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	4a25      	ldr	r2, [pc, #148]	; (80071f4 <USB_SetTurnaroundTime+0x138>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d202      	bcs.n	800716a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007164:	2309      	movs	r3, #9
 8007166:	617b      	str	r3, [r7, #20]
 8007168:	e020      	b.n	80071ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	4a21      	ldr	r2, [pc, #132]	; (80071f4 <USB_SetTurnaroundTime+0x138>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d306      	bcc.n	8007180 <USB_SetTurnaroundTime+0xc4>
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	4a20      	ldr	r2, [pc, #128]	; (80071f8 <USB_SetTurnaroundTime+0x13c>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d802      	bhi.n	8007180 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800717a:	2308      	movs	r3, #8
 800717c:	617b      	str	r3, [r7, #20]
 800717e:	e015      	b.n	80071ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	4a1d      	ldr	r2, [pc, #116]	; (80071f8 <USB_SetTurnaroundTime+0x13c>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d906      	bls.n	8007196 <USB_SetTurnaroundTime+0xda>
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	4a1c      	ldr	r2, [pc, #112]	; (80071fc <USB_SetTurnaroundTime+0x140>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d202      	bcs.n	8007196 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007190:	2307      	movs	r3, #7
 8007192:	617b      	str	r3, [r7, #20]
 8007194:	e00a      	b.n	80071ac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007196:	2306      	movs	r3, #6
 8007198:	617b      	str	r3, [r7, #20]
 800719a:	e007      	b.n	80071ac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800719c:	79fb      	ldrb	r3, [r7, #7]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d102      	bne.n	80071a8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80071a2:	2309      	movs	r3, #9
 80071a4:	617b      	str	r3, [r7, #20]
 80071a6:	e001      	b.n	80071ac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80071a8:	2309      	movs	r3, #9
 80071aa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	68da      	ldr	r2, [r3, #12]
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	029b      	lsls	r3, r3, #10
 80071c0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80071c4:	431a      	orrs	r2, r3
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	371c      	adds	r7, #28
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr
 80071d8:	00d8acbf 	.word	0x00d8acbf
 80071dc:	00e4e1c0 	.word	0x00e4e1c0
 80071e0:	00f42400 	.word	0x00f42400
 80071e4:	01067380 	.word	0x01067380
 80071e8:	011a499f 	.word	0x011a499f
 80071ec:	01312cff 	.word	0x01312cff
 80071f0:	014ca43f 	.word	0x014ca43f
 80071f4:	016e3600 	.word	0x016e3600
 80071f8:	01a6ab1f 	.word	0x01a6ab1f
 80071fc:	01e84800 	.word	0x01e84800

08007200 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	f043 0201 	orr.w	r2, r3, #1
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	370c      	adds	r7, #12
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr

08007222 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007222:	b480      	push	{r7}
 8007224:	b083      	sub	sp, #12
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	f023 0201 	bic.w	r2, r3, #1
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	460b      	mov	r3, r1
 800724e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007250:	2300      	movs	r3, #0
 8007252:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007260:	78fb      	ldrb	r3, [r7, #3]
 8007262:	2b01      	cmp	r3, #1
 8007264:	d115      	bne.n	8007292 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007272:	2001      	movs	r0, #1
 8007274:	f7fa fbc8 	bl	8001a08 <HAL_Delay>
      ms++;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	3301      	adds	r3, #1
 800727c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f001 fa45 	bl	800870e <USB_GetMode>
 8007284:	4603      	mov	r3, r0
 8007286:	2b01      	cmp	r3, #1
 8007288:	d01e      	beq.n	80072c8 <USB_SetCurrentMode+0x84>
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2b31      	cmp	r3, #49	; 0x31
 800728e:	d9f0      	bls.n	8007272 <USB_SetCurrentMode+0x2e>
 8007290:	e01a      	b.n	80072c8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007292:	78fb      	ldrb	r3, [r7, #3]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d115      	bne.n	80072c4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	68db      	ldr	r3, [r3, #12]
 800729c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80072a4:	2001      	movs	r0, #1
 80072a6:	f7fa fbaf 	bl	8001a08 <HAL_Delay>
      ms++;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	3301      	adds	r3, #1
 80072ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f001 fa2c 	bl	800870e <USB_GetMode>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d005      	beq.n	80072c8 <USB_SetCurrentMode+0x84>
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2b31      	cmp	r3, #49	; 0x31
 80072c0:	d9f0      	bls.n	80072a4 <USB_SetCurrentMode+0x60>
 80072c2:	e001      	b.n	80072c8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	e005      	b.n	80072d4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2b32      	cmp	r3, #50	; 0x32
 80072cc:	d101      	bne.n	80072d2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e000      	b.n	80072d4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80072dc:	b084      	sub	sp, #16
 80072de:	b580      	push	{r7, lr}
 80072e0:	b086      	sub	sp, #24
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
 80072e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80072ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80072ee:	2300      	movs	r3, #0
 80072f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80072f6:	2300      	movs	r3, #0
 80072f8:	613b      	str	r3, [r7, #16]
 80072fa:	e009      	b.n	8007310 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	3340      	adds	r3, #64	; 0x40
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	4413      	add	r3, r2
 8007306:	2200      	movs	r2, #0
 8007308:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	3301      	adds	r3, #1
 800730e:	613b      	str	r3, [r7, #16]
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	2b0e      	cmp	r3, #14
 8007314:	d9f2      	bls.n	80072fc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007318:	2b00      	cmp	r3, #0
 800731a:	d11c      	bne.n	8007356 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800732a:	f043 0302 	orr.w	r3, r3, #2
 800732e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007334:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007340:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800734c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	639a      	str	r2, [r3, #56]	; 0x38
 8007354:	e00b      	b.n	800736e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007366:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007374:	461a      	mov	r2, r3
 8007376:	2300      	movs	r3, #0
 8007378:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007380:	4619      	mov	r1, r3
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007388:	461a      	mov	r2, r3
 800738a:	680b      	ldr	r3, [r1, #0]
 800738c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800738e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007390:	2b01      	cmp	r3, #1
 8007392:	d10c      	bne.n	80073ae <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007396:	2b00      	cmp	r3, #0
 8007398:	d104      	bne.n	80073a4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800739a:	2100      	movs	r1, #0
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 f965 	bl	800766c <USB_SetDevSpeed>
 80073a2:	e008      	b.n	80073b6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80073a4:	2101      	movs	r1, #1
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 f960 	bl	800766c <USB_SetDevSpeed>
 80073ac:	e003      	b.n	80073b6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80073ae:	2103      	movs	r1, #3
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 f95b 	bl	800766c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80073b6:	2110      	movs	r1, #16
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 f8f3 	bl	80075a4 <USB_FlushTxFifo>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d001      	beq.n	80073c8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 f91f 	bl	800760c <USB_FlushRxFifo>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d001      	beq.n	80073d8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073de:	461a      	mov	r2, r3
 80073e0:	2300      	movs	r3, #0
 80073e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ea:	461a      	mov	r2, r3
 80073ec:	2300      	movs	r3, #0
 80073ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073f6:	461a      	mov	r2, r3
 80073f8:	2300      	movs	r3, #0
 80073fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073fc:	2300      	movs	r3, #0
 80073fe:	613b      	str	r3, [r7, #16]
 8007400:	e043      	b.n	800748a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	015a      	lsls	r2, r3, #5
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	4413      	add	r3, r2
 800740a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007414:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007418:	d118      	bne.n	800744c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d10a      	bne.n	8007436 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	015a      	lsls	r2, r3, #5
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	4413      	add	r3, r2
 8007428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800742c:	461a      	mov	r2, r3
 800742e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007432:	6013      	str	r3, [r2, #0]
 8007434:	e013      	b.n	800745e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	015a      	lsls	r2, r3, #5
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	4413      	add	r3, r2
 800743e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007442:	461a      	mov	r2, r3
 8007444:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007448:	6013      	str	r3, [r2, #0]
 800744a:	e008      	b.n	800745e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	015a      	lsls	r2, r3, #5
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	4413      	add	r3, r2
 8007454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007458:	461a      	mov	r2, r3
 800745a:	2300      	movs	r3, #0
 800745c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	015a      	lsls	r2, r3, #5
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	4413      	add	r3, r2
 8007466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800746a:	461a      	mov	r2, r3
 800746c:	2300      	movs	r3, #0
 800746e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	015a      	lsls	r2, r3, #5
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	4413      	add	r3, r2
 8007478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800747c:	461a      	mov	r2, r3
 800747e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007482:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	3301      	adds	r3, #1
 8007488:	613b      	str	r3, [r7, #16]
 800748a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748c:	693a      	ldr	r2, [r7, #16]
 800748e:	429a      	cmp	r2, r3
 8007490:	d3b7      	bcc.n	8007402 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007492:	2300      	movs	r3, #0
 8007494:	613b      	str	r3, [r7, #16]
 8007496:	e043      	b.n	8007520 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	015a      	lsls	r2, r3, #5
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	4413      	add	r3, r2
 80074a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074ae:	d118      	bne.n	80074e2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d10a      	bne.n	80074cc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	015a      	lsls	r2, r3, #5
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	4413      	add	r3, r2
 80074be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074c2:	461a      	mov	r2, r3
 80074c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80074c8:	6013      	str	r3, [r2, #0]
 80074ca:	e013      	b.n	80074f4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	015a      	lsls	r2, r3, #5
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	4413      	add	r3, r2
 80074d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074d8:	461a      	mov	r2, r3
 80074da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80074de:	6013      	str	r3, [r2, #0]
 80074e0:	e008      	b.n	80074f4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	015a      	lsls	r2, r3, #5
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	4413      	add	r3, r2
 80074ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ee:	461a      	mov	r2, r3
 80074f0:	2300      	movs	r3, #0
 80074f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	015a      	lsls	r2, r3, #5
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	4413      	add	r3, r2
 80074fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007500:	461a      	mov	r2, r3
 8007502:	2300      	movs	r3, #0
 8007504:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	015a      	lsls	r2, r3, #5
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	4413      	add	r3, r2
 800750e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007512:	461a      	mov	r2, r3
 8007514:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007518:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	3301      	adds	r3, #1
 800751e:	613b      	str	r3, [r7, #16]
 8007520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007522:	693a      	ldr	r2, [r7, #16]
 8007524:	429a      	cmp	r2, r3
 8007526:	d3b7      	bcc.n	8007498 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	68fa      	ldr	r2, [r7, #12]
 8007532:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007536:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800753a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007548:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800754a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754c:	2b00      	cmp	r3, #0
 800754e:	d105      	bne.n	800755c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	699b      	ldr	r3, [r3, #24]
 8007554:	f043 0210 	orr.w	r2, r3, #16
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	699a      	ldr	r2, [r3, #24]
 8007560:	4b0f      	ldr	r3, [pc, #60]	; (80075a0 <USB_DevInit+0x2c4>)
 8007562:	4313      	orrs	r3, r2
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800756a:	2b00      	cmp	r3, #0
 800756c:	d005      	beq.n	800757a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	f043 0208 	orr.w	r2, r3, #8
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800757a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800757c:	2b01      	cmp	r3, #1
 800757e:	d107      	bne.n	8007590 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	699b      	ldr	r3, [r3, #24]
 8007584:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007588:	f043 0304 	orr.w	r3, r3, #4
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007590:	7dfb      	ldrb	r3, [r7, #23]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3718      	adds	r7, #24
 8007596:	46bd      	mov	sp, r7
 8007598:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800759c:	b004      	add	sp, #16
 800759e:	4770      	bx	lr
 80075a0:	803c3800 	.word	0x803c3800

080075a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80075ae:	2300      	movs	r3, #0
 80075b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	3301      	adds	r3, #1
 80075b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	4a13      	ldr	r2, [pc, #76]	; (8007608 <USB_FlushTxFifo+0x64>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d901      	bls.n	80075c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80075c0:	2303      	movs	r3, #3
 80075c2:	e01b      	b.n	80075fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	daf2      	bge.n	80075b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80075cc:	2300      	movs	r3, #0
 80075ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	019b      	lsls	r3, r3, #6
 80075d4:	f043 0220 	orr.w	r2, r3, #32
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	3301      	adds	r3, #1
 80075e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	4a08      	ldr	r2, [pc, #32]	; (8007608 <USB_FlushTxFifo+0x64>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d901      	bls.n	80075ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80075ea:	2303      	movs	r3, #3
 80075ec:	e006      	b.n	80075fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	f003 0320 	and.w	r3, r3, #32
 80075f6:	2b20      	cmp	r3, #32
 80075f8:	d0f0      	beq.n	80075dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3714      	adds	r7, #20
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr
 8007608:	00030d40 	.word	0x00030d40

0800760c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800760c:	b480      	push	{r7}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007614:	2300      	movs	r3, #0
 8007616:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	3301      	adds	r3, #1
 800761c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	4a11      	ldr	r2, [pc, #68]	; (8007668 <USB_FlushRxFifo+0x5c>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d901      	bls.n	800762a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007626:	2303      	movs	r3, #3
 8007628:	e018      	b.n	800765c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	2b00      	cmp	r3, #0
 8007630:	daf2      	bge.n	8007618 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007632:	2300      	movs	r3, #0
 8007634:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2210      	movs	r2, #16
 800763a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	3301      	adds	r3, #1
 8007640:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	4a08      	ldr	r2, [pc, #32]	; (8007668 <USB_FlushRxFifo+0x5c>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d901      	bls.n	800764e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	e006      	b.n	800765c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	f003 0310 	and.w	r3, r3, #16
 8007656:	2b10      	cmp	r3, #16
 8007658:	d0f0      	beq.n	800763c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	3714      	adds	r7, #20
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr
 8007668:	00030d40 	.word	0x00030d40

0800766c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	460b      	mov	r3, r1
 8007676:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	78fb      	ldrb	r3, [r7, #3]
 8007686:	68f9      	ldr	r1, [r7, #12]
 8007688:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800768c:	4313      	orrs	r3, r2
 800768e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3714      	adds	r7, #20
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800769e:	b480      	push	{r7}
 80076a0:	b087      	sub	sp, #28
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	f003 0306 	and.w	r3, r3, #6
 80076b6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d102      	bne.n	80076c4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80076be:	2300      	movs	r3, #0
 80076c0:	75fb      	strb	r3, [r7, #23]
 80076c2:	e00a      	b.n	80076da <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	d002      	beq.n	80076d0 <USB_GetDevSpeed+0x32>
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2b06      	cmp	r3, #6
 80076ce:	d102      	bne.n	80076d6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80076d0:	2302      	movs	r3, #2
 80076d2:	75fb      	strb	r3, [r7, #23]
 80076d4:	e001      	b.n	80076da <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80076d6:	230f      	movs	r3, #15
 80076d8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80076da:	7dfb      	ldrb	r3, [r7, #23]
}
 80076dc:	4618      	mov	r0, r3
 80076de:	371c      	adds	r7, #28
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	785b      	ldrb	r3, [r3, #1]
 8007700:	2b01      	cmp	r3, #1
 8007702:	d13a      	bne.n	800777a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800770a:	69da      	ldr	r2, [r3, #28]
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	f003 030f 	and.w	r3, r3, #15
 8007714:	2101      	movs	r1, #1
 8007716:	fa01 f303 	lsl.w	r3, r1, r3
 800771a:	b29b      	uxth	r3, r3
 800771c:	68f9      	ldr	r1, [r7, #12]
 800771e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007722:	4313      	orrs	r3, r2
 8007724:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	015a      	lsls	r2, r3, #5
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	4413      	add	r3, r2
 800772e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007738:	2b00      	cmp	r3, #0
 800773a:	d155      	bne.n	80077e8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	015a      	lsls	r2, r3, #5
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	4413      	add	r3, r2
 8007744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	791b      	ldrb	r3, [r3, #4]
 8007756:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007758:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	059b      	lsls	r3, r3, #22
 800775e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007760:	4313      	orrs	r3, r2
 8007762:	68ba      	ldr	r2, [r7, #8]
 8007764:	0151      	lsls	r1, r2, #5
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	440a      	add	r2, r1
 800776a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800776e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007772:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007776:	6013      	str	r3, [r2, #0]
 8007778:	e036      	b.n	80077e8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007780:	69da      	ldr	r2, [r3, #28]
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	f003 030f 	and.w	r3, r3, #15
 800778a:	2101      	movs	r1, #1
 800778c:	fa01 f303 	lsl.w	r3, r1, r3
 8007790:	041b      	lsls	r3, r3, #16
 8007792:	68f9      	ldr	r1, [r7, #12]
 8007794:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007798:	4313      	orrs	r3, r2
 800779a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	015a      	lsls	r2, r3, #5
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	4413      	add	r3, r2
 80077a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d11a      	bne.n	80077e8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	015a      	lsls	r2, r3, #5
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	4413      	add	r3, r2
 80077ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	791b      	ldrb	r3, [r3, #4]
 80077cc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80077ce:	430b      	orrs	r3, r1
 80077d0:	4313      	orrs	r3, r2
 80077d2:	68ba      	ldr	r2, [r7, #8]
 80077d4:	0151      	lsls	r1, r2, #5
 80077d6:	68fa      	ldr	r2, [r7, #12]
 80077d8:	440a      	add	r2, r1
 80077da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077e6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80077e8:	2300      	movs	r3, #0
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3714      	adds	r7, #20
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr
	...

080077f8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b085      	sub	sp, #20
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	785b      	ldrb	r3, [r3, #1]
 8007810:	2b01      	cmp	r3, #1
 8007812:	d161      	bne.n	80078d8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	015a      	lsls	r2, r3, #5
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	4413      	add	r3, r2
 800781c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007826:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800782a:	d11f      	bne.n	800786c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	015a      	lsls	r2, r3, #5
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	4413      	add	r3, r2
 8007834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	68ba      	ldr	r2, [r7, #8]
 800783c:	0151      	lsls	r1, r2, #5
 800783e:	68fa      	ldr	r2, [r7, #12]
 8007840:	440a      	add	r2, r1
 8007842:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007846:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800784a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	015a      	lsls	r2, r3, #5
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	4413      	add	r3, r2
 8007854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	68ba      	ldr	r2, [r7, #8]
 800785c:	0151      	lsls	r1, r2, #5
 800785e:	68fa      	ldr	r2, [r7, #12]
 8007860:	440a      	add	r2, r1
 8007862:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007866:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800786a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007872:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	f003 030f 	and.w	r3, r3, #15
 800787c:	2101      	movs	r1, #1
 800787e:	fa01 f303 	lsl.w	r3, r1, r3
 8007882:	b29b      	uxth	r3, r3
 8007884:	43db      	mvns	r3, r3
 8007886:	68f9      	ldr	r1, [r7, #12]
 8007888:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800788c:	4013      	ands	r3, r2
 800788e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007896:	69da      	ldr	r2, [r3, #28]
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	f003 030f 	and.w	r3, r3, #15
 80078a0:	2101      	movs	r1, #1
 80078a2:	fa01 f303 	lsl.w	r3, r1, r3
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	43db      	mvns	r3, r3
 80078aa:	68f9      	ldr	r1, [r7, #12]
 80078ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078b0:	4013      	ands	r3, r2
 80078b2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	015a      	lsls	r2, r3, #5
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	4413      	add	r3, r2
 80078bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	0159      	lsls	r1, r3, #5
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	440b      	add	r3, r1
 80078ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ce:	4619      	mov	r1, r3
 80078d0:	4b35      	ldr	r3, [pc, #212]	; (80079a8 <USB_DeactivateEndpoint+0x1b0>)
 80078d2:	4013      	ands	r3, r2
 80078d4:	600b      	str	r3, [r1, #0]
 80078d6:	e060      	b.n	800799a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	015a      	lsls	r2, r3, #5
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	4413      	add	r3, r2
 80078e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078ee:	d11f      	bne.n	8007930 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	015a      	lsls	r2, r3, #5
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	4413      	add	r3, r2
 80078f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	68ba      	ldr	r2, [r7, #8]
 8007900:	0151      	lsls	r1, r2, #5
 8007902:	68fa      	ldr	r2, [r7, #12]
 8007904:	440a      	add	r2, r1
 8007906:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800790a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800790e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	015a      	lsls	r2, r3, #5
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	4413      	add	r3, r2
 8007918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	68ba      	ldr	r2, [r7, #8]
 8007920:	0151      	lsls	r1, r2, #5
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	440a      	add	r2, r1
 8007926:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800792a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800792e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007936:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	f003 030f 	and.w	r3, r3, #15
 8007940:	2101      	movs	r1, #1
 8007942:	fa01 f303 	lsl.w	r3, r1, r3
 8007946:	041b      	lsls	r3, r3, #16
 8007948:	43db      	mvns	r3, r3
 800794a:	68f9      	ldr	r1, [r7, #12]
 800794c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007950:	4013      	ands	r3, r2
 8007952:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800795a:	69da      	ldr	r2, [r3, #28]
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	f003 030f 	and.w	r3, r3, #15
 8007964:	2101      	movs	r1, #1
 8007966:	fa01 f303 	lsl.w	r3, r1, r3
 800796a:	041b      	lsls	r3, r3, #16
 800796c:	43db      	mvns	r3, r3
 800796e:	68f9      	ldr	r1, [r7, #12]
 8007970:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007974:	4013      	ands	r3, r2
 8007976:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	015a      	lsls	r2, r3, #5
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	4413      	add	r3, r2
 8007980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	0159      	lsls	r1, r3, #5
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	440b      	add	r3, r1
 800798e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007992:	4619      	mov	r1, r3
 8007994:	4b05      	ldr	r3, [pc, #20]	; (80079ac <USB_DeactivateEndpoint+0x1b4>)
 8007996:	4013      	ands	r3, r2
 8007998:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	3714      	adds	r7, #20
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr
 80079a8:	ec337800 	.word	0xec337800
 80079ac:	eff37800 	.word	0xeff37800

080079b0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b08a      	sub	sp, #40	; 0x28
 80079b4:	af02      	add	r7, sp, #8
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	4613      	mov	r3, r2
 80079bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	785b      	ldrb	r3, [r3, #1]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	f040 815c 	bne.w	8007c8a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	699b      	ldr	r3, [r3, #24]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d132      	bne.n	8007a40 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80079da:	69bb      	ldr	r3, [r7, #24]
 80079dc:	015a      	lsls	r2, r3, #5
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	4413      	add	r3, r2
 80079e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	69ba      	ldr	r2, [r7, #24]
 80079ea:	0151      	lsls	r1, r2, #5
 80079ec:	69fa      	ldr	r2, [r7, #28]
 80079ee:	440a      	add	r2, r1
 80079f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80079f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80079fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	015a      	lsls	r2, r3, #5
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	4413      	add	r3, r2
 8007a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a0a:	691b      	ldr	r3, [r3, #16]
 8007a0c:	69ba      	ldr	r2, [r7, #24]
 8007a0e:	0151      	lsls	r1, r2, #5
 8007a10:	69fa      	ldr	r2, [r7, #28]
 8007a12:	440a      	add	r2, r1
 8007a14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	015a      	lsls	r2, r3, #5
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	4413      	add	r3, r2
 8007a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	69ba      	ldr	r2, [r7, #24]
 8007a2e:	0151      	lsls	r1, r2, #5
 8007a30:	69fa      	ldr	r2, [r7, #28]
 8007a32:	440a      	add	r2, r1
 8007a34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a38:	0cdb      	lsrs	r3, r3, #19
 8007a3a:	04db      	lsls	r3, r3, #19
 8007a3c:	6113      	str	r3, [r2, #16]
 8007a3e:	e074      	b.n	8007b2a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a40:	69bb      	ldr	r3, [r7, #24]
 8007a42:	015a      	lsls	r2, r3, #5
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	4413      	add	r3, r2
 8007a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	69ba      	ldr	r2, [r7, #24]
 8007a50:	0151      	lsls	r1, r2, #5
 8007a52:	69fa      	ldr	r2, [r7, #28]
 8007a54:	440a      	add	r2, r1
 8007a56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a5a:	0cdb      	lsrs	r3, r3, #19
 8007a5c:	04db      	lsls	r3, r3, #19
 8007a5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a60:	69bb      	ldr	r3, [r7, #24]
 8007a62:	015a      	lsls	r2, r3, #5
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	4413      	add	r3, r2
 8007a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a6c:	691b      	ldr	r3, [r3, #16]
 8007a6e:	69ba      	ldr	r2, [r7, #24]
 8007a70:	0151      	lsls	r1, r2, #5
 8007a72:	69fa      	ldr	r2, [r7, #28]
 8007a74:	440a      	add	r2, r1
 8007a76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a7a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007a7e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007a82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	015a      	lsls	r2, r3, #5
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a90:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	6999      	ldr	r1, [r3, #24]
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	440b      	add	r3, r1
 8007a9c:	1e59      	subs	r1, r3, #1
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	fbb1 f3f3 	udiv	r3, r1, r3
 8007aa6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007aa8:	4b9d      	ldr	r3, [pc, #628]	; (8007d20 <USB_EPStartXfer+0x370>)
 8007aaa:	400b      	ands	r3, r1
 8007aac:	69b9      	ldr	r1, [r7, #24]
 8007aae:	0148      	lsls	r0, r1, #5
 8007ab0:	69f9      	ldr	r1, [r7, #28]
 8007ab2:	4401      	add	r1, r0
 8007ab4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	015a      	lsls	r2, r3, #5
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	4413      	add	r3, r2
 8007ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ac8:	691a      	ldr	r2, [r3, #16]
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	699b      	ldr	r3, [r3, #24]
 8007ace:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ad2:	69b9      	ldr	r1, [r7, #24]
 8007ad4:	0148      	lsls	r0, r1, #5
 8007ad6:	69f9      	ldr	r1, [r7, #28]
 8007ad8:	4401      	add	r1, r0
 8007ada:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	791b      	ldrb	r3, [r3, #4]
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d11f      	bne.n	8007b2a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007aea:	69bb      	ldr	r3, [r7, #24]
 8007aec:	015a      	lsls	r2, r3, #5
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	4413      	add	r3, r2
 8007af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007af6:	691b      	ldr	r3, [r3, #16]
 8007af8:	69ba      	ldr	r2, [r7, #24]
 8007afa:	0151      	lsls	r1, r2, #5
 8007afc:	69fa      	ldr	r2, [r7, #28]
 8007afe:	440a      	add	r2, r1
 8007b00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b04:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007b08:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	015a      	lsls	r2, r3, #5
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	4413      	add	r3, r2
 8007b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	69ba      	ldr	r2, [r7, #24]
 8007b1a:	0151      	lsls	r1, r2, #5
 8007b1c:	69fa      	ldr	r2, [r7, #28]
 8007b1e:	440a      	add	r2, r1
 8007b20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b28:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007b2a:	79fb      	ldrb	r3, [r7, #7]
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d14b      	bne.n	8007bc8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	695b      	ldr	r3, [r3, #20]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d009      	beq.n	8007b4c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	015a      	lsls	r2, r3, #5
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	4413      	add	r3, r2
 8007b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b44:	461a      	mov	r2, r3
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	695b      	ldr	r3, [r3, #20]
 8007b4a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	791b      	ldrb	r3, [r3, #4]
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d128      	bne.n	8007ba6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007b54:	69fb      	ldr	r3, [r7, #28]
 8007b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d110      	bne.n	8007b86 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	015a      	lsls	r2, r3, #5
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	69ba      	ldr	r2, [r7, #24]
 8007b74:	0151      	lsls	r1, r2, #5
 8007b76:	69fa      	ldr	r2, [r7, #28]
 8007b78:	440a      	add	r2, r1
 8007b7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b82:	6013      	str	r3, [r2, #0]
 8007b84:	e00f      	b.n	8007ba6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	015a      	lsls	r2, r3, #5
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	69ba      	ldr	r2, [r7, #24]
 8007b96:	0151      	lsls	r1, r2, #5
 8007b98:	69fa      	ldr	r2, [r7, #28]
 8007b9a:	440a      	add	r2, r1
 8007b9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ba4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	015a      	lsls	r2, r3, #5
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	4413      	add	r3, r2
 8007bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	69ba      	ldr	r2, [r7, #24]
 8007bb6:	0151      	lsls	r1, r2, #5
 8007bb8:	69fa      	ldr	r2, [r7, #28]
 8007bba:	440a      	add	r2, r1
 8007bbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bc0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007bc4:	6013      	str	r3, [r2, #0]
 8007bc6:	e133      	b.n	8007e30 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007bc8:	69bb      	ldr	r3, [r7, #24]
 8007bca:	015a      	lsls	r2, r3, #5
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	4413      	add	r3, r2
 8007bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	69ba      	ldr	r2, [r7, #24]
 8007bd8:	0151      	lsls	r1, r2, #5
 8007bda:	69fa      	ldr	r2, [r7, #28]
 8007bdc:	440a      	add	r2, r1
 8007bde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007be2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007be6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	791b      	ldrb	r3, [r3, #4]
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d015      	beq.n	8007c1c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	699b      	ldr	r3, [r3, #24]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	f000 811b 	beq.w	8007e30 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	f003 030f 	and.w	r3, r3, #15
 8007c0a:	2101      	movs	r1, #1
 8007c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c10:	69f9      	ldr	r1, [r7, #28]
 8007c12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c16:	4313      	orrs	r3, r2
 8007c18:	634b      	str	r3, [r1, #52]	; 0x34
 8007c1a:	e109      	b.n	8007e30 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d110      	bne.n	8007c4e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007c2c:	69bb      	ldr	r3, [r7, #24]
 8007c2e:	015a      	lsls	r2, r3, #5
 8007c30:	69fb      	ldr	r3, [r7, #28]
 8007c32:	4413      	add	r3, r2
 8007c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	69ba      	ldr	r2, [r7, #24]
 8007c3c:	0151      	lsls	r1, r2, #5
 8007c3e:	69fa      	ldr	r2, [r7, #28]
 8007c40:	440a      	add	r2, r1
 8007c42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c4a:	6013      	str	r3, [r2, #0]
 8007c4c:	e00f      	b.n	8007c6e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	015a      	lsls	r2, r3, #5
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	4413      	add	r3, r2
 8007c56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	69ba      	ldr	r2, [r7, #24]
 8007c5e:	0151      	lsls	r1, r2, #5
 8007c60:	69fa      	ldr	r2, [r7, #28]
 8007c62:	440a      	add	r2, r1
 8007c64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c6c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	6919      	ldr	r1, [r3, #16]
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	781a      	ldrb	r2, [r3, #0]
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	699b      	ldr	r3, [r3, #24]
 8007c7a:	b298      	uxth	r0, r3
 8007c7c:	79fb      	ldrb	r3, [r7, #7]
 8007c7e:	9300      	str	r3, [sp, #0]
 8007c80:	4603      	mov	r3, r0
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	f000 fade 	bl	8008244 <USB_WritePacket>
 8007c88:	e0d2      	b.n	8007e30 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007c8a:	69bb      	ldr	r3, [r7, #24]
 8007c8c:	015a      	lsls	r2, r3, #5
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	4413      	add	r3, r2
 8007c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	69ba      	ldr	r2, [r7, #24]
 8007c9a:	0151      	lsls	r1, r2, #5
 8007c9c:	69fa      	ldr	r2, [r7, #28]
 8007c9e:	440a      	add	r2, r1
 8007ca0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ca4:	0cdb      	lsrs	r3, r3, #19
 8007ca6:	04db      	lsls	r3, r3, #19
 8007ca8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	015a      	lsls	r2, r3, #5
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	4413      	add	r3, r2
 8007cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cb6:	691b      	ldr	r3, [r3, #16]
 8007cb8:	69ba      	ldr	r2, [r7, #24]
 8007cba:	0151      	lsls	r1, r2, #5
 8007cbc:	69fa      	ldr	r2, [r7, #28]
 8007cbe:	440a      	add	r2, r1
 8007cc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cc4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007cc8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007ccc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	699b      	ldr	r3, [r3, #24]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d126      	bne.n	8007d24 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	015a      	lsls	r2, r3, #5
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	4413      	add	r3, r2
 8007cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ce2:	691a      	ldr	r2, [r3, #16]
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cec:	69b9      	ldr	r1, [r7, #24]
 8007cee:	0148      	lsls	r0, r1, #5
 8007cf0:	69f9      	ldr	r1, [r7, #28]
 8007cf2:	4401      	add	r1, r0
 8007cf4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	015a      	lsls	r2, r3, #5
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	4413      	add	r3, r2
 8007d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d08:	691b      	ldr	r3, [r3, #16]
 8007d0a:	69ba      	ldr	r2, [r7, #24]
 8007d0c:	0151      	lsls	r1, r2, #5
 8007d0e:	69fa      	ldr	r2, [r7, #28]
 8007d10:	440a      	add	r2, r1
 8007d12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d1a:	6113      	str	r3, [r2, #16]
 8007d1c:	e03a      	b.n	8007d94 <USB_EPStartXfer+0x3e4>
 8007d1e:	bf00      	nop
 8007d20:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	699a      	ldr	r2, [r3, #24]
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	4413      	add	r3, r2
 8007d2e:	1e5a      	subs	r2, r3, #1
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d38:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	68db      	ldr	r3, [r3, #12]
 8007d3e:	8afa      	ldrh	r2, [r7, #22]
 8007d40:	fb03 f202 	mul.w	r2, r3, r2
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	015a      	lsls	r2, r3, #5
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	4413      	add	r3, r2
 8007d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d54:	691a      	ldr	r2, [r3, #16]
 8007d56:	8afb      	ldrh	r3, [r7, #22]
 8007d58:	04d9      	lsls	r1, r3, #19
 8007d5a:	4b38      	ldr	r3, [pc, #224]	; (8007e3c <USB_EPStartXfer+0x48c>)
 8007d5c:	400b      	ands	r3, r1
 8007d5e:	69b9      	ldr	r1, [r7, #24]
 8007d60:	0148      	lsls	r0, r1, #5
 8007d62:	69f9      	ldr	r1, [r7, #28]
 8007d64:	4401      	add	r1, r0
 8007d66:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	015a      	lsls	r2, r3, #5
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	4413      	add	r3, r2
 8007d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d7a:	691a      	ldr	r2, [r3, #16]
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	69db      	ldr	r3, [r3, #28]
 8007d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d84:	69b9      	ldr	r1, [r7, #24]
 8007d86:	0148      	lsls	r0, r1, #5
 8007d88:	69f9      	ldr	r1, [r7, #28]
 8007d8a:	4401      	add	r1, r0
 8007d8c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007d90:	4313      	orrs	r3, r2
 8007d92:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007d94:	79fb      	ldrb	r3, [r7, #7]
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d10d      	bne.n	8007db6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	691b      	ldr	r3, [r3, #16]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d009      	beq.n	8007db6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	6919      	ldr	r1, [r3, #16]
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	015a      	lsls	r2, r3, #5
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	4413      	add	r3, r2
 8007dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007db2:	460a      	mov	r2, r1
 8007db4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	791b      	ldrb	r3, [r3, #4]
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d128      	bne.n	8007e10 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d110      	bne.n	8007df0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	015a      	lsls	r2, r3, #5
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	69ba      	ldr	r2, [r7, #24]
 8007dde:	0151      	lsls	r1, r2, #5
 8007de0:	69fa      	ldr	r2, [r7, #28]
 8007de2:	440a      	add	r2, r1
 8007de4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007de8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007dec:	6013      	str	r3, [r2, #0]
 8007dee:	e00f      	b.n	8007e10 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007df0:	69bb      	ldr	r3, [r7, #24]
 8007df2:	015a      	lsls	r2, r3, #5
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	4413      	add	r3, r2
 8007df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	69ba      	ldr	r2, [r7, #24]
 8007e00:	0151      	lsls	r1, r2, #5
 8007e02:	69fa      	ldr	r2, [r7, #28]
 8007e04:	440a      	add	r2, r1
 8007e06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e0e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	015a      	lsls	r2, r3, #5
 8007e14:	69fb      	ldr	r3, [r7, #28]
 8007e16:	4413      	add	r3, r2
 8007e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	69ba      	ldr	r2, [r7, #24]
 8007e20:	0151      	lsls	r1, r2, #5
 8007e22:	69fa      	ldr	r2, [r7, #28]
 8007e24:	440a      	add	r2, r1
 8007e26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3720      	adds	r7, #32
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	1ff80000 	.word	0x1ff80000

08007e40 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b087      	sub	sp, #28
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	4613      	mov	r3, r2
 8007e4c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	785b      	ldrb	r3, [r3, #1]
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	f040 80ce 	bne.w	8007ffe <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	699b      	ldr	r3, [r3, #24]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d132      	bne.n	8007ed0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	015a      	lsls	r2, r3, #5
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	4413      	add	r3, r2
 8007e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	693a      	ldr	r2, [r7, #16]
 8007e7a:	0151      	lsls	r1, r2, #5
 8007e7c:	697a      	ldr	r2, [r7, #20]
 8007e7e:	440a      	add	r2, r1
 8007e80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e84:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007e88:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007e8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	015a      	lsls	r2, r3, #5
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	4413      	add	r3, r2
 8007e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	693a      	ldr	r2, [r7, #16]
 8007e9e:	0151      	lsls	r1, r2, #5
 8007ea0:	697a      	ldr	r2, [r7, #20]
 8007ea2:	440a      	add	r2, r1
 8007ea4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ea8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007eac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	015a      	lsls	r2, r3, #5
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eba:	691b      	ldr	r3, [r3, #16]
 8007ebc:	693a      	ldr	r2, [r7, #16]
 8007ebe:	0151      	lsls	r1, r2, #5
 8007ec0:	697a      	ldr	r2, [r7, #20]
 8007ec2:	440a      	add	r2, r1
 8007ec4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ec8:	0cdb      	lsrs	r3, r3, #19
 8007eca:	04db      	lsls	r3, r3, #19
 8007ecc:	6113      	str	r3, [r2, #16]
 8007ece:	e04e      	b.n	8007f6e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	015a      	lsls	r2, r3, #5
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	4413      	add	r3, r2
 8007ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	693a      	ldr	r2, [r7, #16]
 8007ee0:	0151      	lsls	r1, r2, #5
 8007ee2:	697a      	ldr	r2, [r7, #20]
 8007ee4:	440a      	add	r2, r1
 8007ee6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eea:	0cdb      	lsrs	r3, r3, #19
 8007eec:	04db      	lsls	r3, r3, #19
 8007eee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	015a      	lsls	r2, r3, #5
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	4413      	add	r3, r2
 8007ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007efc:	691b      	ldr	r3, [r3, #16]
 8007efe:	693a      	ldr	r2, [r7, #16]
 8007f00:	0151      	lsls	r1, r2, #5
 8007f02:	697a      	ldr	r2, [r7, #20]
 8007f04:	440a      	add	r2, r1
 8007f06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f0a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007f0e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007f12:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	699a      	ldr	r2, [r3, #24]
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d903      	bls.n	8007f28 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	68da      	ldr	r2, [r3, #12]
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	015a      	lsls	r2, r3, #5
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	4413      	add	r3, r2
 8007f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	693a      	ldr	r2, [r7, #16]
 8007f38:	0151      	lsls	r1, r2, #5
 8007f3a:	697a      	ldr	r2, [r7, #20]
 8007f3c:	440a      	add	r2, r1
 8007f3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	015a      	lsls	r2, r3, #5
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	4413      	add	r3, r2
 8007f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f54:	691a      	ldr	r2, [r3, #16]
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	699b      	ldr	r3, [r3, #24]
 8007f5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f5e:	6939      	ldr	r1, [r7, #16]
 8007f60:	0148      	lsls	r0, r1, #5
 8007f62:	6979      	ldr	r1, [r7, #20]
 8007f64:	4401      	add	r1, r0
 8007f66:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007f6e:	79fb      	ldrb	r3, [r7, #7]
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d11e      	bne.n	8007fb2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	695b      	ldr	r3, [r3, #20]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d009      	beq.n	8007f90 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	015a      	lsls	r2, r3, #5
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	4413      	add	r3, r2
 8007f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f88:	461a      	mov	r2, r3
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	695b      	ldr	r3, [r3, #20]
 8007f8e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	015a      	lsls	r2, r3, #5
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	4413      	add	r3, r2
 8007f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	693a      	ldr	r2, [r7, #16]
 8007fa0:	0151      	lsls	r1, r2, #5
 8007fa2:	697a      	ldr	r2, [r7, #20]
 8007fa4:	440a      	add	r2, r1
 8007fa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007faa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007fae:	6013      	str	r3, [r2, #0]
 8007fb0:	e097      	b.n	80080e2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	015a      	lsls	r2, r3, #5
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	4413      	add	r3, r2
 8007fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	693a      	ldr	r2, [r7, #16]
 8007fc2:	0151      	lsls	r1, r2, #5
 8007fc4:	697a      	ldr	r2, [r7, #20]
 8007fc6:	440a      	add	r2, r1
 8007fc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fcc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007fd0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	699b      	ldr	r3, [r3, #24]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	f000 8083 	beq.w	80080e2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fe2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	f003 030f 	and.w	r3, r3, #15
 8007fec:	2101      	movs	r1, #1
 8007fee:	fa01 f303 	lsl.w	r3, r1, r3
 8007ff2:	6979      	ldr	r1, [r7, #20]
 8007ff4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	634b      	str	r3, [r1, #52]	; 0x34
 8007ffc:	e071      	b.n	80080e2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	015a      	lsls	r2, r3, #5
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	4413      	add	r3, r2
 8008006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	693a      	ldr	r2, [r7, #16]
 800800e:	0151      	lsls	r1, r2, #5
 8008010:	697a      	ldr	r2, [r7, #20]
 8008012:	440a      	add	r2, r1
 8008014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008018:	0cdb      	lsrs	r3, r3, #19
 800801a:	04db      	lsls	r3, r3, #19
 800801c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	015a      	lsls	r2, r3, #5
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	4413      	add	r3, r2
 8008026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800802a:	691b      	ldr	r3, [r3, #16]
 800802c:	693a      	ldr	r2, [r7, #16]
 800802e:	0151      	lsls	r1, r2, #5
 8008030:	697a      	ldr	r2, [r7, #20]
 8008032:	440a      	add	r2, r1
 8008034:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008038:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800803c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008040:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	699b      	ldr	r3, [r3, #24]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d003      	beq.n	8008052 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	68da      	ldr	r2, [r3, #12]
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	68da      	ldr	r2, [r3, #12]
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	015a      	lsls	r2, r3, #5
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	4413      	add	r3, r2
 8008062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008066:	691b      	ldr	r3, [r3, #16]
 8008068:	693a      	ldr	r2, [r7, #16]
 800806a:	0151      	lsls	r1, r2, #5
 800806c:	697a      	ldr	r2, [r7, #20]
 800806e:	440a      	add	r2, r1
 8008070:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008074:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008078:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	015a      	lsls	r2, r3, #5
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	4413      	add	r3, r2
 8008082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008086:	691a      	ldr	r2, [r3, #16]
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	69db      	ldr	r3, [r3, #28]
 800808c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008090:	6939      	ldr	r1, [r7, #16]
 8008092:	0148      	lsls	r0, r1, #5
 8008094:	6979      	ldr	r1, [r7, #20]
 8008096:	4401      	add	r1, r0
 8008098:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800809c:	4313      	orrs	r3, r2
 800809e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80080a0:	79fb      	ldrb	r3, [r7, #7]
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d10d      	bne.n	80080c2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	691b      	ldr	r3, [r3, #16]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d009      	beq.n	80080c2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	6919      	ldr	r1, [r3, #16]
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	015a      	lsls	r2, r3, #5
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	4413      	add	r3, r2
 80080ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080be:	460a      	mov	r2, r1
 80080c0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	015a      	lsls	r2, r3, #5
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	4413      	add	r3, r2
 80080ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	693a      	ldr	r2, [r7, #16]
 80080d2:	0151      	lsls	r1, r2, #5
 80080d4:	697a      	ldr	r2, [r7, #20]
 80080d6:	440a      	add	r2, r1
 80080d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80080e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	371c      	adds	r7, #28
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b087      	sub	sp, #28
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80080fa:	2300      	movs	r3, #0
 80080fc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80080fe:	2300      	movs	r3, #0
 8008100:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	785b      	ldrb	r3, [r3, #1]
 800810a:	2b01      	cmp	r3, #1
 800810c:	d14a      	bne.n	80081a4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	015a      	lsls	r2, r3, #5
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	4413      	add	r3, r2
 8008118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008122:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008126:	f040 8086 	bne.w	8008236 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	015a      	lsls	r2, r3, #5
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	4413      	add	r3, r2
 8008134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	683a      	ldr	r2, [r7, #0]
 800813c:	7812      	ldrb	r2, [r2, #0]
 800813e:	0151      	lsls	r1, r2, #5
 8008140:	693a      	ldr	r2, [r7, #16]
 8008142:	440a      	add	r2, r1
 8008144:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008148:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800814c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	015a      	lsls	r2, r3, #5
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	4413      	add	r3, r2
 8008158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	683a      	ldr	r2, [r7, #0]
 8008160:	7812      	ldrb	r2, [r2, #0]
 8008162:	0151      	lsls	r1, r2, #5
 8008164:	693a      	ldr	r2, [r7, #16]
 8008166:	440a      	add	r2, r1
 8008168:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800816c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008170:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	3301      	adds	r3, #1
 8008176:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f242 7210 	movw	r2, #10000	; 0x2710
 800817e:	4293      	cmp	r3, r2
 8008180:	d902      	bls.n	8008188 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	75fb      	strb	r3, [r7, #23]
          break;
 8008186:	e056      	b.n	8008236 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	015a      	lsls	r2, r3, #5
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	4413      	add	r3, r2
 8008192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800819c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081a0:	d0e7      	beq.n	8008172 <USB_EPStopXfer+0x82>
 80081a2:	e048      	b.n	8008236 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	015a      	lsls	r2, r3, #5
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	4413      	add	r3, r2
 80081ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081bc:	d13b      	bne.n	8008236 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	015a      	lsls	r2, r3, #5
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	4413      	add	r3, r2
 80081c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	683a      	ldr	r2, [r7, #0]
 80081d0:	7812      	ldrb	r2, [r2, #0]
 80081d2:	0151      	lsls	r1, r2, #5
 80081d4:	693a      	ldr	r2, [r7, #16]
 80081d6:	440a      	add	r2, r1
 80081d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80081e0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	015a      	lsls	r2, r3, #5
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	4413      	add	r3, r2
 80081ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	683a      	ldr	r2, [r7, #0]
 80081f4:	7812      	ldrb	r2, [r2, #0]
 80081f6:	0151      	lsls	r1, r2, #5
 80081f8:	693a      	ldr	r2, [r7, #16]
 80081fa:	440a      	add	r2, r1
 80081fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008200:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008204:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	3301      	adds	r3, #1
 800820a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f242 7210 	movw	r2, #10000	; 0x2710
 8008212:	4293      	cmp	r3, r2
 8008214:	d902      	bls.n	800821c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	75fb      	strb	r3, [r7, #23]
          break;
 800821a:	e00c      	b.n	8008236 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	015a      	lsls	r2, r3, #5
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	4413      	add	r3, r2
 8008226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008230:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008234:	d0e7      	beq.n	8008206 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008236:	7dfb      	ldrb	r3, [r7, #23]
}
 8008238:	4618      	mov	r0, r3
 800823a:	371c      	adds	r7, #28
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008244:	b480      	push	{r7}
 8008246:	b089      	sub	sp, #36	; 0x24
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	4611      	mov	r1, r2
 8008250:	461a      	mov	r2, r3
 8008252:	460b      	mov	r3, r1
 8008254:	71fb      	strb	r3, [r7, #7]
 8008256:	4613      	mov	r3, r2
 8008258:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008262:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008266:	2b00      	cmp	r3, #0
 8008268:	d123      	bne.n	80082b2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800826a:	88bb      	ldrh	r3, [r7, #4]
 800826c:	3303      	adds	r3, #3
 800826e:	089b      	lsrs	r3, r3, #2
 8008270:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008272:	2300      	movs	r3, #0
 8008274:	61bb      	str	r3, [r7, #24]
 8008276:	e018      	b.n	80082aa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008278:	79fb      	ldrb	r3, [r7, #7]
 800827a:	031a      	lsls	r2, r3, #12
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	4413      	add	r3, r2
 8008280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008284:	461a      	mov	r2, r3
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	3301      	adds	r3, #1
 8008290:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	3301      	adds	r3, #1
 8008296:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008298:	69fb      	ldr	r3, [r7, #28]
 800829a:	3301      	adds	r3, #1
 800829c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	3301      	adds	r3, #1
 80082a2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	3301      	adds	r3, #1
 80082a8:	61bb      	str	r3, [r7, #24]
 80082aa:	69ba      	ldr	r2, [r7, #24]
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d3e2      	bcc.n	8008278 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3724      	adds	r7, #36	; 0x24
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b08b      	sub	sp, #44	; 0x2c
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	4613      	mov	r3, r2
 80082cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80082d6:	88fb      	ldrh	r3, [r7, #6]
 80082d8:	089b      	lsrs	r3, r3, #2
 80082da:	b29b      	uxth	r3, r3
 80082dc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80082de:	88fb      	ldrh	r3, [r7, #6]
 80082e0:	f003 0303 	and.w	r3, r3, #3
 80082e4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80082e6:	2300      	movs	r3, #0
 80082e8:	623b      	str	r3, [r7, #32]
 80082ea:	e014      	b.n	8008316 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80082ec:	69bb      	ldr	r3, [r7, #24]
 80082ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f6:	601a      	str	r2, [r3, #0]
    pDest++;
 80082f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fa:	3301      	adds	r3, #1
 80082fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80082fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008300:	3301      	adds	r3, #1
 8008302:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008306:	3301      	adds	r3, #1
 8008308:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800830a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830c:	3301      	adds	r3, #1
 800830e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008310:	6a3b      	ldr	r3, [r7, #32]
 8008312:	3301      	adds	r3, #1
 8008314:	623b      	str	r3, [r7, #32]
 8008316:	6a3a      	ldr	r2, [r7, #32]
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	429a      	cmp	r2, r3
 800831c:	d3e6      	bcc.n	80082ec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800831e:	8bfb      	ldrh	r3, [r7, #30]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d01e      	beq.n	8008362 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008324:	2300      	movs	r3, #0
 8008326:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800832e:	461a      	mov	r2, r3
 8008330:	f107 0310 	add.w	r3, r7, #16
 8008334:	6812      	ldr	r2, [r2, #0]
 8008336:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008338:	693a      	ldr	r2, [r7, #16]
 800833a:	6a3b      	ldr	r3, [r7, #32]
 800833c:	b2db      	uxtb	r3, r3
 800833e:	00db      	lsls	r3, r3, #3
 8008340:	fa22 f303 	lsr.w	r3, r2, r3
 8008344:	b2da      	uxtb	r2, r3
 8008346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008348:	701a      	strb	r2, [r3, #0]
      i++;
 800834a:	6a3b      	ldr	r3, [r7, #32]
 800834c:	3301      	adds	r3, #1
 800834e:	623b      	str	r3, [r7, #32]
      pDest++;
 8008350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008352:	3301      	adds	r3, #1
 8008354:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008356:	8bfb      	ldrh	r3, [r7, #30]
 8008358:	3b01      	subs	r3, #1
 800835a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800835c:	8bfb      	ldrh	r3, [r7, #30]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d1ea      	bne.n	8008338 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008364:	4618      	mov	r0, r3
 8008366:	372c      	adds	r7, #44	; 0x2c
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr

08008370 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008370:	b480      	push	{r7}
 8008372:	b085      	sub	sp, #20
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	785b      	ldrb	r3, [r3, #1]
 8008388:	2b01      	cmp	r3, #1
 800838a:	d12c      	bne.n	80083e6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	015a      	lsls	r2, r3, #5
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	4413      	add	r3, r2
 8008394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	db12      	blt.n	80083c4 <USB_EPSetStall+0x54>
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00f      	beq.n	80083c4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	015a      	lsls	r2, r3, #5
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	4413      	add	r3, r2
 80083ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	68ba      	ldr	r2, [r7, #8]
 80083b4:	0151      	lsls	r1, r2, #5
 80083b6:	68fa      	ldr	r2, [r7, #12]
 80083b8:	440a      	add	r2, r1
 80083ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80083c2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	015a      	lsls	r2, r3, #5
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	4413      	add	r3, r2
 80083cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	68ba      	ldr	r2, [r7, #8]
 80083d4:	0151      	lsls	r1, r2, #5
 80083d6:	68fa      	ldr	r2, [r7, #12]
 80083d8:	440a      	add	r2, r1
 80083da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80083e2:	6013      	str	r3, [r2, #0]
 80083e4:	e02b      	b.n	800843e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	015a      	lsls	r2, r3, #5
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	4413      	add	r3, r2
 80083ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	db12      	blt.n	800841e <USB_EPSetStall+0xae>
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00f      	beq.n	800841e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	015a      	lsls	r2, r3, #5
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	4413      	add	r3, r2
 8008406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	68ba      	ldr	r2, [r7, #8]
 800840e:	0151      	lsls	r1, r2, #5
 8008410:	68fa      	ldr	r2, [r7, #12]
 8008412:	440a      	add	r2, r1
 8008414:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008418:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800841c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	015a      	lsls	r2, r3, #5
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	4413      	add	r3, r2
 8008426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	68ba      	ldr	r2, [r7, #8]
 800842e:	0151      	lsls	r1, r2, #5
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	440a      	add	r2, r1
 8008434:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008438:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800843c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800843e:	2300      	movs	r3, #0
}
 8008440:	4618      	mov	r0, r3
 8008442:	3714      	adds	r7, #20
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr

0800844c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800844c:	b480      	push	{r7}
 800844e:	b085      	sub	sp, #20
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	785b      	ldrb	r3, [r3, #1]
 8008464:	2b01      	cmp	r3, #1
 8008466:	d128      	bne.n	80084ba <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	015a      	lsls	r2, r3, #5
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	4413      	add	r3, r2
 8008470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	68ba      	ldr	r2, [r7, #8]
 8008478:	0151      	lsls	r1, r2, #5
 800847a:	68fa      	ldr	r2, [r7, #12]
 800847c:	440a      	add	r2, r1
 800847e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008482:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008486:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	791b      	ldrb	r3, [r3, #4]
 800848c:	2b03      	cmp	r3, #3
 800848e:	d003      	beq.n	8008498 <USB_EPClearStall+0x4c>
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	791b      	ldrb	r3, [r3, #4]
 8008494:	2b02      	cmp	r3, #2
 8008496:	d138      	bne.n	800850a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	015a      	lsls	r2, r3, #5
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	4413      	add	r3, r2
 80084a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	68ba      	ldr	r2, [r7, #8]
 80084a8:	0151      	lsls	r1, r2, #5
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	440a      	add	r2, r1
 80084ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084b6:	6013      	str	r3, [r2, #0]
 80084b8:	e027      	b.n	800850a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	015a      	lsls	r2, r3, #5
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	4413      	add	r3, r2
 80084c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	68ba      	ldr	r2, [r7, #8]
 80084ca:	0151      	lsls	r1, r2, #5
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	440a      	add	r2, r1
 80084d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80084d8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	791b      	ldrb	r3, [r3, #4]
 80084de:	2b03      	cmp	r3, #3
 80084e0:	d003      	beq.n	80084ea <USB_EPClearStall+0x9e>
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	791b      	ldrb	r3, [r3, #4]
 80084e6:	2b02      	cmp	r3, #2
 80084e8:	d10f      	bne.n	800850a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	015a      	lsls	r2, r3, #5
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	4413      	add	r3, r2
 80084f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	68ba      	ldr	r2, [r7, #8]
 80084fa:	0151      	lsls	r1, r2, #5
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	440a      	add	r2, r1
 8008500:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008508:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800850a:	2300      	movs	r3, #0
}
 800850c:	4618      	mov	r0, r3
 800850e:	3714      	adds	r7, #20
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008518:	b480      	push	{r7}
 800851a:	b085      	sub	sp, #20
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	460b      	mov	r3, r1
 8008522:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	68fa      	ldr	r2, [r7, #12]
 8008532:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008536:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800853a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	78fb      	ldrb	r3, [r7, #3]
 8008546:	011b      	lsls	r3, r3, #4
 8008548:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800854c:	68f9      	ldr	r1, [r7, #12]
 800854e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008552:	4313      	orrs	r3, r2
 8008554:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008556:	2300      	movs	r3, #0
}
 8008558:	4618      	mov	r0, r3
 800855a:	3714      	adds	r7, #20
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr

08008564 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008564:	b480      	push	{r7}
 8008566:	b085      	sub	sp, #20
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	68fa      	ldr	r2, [r7, #12]
 800857a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800857e:	f023 0303 	bic.w	r3, r3, #3
 8008582:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	68fa      	ldr	r2, [r7, #12]
 800858e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008592:	f023 0302 	bic.w	r3, r3, #2
 8008596:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008598:	2300      	movs	r3, #0
}
 800859a:	4618      	mov	r0, r3
 800859c:	3714      	adds	r7, #20
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr

080085a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80085a6:	b480      	push	{r7}
 80085a8:	b085      	sub	sp, #20
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80085c0:	f023 0303 	bic.w	r3, r3, #3
 80085c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085d4:	f043 0302 	orr.w	r3, r3, #2
 80085d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80085da:	2300      	movs	r3, #0
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3714      	adds	r7, #20
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b085      	sub	sp, #20
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	695b      	ldr	r3, [r3, #20]
 80085f4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	699b      	ldr	r3, [r3, #24]
 80085fa:	68fa      	ldr	r2, [r7, #12]
 80085fc:	4013      	ands	r3, r2
 80085fe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008600:	68fb      	ldr	r3, [r7, #12]
}
 8008602:	4618      	mov	r0, r3
 8008604:	3714      	adds	r7, #20
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr

0800860e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800860e:	b480      	push	{r7}
 8008610:	b085      	sub	sp, #20
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008620:	699b      	ldr	r3, [r3, #24]
 8008622:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800862a:	69db      	ldr	r3, [r3, #28]
 800862c:	68ba      	ldr	r2, [r7, #8]
 800862e:	4013      	ands	r3, r2
 8008630:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	0c1b      	lsrs	r3, r3, #16
}
 8008636:	4618      	mov	r0, r3
 8008638:	3714      	adds	r7, #20
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr

08008642 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008642:	b480      	push	{r7}
 8008644:	b085      	sub	sp, #20
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008654:	699b      	ldr	r3, [r3, #24]
 8008656:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800865e:	69db      	ldr	r3, [r3, #28]
 8008660:	68ba      	ldr	r2, [r7, #8]
 8008662:	4013      	ands	r3, r2
 8008664:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	b29b      	uxth	r3, r3
}
 800866a:	4618      	mov	r0, r3
 800866c:	3714      	adds	r7, #20
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr

08008676 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008676:	b480      	push	{r7}
 8008678:	b085      	sub	sp, #20
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
 800867e:	460b      	mov	r3, r1
 8008680:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008686:	78fb      	ldrb	r3, [r7, #3]
 8008688:	015a      	lsls	r2, r3, #5
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	4413      	add	r3, r2
 800868e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008692:	689b      	ldr	r3, [r3, #8]
 8008694:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800869c:	695b      	ldr	r3, [r3, #20]
 800869e:	68ba      	ldr	r2, [r7, #8]
 80086a0:	4013      	ands	r3, r2
 80086a2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80086a4:	68bb      	ldr	r3, [r7, #8]
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3714      	adds	r7, #20
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr

080086b2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80086b2:	b480      	push	{r7}
 80086b4:	b087      	sub	sp, #28
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
 80086ba:	460b      	mov	r3, r1
 80086bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086c8:	691b      	ldr	r3, [r3, #16]
 80086ca:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086d4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80086d6:	78fb      	ldrb	r3, [r7, #3]
 80086d8:	f003 030f 	and.w	r3, r3, #15
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	fa22 f303 	lsr.w	r3, r2, r3
 80086e2:	01db      	lsls	r3, r3, #7
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	693a      	ldr	r2, [r7, #16]
 80086e8:	4313      	orrs	r3, r2
 80086ea:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80086ec:	78fb      	ldrb	r3, [r7, #3]
 80086ee:	015a      	lsls	r2, r3, #5
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	4413      	add	r3, r2
 80086f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	693a      	ldr	r2, [r7, #16]
 80086fc:	4013      	ands	r3, r2
 80086fe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008700:	68bb      	ldr	r3, [r7, #8]
}
 8008702:	4618      	mov	r0, r3
 8008704:	371c      	adds	r7, #28
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr

0800870e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800870e:	b480      	push	{r7}
 8008710:	b083      	sub	sp, #12
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	695b      	ldr	r3, [r3, #20]
 800871a:	f003 0301 	and.w	r3, r3, #1
}
 800871e:	4618      	mov	r0, r3
 8008720:	370c      	adds	r7, #12
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr

0800872a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800872a:	b480      	push	{r7}
 800872c:	b085      	sub	sp, #20
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	68fa      	ldr	r2, [r7, #12]
 8008740:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008744:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008748:	f023 0307 	bic.w	r3, r3, #7
 800874c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	68fa      	ldr	r2, [r7, #12]
 8008758:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800875c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008760:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008762:	2300      	movs	r3, #0
}
 8008764:	4618      	mov	r0, r3
 8008766:	3714      	adds	r7, #20
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008770:	b480      	push	{r7}
 8008772:	b087      	sub	sp, #28
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	460b      	mov	r3, r1
 800877a:	607a      	str	r2, [r7, #4]
 800877c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	333c      	adds	r3, #60	; 0x3c
 8008786:	3304      	adds	r3, #4
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	4a26      	ldr	r2, [pc, #152]	; (8008828 <USB_EP0_OutStart+0xb8>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d90a      	bls.n	80087aa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087a4:	d101      	bne.n	80087aa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80087a6:	2300      	movs	r3, #0
 80087a8:	e037      	b.n	800881a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087b0:	461a      	mov	r2, r3
 80087b2:	2300      	movs	r3, #0
 80087b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087bc:	691b      	ldr	r3, [r3, #16]
 80087be:	697a      	ldr	r2, [r7, #20]
 80087c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80087c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087d0:	691b      	ldr	r3, [r3, #16]
 80087d2:	697a      	ldr	r2, [r7, #20]
 80087d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087d8:	f043 0318 	orr.w	r3, r3, #24
 80087dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087e4:	691b      	ldr	r3, [r3, #16]
 80087e6:	697a      	ldr	r2, [r7, #20]
 80087e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087ec:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80087f0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80087f2:	7afb      	ldrb	r3, [r7, #11]
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d10f      	bne.n	8008818 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087fe:	461a      	mov	r2, r3
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	697a      	ldr	r2, [r7, #20]
 800880e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008812:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008816:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008818:	2300      	movs	r3, #0
}
 800881a:	4618      	mov	r0, r3
 800881c:	371c      	adds	r7, #28
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr
 8008826:	bf00      	nop
 8008828:	4f54300a 	.word	0x4f54300a

0800882c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800882c:	b480      	push	{r7}
 800882e:	b085      	sub	sp, #20
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008834:	2300      	movs	r3, #0
 8008836:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	3301      	adds	r3, #1
 800883c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	4a13      	ldr	r2, [pc, #76]	; (8008890 <USB_CoreReset+0x64>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d901      	bls.n	800884a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008846:	2303      	movs	r3, #3
 8008848:	e01b      	b.n	8008882 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	691b      	ldr	r3, [r3, #16]
 800884e:	2b00      	cmp	r3, #0
 8008850:	daf2      	bge.n	8008838 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008852:	2300      	movs	r3, #0
 8008854:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	691b      	ldr	r3, [r3, #16]
 800885a:	f043 0201 	orr.w	r2, r3, #1
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	3301      	adds	r3, #1
 8008866:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	4a09      	ldr	r2, [pc, #36]	; (8008890 <USB_CoreReset+0x64>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d901      	bls.n	8008874 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008870:	2303      	movs	r3, #3
 8008872:	e006      	b.n	8008882 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	691b      	ldr	r3, [r3, #16]
 8008878:	f003 0301 	and.w	r3, r3, #1
 800887c:	2b01      	cmp	r3, #1
 800887e:	d0f0      	beq.n	8008862 <USB_CoreReset+0x36>

  return HAL_OK;
 8008880:	2300      	movs	r3, #0
}
 8008882:	4618      	mov	r0, r3
 8008884:	3714      	adds	r7, #20
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr
 800888e:	bf00      	nop
 8008890:	00030d40 	.word	0x00030d40

08008894 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	460b      	mov	r3, r1
 800889e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80088a0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80088a4:	f002 fc28 	bl	800b0f8 <USBD_static_malloc>
 80088a8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d109      	bne.n	80088c4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	32b0      	adds	r2, #176	; 0xb0
 80088ba:	2100      	movs	r1, #0
 80088bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80088c0:	2302      	movs	r3, #2
 80088c2:	e0d4      	b.n	8008a6e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80088c4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80088c8:	2100      	movs	r1, #0
 80088ca:	68f8      	ldr	r0, [r7, #12]
 80088cc:	f002 fc82 	bl	800b1d4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	32b0      	adds	r2, #176	; 0xb0
 80088da:	68f9      	ldr	r1, [r7, #12]
 80088dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	32b0      	adds	r2, #176	; 0xb0
 80088ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	7c1b      	ldrb	r3, [r3, #16]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d138      	bne.n	800896e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80088fc:	4b5e      	ldr	r3, [pc, #376]	; (8008a78 <USBD_CDC_Init+0x1e4>)
 80088fe:	7819      	ldrb	r1, [r3, #0]
 8008900:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008904:	2202      	movs	r2, #2
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f002 fad3 	bl	800aeb2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800890c:	4b5a      	ldr	r3, [pc, #360]	; (8008a78 <USBD_CDC_Init+0x1e4>)
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	f003 020f 	and.w	r2, r3, #15
 8008914:	6879      	ldr	r1, [r7, #4]
 8008916:	4613      	mov	r3, r2
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	4413      	add	r3, r2
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	440b      	add	r3, r1
 8008920:	3324      	adds	r3, #36	; 0x24
 8008922:	2201      	movs	r2, #1
 8008924:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008926:	4b55      	ldr	r3, [pc, #340]	; (8008a7c <USBD_CDC_Init+0x1e8>)
 8008928:	7819      	ldrb	r1, [r3, #0]
 800892a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800892e:	2202      	movs	r2, #2
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f002 fabe 	bl	800aeb2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008936:	4b51      	ldr	r3, [pc, #324]	; (8008a7c <USBD_CDC_Init+0x1e8>)
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	f003 020f 	and.w	r2, r3, #15
 800893e:	6879      	ldr	r1, [r7, #4]
 8008940:	4613      	mov	r3, r2
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	4413      	add	r3, r2
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	440b      	add	r3, r1
 800894a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800894e:	2201      	movs	r2, #1
 8008950:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008952:	4b4b      	ldr	r3, [pc, #300]	; (8008a80 <USBD_CDC_Init+0x1ec>)
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	f003 020f 	and.w	r2, r3, #15
 800895a:	6879      	ldr	r1, [r7, #4]
 800895c:	4613      	mov	r3, r2
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	4413      	add	r3, r2
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	440b      	add	r3, r1
 8008966:	3326      	adds	r3, #38	; 0x26
 8008968:	2210      	movs	r2, #16
 800896a:	801a      	strh	r2, [r3, #0]
 800896c:	e035      	b.n	80089da <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800896e:	4b42      	ldr	r3, [pc, #264]	; (8008a78 <USBD_CDC_Init+0x1e4>)
 8008970:	7819      	ldrb	r1, [r3, #0]
 8008972:	2340      	movs	r3, #64	; 0x40
 8008974:	2202      	movs	r2, #2
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f002 fa9b 	bl	800aeb2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800897c:	4b3e      	ldr	r3, [pc, #248]	; (8008a78 <USBD_CDC_Init+0x1e4>)
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	f003 020f 	and.w	r2, r3, #15
 8008984:	6879      	ldr	r1, [r7, #4]
 8008986:	4613      	mov	r3, r2
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	4413      	add	r3, r2
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	440b      	add	r3, r1
 8008990:	3324      	adds	r3, #36	; 0x24
 8008992:	2201      	movs	r2, #1
 8008994:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008996:	4b39      	ldr	r3, [pc, #228]	; (8008a7c <USBD_CDC_Init+0x1e8>)
 8008998:	7819      	ldrb	r1, [r3, #0]
 800899a:	2340      	movs	r3, #64	; 0x40
 800899c:	2202      	movs	r2, #2
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f002 fa87 	bl	800aeb2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80089a4:	4b35      	ldr	r3, [pc, #212]	; (8008a7c <USBD_CDC_Init+0x1e8>)
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	f003 020f 	and.w	r2, r3, #15
 80089ac:	6879      	ldr	r1, [r7, #4]
 80089ae:	4613      	mov	r3, r2
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	4413      	add	r3, r2
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	440b      	add	r3, r1
 80089b8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80089bc:	2201      	movs	r2, #1
 80089be:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80089c0:	4b2f      	ldr	r3, [pc, #188]	; (8008a80 <USBD_CDC_Init+0x1ec>)
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	f003 020f 	and.w	r2, r3, #15
 80089c8:	6879      	ldr	r1, [r7, #4]
 80089ca:	4613      	mov	r3, r2
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	4413      	add	r3, r2
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	440b      	add	r3, r1
 80089d4:	3326      	adds	r3, #38	; 0x26
 80089d6:	2210      	movs	r2, #16
 80089d8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80089da:	4b29      	ldr	r3, [pc, #164]	; (8008a80 <USBD_CDC_Init+0x1ec>)
 80089dc:	7819      	ldrb	r1, [r3, #0]
 80089de:	2308      	movs	r3, #8
 80089e0:	2203      	movs	r2, #3
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f002 fa65 	bl	800aeb2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80089e8:	4b25      	ldr	r3, [pc, #148]	; (8008a80 <USBD_CDC_Init+0x1ec>)
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	f003 020f 	and.w	r2, r3, #15
 80089f0:	6879      	ldr	r1, [r7, #4]
 80089f2:	4613      	mov	r3, r2
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	4413      	add	r3, r2
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	440b      	add	r3, r1
 80089fc:	3324      	adds	r3, #36	; 0x24
 80089fe:	2201      	movs	r2, #1
 8008a00:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	33b0      	adds	r3, #176	; 0xb0
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	4413      	add	r3, r2
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2200      	movs	r2, #0
 8008a22:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d101      	bne.n	8008a3c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008a38:	2302      	movs	r3, #2
 8008a3a:	e018      	b.n	8008a6e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	7c1b      	ldrb	r3, [r3, #16]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d10a      	bne.n	8008a5a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008a44:	4b0d      	ldr	r3, [pc, #52]	; (8008a7c <USBD_CDC_Init+0x1e8>)
 8008a46:	7819      	ldrb	r1, [r3, #0]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f002 fb1c 	bl	800b090 <USBD_LL_PrepareReceive>
 8008a58:	e008      	b.n	8008a6c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008a5a:	4b08      	ldr	r3, [pc, #32]	; (8008a7c <USBD_CDC_Init+0x1e8>)
 8008a5c:	7819      	ldrb	r1, [r3, #0]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a64:	2340      	movs	r3, #64	; 0x40
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f002 fb12 	bl	800b090 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3710      	adds	r7, #16
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	20000097 	.word	0x20000097
 8008a7c:	20000098 	.word	0x20000098
 8008a80:	20000099 	.word	0x20000099

08008a84 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008a90:	4b3a      	ldr	r3, [pc, #232]	; (8008b7c <USBD_CDC_DeInit+0xf8>)
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	4619      	mov	r1, r3
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f002 fa31 	bl	800aefe <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008a9c:	4b37      	ldr	r3, [pc, #220]	; (8008b7c <USBD_CDC_DeInit+0xf8>)
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	f003 020f 	and.w	r2, r3, #15
 8008aa4:	6879      	ldr	r1, [r7, #4]
 8008aa6:	4613      	mov	r3, r2
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	4413      	add	r3, r2
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	440b      	add	r3, r1
 8008ab0:	3324      	adds	r3, #36	; 0x24
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008ab6:	4b32      	ldr	r3, [pc, #200]	; (8008b80 <USBD_CDC_DeInit+0xfc>)
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	4619      	mov	r1, r3
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f002 fa1e 	bl	800aefe <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008ac2:	4b2f      	ldr	r3, [pc, #188]	; (8008b80 <USBD_CDC_DeInit+0xfc>)
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	f003 020f 	and.w	r2, r3, #15
 8008aca:	6879      	ldr	r1, [r7, #4]
 8008acc:	4613      	mov	r3, r2
 8008ace:	009b      	lsls	r3, r3, #2
 8008ad0:	4413      	add	r3, r2
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	440b      	add	r3, r1
 8008ad6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008ada:	2200      	movs	r2, #0
 8008adc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008ade:	4b29      	ldr	r3, [pc, #164]	; (8008b84 <USBD_CDC_DeInit+0x100>)
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f002 fa0a 	bl	800aefe <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008aea:	4b26      	ldr	r3, [pc, #152]	; (8008b84 <USBD_CDC_DeInit+0x100>)
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	f003 020f 	and.w	r2, r3, #15
 8008af2:	6879      	ldr	r1, [r7, #4]
 8008af4:	4613      	mov	r3, r2
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	4413      	add	r3, r2
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	440b      	add	r3, r1
 8008afe:	3324      	adds	r3, #36	; 0x24
 8008b00:	2200      	movs	r2, #0
 8008b02:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008b04:	4b1f      	ldr	r3, [pc, #124]	; (8008b84 <USBD_CDC_DeInit+0x100>)
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	f003 020f 	and.w	r2, r3, #15
 8008b0c:	6879      	ldr	r1, [r7, #4]
 8008b0e:	4613      	mov	r3, r2
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	4413      	add	r3, r2
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	440b      	add	r3, r1
 8008b18:	3326      	adds	r3, #38	; 0x26
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	32b0      	adds	r2, #176	; 0xb0
 8008b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d01f      	beq.n	8008b70 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	33b0      	adds	r3, #176	; 0xb0
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	4413      	add	r3, r2
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	32b0      	adds	r2, #176	; 0xb0
 8008b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b52:	4618      	mov	r0, r3
 8008b54:	f002 fade 	bl	800b114 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	32b0      	adds	r2, #176	; 0xb0
 8008b62:	2100      	movs	r1, #0
 8008b64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008b70:	2300      	movs	r3, #0
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3708      	adds	r7, #8
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	20000097 	.word	0x20000097
 8008b80:	20000098 	.word	0x20000098
 8008b84:	20000099 	.word	0x20000099

08008b88 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b086      	sub	sp, #24
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	32b0      	adds	r2, #176	; 0xb0
 8008b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ba0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008baa:	2300      	movs	r3, #0
 8008bac:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d101      	bne.n	8008bb8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008bb4:	2303      	movs	r3, #3
 8008bb6:	e0bf      	b.n	8008d38 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d050      	beq.n	8008c66 <USBD_CDC_Setup+0xde>
 8008bc4:	2b20      	cmp	r3, #32
 8008bc6:	f040 80af 	bne.w	8008d28 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	88db      	ldrh	r3, [r3, #6]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d03a      	beq.n	8008c48 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	b25b      	sxtb	r3, r3
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	da1b      	bge.n	8008c14 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008be2:	687a      	ldr	r2, [r7, #4]
 8008be4:	33b0      	adds	r3, #176	; 0xb0
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	4413      	add	r3, r2
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	683a      	ldr	r2, [r7, #0]
 8008bf0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008bf2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008bf4:	683a      	ldr	r2, [r7, #0]
 8008bf6:	88d2      	ldrh	r2, [r2, #6]
 8008bf8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	88db      	ldrh	r3, [r3, #6]
 8008bfe:	2b07      	cmp	r3, #7
 8008c00:	bf28      	it	cs
 8008c02:	2307      	movcs	r3, #7
 8008c04:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	89fa      	ldrh	r2, [r7, #14]
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f001 fd43 	bl	800a698 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008c12:	e090      	b.n	8008d36 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	785a      	ldrb	r2, [r3, #1]
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	88db      	ldrh	r3, [r3, #6]
 8008c22:	2b3f      	cmp	r3, #63	; 0x3f
 8008c24:	d803      	bhi.n	8008c2e <USBD_CDC_Setup+0xa6>
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	88db      	ldrh	r3, [r3, #6]
 8008c2a:	b2da      	uxtb	r2, r3
 8008c2c:	e000      	b.n	8008c30 <USBD_CDC_Setup+0xa8>
 8008c2e:	2240      	movs	r2, #64	; 0x40
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008c36:	6939      	ldr	r1, [r7, #16]
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008c3e:	461a      	mov	r2, r3
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f001 fd55 	bl	800a6f0 <USBD_CtlPrepareRx>
      break;
 8008c46:	e076      	b.n	8008d36 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	33b0      	adds	r3, #176	; 0xb0
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	4413      	add	r3, r2
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	683a      	ldr	r2, [r7, #0]
 8008c5c:	7850      	ldrb	r0, [r2, #1]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	6839      	ldr	r1, [r7, #0]
 8008c62:	4798      	blx	r3
      break;
 8008c64:	e067      	b.n	8008d36 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	785b      	ldrb	r3, [r3, #1]
 8008c6a:	2b0b      	cmp	r3, #11
 8008c6c:	d851      	bhi.n	8008d12 <USBD_CDC_Setup+0x18a>
 8008c6e:	a201      	add	r2, pc, #4	; (adr r2, 8008c74 <USBD_CDC_Setup+0xec>)
 8008c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c74:	08008ca5 	.word	0x08008ca5
 8008c78:	08008d21 	.word	0x08008d21
 8008c7c:	08008d13 	.word	0x08008d13
 8008c80:	08008d13 	.word	0x08008d13
 8008c84:	08008d13 	.word	0x08008d13
 8008c88:	08008d13 	.word	0x08008d13
 8008c8c:	08008d13 	.word	0x08008d13
 8008c90:	08008d13 	.word	0x08008d13
 8008c94:	08008d13 	.word	0x08008d13
 8008c98:	08008d13 	.word	0x08008d13
 8008c9c:	08008ccf 	.word	0x08008ccf
 8008ca0:	08008cf9 	.word	0x08008cf9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	2b03      	cmp	r3, #3
 8008cae:	d107      	bne.n	8008cc0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008cb0:	f107 030a 	add.w	r3, r7, #10
 8008cb4:	2202      	movs	r2, #2
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f001 fced 	bl	800a698 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008cbe:	e032      	b.n	8008d26 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008cc0:	6839      	ldr	r1, [r7, #0]
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f001 fc77 	bl	800a5b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008cc8:	2303      	movs	r3, #3
 8008cca:	75fb      	strb	r3, [r7, #23]
          break;
 8008ccc:	e02b      	b.n	8008d26 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	2b03      	cmp	r3, #3
 8008cd8:	d107      	bne.n	8008cea <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008cda:	f107 030d 	add.w	r3, r7, #13
 8008cde:	2201      	movs	r2, #1
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f001 fcd8 	bl	800a698 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ce8:	e01d      	b.n	8008d26 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008cea:	6839      	ldr	r1, [r7, #0]
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f001 fc62 	bl	800a5b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008cf2:	2303      	movs	r3, #3
 8008cf4:	75fb      	strb	r3, [r7, #23]
          break;
 8008cf6:	e016      	b.n	8008d26 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	2b03      	cmp	r3, #3
 8008d02:	d00f      	beq.n	8008d24 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008d04:	6839      	ldr	r1, [r7, #0]
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f001 fc55 	bl	800a5b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8008d0c:	2303      	movs	r3, #3
 8008d0e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008d10:	e008      	b.n	8008d24 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008d12:	6839      	ldr	r1, [r7, #0]
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f001 fc4e 	bl	800a5b6 <USBD_CtlError>
          ret = USBD_FAIL;
 8008d1a:	2303      	movs	r3, #3
 8008d1c:	75fb      	strb	r3, [r7, #23]
          break;
 8008d1e:	e002      	b.n	8008d26 <USBD_CDC_Setup+0x19e>
          break;
 8008d20:	bf00      	nop
 8008d22:	e008      	b.n	8008d36 <USBD_CDC_Setup+0x1ae>
          break;
 8008d24:	bf00      	nop
      }
      break;
 8008d26:	e006      	b.n	8008d36 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008d28:	6839      	ldr	r1, [r7, #0]
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f001 fc43 	bl	800a5b6 <USBD_CtlError>
      ret = USBD_FAIL;
 8008d30:	2303      	movs	r3, #3
 8008d32:	75fb      	strb	r3, [r7, #23]
      break;
 8008d34:	bf00      	nop
  }

  return (uint8_t)ret;
 8008d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3718      	adds	r7, #24
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	460b      	mov	r3, r1
 8008d4a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d52:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	32b0      	adds	r2, #176	; 0xb0
 8008d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d101      	bne.n	8008d6a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008d66:	2303      	movs	r3, #3
 8008d68:	e065      	b.n	8008e36 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	32b0      	adds	r2, #176	; 0xb0
 8008d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d78:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008d7a:	78fb      	ldrb	r3, [r7, #3]
 8008d7c:	f003 020f 	and.w	r2, r3, #15
 8008d80:	6879      	ldr	r1, [r7, #4]
 8008d82:	4613      	mov	r3, r2
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	4413      	add	r3, r2
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	440b      	add	r3, r1
 8008d8c:	3318      	adds	r3, #24
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d02f      	beq.n	8008df4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008d94:	78fb      	ldrb	r3, [r7, #3]
 8008d96:	f003 020f 	and.w	r2, r3, #15
 8008d9a:	6879      	ldr	r1, [r7, #4]
 8008d9c:	4613      	mov	r3, r2
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	4413      	add	r3, r2
 8008da2:	009b      	lsls	r3, r3, #2
 8008da4:	440b      	add	r3, r1
 8008da6:	3318      	adds	r3, #24
 8008da8:	681a      	ldr	r2, [r3, #0]
 8008daa:	78fb      	ldrb	r3, [r7, #3]
 8008dac:	f003 010f 	and.w	r1, r3, #15
 8008db0:	68f8      	ldr	r0, [r7, #12]
 8008db2:	460b      	mov	r3, r1
 8008db4:	00db      	lsls	r3, r3, #3
 8008db6:	440b      	add	r3, r1
 8008db8:	009b      	lsls	r3, r3, #2
 8008dba:	4403      	add	r3, r0
 8008dbc:	3348      	adds	r3, #72	; 0x48
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	fbb2 f1f3 	udiv	r1, r2, r3
 8008dc4:	fb01 f303 	mul.w	r3, r1, r3
 8008dc8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d112      	bne.n	8008df4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008dce:	78fb      	ldrb	r3, [r7, #3]
 8008dd0:	f003 020f 	and.w	r2, r3, #15
 8008dd4:	6879      	ldr	r1, [r7, #4]
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	4413      	add	r3, r2
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	440b      	add	r3, r1
 8008de0:	3318      	adds	r3, #24
 8008de2:	2200      	movs	r2, #0
 8008de4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008de6:	78f9      	ldrb	r1, [r7, #3]
 8008de8:	2300      	movs	r3, #0
 8008dea:	2200      	movs	r2, #0
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f002 f92e 	bl	800b04e <USBD_LL_Transmit>
 8008df2:	e01f      	b.n	8008e34 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	2200      	movs	r2, #0
 8008df8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	33b0      	adds	r3, #176	; 0xb0
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	4413      	add	r3, r2
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	691b      	ldr	r3, [r3, #16]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d010      	beq.n	8008e34 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	33b0      	adds	r3, #176	; 0xb0
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	4413      	add	r3, r2
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	691b      	ldr	r3, [r3, #16]
 8008e24:	68ba      	ldr	r2, [r7, #8]
 8008e26:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008e2a:	68ba      	ldr	r2, [r7, #8]
 8008e2c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008e30:	78fa      	ldrb	r2, [r7, #3]
 8008e32:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008e34:	2300      	movs	r3, #0
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3710      	adds	r7, #16
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}

08008e3e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e3e:	b580      	push	{r7, lr}
 8008e40:	b084      	sub	sp, #16
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
 8008e46:	460b      	mov	r3, r1
 8008e48:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	32b0      	adds	r2, #176	; 0xb0
 8008e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e58:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	32b0      	adds	r2, #176	; 0xb0
 8008e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d101      	bne.n	8008e70 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008e6c:	2303      	movs	r3, #3
 8008e6e:	e01a      	b.n	8008ea6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008e70:	78fb      	ldrb	r3, [r7, #3]
 8008e72:	4619      	mov	r1, r3
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f002 f92c 	bl	800b0d2 <USBD_LL_GetRxDataSize>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	33b0      	adds	r3, #176	; 0xb0
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	4413      	add	r3, r2
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	68fa      	ldr	r2, [r7, #12]
 8008e96:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008e9a:	68fa      	ldr	r2, [r7, #12]
 8008e9c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008ea0:	4611      	mov	r1, r2
 8008ea2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3710      	adds	r7, #16
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b084      	sub	sp, #16
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	32b0      	adds	r2, #176	; 0xb0
 8008ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ec4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d101      	bne.n	8008ed0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008ecc:	2303      	movs	r3, #3
 8008ece:	e025      	b.n	8008f1c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	33b0      	adds	r3, #176	; 0xb0
 8008eda:	009b      	lsls	r3, r3, #2
 8008edc:	4413      	add	r3, r2
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d01a      	beq.n	8008f1a <USBD_CDC_EP0_RxReady+0x6c>
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008eea:	2bff      	cmp	r3, #255	; 0xff
 8008eec:	d015      	beq.n	8008f1a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	33b0      	adds	r3, #176	; 0xb0
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	4413      	add	r3, r2
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	68fa      	ldr	r2, [r7, #12]
 8008f02:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008f06:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008f08:	68fa      	ldr	r2, [r7, #12]
 8008f0a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008f0e:	b292      	uxth	r2, r2
 8008f10:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	22ff      	movs	r2, #255	; 0xff
 8008f16:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008f1a:	2300      	movs	r3, #0
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3710      	adds	r7, #16
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b086      	sub	sp, #24
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008f2c:	2182      	movs	r1, #130	; 0x82
 8008f2e:	4818      	ldr	r0, [pc, #96]	; (8008f90 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008f30:	f000 fd09 	bl	8009946 <USBD_GetEpDesc>
 8008f34:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008f36:	2101      	movs	r1, #1
 8008f38:	4815      	ldr	r0, [pc, #84]	; (8008f90 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008f3a:	f000 fd04 	bl	8009946 <USBD_GetEpDesc>
 8008f3e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008f40:	2181      	movs	r1, #129	; 0x81
 8008f42:	4813      	ldr	r0, [pc, #76]	; (8008f90 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008f44:	f000 fcff 	bl	8009946 <USBD_GetEpDesc>
 8008f48:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d002      	beq.n	8008f56 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	2210      	movs	r2, #16
 8008f54:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d006      	beq.n	8008f6a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f64:	711a      	strb	r2, [r3, #4]
 8008f66:	2200      	movs	r2, #0
 8008f68:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d006      	beq.n	8008f7e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2200      	movs	r2, #0
 8008f74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f78:	711a      	strb	r2, [r3, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2243      	movs	r2, #67	; 0x43
 8008f82:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008f84:	4b02      	ldr	r3, [pc, #8]	; (8008f90 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3718      	adds	r7, #24
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	20000054 	.word	0x20000054

08008f94 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b086      	sub	sp, #24
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008f9c:	2182      	movs	r1, #130	; 0x82
 8008f9e:	4818      	ldr	r0, [pc, #96]	; (8009000 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008fa0:	f000 fcd1 	bl	8009946 <USBD_GetEpDesc>
 8008fa4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008fa6:	2101      	movs	r1, #1
 8008fa8:	4815      	ldr	r0, [pc, #84]	; (8009000 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008faa:	f000 fccc 	bl	8009946 <USBD_GetEpDesc>
 8008fae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008fb0:	2181      	movs	r1, #129	; 0x81
 8008fb2:	4813      	ldr	r0, [pc, #76]	; (8009000 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008fb4:	f000 fcc7 	bl	8009946 <USBD_GetEpDesc>
 8008fb8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d002      	beq.n	8008fc6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	2210      	movs	r2, #16
 8008fc4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d006      	beq.n	8008fda <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	711a      	strb	r2, [r3, #4]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	f042 0202 	orr.w	r2, r2, #2
 8008fd8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d006      	beq.n	8008fee <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	711a      	strb	r2, [r3, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f042 0202 	orr.w	r2, r2, #2
 8008fec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2243      	movs	r2, #67	; 0x43
 8008ff2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008ff4:	4b02      	ldr	r3, [pc, #8]	; (8009000 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3718      	adds	r7, #24
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	bf00      	nop
 8009000:	20000054 	.word	0x20000054

08009004 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b086      	sub	sp, #24
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800900c:	2182      	movs	r1, #130	; 0x82
 800900e:	4818      	ldr	r0, [pc, #96]	; (8009070 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009010:	f000 fc99 	bl	8009946 <USBD_GetEpDesc>
 8009014:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009016:	2101      	movs	r1, #1
 8009018:	4815      	ldr	r0, [pc, #84]	; (8009070 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800901a:	f000 fc94 	bl	8009946 <USBD_GetEpDesc>
 800901e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009020:	2181      	movs	r1, #129	; 0x81
 8009022:	4813      	ldr	r0, [pc, #76]	; (8009070 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009024:	f000 fc8f 	bl	8009946 <USBD_GetEpDesc>
 8009028:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d002      	beq.n	8009036 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	2210      	movs	r2, #16
 8009034:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d006      	beq.n	800904a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	2200      	movs	r2, #0
 8009040:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009044:	711a      	strb	r2, [r3, #4]
 8009046:	2200      	movs	r2, #0
 8009048:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d006      	beq.n	800905e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2200      	movs	r2, #0
 8009054:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009058:	711a      	strb	r2, [r3, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2243      	movs	r2, #67	; 0x43
 8009062:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009064:	4b02      	ldr	r3, [pc, #8]	; (8009070 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009066:	4618      	mov	r0, r3
 8009068:	3718      	adds	r7, #24
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
 800906e:	bf00      	nop
 8009070:	20000054 	.word	0x20000054

08009074 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	220a      	movs	r2, #10
 8009080:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009082:	4b03      	ldr	r3, [pc, #12]	; (8009090 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009084:	4618      	mov	r0, r3
 8009086:	370c      	adds	r7, #12
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr
 8009090:	20000010 	.word	0x20000010

08009094 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d101      	bne.n	80090a8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80090a4:	2303      	movs	r3, #3
 80090a6:	e009      	b.n	80090bc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	33b0      	adds	r3, #176	; 0xb0
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	4413      	add	r3, r2
 80090b6:	683a      	ldr	r2, [r7, #0]
 80090b8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80090ba:	2300      	movs	r3, #0
}
 80090bc:	4618      	mov	r0, r3
 80090be:	370c      	adds	r7, #12
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr

080090c8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b087      	sub	sp, #28
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	32b0      	adds	r2, #176	; 0xb0
 80090de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090e2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d101      	bne.n	80090ee <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80090ea:	2303      	movs	r3, #3
 80090ec:	e008      	b.n	8009100 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	68ba      	ldr	r2, [r7, #8]
 80090f2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80090fe:	2300      	movs	r3, #0
}
 8009100:	4618      	mov	r0, r3
 8009102:	371c      	adds	r7, #28
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800910c:	b480      	push	{r7}
 800910e:	b085      	sub	sp, #20
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	32b0      	adds	r2, #176	; 0xb0
 8009120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009124:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d101      	bne.n	8009130 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800912c:	2303      	movs	r3, #3
 800912e:	e004      	b.n	800913a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	683a      	ldr	r2, [r7, #0]
 8009134:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3714      	adds	r7, #20
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr
	...

08009148 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	32b0      	adds	r2, #176	; 0xb0
 800915a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800915e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	32b0      	adds	r2, #176	; 0xb0
 800916a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d101      	bne.n	8009176 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009172:	2303      	movs	r3, #3
 8009174:	e018      	b.n	80091a8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	7c1b      	ldrb	r3, [r3, #16]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d10a      	bne.n	8009194 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800917e:	4b0c      	ldr	r3, [pc, #48]	; (80091b0 <USBD_CDC_ReceivePacket+0x68>)
 8009180:	7819      	ldrb	r1, [r3, #0]
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009188:	f44f 7300 	mov.w	r3, #512	; 0x200
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f001 ff7f 	bl	800b090 <USBD_LL_PrepareReceive>
 8009192:	e008      	b.n	80091a6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009194:	4b06      	ldr	r3, [pc, #24]	; (80091b0 <USBD_CDC_ReceivePacket+0x68>)
 8009196:	7819      	ldrb	r1, [r3, #0]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800919e:	2340      	movs	r3, #64	; 0x40
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f001 ff75 	bl	800b090 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80091a6:	2300      	movs	r3, #0
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3710      	adds	r7, #16
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}
 80091b0:	20000098 	.word	0x20000098

080091b4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b086      	sub	sp, #24
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	60b9      	str	r1, [r7, #8]
 80091be:	4613      	mov	r3, r2
 80091c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d101      	bne.n	80091cc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80091c8:	2303      	movs	r3, #3
 80091ca:	e01f      	b.n	800920c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	2200      	movs	r2, #0
 80091d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2200      	movs	r2, #0
 80091d8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2200      	movs	r2, #0
 80091e0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d003      	beq.n	80091f2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	68ba      	ldr	r2, [r7, #8]
 80091ee:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2201      	movs	r2, #1
 80091f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	79fa      	ldrb	r2, [r7, #7]
 80091fe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009200:	68f8      	ldr	r0, [r7, #12]
 8009202:	f001 fdef 	bl	800ade4 <USBD_LL_Init>
 8009206:	4603      	mov	r3, r0
 8009208:	75fb      	strb	r3, [r7, #23]

  return ret;
 800920a:	7dfb      	ldrb	r3, [r7, #23]
}
 800920c:	4618      	mov	r0, r3
 800920e:	3718      	adds	r7, #24
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800921e:	2300      	movs	r3, #0
 8009220:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d101      	bne.n	800922c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009228:	2303      	movs	r3, #3
 800922a:	e025      	b.n	8009278 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	683a      	ldr	r2, [r7, #0]
 8009230:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	32ae      	adds	r2, #174	; 0xae
 800923e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009244:	2b00      	cmp	r3, #0
 8009246:	d00f      	beq.n	8009268 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	32ae      	adds	r2, #174	; 0xae
 8009252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009258:	f107 020e 	add.w	r2, r7, #14
 800925c:	4610      	mov	r0, r2
 800925e:	4798      	blx	r3
 8009260:	4602      	mov	r2, r0
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800926e:	1c5a      	adds	r2, r3, #1
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009276:	2300      	movs	r3, #0
}
 8009278:	4618      	mov	r0, r3
 800927a:	3710      	adds	r7, #16
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b082      	sub	sp, #8
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f001 fdf7 	bl	800ae7c <USBD_LL_Start>
 800928e:	4603      	mov	r3, r0
}
 8009290:	4618      	mov	r0, r3
 8009292:	3708      	adds	r7, #8
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009298:	b480      	push	{r7}
 800929a:	b083      	sub	sp, #12
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80092a0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	370c      	adds	r7, #12
 80092a6:	46bd      	mov	sp, r7
 80092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ac:	4770      	bx	lr

080092ae <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092ae:	b580      	push	{r7, lr}
 80092b0:	b084      	sub	sp, #16
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]
 80092b6:	460b      	mov	r3, r1
 80092b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80092ba:	2300      	movs	r3, #0
 80092bc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d009      	beq.n	80092dc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	78fa      	ldrb	r2, [r7, #3]
 80092d2:	4611      	mov	r1, r2
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	4798      	blx	r3
 80092d8:	4603      	mov	r3, r0
 80092da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80092dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3710      	adds	r7, #16
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}

080092e6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092e6:	b580      	push	{r7, lr}
 80092e8:	b084      	sub	sp, #16
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
 80092ee:	460b      	mov	r3, r1
 80092f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80092f2:	2300      	movs	r3, #0
 80092f4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	78fa      	ldrb	r2, [r7, #3]
 8009300:	4611      	mov	r1, r2
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	4798      	blx	r3
 8009306:	4603      	mov	r3, r0
 8009308:	2b00      	cmp	r3, #0
 800930a:	d001      	beq.n	8009310 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800930c:	2303      	movs	r3, #3
 800930e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009310:	7bfb      	ldrb	r3, [r7, #15]
}
 8009312:	4618      	mov	r0, r3
 8009314:	3710      	adds	r7, #16
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800931a:	b580      	push	{r7, lr}
 800931c:	b084      	sub	sp, #16
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
 8009322:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800932a:	6839      	ldr	r1, [r7, #0]
 800932c:	4618      	mov	r0, r3
 800932e:	f001 f908 	bl	800a542 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2201      	movs	r2, #1
 8009336:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009340:	461a      	mov	r2, r3
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800934e:	f003 031f 	and.w	r3, r3, #31
 8009352:	2b02      	cmp	r3, #2
 8009354:	d01a      	beq.n	800938c <USBD_LL_SetupStage+0x72>
 8009356:	2b02      	cmp	r3, #2
 8009358:	d822      	bhi.n	80093a0 <USBD_LL_SetupStage+0x86>
 800935a:	2b00      	cmp	r3, #0
 800935c:	d002      	beq.n	8009364 <USBD_LL_SetupStage+0x4a>
 800935e:	2b01      	cmp	r3, #1
 8009360:	d00a      	beq.n	8009378 <USBD_LL_SetupStage+0x5e>
 8009362:	e01d      	b.n	80093a0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800936a:	4619      	mov	r1, r3
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 fb5f 	bl	8009a30 <USBD_StdDevReq>
 8009372:	4603      	mov	r3, r0
 8009374:	73fb      	strb	r3, [r7, #15]
      break;
 8009376:	e020      	b.n	80093ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800937e:	4619      	mov	r1, r3
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 fbc7 	bl	8009b14 <USBD_StdItfReq>
 8009386:	4603      	mov	r3, r0
 8009388:	73fb      	strb	r3, [r7, #15]
      break;
 800938a:	e016      	b.n	80093ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009392:	4619      	mov	r1, r3
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 fc29 	bl	8009bec <USBD_StdEPReq>
 800939a:	4603      	mov	r3, r0
 800939c:	73fb      	strb	r3, [r7, #15]
      break;
 800939e:	e00c      	b.n	80093ba <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80093a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	4619      	mov	r1, r3
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f001 fdc4 	bl	800af3c <USBD_LL_StallEP>
 80093b4:	4603      	mov	r3, r0
 80093b6:	73fb      	strb	r3, [r7, #15]
      break;
 80093b8:	bf00      	nop
  }

  return ret;
 80093ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3710      	adds	r7, #16
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b086      	sub	sp, #24
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	460b      	mov	r3, r1
 80093ce:	607a      	str	r2, [r7, #4]
 80093d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80093d2:	2300      	movs	r3, #0
 80093d4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80093d6:	7afb      	ldrb	r3, [r7, #11]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d16e      	bne.n	80094ba <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80093e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80093ea:	2b03      	cmp	r3, #3
 80093ec:	f040 8098 	bne.w	8009520 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	689a      	ldr	r2, [r3, #8]
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	68db      	ldr	r3, [r3, #12]
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d913      	bls.n	8009424 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	689a      	ldr	r2, [r3, #8]
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	1ad2      	subs	r2, r2, r3
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800940a:	693b      	ldr	r3, [r7, #16]
 800940c:	68da      	ldr	r2, [r3, #12]
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	689b      	ldr	r3, [r3, #8]
 8009412:	4293      	cmp	r3, r2
 8009414:	bf28      	it	cs
 8009416:	4613      	movcs	r3, r2
 8009418:	461a      	mov	r2, r3
 800941a:	6879      	ldr	r1, [r7, #4]
 800941c:	68f8      	ldr	r0, [r7, #12]
 800941e:	f001 f984 	bl	800a72a <USBD_CtlContinueRx>
 8009422:	e07d      	b.n	8009520 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800942a:	f003 031f 	and.w	r3, r3, #31
 800942e:	2b02      	cmp	r3, #2
 8009430:	d014      	beq.n	800945c <USBD_LL_DataOutStage+0x98>
 8009432:	2b02      	cmp	r3, #2
 8009434:	d81d      	bhi.n	8009472 <USBD_LL_DataOutStage+0xae>
 8009436:	2b00      	cmp	r3, #0
 8009438:	d002      	beq.n	8009440 <USBD_LL_DataOutStage+0x7c>
 800943a:	2b01      	cmp	r3, #1
 800943c:	d003      	beq.n	8009446 <USBD_LL_DataOutStage+0x82>
 800943e:	e018      	b.n	8009472 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009440:	2300      	movs	r3, #0
 8009442:	75bb      	strb	r3, [r7, #22]
            break;
 8009444:	e018      	b.n	8009478 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800944c:	b2db      	uxtb	r3, r3
 800944e:	4619      	mov	r1, r3
 8009450:	68f8      	ldr	r0, [r7, #12]
 8009452:	f000 fa5e 	bl	8009912 <USBD_CoreFindIF>
 8009456:	4603      	mov	r3, r0
 8009458:	75bb      	strb	r3, [r7, #22]
            break;
 800945a:	e00d      	b.n	8009478 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009462:	b2db      	uxtb	r3, r3
 8009464:	4619      	mov	r1, r3
 8009466:	68f8      	ldr	r0, [r7, #12]
 8009468:	f000 fa60 	bl	800992c <USBD_CoreFindEP>
 800946c:	4603      	mov	r3, r0
 800946e:	75bb      	strb	r3, [r7, #22]
            break;
 8009470:	e002      	b.n	8009478 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009472:	2300      	movs	r3, #0
 8009474:	75bb      	strb	r3, [r7, #22]
            break;
 8009476:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009478:	7dbb      	ldrb	r3, [r7, #22]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d119      	bne.n	80094b2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009484:	b2db      	uxtb	r3, r3
 8009486:	2b03      	cmp	r3, #3
 8009488:	d113      	bne.n	80094b2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800948a:	7dba      	ldrb	r2, [r7, #22]
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	32ae      	adds	r2, #174	; 0xae
 8009490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009494:	691b      	ldr	r3, [r3, #16]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d00b      	beq.n	80094b2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800949a:	7dba      	ldrb	r2, [r7, #22]
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80094a2:	7dba      	ldrb	r2, [r7, #22]
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	32ae      	adds	r2, #174	; 0xae
 80094a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094ac:	691b      	ldr	r3, [r3, #16]
 80094ae:	68f8      	ldr	r0, [r7, #12]
 80094b0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80094b2:	68f8      	ldr	r0, [r7, #12]
 80094b4:	f001 f94a 	bl	800a74c <USBD_CtlSendStatus>
 80094b8:	e032      	b.n	8009520 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80094ba:	7afb      	ldrb	r3, [r7, #11]
 80094bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	4619      	mov	r1, r3
 80094c4:	68f8      	ldr	r0, [r7, #12]
 80094c6:	f000 fa31 	bl	800992c <USBD_CoreFindEP>
 80094ca:	4603      	mov	r3, r0
 80094cc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80094ce:	7dbb      	ldrb	r3, [r7, #22]
 80094d0:	2bff      	cmp	r3, #255	; 0xff
 80094d2:	d025      	beq.n	8009520 <USBD_LL_DataOutStage+0x15c>
 80094d4:	7dbb      	ldrb	r3, [r7, #22]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d122      	bne.n	8009520 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	2b03      	cmp	r3, #3
 80094e4:	d117      	bne.n	8009516 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80094e6:	7dba      	ldrb	r2, [r7, #22]
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	32ae      	adds	r2, #174	; 0xae
 80094ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094f0:	699b      	ldr	r3, [r3, #24]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d00f      	beq.n	8009516 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80094f6:	7dba      	ldrb	r2, [r7, #22]
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80094fe:	7dba      	ldrb	r2, [r7, #22]
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	32ae      	adds	r2, #174	; 0xae
 8009504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009508:	699b      	ldr	r3, [r3, #24]
 800950a:	7afa      	ldrb	r2, [r7, #11]
 800950c:	4611      	mov	r1, r2
 800950e:	68f8      	ldr	r0, [r7, #12]
 8009510:	4798      	blx	r3
 8009512:	4603      	mov	r3, r0
 8009514:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009516:	7dfb      	ldrb	r3, [r7, #23]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d001      	beq.n	8009520 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800951c:	7dfb      	ldrb	r3, [r7, #23]
 800951e:	e000      	b.n	8009522 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009520:	2300      	movs	r3, #0
}
 8009522:	4618      	mov	r0, r3
 8009524:	3718      	adds	r7, #24
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}

0800952a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800952a:	b580      	push	{r7, lr}
 800952c:	b086      	sub	sp, #24
 800952e:	af00      	add	r7, sp, #0
 8009530:	60f8      	str	r0, [r7, #12]
 8009532:	460b      	mov	r3, r1
 8009534:	607a      	str	r2, [r7, #4]
 8009536:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009538:	7afb      	ldrb	r3, [r7, #11]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d16f      	bne.n	800961e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	3314      	adds	r3, #20
 8009542:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800954a:	2b02      	cmp	r3, #2
 800954c:	d15a      	bne.n	8009604 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	689a      	ldr	r2, [r3, #8]
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	68db      	ldr	r3, [r3, #12]
 8009556:	429a      	cmp	r2, r3
 8009558:	d914      	bls.n	8009584 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	689a      	ldr	r2, [r3, #8]
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	1ad2      	subs	r2, r2, r3
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	461a      	mov	r2, r3
 800956e:	6879      	ldr	r1, [r7, #4]
 8009570:	68f8      	ldr	r0, [r7, #12]
 8009572:	f001 f8ac 	bl	800a6ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009576:	2300      	movs	r3, #0
 8009578:	2200      	movs	r2, #0
 800957a:	2100      	movs	r1, #0
 800957c:	68f8      	ldr	r0, [r7, #12]
 800957e:	f001 fd87 	bl	800b090 <USBD_LL_PrepareReceive>
 8009582:	e03f      	b.n	8009604 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	68da      	ldr	r2, [r3, #12]
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	689b      	ldr	r3, [r3, #8]
 800958c:	429a      	cmp	r2, r3
 800958e:	d11c      	bne.n	80095ca <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	685a      	ldr	r2, [r3, #4]
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009598:	429a      	cmp	r2, r3
 800959a:	d316      	bcc.n	80095ca <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	685a      	ldr	r2, [r3, #4]
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d20f      	bcs.n	80095ca <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80095aa:	2200      	movs	r2, #0
 80095ac:	2100      	movs	r1, #0
 80095ae:	68f8      	ldr	r0, [r7, #12]
 80095b0:	f001 f88d 	bl	800a6ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2200      	movs	r2, #0
 80095b8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095bc:	2300      	movs	r3, #0
 80095be:	2200      	movs	r2, #0
 80095c0:	2100      	movs	r1, #0
 80095c2:	68f8      	ldr	r0, [r7, #12]
 80095c4:	f001 fd64 	bl	800b090 <USBD_LL_PrepareReceive>
 80095c8:	e01c      	b.n	8009604 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	2b03      	cmp	r3, #3
 80095d4:	d10f      	bne.n	80095f6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d009      	beq.n	80095f6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2200      	movs	r2, #0
 80095e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	68f8      	ldr	r0, [r7, #12]
 80095f4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80095f6:	2180      	movs	r1, #128	; 0x80
 80095f8:	68f8      	ldr	r0, [r7, #12]
 80095fa:	f001 fc9f 	bl	800af3c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80095fe:	68f8      	ldr	r0, [r7, #12]
 8009600:	f001 f8b7 	bl	800a772 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d03a      	beq.n	8009684 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800960e:	68f8      	ldr	r0, [r7, #12]
 8009610:	f7ff fe42 	bl	8009298 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2200      	movs	r2, #0
 8009618:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800961c:	e032      	b.n	8009684 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800961e:	7afb      	ldrb	r3, [r7, #11]
 8009620:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009624:	b2db      	uxtb	r3, r3
 8009626:	4619      	mov	r1, r3
 8009628:	68f8      	ldr	r0, [r7, #12]
 800962a:	f000 f97f 	bl	800992c <USBD_CoreFindEP>
 800962e:	4603      	mov	r3, r0
 8009630:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009632:	7dfb      	ldrb	r3, [r7, #23]
 8009634:	2bff      	cmp	r3, #255	; 0xff
 8009636:	d025      	beq.n	8009684 <USBD_LL_DataInStage+0x15a>
 8009638:	7dfb      	ldrb	r3, [r7, #23]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d122      	bne.n	8009684 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009644:	b2db      	uxtb	r3, r3
 8009646:	2b03      	cmp	r3, #3
 8009648:	d11c      	bne.n	8009684 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800964a:	7dfa      	ldrb	r2, [r7, #23]
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	32ae      	adds	r2, #174	; 0xae
 8009650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009654:	695b      	ldr	r3, [r3, #20]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d014      	beq.n	8009684 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800965a:	7dfa      	ldrb	r2, [r7, #23]
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009662:	7dfa      	ldrb	r2, [r7, #23]
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	32ae      	adds	r2, #174	; 0xae
 8009668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800966c:	695b      	ldr	r3, [r3, #20]
 800966e:	7afa      	ldrb	r2, [r7, #11]
 8009670:	4611      	mov	r1, r2
 8009672:	68f8      	ldr	r0, [r7, #12]
 8009674:	4798      	blx	r3
 8009676:	4603      	mov	r3, r0
 8009678:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800967a:	7dbb      	ldrb	r3, [r7, #22]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d001      	beq.n	8009684 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009680:	7dbb      	ldrb	r3, [r7, #22]
 8009682:	e000      	b.n	8009686 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009684:	2300      	movs	r3, #0
}
 8009686:	4618      	mov	r0, r3
 8009688:	3718      	adds	r7, #24
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}

0800968e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800968e:	b580      	push	{r7, lr}
 8009690:	b084      	sub	sp, #16
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009696:	2300      	movs	r3, #0
 8009698:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2201      	movs	r2, #1
 800969e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2200      	movs	r2, #0
 80096a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2200      	movs	r2, #0
 80096bc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d014      	beq.n	80096f4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d00e      	beq.n	80096f4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	687a      	ldr	r2, [r7, #4]
 80096e0:	6852      	ldr	r2, [r2, #4]
 80096e2:	b2d2      	uxtb	r2, r2
 80096e4:	4611      	mov	r1, r2
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	4798      	blx	r3
 80096ea:	4603      	mov	r3, r0
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d001      	beq.n	80096f4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80096f0:	2303      	movs	r3, #3
 80096f2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80096f4:	2340      	movs	r3, #64	; 0x40
 80096f6:	2200      	movs	r2, #0
 80096f8:	2100      	movs	r1, #0
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f001 fbd9 	bl	800aeb2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2201      	movs	r2, #1
 8009704:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2240      	movs	r2, #64	; 0x40
 800970c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009710:	2340      	movs	r3, #64	; 0x40
 8009712:	2200      	movs	r2, #0
 8009714:	2180      	movs	r1, #128	; 0x80
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f001 fbcb 	bl	800aeb2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2201      	movs	r2, #1
 8009720:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2240      	movs	r2, #64	; 0x40
 8009726:	621a      	str	r2, [r3, #32]

  return ret;
 8009728:	7bfb      	ldrb	r3, [r7, #15]
}
 800972a:	4618      	mov	r0, r3
 800972c:	3710      	adds	r7, #16
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009732:	b480      	push	{r7}
 8009734:	b083      	sub	sp, #12
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
 800973a:	460b      	mov	r3, r1
 800973c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	78fa      	ldrb	r2, [r7, #3]
 8009742:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009744:	2300      	movs	r3, #0
}
 8009746:	4618      	mov	r0, r3
 8009748:	370c      	adds	r7, #12
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr

08009752 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009752:	b480      	push	{r7}
 8009754:	b083      	sub	sp, #12
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009760:	b2da      	uxtb	r2, r3
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2204      	movs	r2, #4
 800976c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009770:	2300      	movs	r3, #0
}
 8009772:	4618      	mov	r0, r3
 8009774:	370c      	adds	r7, #12
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr

0800977e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800977e:	b480      	push	{r7}
 8009780:	b083      	sub	sp, #12
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800978c:	b2db      	uxtb	r3, r3
 800978e:	2b04      	cmp	r3, #4
 8009790:	d106      	bne.n	80097a0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009798:	b2da      	uxtb	r2, r3
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80097a0:	2300      	movs	r3, #0
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	370c      	adds	r7, #12
 80097a6:	46bd      	mov	sp, r7
 80097a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ac:	4770      	bx	lr

080097ae <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b082      	sub	sp, #8
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	2b03      	cmp	r3, #3
 80097c0:	d110      	bne.n	80097e4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d00b      	beq.n	80097e4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097d2:	69db      	ldr	r3, [r3, #28]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d005      	beq.n	80097e4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097de:	69db      	ldr	r3, [r3, #28]
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80097e4:	2300      	movs	r3, #0
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3708      	adds	r7, #8
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b082      	sub	sp, #8
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
 80097f6:	460b      	mov	r3, r1
 80097f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	32ae      	adds	r2, #174	; 0xae
 8009804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d101      	bne.n	8009810 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800980c:	2303      	movs	r3, #3
 800980e:	e01c      	b.n	800984a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009816:	b2db      	uxtb	r3, r3
 8009818:	2b03      	cmp	r3, #3
 800981a:	d115      	bne.n	8009848 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	32ae      	adds	r2, #174	; 0xae
 8009826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800982a:	6a1b      	ldr	r3, [r3, #32]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d00b      	beq.n	8009848 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	32ae      	adds	r2, #174	; 0xae
 800983a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800983e:	6a1b      	ldr	r3, [r3, #32]
 8009840:	78fa      	ldrb	r2, [r7, #3]
 8009842:	4611      	mov	r1, r2
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009848:	2300      	movs	r3, #0
}
 800984a:	4618      	mov	r0, r3
 800984c:	3708      	adds	r7, #8
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009852:	b580      	push	{r7, lr}
 8009854:	b082      	sub	sp, #8
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
 800985a:	460b      	mov	r3, r1
 800985c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	32ae      	adds	r2, #174	; 0xae
 8009868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d101      	bne.n	8009874 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009870:	2303      	movs	r3, #3
 8009872:	e01c      	b.n	80098ae <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800987a:	b2db      	uxtb	r3, r3
 800987c:	2b03      	cmp	r3, #3
 800987e:	d115      	bne.n	80098ac <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	32ae      	adds	r2, #174	; 0xae
 800988a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800988e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009890:	2b00      	cmp	r3, #0
 8009892:	d00b      	beq.n	80098ac <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	32ae      	adds	r2, #174	; 0xae
 800989e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a4:	78fa      	ldrb	r2, [r7, #3]
 80098a6:	4611      	mov	r1, r2
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80098ac:	2300      	movs	r3, #0
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3708      	adds	r7, #8
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}

080098b6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80098b6:	b480      	push	{r7}
 80098b8:	b083      	sub	sp, #12
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80098be:	2300      	movs	r3, #0
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	370c      	adds	r7, #12
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr

080098cc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b084      	sub	sp, #16
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80098d4:	2300      	movs	r3, #0
 80098d6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2201      	movs	r2, #1
 80098dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d00e      	beq.n	8009908 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	687a      	ldr	r2, [r7, #4]
 80098f4:	6852      	ldr	r2, [r2, #4]
 80098f6:	b2d2      	uxtb	r2, r2
 80098f8:	4611      	mov	r1, r2
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	4798      	blx	r3
 80098fe:	4603      	mov	r3, r0
 8009900:	2b00      	cmp	r3, #0
 8009902:	d001      	beq.n	8009908 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009904:	2303      	movs	r3, #3
 8009906:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009908:	7bfb      	ldrb	r3, [r7, #15]
}
 800990a:	4618      	mov	r0, r3
 800990c:	3710      	adds	r7, #16
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}

08009912 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009912:	b480      	push	{r7}
 8009914:	b083      	sub	sp, #12
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
 800991a:	460b      	mov	r3, r1
 800991c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800991e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009920:	4618      	mov	r0, r3
 8009922:	370c      	adds	r7, #12
 8009924:	46bd      	mov	sp, r7
 8009926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992a:	4770      	bx	lr

0800992c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800992c:	b480      	push	{r7}
 800992e:	b083      	sub	sp, #12
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	460b      	mov	r3, r1
 8009936:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009938:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800993a:	4618      	mov	r0, r3
 800993c:	370c      	adds	r7, #12
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr

08009946 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009946:	b580      	push	{r7, lr}
 8009948:	b086      	sub	sp, #24
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
 800994e:	460b      	mov	r3, r1
 8009950:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800995a:	2300      	movs	r3, #0
 800995c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	885b      	ldrh	r3, [r3, #2]
 8009962:	b29a      	uxth	r2, r3
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	b29b      	uxth	r3, r3
 800996a:	429a      	cmp	r2, r3
 800996c:	d920      	bls.n	80099b0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	b29b      	uxth	r3, r3
 8009974:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009976:	e013      	b.n	80099a0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009978:	f107 030a 	add.w	r3, r7, #10
 800997c:	4619      	mov	r1, r3
 800997e:	6978      	ldr	r0, [r7, #20]
 8009980:	f000 f81b 	bl	80099ba <USBD_GetNextDesc>
 8009984:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	785b      	ldrb	r3, [r3, #1]
 800998a:	2b05      	cmp	r3, #5
 800998c:	d108      	bne.n	80099a0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	789b      	ldrb	r3, [r3, #2]
 8009996:	78fa      	ldrb	r2, [r7, #3]
 8009998:	429a      	cmp	r2, r3
 800999a:	d008      	beq.n	80099ae <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800999c:	2300      	movs	r3, #0
 800999e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	885b      	ldrh	r3, [r3, #2]
 80099a4:	b29a      	uxth	r2, r3
 80099a6:	897b      	ldrh	r3, [r7, #10]
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d8e5      	bhi.n	8009978 <USBD_GetEpDesc+0x32>
 80099ac:	e000      	b.n	80099b0 <USBD_GetEpDesc+0x6a>
          break;
 80099ae:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80099b0:	693b      	ldr	r3, [r7, #16]
}
 80099b2:	4618      	mov	r0, r3
 80099b4:	3718      	adds	r7, #24
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80099ba:	b480      	push	{r7}
 80099bc:	b085      	sub	sp, #20
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
 80099c2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	881a      	ldrh	r2, [r3, #0]
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	4413      	add	r3, r2
 80099d4:	b29a      	uxth	r2, r3
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	461a      	mov	r2, r3
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4413      	add	r3, r2
 80099e4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80099e6:	68fb      	ldr	r3, [r7, #12]
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3714      	adds	r7, #20
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr

080099f4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b087      	sub	sp, #28
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	781b      	ldrb	r3, [r3, #0]
 8009a04:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	3301      	adds	r3, #1
 8009a0a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009a12:	8a3b      	ldrh	r3, [r7, #16]
 8009a14:	021b      	lsls	r3, r3, #8
 8009a16:	b21a      	sxth	r2, r3
 8009a18:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	b21b      	sxth	r3, r3
 8009a20:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009a22:	89fb      	ldrh	r3, [r7, #14]
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	371c      	adds	r7, #28
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b084      	sub	sp, #16
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
 8009a38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a46:	2b40      	cmp	r3, #64	; 0x40
 8009a48:	d005      	beq.n	8009a56 <USBD_StdDevReq+0x26>
 8009a4a:	2b40      	cmp	r3, #64	; 0x40
 8009a4c:	d857      	bhi.n	8009afe <USBD_StdDevReq+0xce>
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d00f      	beq.n	8009a72 <USBD_StdDevReq+0x42>
 8009a52:	2b20      	cmp	r3, #32
 8009a54:	d153      	bne.n	8009afe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	32ae      	adds	r2, #174	; 0xae
 8009a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a64:	689b      	ldr	r3, [r3, #8]
 8009a66:	6839      	ldr	r1, [r7, #0]
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	4798      	blx	r3
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8009a70:	e04a      	b.n	8009b08 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	785b      	ldrb	r3, [r3, #1]
 8009a76:	2b09      	cmp	r3, #9
 8009a78:	d83b      	bhi.n	8009af2 <USBD_StdDevReq+0xc2>
 8009a7a:	a201      	add	r2, pc, #4	; (adr r2, 8009a80 <USBD_StdDevReq+0x50>)
 8009a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a80:	08009ad5 	.word	0x08009ad5
 8009a84:	08009ae9 	.word	0x08009ae9
 8009a88:	08009af3 	.word	0x08009af3
 8009a8c:	08009adf 	.word	0x08009adf
 8009a90:	08009af3 	.word	0x08009af3
 8009a94:	08009ab3 	.word	0x08009ab3
 8009a98:	08009aa9 	.word	0x08009aa9
 8009a9c:	08009af3 	.word	0x08009af3
 8009aa0:	08009acb 	.word	0x08009acb
 8009aa4:	08009abd 	.word	0x08009abd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009aa8:	6839      	ldr	r1, [r7, #0]
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 fa3c 	bl	8009f28 <USBD_GetDescriptor>
          break;
 8009ab0:	e024      	b.n	8009afc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009ab2:	6839      	ldr	r1, [r7, #0]
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 fba1 	bl	800a1fc <USBD_SetAddress>
          break;
 8009aba:	e01f      	b.n	8009afc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009abc:	6839      	ldr	r1, [r7, #0]
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 fbe0 	bl	800a284 <USBD_SetConfig>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	73fb      	strb	r3, [r7, #15]
          break;
 8009ac8:	e018      	b.n	8009afc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009aca:	6839      	ldr	r1, [r7, #0]
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 fc83 	bl	800a3d8 <USBD_GetConfig>
          break;
 8009ad2:	e013      	b.n	8009afc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009ad4:	6839      	ldr	r1, [r7, #0]
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 fcb4 	bl	800a444 <USBD_GetStatus>
          break;
 8009adc:	e00e      	b.n	8009afc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009ade:	6839      	ldr	r1, [r7, #0]
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f000 fce3 	bl	800a4ac <USBD_SetFeature>
          break;
 8009ae6:	e009      	b.n	8009afc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009ae8:	6839      	ldr	r1, [r7, #0]
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 fd07 	bl	800a4fe <USBD_ClrFeature>
          break;
 8009af0:	e004      	b.n	8009afc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009af2:	6839      	ldr	r1, [r7, #0]
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 fd5e 	bl	800a5b6 <USBD_CtlError>
          break;
 8009afa:	bf00      	nop
      }
      break;
 8009afc:	e004      	b.n	8009b08 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009afe:	6839      	ldr	r1, [r7, #0]
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 fd58 	bl	800a5b6 <USBD_CtlError>
      break;
 8009b06:	bf00      	nop
  }

  return ret;
 8009b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3710      	adds	r7, #16
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop

08009b14 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b2a:	2b40      	cmp	r3, #64	; 0x40
 8009b2c:	d005      	beq.n	8009b3a <USBD_StdItfReq+0x26>
 8009b2e:	2b40      	cmp	r3, #64	; 0x40
 8009b30:	d852      	bhi.n	8009bd8 <USBD_StdItfReq+0xc4>
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d001      	beq.n	8009b3a <USBD_StdItfReq+0x26>
 8009b36:	2b20      	cmp	r3, #32
 8009b38:	d14e      	bne.n	8009bd8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b40:	b2db      	uxtb	r3, r3
 8009b42:	3b01      	subs	r3, #1
 8009b44:	2b02      	cmp	r3, #2
 8009b46:	d840      	bhi.n	8009bca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	889b      	ldrh	r3, [r3, #4]
 8009b4c:	b2db      	uxtb	r3, r3
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d836      	bhi.n	8009bc0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	889b      	ldrh	r3, [r3, #4]
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	4619      	mov	r1, r3
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f7ff fed9 	bl	8009912 <USBD_CoreFindIF>
 8009b60:	4603      	mov	r3, r0
 8009b62:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b64:	7bbb      	ldrb	r3, [r7, #14]
 8009b66:	2bff      	cmp	r3, #255	; 0xff
 8009b68:	d01d      	beq.n	8009ba6 <USBD_StdItfReq+0x92>
 8009b6a:	7bbb      	ldrb	r3, [r7, #14]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d11a      	bne.n	8009ba6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009b70:	7bba      	ldrb	r2, [r7, #14]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	32ae      	adds	r2, #174	; 0xae
 8009b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b7a:	689b      	ldr	r3, [r3, #8]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d00f      	beq.n	8009ba0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009b80:	7bba      	ldrb	r2, [r7, #14]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009b88:	7bba      	ldrb	r2, [r7, #14]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	32ae      	adds	r2, #174	; 0xae
 8009b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b92:	689b      	ldr	r3, [r3, #8]
 8009b94:	6839      	ldr	r1, [r7, #0]
 8009b96:	6878      	ldr	r0, [r7, #4]
 8009b98:	4798      	blx	r3
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009b9e:	e004      	b.n	8009baa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009ba0:	2303      	movs	r3, #3
 8009ba2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009ba4:	e001      	b.n	8009baa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009ba6:	2303      	movs	r3, #3
 8009ba8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	88db      	ldrh	r3, [r3, #6]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d110      	bne.n	8009bd4 <USBD_StdItfReq+0xc0>
 8009bb2:	7bfb      	ldrb	r3, [r7, #15]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d10d      	bne.n	8009bd4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f000 fdc7 	bl	800a74c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009bbe:	e009      	b.n	8009bd4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009bc0:	6839      	ldr	r1, [r7, #0]
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f000 fcf7 	bl	800a5b6 <USBD_CtlError>
          break;
 8009bc8:	e004      	b.n	8009bd4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009bca:	6839      	ldr	r1, [r7, #0]
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f000 fcf2 	bl	800a5b6 <USBD_CtlError>
          break;
 8009bd2:	e000      	b.n	8009bd6 <USBD_StdItfReq+0xc2>
          break;
 8009bd4:	bf00      	nop
      }
      break;
 8009bd6:	e004      	b.n	8009be2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009bd8:	6839      	ldr	r1, [r7, #0]
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 fceb 	bl	800a5b6 <USBD_CtlError>
      break;
 8009be0:	bf00      	nop
  }

  return ret;
 8009be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3710      	adds	r7, #16
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}

08009bec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b084      	sub	sp, #16
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	889b      	ldrh	r3, [r3, #4]
 8009bfe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c08:	2b40      	cmp	r3, #64	; 0x40
 8009c0a:	d007      	beq.n	8009c1c <USBD_StdEPReq+0x30>
 8009c0c:	2b40      	cmp	r3, #64	; 0x40
 8009c0e:	f200 817f 	bhi.w	8009f10 <USBD_StdEPReq+0x324>
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d02a      	beq.n	8009c6c <USBD_StdEPReq+0x80>
 8009c16:	2b20      	cmp	r3, #32
 8009c18:	f040 817a 	bne.w	8009f10 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009c1c:	7bbb      	ldrb	r3, [r7, #14]
 8009c1e:	4619      	mov	r1, r3
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f7ff fe83 	bl	800992c <USBD_CoreFindEP>
 8009c26:	4603      	mov	r3, r0
 8009c28:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c2a:	7b7b      	ldrb	r3, [r7, #13]
 8009c2c:	2bff      	cmp	r3, #255	; 0xff
 8009c2e:	f000 8174 	beq.w	8009f1a <USBD_StdEPReq+0x32e>
 8009c32:	7b7b      	ldrb	r3, [r7, #13]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	f040 8170 	bne.w	8009f1a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009c3a:	7b7a      	ldrb	r2, [r7, #13]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009c42:	7b7a      	ldrb	r2, [r7, #13]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	32ae      	adds	r2, #174	; 0xae
 8009c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c4c:	689b      	ldr	r3, [r3, #8]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	f000 8163 	beq.w	8009f1a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009c54:	7b7a      	ldrb	r2, [r7, #13]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	32ae      	adds	r2, #174	; 0xae
 8009c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c5e:	689b      	ldr	r3, [r3, #8]
 8009c60:	6839      	ldr	r1, [r7, #0]
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	4798      	blx	r3
 8009c66:	4603      	mov	r3, r0
 8009c68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009c6a:	e156      	b.n	8009f1a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	785b      	ldrb	r3, [r3, #1]
 8009c70:	2b03      	cmp	r3, #3
 8009c72:	d008      	beq.n	8009c86 <USBD_StdEPReq+0x9a>
 8009c74:	2b03      	cmp	r3, #3
 8009c76:	f300 8145 	bgt.w	8009f04 <USBD_StdEPReq+0x318>
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	f000 809b 	beq.w	8009db6 <USBD_StdEPReq+0x1ca>
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d03c      	beq.n	8009cfe <USBD_StdEPReq+0x112>
 8009c84:	e13e      	b.n	8009f04 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	2b02      	cmp	r3, #2
 8009c90:	d002      	beq.n	8009c98 <USBD_StdEPReq+0xac>
 8009c92:	2b03      	cmp	r3, #3
 8009c94:	d016      	beq.n	8009cc4 <USBD_StdEPReq+0xd8>
 8009c96:	e02c      	b.n	8009cf2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c98:	7bbb      	ldrb	r3, [r7, #14]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d00d      	beq.n	8009cba <USBD_StdEPReq+0xce>
 8009c9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ca0:	2b80      	cmp	r3, #128	; 0x80
 8009ca2:	d00a      	beq.n	8009cba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ca4:	7bbb      	ldrb	r3, [r7, #14]
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f001 f947 	bl	800af3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009cae:	2180      	movs	r1, #128	; 0x80
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f001 f943 	bl	800af3c <USBD_LL_StallEP>
 8009cb6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009cb8:	e020      	b.n	8009cfc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009cba:	6839      	ldr	r1, [r7, #0]
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 fc7a 	bl	800a5b6 <USBD_CtlError>
              break;
 8009cc2:	e01b      	b.n	8009cfc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	885b      	ldrh	r3, [r3, #2]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d10e      	bne.n	8009cea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009ccc:	7bbb      	ldrb	r3, [r7, #14]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d00b      	beq.n	8009cea <USBD_StdEPReq+0xfe>
 8009cd2:	7bbb      	ldrb	r3, [r7, #14]
 8009cd4:	2b80      	cmp	r3, #128	; 0x80
 8009cd6:	d008      	beq.n	8009cea <USBD_StdEPReq+0xfe>
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	88db      	ldrh	r3, [r3, #6]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d104      	bne.n	8009cea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ce0:	7bbb      	ldrb	r3, [r7, #14]
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f001 f929 	bl	800af3c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 fd2e 	bl	800a74c <USBD_CtlSendStatus>

              break;
 8009cf0:	e004      	b.n	8009cfc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009cf2:	6839      	ldr	r1, [r7, #0]
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 fc5e 	bl	800a5b6 <USBD_CtlError>
              break;
 8009cfa:	bf00      	nop
          }
          break;
 8009cfc:	e107      	b.n	8009f0e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	2b02      	cmp	r3, #2
 8009d08:	d002      	beq.n	8009d10 <USBD_StdEPReq+0x124>
 8009d0a:	2b03      	cmp	r3, #3
 8009d0c:	d016      	beq.n	8009d3c <USBD_StdEPReq+0x150>
 8009d0e:	e04b      	b.n	8009da8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d10:	7bbb      	ldrb	r3, [r7, #14]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d00d      	beq.n	8009d32 <USBD_StdEPReq+0x146>
 8009d16:	7bbb      	ldrb	r3, [r7, #14]
 8009d18:	2b80      	cmp	r3, #128	; 0x80
 8009d1a:	d00a      	beq.n	8009d32 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009d1c:	7bbb      	ldrb	r3, [r7, #14]
 8009d1e:	4619      	mov	r1, r3
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f001 f90b 	bl	800af3c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d26:	2180      	movs	r1, #128	; 0x80
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f001 f907 	bl	800af3c <USBD_LL_StallEP>
 8009d2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009d30:	e040      	b.n	8009db4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009d32:	6839      	ldr	r1, [r7, #0]
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 fc3e 	bl	800a5b6 <USBD_CtlError>
              break;
 8009d3a:	e03b      	b.n	8009db4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	885b      	ldrh	r3, [r3, #2]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d136      	bne.n	8009db2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009d44:	7bbb      	ldrb	r3, [r7, #14]
 8009d46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d004      	beq.n	8009d58 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009d4e:	7bbb      	ldrb	r3, [r7, #14]
 8009d50:	4619      	mov	r1, r3
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f001 f911 	bl	800af7a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f000 fcf7 	bl	800a74c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009d5e:	7bbb      	ldrb	r3, [r7, #14]
 8009d60:	4619      	mov	r1, r3
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f7ff fde2 	bl	800992c <USBD_CoreFindEP>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d6c:	7b7b      	ldrb	r3, [r7, #13]
 8009d6e:	2bff      	cmp	r3, #255	; 0xff
 8009d70:	d01f      	beq.n	8009db2 <USBD_StdEPReq+0x1c6>
 8009d72:	7b7b      	ldrb	r3, [r7, #13]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d11c      	bne.n	8009db2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009d78:	7b7a      	ldrb	r2, [r7, #13]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009d80:	7b7a      	ldrb	r2, [r7, #13]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	32ae      	adds	r2, #174	; 0xae
 8009d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d8a:	689b      	ldr	r3, [r3, #8]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d010      	beq.n	8009db2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009d90:	7b7a      	ldrb	r2, [r7, #13]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	32ae      	adds	r2, #174	; 0xae
 8009d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	6839      	ldr	r1, [r7, #0]
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	4798      	blx	r3
 8009da2:	4603      	mov	r3, r0
 8009da4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009da6:	e004      	b.n	8009db2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009da8:	6839      	ldr	r1, [r7, #0]
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 fc03 	bl	800a5b6 <USBD_CtlError>
              break;
 8009db0:	e000      	b.n	8009db4 <USBD_StdEPReq+0x1c8>
              break;
 8009db2:	bf00      	nop
          }
          break;
 8009db4:	e0ab      	b.n	8009f0e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	2b02      	cmp	r3, #2
 8009dc0:	d002      	beq.n	8009dc8 <USBD_StdEPReq+0x1dc>
 8009dc2:	2b03      	cmp	r3, #3
 8009dc4:	d032      	beq.n	8009e2c <USBD_StdEPReq+0x240>
 8009dc6:	e097      	b.n	8009ef8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009dc8:	7bbb      	ldrb	r3, [r7, #14]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d007      	beq.n	8009dde <USBD_StdEPReq+0x1f2>
 8009dce:	7bbb      	ldrb	r3, [r7, #14]
 8009dd0:	2b80      	cmp	r3, #128	; 0x80
 8009dd2:	d004      	beq.n	8009dde <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009dd4:	6839      	ldr	r1, [r7, #0]
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 fbed 	bl	800a5b6 <USBD_CtlError>
                break;
 8009ddc:	e091      	b.n	8009f02 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009dde:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	da0b      	bge.n	8009dfe <USBD_StdEPReq+0x212>
 8009de6:	7bbb      	ldrb	r3, [r7, #14]
 8009de8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009dec:	4613      	mov	r3, r2
 8009dee:	009b      	lsls	r3, r3, #2
 8009df0:	4413      	add	r3, r2
 8009df2:	009b      	lsls	r3, r3, #2
 8009df4:	3310      	adds	r3, #16
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	4413      	add	r3, r2
 8009dfa:	3304      	adds	r3, #4
 8009dfc:	e00b      	b.n	8009e16 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009dfe:	7bbb      	ldrb	r3, [r7, #14]
 8009e00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e04:	4613      	mov	r3, r2
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	4413      	add	r3, r2
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	4413      	add	r3, r2
 8009e14:	3304      	adds	r3, #4
 8009e16:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	2202      	movs	r2, #2
 8009e22:	4619      	mov	r1, r3
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 fc37 	bl	800a698 <USBD_CtlSendData>
              break;
 8009e2a:	e06a      	b.n	8009f02 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009e2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	da11      	bge.n	8009e58 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009e34:	7bbb      	ldrb	r3, [r7, #14]
 8009e36:	f003 020f 	and.w	r2, r3, #15
 8009e3a:	6879      	ldr	r1, [r7, #4]
 8009e3c:	4613      	mov	r3, r2
 8009e3e:	009b      	lsls	r3, r3, #2
 8009e40:	4413      	add	r3, r2
 8009e42:	009b      	lsls	r3, r3, #2
 8009e44:	440b      	add	r3, r1
 8009e46:	3324      	adds	r3, #36	; 0x24
 8009e48:	881b      	ldrh	r3, [r3, #0]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d117      	bne.n	8009e7e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009e4e:	6839      	ldr	r1, [r7, #0]
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 fbb0 	bl	800a5b6 <USBD_CtlError>
                  break;
 8009e56:	e054      	b.n	8009f02 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009e58:	7bbb      	ldrb	r3, [r7, #14]
 8009e5a:	f003 020f 	and.w	r2, r3, #15
 8009e5e:	6879      	ldr	r1, [r7, #4]
 8009e60:	4613      	mov	r3, r2
 8009e62:	009b      	lsls	r3, r3, #2
 8009e64:	4413      	add	r3, r2
 8009e66:	009b      	lsls	r3, r3, #2
 8009e68:	440b      	add	r3, r1
 8009e6a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009e6e:	881b      	ldrh	r3, [r3, #0]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d104      	bne.n	8009e7e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009e74:	6839      	ldr	r1, [r7, #0]
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 fb9d 	bl	800a5b6 <USBD_CtlError>
                  break;
 8009e7c:	e041      	b.n	8009f02 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	da0b      	bge.n	8009e9e <USBD_StdEPReq+0x2b2>
 8009e86:	7bbb      	ldrb	r3, [r7, #14]
 8009e88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e8c:	4613      	mov	r3, r2
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	4413      	add	r3, r2
 8009e92:	009b      	lsls	r3, r3, #2
 8009e94:	3310      	adds	r3, #16
 8009e96:	687a      	ldr	r2, [r7, #4]
 8009e98:	4413      	add	r3, r2
 8009e9a:	3304      	adds	r3, #4
 8009e9c:	e00b      	b.n	8009eb6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ea0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ea4:	4613      	mov	r3, r2
 8009ea6:	009b      	lsls	r3, r3, #2
 8009ea8:	4413      	add	r3, r2
 8009eaa:	009b      	lsls	r3, r3, #2
 8009eac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	4413      	add	r3, r2
 8009eb4:	3304      	adds	r3, #4
 8009eb6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009eb8:	7bbb      	ldrb	r3, [r7, #14]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d002      	beq.n	8009ec4 <USBD_StdEPReq+0x2d8>
 8009ebe:	7bbb      	ldrb	r3, [r7, #14]
 8009ec0:	2b80      	cmp	r3, #128	; 0x80
 8009ec2:	d103      	bne.n	8009ecc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	601a      	str	r2, [r3, #0]
 8009eca:	e00e      	b.n	8009eea <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009ecc:	7bbb      	ldrb	r3, [r7, #14]
 8009ece:	4619      	mov	r1, r3
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f001 f871 	bl	800afb8 <USBD_LL_IsStallEP>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d003      	beq.n	8009ee4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	2201      	movs	r2, #1
 8009ee0:	601a      	str	r2, [r3, #0]
 8009ee2:	e002      	b.n	8009eea <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	2202      	movs	r2, #2
 8009eee:	4619      	mov	r1, r3
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f000 fbd1 	bl	800a698 <USBD_CtlSendData>
              break;
 8009ef6:	e004      	b.n	8009f02 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009ef8:	6839      	ldr	r1, [r7, #0]
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 fb5b 	bl	800a5b6 <USBD_CtlError>
              break;
 8009f00:	bf00      	nop
          }
          break;
 8009f02:	e004      	b.n	8009f0e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009f04:	6839      	ldr	r1, [r7, #0]
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 fb55 	bl	800a5b6 <USBD_CtlError>
          break;
 8009f0c:	bf00      	nop
      }
      break;
 8009f0e:	e005      	b.n	8009f1c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009f10:	6839      	ldr	r1, [r7, #0]
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f000 fb4f 	bl	800a5b6 <USBD_CtlError>
      break;
 8009f18:	e000      	b.n	8009f1c <USBD_StdEPReq+0x330>
      break;
 8009f1a:	bf00      	nop
  }

  return ret;
 8009f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3710      	adds	r7, #16
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}
	...

08009f28 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b084      	sub	sp, #16
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009f32:	2300      	movs	r3, #0
 8009f34:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009f36:	2300      	movs	r3, #0
 8009f38:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	885b      	ldrh	r3, [r3, #2]
 8009f42:	0a1b      	lsrs	r3, r3, #8
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	3b01      	subs	r3, #1
 8009f48:	2b06      	cmp	r3, #6
 8009f4a:	f200 8128 	bhi.w	800a19e <USBD_GetDescriptor+0x276>
 8009f4e:	a201      	add	r2, pc, #4	; (adr r2, 8009f54 <USBD_GetDescriptor+0x2c>)
 8009f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f54:	08009f71 	.word	0x08009f71
 8009f58:	08009f89 	.word	0x08009f89
 8009f5c:	08009fc9 	.word	0x08009fc9
 8009f60:	0800a19f 	.word	0x0800a19f
 8009f64:	0800a19f 	.word	0x0800a19f
 8009f68:	0800a13f 	.word	0x0800a13f
 8009f6c:	0800a16b 	.word	0x0800a16b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	7c12      	ldrb	r2, [r2, #16]
 8009f7c:	f107 0108 	add.w	r1, r7, #8
 8009f80:	4610      	mov	r0, r2
 8009f82:	4798      	blx	r3
 8009f84:	60f8      	str	r0, [r7, #12]
      break;
 8009f86:	e112      	b.n	800a1ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	7c1b      	ldrb	r3, [r3, #16]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d10d      	bne.n	8009fac <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f98:	f107 0208 	add.w	r2, r7, #8
 8009f9c:	4610      	mov	r0, r2
 8009f9e:	4798      	blx	r3
 8009fa0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	2202      	movs	r2, #2
 8009fa8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009faa:	e100      	b.n	800a1ae <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb4:	f107 0208 	add.w	r2, r7, #8
 8009fb8:	4610      	mov	r0, r2
 8009fba:	4798      	blx	r3
 8009fbc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	3301      	adds	r3, #1
 8009fc2:	2202      	movs	r2, #2
 8009fc4:	701a      	strb	r2, [r3, #0]
      break;
 8009fc6:	e0f2      	b.n	800a1ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	885b      	ldrh	r3, [r3, #2]
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	2b05      	cmp	r3, #5
 8009fd0:	f200 80ac 	bhi.w	800a12c <USBD_GetDescriptor+0x204>
 8009fd4:	a201      	add	r2, pc, #4	; (adr r2, 8009fdc <USBD_GetDescriptor+0xb4>)
 8009fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fda:	bf00      	nop
 8009fdc:	08009ff5 	.word	0x08009ff5
 8009fe0:	0800a029 	.word	0x0800a029
 8009fe4:	0800a05d 	.word	0x0800a05d
 8009fe8:	0800a091 	.word	0x0800a091
 8009fec:	0800a0c5 	.word	0x0800a0c5
 8009ff0:	0800a0f9 	.word	0x0800a0f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d00b      	beq.n	800a018 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	687a      	ldr	r2, [r7, #4]
 800a00a:	7c12      	ldrb	r2, [r2, #16]
 800a00c:	f107 0108 	add.w	r1, r7, #8
 800a010:	4610      	mov	r0, r2
 800a012:	4798      	blx	r3
 800a014:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a016:	e091      	b.n	800a13c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a018:	6839      	ldr	r1, [r7, #0]
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 facb 	bl	800a5b6 <USBD_CtlError>
            err++;
 800a020:	7afb      	ldrb	r3, [r7, #11]
 800a022:	3301      	adds	r3, #1
 800a024:	72fb      	strb	r3, [r7, #11]
          break;
 800a026:	e089      	b.n	800a13c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a02e:	689b      	ldr	r3, [r3, #8]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d00b      	beq.n	800a04c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a03a:	689b      	ldr	r3, [r3, #8]
 800a03c:	687a      	ldr	r2, [r7, #4]
 800a03e:	7c12      	ldrb	r2, [r2, #16]
 800a040:	f107 0108 	add.w	r1, r7, #8
 800a044:	4610      	mov	r0, r2
 800a046:	4798      	blx	r3
 800a048:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a04a:	e077      	b.n	800a13c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a04c:	6839      	ldr	r1, [r7, #0]
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 fab1 	bl	800a5b6 <USBD_CtlError>
            err++;
 800a054:	7afb      	ldrb	r3, [r7, #11]
 800a056:	3301      	adds	r3, #1
 800a058:	72fb      	strb	r3, [r7, #11]
          break;
 800a05a:	e06f      	b.n	800a13c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a062:	68db      	ldr	r3, [r3, #12]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d00b      	beq.n	800a080 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a06e:	68db      	ldr	r3, [r3, #12]
 800a070:	687a      	ldr	r2, [r7, #4]
 800a072:	7c12      	ldrb	r2, [r2, #16]
 800a074:	f107 0108 	add.w	r1, r7, #8
 800a078:	4610      	mov	r0, r2
 800a07a:	4798      	blx	r3
 800a07c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a07e:	e05d      	b.n	800a13c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a080:	6839      	ldr	r1, [r7, #0]
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f000 fa97 	bl	800a5b6 <USBD_CtlError>
            err++;
 800a088:	7afb      	ldrb	r3, [r7, #11]
 800a08a:	3301      	adds	r3, #1
 800a08c:	72fb      	strb	r3, [r7, #11]
          break;
 800a08e:	e055      	b.n	800a13c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a096:	691b      	ldr	r3, [r3, #16]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d00b      	beq.n	800a0b4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0a2:	691b      	ldr	r3, [r3, #16]
 800a0a4:	687a      	ldr	r2, [r7, #4]
 800a0a6:	7c12      	ldrb	r2, [r2, #16]
 800a0a8:	f107 0108 	add.w	r1, r7, #8
 800a0ac:	4610      	mov	r0, r2
 800a0ae:	4798      	blx	r3
 800a0b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0b2:	e043      	b.n	800a13c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0b4:	6839      	ldr	r1, [r7, #0]
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f000 fa7d 	bl	800a5b6 <USBD_CtlError>
            err++;
 800a0bc:	7afb      	ldrb	r3, [r7, #11]
 800a0be:	3301      	adds	r3, #1
 800a0c0:	72fb      	strb	r3, [r7, #11]
          break;
 800a0c2:	e03b      	b.n	800a13c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0ca:	695b      	ldr	r3, [r3, #20]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d00b      	beq.n	800a0e8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0d6:	695b      	ldr	r3, [r3, #20]
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	7c12      	ldrb	r2, [r2, #16]
 800a0dc:	f107 0108 	add.w	r1, r7, #8
 800a0e0:	4610      	mov	r0, r2
 800a0e2:	4798      	blx	r3
 800a0e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0e6:	e029      	b.n	800a13c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0e8:	6839      	ldr	r1, [r7, #0]
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f000 fa63 	bl	800a5b6 <USBD_CtlError>
            err++;
 800a0f0:	7afb      	ldrb	r3, [r7, #11]
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	72fb      	strb	r3, [r7, #11]
          break;
 800a0f6:	e021      	b.n	800a13c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0fe:	699b      	ldr	r3, [r3, #24]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d00b      	beq.n	800a11c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a10a:	699b      	ldr	r3, [r3, #24]
 800a10c:	687a      	ldr	r2, [r7, #4]
 800a10e:	7c12      	ldrb	r2, [r2, #16]
 800a110:	f107 0108 	add.w	r1, r7, #8
 800a114:	4610      	mov	r0, r2
 800a116:	4798      	blx	r3
 800a118:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a11a:	e00f      	b.n	800a13c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a11c:	6839      	ldr	r1, [r7, #0]
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f000 fa49 	bl	800a5b6 <USBD_CtlError>
            err++;
 800a124:	7afb      	ldrb	r3, [r7, #11]
 800a126:	3301      	adds	r3, #1
 800a128:	72fb      	strb	r3, [r7, #11]
          break;
 800a12a:	e007      	b.n	800a13c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a12c:	6839      	ldr	r1, [r7, #0]
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 fa41 	bl	800a5b6 <USBD_CtlError>
          err++;
 800a134:	7afb      	ldrb	r3, [r7, #11]
 800a136:	3301      	adds	r3, #1
 800a138:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a13a:	bf00      	nop
      }
      break;
 800a13c:	e037      	b.n	800a1ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	7c1b      	ldrb	r3, [r3, #16]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d109      	bne.n	800a15a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a14c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a14e:	f107 0208 	add.w	r2, r7, #8
 800a152:	4610      	mov	r0, r2
 800a154:	4798      	blx	r3
 800a156:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a158:	e029      	b.n	800a1ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a15a:	6839      	ldr	r1, [r7, #0]
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f000 fa2a 	bl	800a5b6 <USBD_CtlError>
        err++;
 800a162:	7afb      	ldrb	r3, [r7, #11]
 800a164:	3301      	adds	r3, #1
 800a166:	72fb      	strb	r3, [r7, #11]
      break;
 800a168:	e021      	b.n	800a1ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	7c1b      	ldrb	r3, [r3, #16]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d10d      	bne.n	800a18e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a17a:	f107 0208 	add.w	r2, r7, #8
 800a17e:	4610      	mov	r0, r2
 800a180:	4798      	blx	r3
 800a182:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	3301      	adds	r3, #1
 800a188:	2207      	movs	r2, #7
 800a18a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a18c:	e00f      	b.n	800a1ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a18e:	6839      	ldr	r1, [r7, #0]
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f000 fa10 	bl	800a5b6 <USBD_CtlError>
        err++;
 800a196:	7afb      	ldrb	r3, [r7, #11]
 800a198:	3301      	adds	r3, #1
 800a19a:	72fb      	strb	r3, [r7, #11]
      break;
 800a19c:	e007      	b.n	800a1ae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a19e:	6839      	ldr	r1, [r7, #0]
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f000 fa08 	bl	800a5b6 <USBD_CtlError>
      err++;
 800a1a6:	7afb      	ldrb	r3, [r7, #11]
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	72fb      	strb	r3, [r7, #11]
      break;
 800a1ac:	bf00      	nop
  }

  if (err != 0U)
 800a1ae:	7afb      	ldrb	r3, [r7, #11]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d11e      	bne.n	800a1f2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	88db      	ldrh	r3, [r3, #6]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d016      	beq.n	800a1ea <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a1bc:	893b      	ldrh	r3, [r7, #8]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d00e      	beq.n	800a1e0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	88da      	ldrh	r2, [r3, #6]
 800a1c6:	893b      	ldrh	r3, [r7, #8]
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	bf28      	it	cs
 800a1cc:	4613      	movcs	r3, r2
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a1d2:	893b      	ldrh	r3, [r7, #8]
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	68f9      	ldr	r1, [r7, #12]
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f000 fa5d 	bl	800a698 <USBD_CtlSendData>
 800a1de:	e009      	b.n	800a1f4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a1e0:	6839      	ldr	r1, [r7, #0]
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f000 f9e7 	bl	800a5b6 <USBD_CtlError>
 800a1e8:	e004      	b.n	800a1f4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f000 faae 	bl	800a74c <USBD_CtlSendStatus>
 800a1f0:	e000      	b.n	800a1f4 <USBD_GetDescriptor+0x2cc>
    return;
 800a1f2:	bf00      	nop
  }
}
 800a1f4:	3710      	adds	r7, #16
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
 800a1fa:	bf00      	nop

0800a1fc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	889b      	ldrh	r3, [r3, #4]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d131      	bne.n	800a272 <USBD_SetAddress+0x76>
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	88db      	ldrh	r3, [r3, #6]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d12d      	bne.n	800a272 <USBD_SetAddress+0x76>
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	885b      	ldrh	r3, [r3, #2]
 800a21a:	2b7f      	cmp	r3, #127	; 0x7f
 800a21c:	d829      	bhi.n	800a272 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	885b      	ldrh	r3, [r3, #2]
 800a222:	b2db      	uxtb	r3, r3
 800a224:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a228:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a230:	b2db      	uxtb	r3, r3
 800a232:	2b03      	cmp	r3, #3
 800a234:	d104      	bne.n	800a240 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a236:	6839      	ldr	r1, [r7, #0]
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f000 f9bc 	bl	800a5b6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a23e:	e01d      	b.n	800a27c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	7bfa      	ldrb	r2, [r7, #15]
 800a244:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a248:	7bfb      	ldrb	r3, [r7, #15]
 800a24a:	4619      	mov	r1, r3
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f000 fedf 	bl	800b010 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f000 fa7a 	bl	800a74c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a258:	7bfb      	ldrb	r3, [r7, #15]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d004      	beq.n	800a268 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2202      	movs	r2, #2
 800a262:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a266:	e009      	b.n	800a27c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2201      	movs	r2, #1
 800a26c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a270:	e004      	b.n	800a27c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a272:	6839      	ldr	r1, [r7, #0]
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f000 f99e 	bl	800a5b6 <USBD_CtlError>
  }
}
 800a27a:	bf00      	nop
 800a27c:	bf00      	nop
 800a27e:	3710      	adds	r7, #16
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b084      	sub	sp, #16
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a28e:	2300      	movs	r3, #0
 800a290:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	885b      	ldrh	r3, [r3, #2]
 800a296:	b2da      	uxtb	r2, r3
 800a298:	4b4e      	ldr	r3, [pc, #312]	; (800a3d4 <USBD_SetConfig+0x150>)
 800a29a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a29c:	4b4d      	ldr	r3, [pc, #308]	; (800a3d4 <USBD_SetConfig+0x150>)
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d905      	bls.n	800a2b0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a2a4:	6839      	ldr	r1, [r7, #0]
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f000 f985 	bl	800a5b6 <USBD_CtlError>
    return USBD_FAIL;
 800a2ac:	2303      	movs	r3, #3
 800a2ae:	e08c      	b.n	800a3ca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2b6:	b2db      	uxtb	r3, r3
 800a2b8:	2b02      	cmp	r3, #2
 800a2ba:	d002      	beq.n	800a2c2 <USBD_SetConfig+0x3e>
 800a2bc:	2b03      	cmp	r3, #3
 800a2be:	d029      	beq.n	800a314 <USBD_SetConfig+0x90>
 800a2c0:	e075      	b.n	800a3ae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a2c2:	4b44      	ldr	r3, [pc, #272]	; (800a3d4 <USBD_SetConfig+0x150>)
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d020      	beq.n	800a30c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a2ca:	4b42      	ldr	r3, [pc, #264]	; (800a3d4 <USBD_SetConfig+0x150>)
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a2d4:	4b3f      	ldr	r3, [pc, #252]	; (800a3d4 <USBD_SetConfig+0x150>)
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	4619      	mov	r1, r3
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f7fe ffe7 	bl	80092ae <USBD_SetClassConfig>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a2e4:	7bfb      	ldrb	r3, [r7, #15]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d008      	beq.n	800a2fc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a2ea:	6839      	ldr	r1, [r7, #0]
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f000 f962 	bl	800a5b6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2202      	movs	r2, #2
 800a2f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a2fa:	e065      	b.n	800a3c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f000 fa25 	bl	800a74c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2203      	movs	r2, #3
 800a306:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a30a:	e05d      	b.n	800a3c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f000 fa1d 	bl	800a74c <USBD_CtlSendStatus>
      break;
 800a312:	e059      	b.n	800a3c8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a314:	4b2f      	ldr	r3, [pc, #188]	; (800a3d4 <USBD_SetConfig+0x150>)
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d112      	bne.n	800a342 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2202      	movs	r2, #2
 800a320:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a324:	4b2b      	ldr	r3, [pc, #172]	; (800a3d4 <USBD_SetConfig+0x150>)
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	461a      	mov	r2, r3
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a32e:	4b29      	ldr	r3, [pc, #164]	; (800a3d4 <USBD_SetConfig+0x150>)
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	4619      	mov	r1, r3
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f7fe ffd6 	bl	80092e6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f000 fa06 	bl	800a74c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a340:	e042      	b.n	800a3c8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a342:	4b24      	ldr	r3, [pc, #144]	; (800a3d4 <USBD_SetConfig+0x150>)
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	461a      	mov	r2, r3
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	685b      	ldr	r3, [r3, #4]
 800a34c:	429a      	cmp	r2, r3
 800a34e:	d02a      	beq.n	800a3a6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	b2db      	uxtb	r3, r3
 800a356:	4619      	mov	r1, r3
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f7fe ffc4 	bl	80092e6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a35e:	4b1d      	ldr	r3, [pc, #116]	; (800a3d4 <USBD_SetConfig+0x150>)
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	461a      	mov	r2, r3
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a368:	4b1a      	ldr	r3, [pc, #104]	; (800a3d4 <USBD_SetConfig+0x150>)
 800a36a:	781b      	ldrb	r3, [r3, #0]
 800a36c:	4619      	mov	r1, r3
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f7fe ff9d 	bl	80092ae <USBD_SetClassConfig>
 800a374:	4603      	mov	r3, r0
 800a376:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a378:	7bfb      	ldrb	r3, [r7, #15]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d00f      	beq.n	800a39e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a37e:	6839      	ldr	r1, [r7, #0]
 800a380:	6878      	ldr	r0, [r7, #4]
 800a382:	f000 f918 	bl	800a5b6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	4619      	mov	r1, r3
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f7fe ffa9 	bl	80092e6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2202      	movs	r2, #2
 800a398:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a39c:	e014      	b.n	800a3c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f000 f9d4 	bl	800a74c <USBD_CtlSendStatus>
      break;
 800a3a4:	e010      	b.n	800a3c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f000 f9d0 	bl	800a74c <USBD_CtlSendStatus>
      break;
 800a3ac:	e00c      	b.n	800a3c8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a3ae:	6839      	ldr	r1, [r7, #0]
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f000 f900 	bl	800a5b6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a3b6:	4b07      	ldr	r3, [pc, #28]	; (800a3d4 <USBD_SetConfig+0x150>)
 800a3b8:	781b      	ldrb	r3, [r3, #0]
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f7fe ff92 	bl	80092e6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a3c2:	2303      	movs	r3, #3
 800a3c4:	73fb      	strb	r3, [r7, #15]
      break;
 800a3c6:	bf00      	nop
  }

  return ret;
 800a3c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3710      	adds	r7, #16
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}
 800a3d2:	bf00      	nop
 800a3d4:	2000043c 	.word	0x2000043c

0800a3d8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b082      	sub	sp, #8
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	88db      	ldrh	r3, [r3, #6]
 800a3e6:	2b01      	cmp	r3, #1
 800a3e8:	d004      	beq.n	800a3f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a3ea:	6839      	ldr	r1, [r7, #0]
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f000 f8e2 	bl	800a5b6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a3f2:	e023      	b.n	800a43c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3fa:	b2db      	uxtb	r3, r3
 800a3fc:	2b02      	cmp	r3, #2
 800a3fe:	dc02      	bgt.n	800a406 <USBD_GetConfig+0x2e>
 800a400:	2b00      	cmp	r3, #0
 800a402:	dc03      	bgt.n	800a40c <USBD_GetConfig+0x34>
 800a404:	e015      	b.n	800a432 <USBD_GetConfig+0x5a>
 800a406:	2b03      	cmp	r3, #3
 800a408:	d00b      	beq.n	800a422 <USBD_GetConfig+0x4a>
 800a40a:	e012      	b.n	800a432 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2200      	movs	r2, #0
 800a410:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	3308      	adds	r3, #8
 800a416:	2201      	movs	r2, #1
 800a418:	4619      	mov	r1, r3
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f000 f93c 	bl	800a698 <USBD_CtlSendData>
        break;
 800a420:	e00c      	b.n	800a43c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	3304      	adds	r3, #4
 800a426:	2201      	movs	r2, #1
 800a428:	4619      	mov	r1, r3
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f000 f934 	bl	800a698 <USBD_CtlSendData>
        break;
 800a430:	e004      	b.n	800a43c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a432:	6839      	ldr	r1, [r7, #0]
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f000 f8be 	bl	800a5b6 <USBD_CtlError>
        break;
 800a43a:	bf00      	nop
}
 800a43c:	bf00      	nop
 800a43e:	3708      	adds	r7, #8
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a454:	b2db      	uxtb	r3, r3
 800a456:	3b01      	subs	r3, #1
 800a458:	2b02      	cmp	r3, #2
 800a45a:	d81e      	bhi.n	800a49a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	88db      	ldrh	r3, [r3, #6]
 800a460:	2b02      	cmp	r3, #2
 800a462:	d004      	beq.n	800a46e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a464:	6839      	ldr	r1, [r7, #0]
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f000 f8a5 	bl	800a5b6 <USBD_CtlError>
        break;
 800a46c:	e01a      	b.n	800a4a4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2201      	movs	r2, #1
 800a472:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d005      	beq.n	800a48a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	68db      	ldr	r3, [r3, #12]
 800a482:	f043 0202 	orr.w	r2, r3, #2
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	330c      	adds	r3, #12
 800a48e:	2202      	movs	r2, #2
 800a490:	4619      	mov	r1, r3
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f000 f900 	bl	800a698 <USBD_CtlSendData>
      break;
 800a498:	e004      	b.n	800a4a4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a49a:	6839      	ldr	r1, [r7, #0]
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f000 f88a 	bl	800a5b6 <USBD_CtlError>
      break;
 800a4a2:	bf00      	nop
  }
}
 800a4a4:	bf00      	nop
 800a4a6:	3708      	adds	r7, #8
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b082      	sub	sp, #8
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	885b      	ldrh	r3, [r3, #2]
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d107      	bne.n	800a4ce <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2201      	movs	r2, #1
 800a4c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 f940 	bl	800a74c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a4cc:	e013      	b.n	800a4f6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	885b      	ldrh	r3, [r3, #2]
 800a4d2:	2b02      	cmp	r3, #2
 800a4d4:	d10b      	bne.n	800a4ee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	889b      	ldrh	r3, [r3, #4]
 800a4da:	0a1b      	lsrs	r3, r3, #8
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	b2da      	uxtb	r2, r3
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f000 f930 	bl	800a74c <USBD_CtlSendStatus>
}
 800a4ec:	e003      	b.n	800a4f6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a4ee:	6839      	ldr	r1, [r7, #0]
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f000 f860 	bl	800a5b6 <USBD_CtlError>
}
 800a4f6:	bf00      	nop
 800a4f8:	3708      	adds	r7, #8
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}

0800a4fe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4fe:	b580      	push	{r7, lr}
 800a500:	b082      	sub	sp, #8
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
 800a506:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a50e:	b2db      	uxtb	r3, r3
 800a510:	3b01      	subs	r3, #1
 800a512:	2b02      	cmp	r3, #2
 800a514:	d80b      	bhi.n	800a52e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	885b      	ldrh	r3, [r3, #2]
 800a51a:	2b01      	cmp	r3, #1
 800a51c:	d10c      	bne.n	800a538 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2200      	movs	r2, #0
 800a522:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 f910 	bl	800a74c <USBD_CtlSendStatus>
      }
      break;
 800a52c:	e004      	b.n	800a538 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a52e:	6839      	ldr	r1, [r7, #0]
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f000 f840 	bl	800a5b6 <USBD_CtlError>
      break;
 800a536:	e000      	b.n	800a53a <USBD_ClrFeature+0x3c>
      break;
 800a538:	bf00      	nop
  }
}
 800a53a:	bf00      	nop
 800a53c:	3708      	adds	r7, #8
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}

0800a542 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a542:	b580      	push	{r7, lr}
 800a544:	b084      	sub	sp, #16
 800a546:	af00      	add	r7, sp, #0
 800a548:	6078      	str	r0, [r7, #4]
 800a54a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	781a      	ldrb	r2, [r3, #0]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	3301      	adds	r3, #1
 800a55c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	781a      	ldrb	r2, [r3, #0]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	3301      	adds	r3, #1
 800a56a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a56c:	68f8      	ldr	r0, [r7, #12]
 800a56e:	f7ff fa41 	bl	80099f4 <SWAPBYTE>
 800a572:	4603      	mov	r3, r0
 800a574:	461a      	mov	r2, r3
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	3301      	adds	r3, #1
 800a57e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	3301      	adds	r3, #1
 800a584:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a586:	68f8      	ldr	r0, [r7, #12]
 800a588:	f7ff fa34 	bl	80099f4 <SWAPBYTE>
 800a58c:	4603      	mov	r3, r0
 800a58e:	461a      	mov	r2, r3
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	3301      	adds	r3, #1
 800a598:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	3301      	adds	r3, #1
 800a59e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a5a0:	68f8      	ldr	r0, [r7, #12]
 800a5a2:	f7ff fa27 	bl	80099f4 <SWAPBYTE>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	80da      	strh	r2, [r3, #6]
}
 800a5ae:	bf00      	nop
 800a5b0:	3710      	adds	r7, #16
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}

0800a5b6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5b6:	b580      	push	{r7, lr}
 800a5b8:	b082      	sub	sp, #8
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	6078      	str	r0, [r7, #4]
 800a5be:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a5c0:	2180      	movs	r1, #128	; 0x80
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f000 fcba 	bl	800af3c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a5c8:	2100      	movs	r1, #0
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f000 fcb6 	bl	800af3c <USBD_LL_StallEP>
}
 800a5d0:	bf00      	nop
 800a5d2:	3708      	adds	r7, #8
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b086      	sub	sp, #24
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	60f8      	str	r0, [r7, #12]
 800a5e0:	60b9      	str	r1, [r7, #8]
 800a5e2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d036      	beq.n	800a65c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a5f2:	6938      	ldr	r0, [r7, #16]
 800a5f4:	f000 f836 	bl	800a664 <USBD_GetLen>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	3301      	adds	r3, #1
 800a5fc:	b29b      	uxth	r3, r3
 800a5fe:	005b      	lsls	r3, r3, #1
 800a600:	b29a      	uxth	r2, r3
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a606:	7dfb      	ldrb	r3, [r7, #23]
 800a608:	68ba      	ldr	r2, [r7, #8]
 800a60a:	4413      	add	r3, r2
 800a60c:	687a      	ldr	r2, [r7, #4]
 800a60e:	7812      	ldrb	r2, [r2, #0]
 800a610:	701a      	strb	r2, [r3, #0]
  idx++;
 800a612:	7dfb      	ldrb	r3, [r7, #23]
 800a614:	3301      	adds	r3, #1
 800a616:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a618:	7dfb      	ldrb	r3, [r7, #23]
 800a61a:	68ba      	ldr	r2, [r7, #8]
 800a61c:	4413      	add	r3, r2
 800a61e:	2203      	movs	r2, #3
 800a620:	701a      	strb	r2, [r3, #0]
  idx++;
 800a622:	7dfb      	ldrb	r3, [r7, #23]
 800a624:	3301      	adds	r3, #1
 800a626:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a628:	e013      	b.n	800a652 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a62a:	7dfb      	ldrb	r3, [r7, #23]
 800a62c:	68ba      	ldr	r2, [r7, #8]
 800a62e:	4413      	add	r3, r2
 800a630:	693a      	ldr	r2, [r7, #16]
 800a632:	7812      	ldrb	r2, [r2, #0]
 800a634:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	3301      	adds	r3, #1
 800a63a:	613b      	str	r3, [r7, #16]
    idx++;
 800a63c:	7dfb      	ldrb	r3, [r7, #23]
 800a63e:	3301      	adds	r3, #1
 800a640:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a642:	7dfb      	ldrb	r3, [r7, #23]
 800a644:	68ba      	ldr	r2, [r7, #8]
 800a646:	4413      	add	r3, r2
 800a648:	2200      	movs	r2, #0
 800a64a:	701a      	strb	r2, [r3, #0]
    idx++;
 800a64c:	7dfb      	ldrb	r3, [r7, #23]
 800a64e:	3301      	adds	r3, #1
 800a650:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	781b      	ldrb	r3, [r3, #0]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d1e7      	bne.n	800a62a <USBD_GetString+0x52>
 800a65a:	e000      	b.n	800a65e <USBD_GetString+0x86>
    return;
 800a65c:	bf00      	nop
  }
}
 800a65e:	3718      	adds	r7, #24
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}

0800a664 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a664:	b480      	push	{r7}
 800a666:	b085      	sub	sp, #20
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a66c:	2300      	movs	r3, #0
 800a66e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a674:	e005      	b.n	800a682 <USBD_GetLen+0x1e>
  {
    len++;
 800a676:	7bfb      	ldrb	r3, [r7, #15]
 800a678:	3301      	adds	r3, #1
 800a67a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	3301      	adds	r3, #1
 800a680:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	781b      	ldrb	r3, [r3, #0]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d1f5      	bne.n	800a676 <USBD_GetLen+0x12>
  }

  return len;
 800a68a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3714      	adds	r7, #20
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr

0800a698 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b084      	sub	sp, #16
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	60f8      	str	r0, [r7, #12]
 800a6a0:	60b9      	str	r1, [r7, #8]
 800a6a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2202      	movs	r2, #2
 800a6a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	687a      	ldr	r2, [r7, #4]
 800a6b0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	687a      	ldr	r2, [r7, #4]
 800a6b6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	68ba      	ldr	r2, [r7, #8]
 800a6bc:	2100      	movs	r1, #0
 800a6be:	68f8      	ldr	r0, [r7, #12]
 800a6c0:	f000 fcc5 	bl	800b04e <USBD_LL_Transmit>

  return USBD_OK;
 800a6c4:	2300      	movs	r3, #0
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3710      	adds	r7, #16
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}

0800a6ce <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a6ce:	b580      	push	{r7, lr}
 800a6d0:	b084      	sub	sp, #16
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	60f8      	str	r0, [r7, #12]
 800a6d6:	60b9      	str	r1, [r7, #8]
 800a6d8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	68ba      	ldr	r2, [r7, #8]
 800a6de:	2100      	movs	r1, #0
 800a6e0:	68f8      	ldr	r0, [r7, #12]
 800a6e2:	f000 fcb4 	bl	800b04e <USBD_LL_Transmit>

  return USBD_OK;
 800a6e6:	2300      	movs	r3, #0
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	3710      	adds	r7, #16
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b084      	sub	sp, #16
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	60f8      	str	r0, [r7, #12]
 800a6f8:	60b9      	str	r1, [r7, #8]
 800a6fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2203      	movs	r2, #3
 800a700:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	68ba      	ldr	r2, [r7, #8]
 800a718:	2100      	movs	r1, #0
 800a71a:	68f8      	ldr	r0, [r7, #12]
 800a71c:	f000 fcb8 	bl	800b090 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a720:	2300      	movs	r3, #0
}
 800a722:	4618      	mov	r0, r3
 800a724:	3710      	adds	r7, #16
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}

0800a72a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a72a:	b580      	push	{r7, lr}
 800a72c:	b084      	sub	sp, #16
 800a72e:	af00      	add	r7, sp, #0
 800a730:	60f8      	str	r0, [r7, #12]
 800a732:	60b9      	str	r1, [r7, #8]
 800a734:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	68ba      	ldr	r2, [r7, #8]
 800a73a:	2100      	movs	r1, #0
 800a73c:	68f8      	ldr	r0, [r7, #12]
 800a73e:	f000 fca7 	bl	800b090 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a742:	2300      	movs	r3, #0
}
 800a744:	4618      	mov	r0, r3
 800a746:	3710      	adds	r7, #16
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b082      	sub	sp, #8
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2204      	movs	r2, #4
 800a758:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a75c:	2300      	movs	r3, #0
 800a75e:	2200      	movs	r2, #0
 800a760:	2100      	movs	r1, #0
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f000 fc73 	bl	800b04e <USBD_LL_Transmit>

  return USBD_OK;
 800a768:	2300      	movs	r3, #0
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3708      	adds	r7, #8
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}

0800a772 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a772:	b580      	push	{r7, lr}
 800a774:	b082      	sub	sp, #8
 800a776:	af00      	add	r7, sp, #0
 800a778:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2205      	movs	r2, #5
 800a77e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a782:	2300      	movs	r3, #0
 800a784:	2200      	movs	r2, #0
 800a786:	2100      	movs	r1, #0
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f000 fc81 	bl	800b090 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a78e:	2300      	movs	r3, #0
}
 800a790:	4618      	mov	r0, r3
 800a792:	3708      	adds	r7, #8
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a79c:	2200      	movs	r2, #0
 800a79e:	4912      	ldr	r1, [pc, #72]	; (800a7e8 <MX_USB_DEVICE_Init+0x50>)
 800a7a0:	4812      	ldr	r0, [pc, #72]	; (800a7ec <MX_USB_DEVICE_Init+0x54>)
 800a7a2:	f7fe fd07 	bl	80091b4 <USBD_Init>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d001      	beq.n	800a7b0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a7ac:	f7f6 fc28 	bl	8001000 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a7b0:	490f      	ldr	r1, [pc, #60]	; (800a7f0 <MX_USB_DEVICE_Init+0x58>)
 800a7b2:	480e      	ldr	r0, [pc, #56]	; (800a7ec <MX_USB_DEVICE_Init+0x54>)
 800a7b4:	f7fe fd2e 	bl	8009214 <USBD_RegisterClass>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d001      	beq.n	800a7c2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a7be:	f7f6 fc1f 	bl	8001000 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a7c2:	490c      	ldr	r1, [pc, #48]	; (800a7f4 <MX_USB_DEVICE_Init+0x5c>)
 800a7c4:	4809      	ldr	r0, [pc, #36]	; (800a7ec <MX_USB_DEVICE_Init+0x54>)
 800a7c6:	f7fe fc65 	bl	8009094 <USBD_CDC_RegisterInterface>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d001      	beq.n	800a7d4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a7d0:	f7f6 fc16 	bl	8001000 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a7d4:	4805      	ldr	r0, [pc, #20]	; (800a7ec <MX_USB_DEVICE_Init+0x54>)
 800a7d6:	f7fe fd53 	bl	8009280 <USBD_Start>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d001      	beq.n	800a7e4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a7e0:	f7f6 fc0e 	bl	8001000 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a7e4:	bf00      	nop
 800a7e6:	bd80      	pop	{r7, pc}
 800a7e8:	200000b0 	.word	0x200000b0
 800a7ec:	20000440 	.word	0x20000440
 800a7f0:	2000001c 	.word	0x2000001c
 800a7f4:	2000009c 	.word	0x2000009c

0800a7f8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	4905      	ldr	r1, [pc, #20]	; (800a814 <CDC_Init_FS+0x1c>)
 800a800:	4805      	ldr	r0, [pc, #20]	; (800a818 <CDC_Init_FS+0x20>)
 800a802:	f7fe fc61 	bl	80090c8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a806:	4905      	ldr	r1, [pc, #20]	; (800a81c <CDC_Init_FS+0x24>)
 800a808:	4803      	ldr	r0, [pc, #12]	; (800a818 <CDC_Init_FS+0x20>)
 800a80a:	f7fe fc7f 	bl	800910c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a80e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a810:	4618      	mov	r0, r3
 800a812:	bd80      	pop	{r7, pc}
 800a814:	20000b04 	.word	0x20000b04
 800a818:	20000440 	.word	0x20000440
 800a81c:	2000071c 	.word	0x2000071c

0800a820 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a820:	b480      	push	{r7}
 800a822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a824:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a826:	4618      	mov	r0, r3
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr

0800a830 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a830:	b480      	push	{r7}
 800a832:	b083      	sub	sp, #12
 800a834:	af00      	add	r7, sp, #0
 800a836:	4603      	mov	r3, r0
 800a838:	6039      	str	r1, [r7, #0]
 800a83a:	71fb      	strb	r3, [r7, #7]
 800a83c:	4613      	mov	r3, r2
 800a83e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a840:	79fb      	ldrb	r3, [r7, #7]
 800a842:	2b23      	cmp	r3, #35	; 0x23
 800a844:	d84a      	bhi.n	800a8dc <CDC_Control_FS+0xac>
 800a846:	a201      	add	r2, pc, #4	; (adr r2, 800a84c <CDC_Control_FS+0x1c>)
 800a848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a84c:	0800a8dd 	.word	0x0800a8dd
 800a850:	0800a8dd 	.word	0x0800a8dd
 800a854:	0800a8dd 	.word	0x0800a8dd
 800a858:	0800a8dd 	.word	0x0800a8dd
 800a85c:	0800a8dd 	.word	0x0800a8dd
 800a860:	0800a8dd 	.word	0x0800a8dd
 800a864:	0800a8dd 	.word	0x0800a8dd
 800a868:	0800a8dd 	.word	0x0800a8dd
 800a86c:	0800a8dd 	.word	0x0800a8dd
 800a870:	0800a8dd 	.word	0x0800a8dd
 800a874:	0800a8dd 	.word	0x0800a8dd
 800a878:	0800a8dd 	.word	0x0800a8dd
 800a87c:	0800a8dd 	.word	0x0800a8dd
 800a880:	0800a8dd 	.word	0x0800a8dd
 800a884:	0800a8dd 	.word	0x0800a8dd
 800a888:	0800a8dd 	.word	0x0800a8dd
 800a88c:	0800a8dd 	.word	0x0800a8dd
 800a890:	0800a8dd 	.word	0x0800a8dd
 800a894:	0800a8dd 	.word	0x0800a8dd
 800a898:	0800a8dd 	.word	0x0800a8dd
 800a89c:	0800a8dd 	.word	0x0800a8dd
 800a8a0:	0800a8dd 	.word	0x0800a8dd
 800a8a4:	0800a8dd 	.word	0x0800a8dd
 800a8a8:	0800a8dd 	.word	0x0800a8dd
 800a8ac:	0800a8dd 	.word	0x0800a8dd
 800a8b0:	0800a8dd 	.word	0x0800a8dd
 800a8b4:	0800a8dd 	.word	0x0800a8dd
 800a8b8:	0800a8dd 	.word	0x0800a8dd
 800a8bc:	0800a8dd 	.word	0x0800a8dd
 800a8c0:	0800a8dd 	.word	0x0800a8dd
 800a8c4:	0800a8dd 	.word	0x0800a8dd
 800a8c8:	0800a8dd 	.word	0x0800a8dd
 800a8cc:	0800a8dd 	.word	0x0800a8dd
 800a8d0:	0800a8dd 	.word	0x0800a8dd
 800a8d4:	0800a8dd 	.word	0x0800a8dd
 800a8d8:	0800a8dd 	.word	0x0800a8dd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a8dc:	bf00      	nop
  }

  return (USBD_OK);
 800a8de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	370c      	adds	r7, #12
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr

0800a8ec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b082      	sub	sp, #8
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
 800a8f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a8f6:	6879      	ldr	r1, [r7, #4]
 800a8f8:	4805      	ldr	r0, [pc, #20]	; (800a910 <CDC_Receive_FS+0x24>)
 800a8fa:	f7fe fc07 	bl	800910c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a8fe:	4804      	ldr	r0, [pc, #16]	; (800a910 <CDC_Receive_FS+0x24>)
 800a900:	f7fe fc22 	bl	8009148 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a904:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a906:	4618      	mov	r0, r3
 800a908:	3708      	adds	r7, #8
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}
 800a90e:	bf00      	nop
 800a910:	20000440 	.word	0x20000440

0800a914 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a914:	b480      	push	{r7}
 800a916:	b087      	sub	sp, #28
 800a918:	af00      	add	r7, sp, #0
 800a91a:	60f8      	str	r0, [r7, #12]
 800a91c:	60b9      	str	r1, [r7, #8]
 800a91e:	4613      	mov	r3, r2
 800a920:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a922:	2300      	movs	r3, #0
 800a924:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a926:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	371c      	adds	r7, #28
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr
	...

0800a938 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a938:	b480      	push	{r7}
 800a93a:	b083      	sub	sp, #12
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	4603      	mov	r3, r0
 800a940:	6039      	str	r1, [r7, #0]
 800a942:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	2212      	movs	r2, #18
 800a948:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a94a:	4b03      	ldr	r3, [pc, #12]	; (800a958 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	370c      	adds	r7, #12
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr
 800a958:	200000cc 	.word	0x200000cc

0800a95c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b083      	sub	sp, #12
 800a960:	af00      	add	r7, sp, #0
 800a962:	4603      	mov	r3, r0
 800a964:	6039      	str	r1, [r7, #0]
 800a966:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	2204      	movs	r2, #4
 800a96c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a96e:	4b03      	ldr	r3, [pc, #12]	; (800a97c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a970:	4618      	mov	r0, r3
 800a972:	370c      	adds	r7, #12
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr
 800a97c:	200000e0 	.word	0x200000e0

0800a980 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b082      	sub	sp, #8
 800a984:	af00      	add	r7, sp, #0
 800a986:	4603      	mov	r3, r0
 800a988:	6039      	str	r1, [r7, #0]
 800a98a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a98c:	79fb      	ldrb	r3, [r7, #7]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d105      	bne.n	800a99e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a992:	683a      	ldr	r2, [r7, #0]
 800a994:	4907      	ldr	r1, [pc, #28]	; (800a9b4 <USBD_FS_ProductStrDescriptor+0x34>)
 800a996:	4808      	ldr	r0, [pc, #32]	; (800a9b8 <USBD_FS_ProductStrDescriptor+0x38>)
 800a998:	f7ff fe1e 	bl	800a5d8 <USBD_GetString>
 800a99c:	e004      	b.n	800a9a8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a99e:	683a      	ldr	r2, [r7, #0]
 800a9a0:	4904      	ldr	r1, [pc, #16]	; (800a9b4 <USBD_FS_ProductStrDescriptor+0x34>)
 800a9a2:	4805      	ldr	r0, [pc, #20]	; (800a9b8 <USBD_FS_ProductStrDescriptor+0x38>)
 800a9a4:	f7ff fe18 	bl	800a5d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a9a8:	4b02      	ldr	r3, [pc, #8]	; (800a9b4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3708      	adds	r7, #8
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	20000eec 	.word	0x20000eec
 800a9b8:	0800c648 	.word	0x0800c648

0800a9bc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b082      	sub	sp, #8
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	6039      	str	r1, [r7, #0]
 800a9c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a9c8:	683a      	ldr	r2, [r7, #0]
 800a9ca:	4904      	ldr	r1, [pc, #16]	; (800a9dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a9cc:	4804      	ldr	r0, [pc, #16]	; (800a9e0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a9ce:	f7ff fe03 	bl	800a5d8 <USBD_GetString>
  return USBD_StrDesc;
 800a9d2:	4b02      	ldr	r3, [pc, #8]	; (800a9dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3708      	adds	r7, #8
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}
 800a9dc:	20000eec 	.word	0x20000eec
 800a9e0:	0800c660 	.word	0x0800c660

0800a9e4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b082      	sub	sp, #8
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	6039      	str	r1, [r7, #0]
 800a9ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	221a      	movs	r2, #26
 800a9f4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a9f6:	f000 f843 	bl	800aa80 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a9fa:	4b02      	ldr	r3, [pc, #8]	; (800aa04 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3708      	adds	r7, #8
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}
 800aa04:	200000e4 	.word	0x200000e4

0800aa08 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b082      	sub	sp, #8
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	4603      	mov	r3, r0
 800aa10:	6039      	str	r1, [r7, #0]
 800aa12:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800aa14:	79fb      	ldrb	r3, [r7, #7]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d105      	bne.n	800aa26 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aa1a:	683a      	ldr	r2, [r7, #0]
 800aa1c:	4907      	ldr	r1, [pc, #28]	; (800aa3c <USBD_FS_ConfigStrDescriptor+0x34>)
 800aa1e:	4808      	ldr	r0, [pc, #32]	; (800aa40 <USBD_FS_ConfigStrDescriptor+0x38>)
 800aa20:	f7ff fdda 	bl	800a5d8 <USBD_GetString>
 800aa24:	e004      	b.n	800aa30 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aa26:	683a      	ldr	r2, [r7, #0]
 800aa28:	4904      	ldr	r1, [pc, #16]	; (800aa3c <USBD_FS_ConfigStrDescriptor+0x34>)
 800aa2a:	4805      	ldr	r0, [pc, #20]	; (800aa40 <USBD_FS_ConfigStrDescriptor+0x38>)
 800aa2c:	f7ff fdd4 	bl	800a5d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa30:	4b02      	ldr	r3, [pc, #8]	; (800aa3c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3708      	adds	r7, #8
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
 800aa3a:	bf00      	nop
 800aa3c:	20000eec 	.word	0x20000eec
 800aa40:	0800c674 	.word	0x0800c674

0800aa44 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b082      	sub	sp, #8
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	6039      	str	r1, [r7, #0]
 800aa4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aa50:	79fb      	ldrb	r3, [r7, #7]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d105      	bne.n	800aa62 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aa56:	683a      	ldr	r2, [r7, #0]
 800aa58:	4907      	ldr	r1, [pc, #28]	; (800aa78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aa5a:	4808      	ldr	r0, [pc, #32]	; (800aa7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aa5c:	f7ff fdbc 	bl	800a5d8 <USBD_GetString>
 800aa60:	e004      	b.n	800aa6c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aa62:	683a      	ldr	r2, [r7, #0]
 800aa64:	4904      	ldr	r1, [pc, #16]	; (800aa78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aa66:	4805      	ldr	r0, [pc, #20]	; (800aa7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aa68:	f7ff fdb6 	bl	800a5d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa6c:	4b02      	ldr	r3, [pc, #8]	; (800aa78 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3708      	adds	r7, #8
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}
 800aa76:	bf00      	nop
 800aa78:	20000eec 	.word	0x20000eec
 800aa7c:	0800c680 	.word	0x0800c680

0800aa80 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b084      	sub	sp, #16
 800aa84:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800aa86:	4b0f      	ldr	r3, [pc, #60]	; (800aac4 <Get_SerialNum+0x44>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800aa8c:	4b0e      	ldr	r3, [pc, #56]	; (800aac8 <Get_SerialNum+0x48>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aa92:	4b0e      	ldr	r3, [pc, #56]	; (800aacc <Get_SerialNum+0x4c>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800aa98:	68fa      	ldr	r2, [r7, #12]
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	4413      	add	r3, r2
 800aa9e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d009      	beq.n	800aaba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aaa6:	2208      	movs	r2, #8
 800aaa8:	4909      	ldr	r1, [pc, #36]	; (800aad0 <Get_SerialNum+0x50>)
 800aaaa:	68f8      	ldr	r0, [r7, #12]
 800aaac:	f000 f814 	bl	800aad8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aab0:	2204      	movs	r2, #4
 800aab2:	4908      	ldr	r1, [pc, #32]	; (800aad4 <Get_SerialNum+0x54>)
 800aab4:	68b8      	ldr	r0, [r7, #8]
 800aab6:	f000 f80f 	bl	800aad8 <IntToUnicode>
  }
}
 800aaba:	bf00      	nop
 800aabc:	3710      	adds	r7, #16
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}
 800aac2:	bf00      	nop
 800aac4:	1fff7a10 	.word	0x1fff7a10
 800aac8:	1fff7a14 	.word	0x1fff7a14
 800aacc:	1fff7a18 	.word	0x1fff7a18
 800aad0:	200000e6 	.word	0x200000e6
 800aad4:	200000f6 	.word	0x200000f6

0800aad8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800aad8:	b480      	push	{r7}
 800aada:	b087      	sub	sp, #28
 800aadc:	af00      	add	r7, sp, #0
 800aade:	60f8      	str	r0, [r7, #12]
 800aae0:	60b9      	str	r1, [r7, #8]
 800aae2:	4613      	mov	r3, r2
 800aae4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800aae6:	2300      	movs	r3, #0
 800aae8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800aaea:	2300      	movs	r3, #0
 800aaec:	75fb      	strb	r3, [r7, #23]
 800aaee:	e027      	b.n	800ab40 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	0f1b      	lsrs	r3, r3, #28
 800aaf4:	2b09      	cmp	r3, #9
 800aaf6:	d80b      	bhi.n	800ab10 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	0f1b      	lsrs	r3, r3, #28
 800aafc:	b2da      	uxtb	r2, r3
 800aafe:	7dfb      	ldrb	r3, [r7, #23]
 800ab00:	005b      	lsls	r3, r3, #1
 800ab02:	4619      	mov	r1, r3
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	440b      	add	r3, r1
 800ab08:	3230      	adds	r2, #48	; 0x30
 800ab0a:	b2d2      	uxtb	r2, r2
 800ab0c:	701a      	strb	r2, [r3, #0]
 800ab0e:	e00a      	b.n	800ab26 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	0f1b      	lsrs	r3, r3, #28
 800ab14:	b2da      	uxtb	r2, r3
 800ab16:	7dfb      	ldrb	r3, [r7, #23]
 800ab18:	005b      	lsls	r3, r3, #1
 800ab1a:	4619      	mov	r1, r3
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	440b      	add	r3, r1
 800ab20:	3237      	adds	r2, #55	; 0x37
 800ab22:	b2d2      	uxtb	r2, r2
 800ab24:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	011b      	lsls	r3, r3, #4
 800ab2a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ab2c:	7dfb      	ldrb	r3, [r7, #23]
 800ab2e:	005b      	lsls	r3, r3, #1
 800ab30:	3301      	adds	r3, #1
 800ab32:	68ba      	ldr	r2, [r7, #8]
 800ab34:	4413      	add	r3, r2
 800ab36:	2200      	movs	r2, #0
 800ab38:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ab3a:	7dfb      	ldrb	r3, [r7, #23]
 800ab3c:	3301      	adds	r3, #1
 800ab3e:	75fb      	strb	r3, [r7, #23]
 800ab40:	7dfa      	ldrb	r2, [r7, #23]
 800ab42:	79fb      	ldrb	r3, [r7, #7]
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d3d3      	bcc.n	800aaf0 <IntToUnicode+0x18>
  }
}
 800ab48:	bf00      	nop
 800ab4a:	bf00      	nop
 800ab4c:	371c      	adds	r7, #28
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr
	...

0800ab58 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b08a      	sub	sp, #40	; 0x28
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab60:	f107 0314 	add.w	r3, r7, #20
 800ab64:	2200      	movs	r2, #0
 800ab66:	601a      	str	r2, [r3, #0]
 800ab68:	605a      	str	r2, [r3, #4]
 800ab6a:	609a      	str	r2, [r3, #8]
 800ab6c:	60da      	str	r2, [r3, #12]
 800ab6e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ab78:	d13a      	bne.n	800abf0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	613b      	str	r3, [r7, #16]
 800ab7e:	4b1e      	ldr	r3, [pc, #120]	; (800abf8 <HAL_PCD_MspInit+0xa0>)
 800ab80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab82:	4a1d      	ldr	r2, [pc, #116]	; (800abf8 <HAL_PCD_MspInit+0xa0>)
 800ab84:	f043 0301 	orr.w	r3, r3, #1
 800ab88:	6313      	str	r3, [r2, #48]	; 0x30
 800ab8a:	4b1b      	ldr	r3, [pc, #108]	; (800abf8 <HAL_PCD_MspInit+0xa0>)
 800ab8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab8e:	f003 0301 	and.w	r3, r3, #1
 800ab92:	613b      	str	r3, [r7, #16]
 800ab94:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ab96:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ab9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab9c:	2302      	movs	r3, #2
 800ab9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aba0:	2300      	movs	r3, #0
 800aba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aba4:	2303      	movs	r3, #3
 800aba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800aba8:	230a      	movs	r3, #10
 800abaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800abac:	f107 0314 	add.w	r3, r7, #20
 800abb0:	4619      	mov	r1, r3
 800abb2:	4812      	ldr	r0, [pc, #72]	; (800abfc <HAL_PCD_MspInit+0xa4>)
 800abb4:	f7f8 f858 	bl	8002c68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800abb8:	4b0f      	ldr	r3, [pc, #60]	; (800abf8 <HAL_PCD_MspInit+0xa0>)
 800abba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abbc:	4a0e      	ldr	r2, [pc, #56]	; (800abf8 <HAL_PCD_MspInit+0xa0>)
 800abbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abc2:	6353      	str	r3, [r2, #52]	; 0x34
 800abc4:	2300      	movs	r3, #0
 800abc6:	60fb      	str	r3, [r7, #12]
 800abc8:	4b0b      	ldr	r3, [pc, #44]	; (800abf8 <HAL_PCD_MspInit+0xa0>)
 800abca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abcc:	4a0a      	ldr	r2, [pc, #40]	; (800abf8 <HAL_PCD_MspInit+0xa0>)
 800abce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800abd2:	6453      	str	r3, [r2, #68]	; 0x44
 800abd4:	4b08      	ldr	r3, [pc, #32]	; (800abf8 <HAL_PCD_MspInit+0xa0>)
 800abd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800abdc:	60fb      	str	r3, [r7, #12]
 800abde:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 3, 0);
 800abe0:	2200      	movs	r2, #0
 800abe2:	2103      	movs	r1, #3
 800abe4:	2043      	movs	r0, #67	; 0x43
 800abe6:	f7f7 fc06 	bl	80023f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800abea:	2043      	movs	r0, #67	; 0x43
 800abec:	f7f7 fc1f 	bl	800242e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800abf0:	bf00      	nop
 800abf2:	3728      	adds	r7, #40	; 0x28
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}
 800abf8:	40023800 	.word	0x40023800
 800abfc:	40020000 	.word	0x40020000

0800ac00 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b082      	sub	sp, #8
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ac14:	4619      	mov	r1, r3
 800ac16:	4610      	mov	r0, r2
 800ac18:	f7fe fb7f 	bl	800931a <USBD_LL_SetupStage>
}
 800ac1c:	bf00      	nop
 800ac1e:	3708      	adds	r7, #8
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}

0800ac24 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b082      	sub	sp, #8
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ac36:	78fa      	ldrb	r2, [r7, #3]
 800ac38:	6879      	ldr	r1, [r7, #4]
 800ac3a:	4613      	mov	r3, r2
 800ac3c:	00db      	lsls	r3, r3, #3
 800ac3e:	4413      	add	r3, r2
 800ac40:	009b      	lsls	r3, r3, #2
 800ac42:	440b      	add	r3, r1
 800ac44:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ac48:	681a      	ldr	r2, [r3, #0]
 800ac4a:	78fb      	ldrb	r3, [r7, #3]
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	f7fe fbb9 	bl	80093c4 <USBD_LL_DataOutStage>
}
 800ac52:	bf00      	nop
 800ac54:	3708      	adds	r7, #8
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}

0800ac5a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b082      	sub	sp, #8
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
 800ac62:	460b      	mov	r3, r1
 800ac64:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ac6c:	78fa      	ldrb	r2, [r7, #3]
 800ac6e:	6879      	ldr	r1, [r7, #4]
 800ac70:	4613      	mov	r3, r2
 800ac72:	00db      	lsls	r3, r3, #3
 800ac74:	4413      	add	r3, r2
 800ac76:	009b      	lsls	r3, r3, #2
 800ac78:	440b      	add	r3, r1
 800ac7a:	334c      	adds	r3, #76	; 0x4c
 800ac7c:	681a      	ldr	r2, [r3, #0]
 800ac7e:	78fb      	ldrb	r3, [r7, #3]
 800ac80:	4619      	mov	r1, r3
 800ac82:	f7fe fc52 	bl	800952a <USBD_LL_DataInStage>
}
 800ac86:	bf00      	nop
 800ac88:	3708      	adds	r7, #8
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}

0800ac8e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac8e:	b580      	push	{r7, lr}
 800ac90:	b082      	sub	sp, #8
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f7fe fd86 	bl	80097ae <USBD_LL_SOF>
}
 800aca2:	bf00      	nop
 800aca4:	3708      	adds	r7, #8
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}

0800acaa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acaa:	b580      	push	{r7, lr}
 800acac:	b084      	sub	sp, #16
 800acae:	af00      	add	r7, sp, #0
 800acb0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800acb2:	2301      	movs	r3, #1
 800acb4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	68db      	ldr	r3, [r3, #12]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d102      	bne.n	800acc4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800acbe:	2300      	movs	r3, #0
 800acc0:	73fb      	strb	r3, [r7, #15]
 800acc2:	e008      	b.n	800acd6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	68db      	ldr	r3, [r3, #12]
 800acc8:	2b02      	cmp	r3, #2
 800acca:	d102      	bne.n	800acd2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800accc:	2301      	movs	r3, #1
 800acce:	73fb      	strb	r3, [r7, #15]
 800acd0:	e001      	b.n	800acd6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800acd2:	f7f6 f995 	bl	8001000 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800acdc:	7bfa      	ldrb	r2, [r7, #15]
 800acde:	4611      	mov	r1, r2
 800ace0:	4618      	mov	r0, r3
 800ace2:	f7fe fd26 	bl	8009732 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800acec:	4618      	mov	r0, r3
 800acee:	f7fe fcce 	bl	800968e <USBD_LL_Reset>
}
 800acf2:	bf00      	nop
 800acf4:	3710      	adds	r7, #16
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}
	...

0800acfc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b082      	sub	sp, #8
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f7fe fd21 	bl	8009752 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	687a      	ldr	r2, [r7, #4]
 800ad1c:	6812      	ldr	r2, [r2, #0]
 800ad1e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ad22:	f043 0301 	orr.w	r3, r3, #1
 800ad26:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6a1b      	ldr	r3, [r3, #32]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d005      	beq.n	800ad3c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ad30:	4b04      	ldr	r3, [pc, #16]	; (800ad44 <HAL_PCD_SuspendCallback+0x48>)
 800ad32:	691b      	ldr	r3, [r3, #16]
 800ad34:	4a03      	ldr	r2, [pc, #12]	; (800ad44 <HAL_PCD_SuspendCallback+0x48>)
 800ad36:	f043 0306 	orr.w	r3, r3, #6
 800ad3a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ad3c:	bf00      	nop
 800ad3e:	3708      	adds	r7, #8
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}
 800ad44:	e000ed00 	.word	0xe000ed00

0800ad48 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b082      	sub	sp, #8
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ad56:	4618      	mov	r0, r3
 800ad58:	f7fe fd11 	bl	800977e <USBD_LL_Resume>
}
 800ad5c:	bf00      	nop
 800ad5e:	3708      	adds	r7, #8
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b082      	sub	sp, #8
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	460b      	mov	r3, r1
 800ad6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ad76:	78fa      	ldrb	r2, [r7, #3]
 800ad78:	4611      	mov	r1, r2
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f7fe fd69 	bl	8009852 <USBD_LL_IsoOUTIncomplete>
}
 800ad80:	bf00      	nop
 800ad82:	3708      	adds	r7, #8
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}

0800ad88 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b082      	sub	sp, #8
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	460b      	mov	r3, r1
 800ad92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ad9a:	78fa      	ldrb	r2, [r7, #3]
 800ad9c:	4611      	mov	r1, r2
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f7fe fd25 	bl	80097ee <USBD_LL_IsoINIncomplete>
}
 800ada4:	bf00      	nop
 800ada6:	3708      	adds	r7, #8
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}

0800adac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b082      	sub	sp, #8
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800adba:	4618      	mov	r0, r3
 800adbc:	f7fe fd7b 	bl	80098b6 <USBD_LL_DevConnected>
}
 800adc0:	bf00      	nop
 800adc2:	3708      	adds	r7, #8
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b082      	sub	sp, #8
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800add6:	4618      	mov	r0, r3
 800add8:	f7fe fd78 	bl	80098cc <USBD_LL_DevDisconnected>
}
 800addc:	bf00      	nop
 800adde:	3708      	adds	r7, #8
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b082      	sub	sp, #8
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	781b      	ldrb	r3, [r3, #0]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d13c      	bne.n	800ae6e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800adf4:	4a20      	ldr	r2, [pc, #128]	; (800ae78 <USBD_LL_Init+0x94>)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	4a1e      	ldr	r2, [pc, #120]	; (800ae78 <USBD_LL_Init+0x94>)
 800ae00:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ae04:	4b1c      	ldr	r3, [pc, #112]	; (800ae78 <USBD_LL_Init+0x94>)
 800ae06:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ae0a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ae0c:	4b1a      	ldr	r3, [pc, #104]	; (800ae78 <USBD_LL_Init+0x94>)
 800ae0e:	2204      	movs	r2, #4
 800ae10:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ae12:	4b19      	ldr	r3, [pc, #100]	; (800ae78 <USBD_LL_Init+0x94>)
 800ae14:	2202      	movs	r2, #2
 800ae16:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ae18:	4b17      	ldr	r3, [pc, #92]	; (800ae78 <USBD_LL_Init+0x94>)
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ae1e:	4b16      	ldr	r3, [pc, #88]	; (800ae78 <USBD_LL_Init+0x94>)
 800ae20:	2202      	movs	r2, #2
 800ae22:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ae24:	4b14      	ldr	r3, [pc, #80]	; (800ae78 <USBD_LL_Init+0x94>)
 800ae26:	2200      	movs	r2, #0
 800ae28:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ae2a:	4b13      	ldr	r3, [pc, #76]	; (800ae78 <USBD_LL_Init+0x94>)
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ae30:	4b11      	ldr	r3, [pc, #68]	; (800ae78 <USBD_LL_Init+0x94>)
 800ae32:	2200      	movs	r2, #0
 800ae34:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ae36:	4b10      	ldr	r3, [pc, #64]	; (800ae78 <USBD_LL_Init+0x94>)
 800ae38:	2200      	movs	r2, #0
 800ae3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ae3c:	4b0e      	ldr	r3, [pc, #56]	; (800ae78 <USBD_LL_Init+0x94>)
 800ae3e:	2200      	movs	r2, #0
 800ae40:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ae42:	480d      	ldr	r0, [pc, #52]	; (800ae78 <USBD_LL_Init+0x94>)
 800ae44:	f7f8 f8df 	bl	8003006 <HAL_PCD_Init>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d001      	beq.n	800ae52 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ae4e:	f7f6 f8d7 	bl	8001000 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ae52:	2180      	movs	r1, #128	; 0x80
 800ae54:	4808      	ldr	r0, [pc, #32]	; (800ae78 <USBD_LL_Init+0x94>)
 800ae56:	f7f9 fb36 	bl	80044c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ae5a:	2240      	movs	r2, #64	; 0x40
 800ae5c:	2100      	movs	r1, #0
 800ae5e:	4806      	ldr	r0, [pc, #24]	; (800ae78 <USBD_LL_Init+0x94>)
 800ae60:	f7f9 faea 	bl	8004438 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ae64:	2280      	movs	r2, #128	; 0x80
 800ae66:	2101      	movs	r1, #1
 800ae68:	4803      	ldr	r0, [pc, #12]	; (800ae78 <USBD_LL_Init+0x94>)
 800ae6a:	f7f9 fae5 	bl	8004438 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ae6e:	2300      	movs	r3, #0
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3708      	adds	r7, #8
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}
 800ae78:	200010ec 	.word	0x200010ec

0800ae7c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b084      	sub	sp, #16
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae84:	2300      	movs	r3, #0
 800ae86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ae92:	4618      	mov	r0, r3
 800ae94:	f7f8 f9d4 	bl	8003240 <HAL_PCD_Start>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae9c:	7bfb      	ldrb	r3, [r7, #15]
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f000 f942 	bl	800b128 <USBD_Get_USB_Status>
 800aea4:	4603      	mov	r3, r0
 800aea6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aea8:	7bbb      	ldrb	r3, [r7, #14]
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3710      	adds	r7, #16
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}

0800aeb2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800aeb2:	b580      	push	{r7, lr}
 800aeb4:	b084      	sub	sp, #16
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	6078      	str	r0, [r7, #4]
 800aeba:	4608      	mov	r0, r1
 800aebc:	4611      	mov	r1, r2
 800aebe:	461a      	mov	r2, r3
 800aec0:	4603      	mov	r3, r0
 800aec2:	70fb      	strb	r3, [r7, #3]
 800aec4:	460b      	mov	r3, r1
 800aec6:	70bb      	strb	r3, [r7, #2]
 800aec8:	4613      	mov	r3, r2
 800aeca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aecc:	2300      	movs	r3, #0
 800aece:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aed0:	2300      	movs	r3, #0
 800aed2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800aeda:	78bb      	ldrb	r3, [r7, #2]
 800aedc:	883a      	ldrh	r2, [r7, #0]
 800aede:	78f9      	ldrb	r1, [r7, #3]
 800aee0:	f7f8 fea5 	bl	8003c2e <HAL_PCD_EP_Open>
 800aee4:	4603      	mov	r3, r0
 800aee6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aee8:	7bfb      	ldrb	r3, [r7, #15]
 800aeea:	4618      	mov	r0, r3
 800aeec:	f000 f91c 	bl	800b128 <USBD_Get_USB_Status>
 800aef0:	4603      	mov	r3, r0
 800aef2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aef4:	7bbb      	ldrb	r3, [r7, #14]
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3710      	adds	r7, #16
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}

0800aefe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aefe:	b580      	push	{r7, lr}
 800af00:	b084      	sub	sp, #16
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
 800af06:	460b      	mov	r3, r1
 800af08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af0a:	2300      	movs	r3, #0
 800af0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af0e:	2300      	movs	r3, #0
 800af10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800af18:	78fa      	ldrb	r2, [r7, #3]
 800af1a:	4611      	mov	r1, r2
 800af1c:	4618      	mov	r0, r3
 800af1e:	f7f8 feee 	bl	8003cfe <HAL_PCD_EP_Close>
 800af22:	4603      	mov	r3, r0
 800af24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af26:	7bfb      	ldrb	r3, [r7, #15]
 800af28:	4618      	mov	r0, r3
 800af2a:	f000 f8fd 	bl	800b128 <USBD_Get_USB_Status>
 800af2e:	4603      	mov	r3, r0
 800af30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af32:	7bbb      	ldrb	r3, [r7, #14]
}
 800af34:	4618      	mov	r0, r3
 800af36:	3710      	adds	r7, #16
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b084      	sub	sp, #16
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	460b      	mov	r3, r1
 800af46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af48:	2300      	movs	r3, #0
 800af4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af4c:	2300      	movs	r3, #0
 800af4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800af56:	78fa      	ldrb	r2, [r7, #3]
 800af58:	4611      	mov	r1, r2
 800af5a:	4618      	mov	r0, r3
 800af5c:	f7f8 ffc6 	bl	8003eec <HAL_PCD_EP_SetStall>
 800af60:	4603      	mov	r3, r0
 800af62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af64:	7bfb      	ldrb	r3, [r7, #15]
 800af66:	4618      	mov	r0, r3
 800af68:	f000 f8de 	bl	800b128 <USBD_Get_USB_Status>
 800af6c:	4603      	mov	r3, r0
 800af6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af70:	7bbb      	ldrb	r3, [r7, #14]
}
 800af72:	4618      	mov	r0, r3
 800af74:	3710      	adds	r7, #16
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}

0800af7a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af7a:	b580      	push	{r7, lr}
 800af7c:	b084      	sub	sp, #16
 800af7e:	af00      	add	r7, sp, #0
 800af80:	6078      	str	r0, [r7, #4]
 800af82:	460b      	mov	r3, r1
 800af84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af86:	2300      	movs	r3, #0
 800af88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af8a:	2300      	movs	r3, #0
 800af8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800af94:	78fa      	ldrb	r2, [r7, #3]
 800af96:	4611      	mov	r1, r2
 800af98:	4618      	mov	r0, r3
 800af9a:	f7f9 f80b 	bl	8003fb4 <HAL_PCD_EP_ClrStall>
 800af9e:	4603      	mov	r3, r0
 800afa0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afa2:	7bfb      	ldrb	r3, [r7, #15]
 800afa4:	4618      	mov	r0, r3
 800afa6:	f000 f8bf 	bl	800b128 <USBD_Get_USB_Status>
 800afaa:	4603      	mov	r3, r0
 800afac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afae:	7bbb      	ldrb	r3, [r7, #14]
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3710      	adds	r7, #16
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}

0800afb8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800afb8:	b480      	push	{r7}
 800afba:	b085      	sub	sp, #20
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	460b      	mov	r3, r1
 800afc2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800afca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800afcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	da0b      	bge.n	800afec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800afd4:	78fb      	ldrb	r3, [r7, #3]
 800afd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800afda:	68f9      	ldr	r1, [r7, #12]
 800afdc:	4613      	mov	r3, r2
 800afde:	00db      	lsls	r3, r3, #3
 800afe0:	4413      	add	r3, r2
 800afe2:	009b      	lsls	r3, r3, #2
 800afe4:	440b      	add	r3, r1
 800afe6:	333e      	adds	r3, #62	; 0x3e
 800afe8:	781b      	ldrb	r3, [r3, #0]
 800afea:	e00b      	b.n	800b004 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800afec:	78fb      	ldrb	r3, [r7, #3]
 800afee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aff2:	68f9      	ldr	r1, [r7, #12]
 800aff4:	4613      	mov	r3, r2
 800aff6:	00db      	lsls	r3, r3, #3
 800aff8:	4413      	add	r3, r2
 800affa:	009b      	lsls	r3, r3, #2
 800affc:	440b      	add	r3, r1
 800affe:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b002:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b004:	4618      	mov	r0, r3
 800b006:	3714      	adds	r7, #20
 800b008:	46bd      	mov	sp, r7
 800b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00e:	4770      	bx	lr

0800b010 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	460b      	mov	r3, r1
 800b01a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b01c:	2300      	movs	r3, #0
 800b01e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b020:	2300      	movs	r3, #0
 800b022:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b02a:	78fa      	ldrb	r2, [r7, #3]
 800b02c:	4611      	mov	r1, r2
 800b02e:	4618      	mov	r0, r3
 800b030:	f7f8 fdd8 	bl	8003be4 <HAL_PCD_SetAddress>
 800b034:	4603      	mov	r3, r0
 800b036:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b038:	7bfb      	ldrb	r3, [r7, #15]
 800b03a:	4618      	mov	r0, r3
 800b03c:	f000 f874 	bl	800b128 <USBD_Get_USB_Status>
 800b040:	4603      	mov	r3, r0
 800b042:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b044:	7bbb      	ldrb	r3, [r7, #14]
}
 800b046:	4618      	mov	r0, r3
 800b048:	3710      	adds	r7, #16
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}

0800b04e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b04e:	b580      	push	{r7, lr}
 800b050:	b086      	sub	sp, #24
 800b052:	af00      	add	r7, sp, #0
 800b054:	60f8      	str	r0, [r7, #12]
 800b056:	607a      	str	r2, [r7, #4]
 800b058:	603b      	str	r3, [r7, #0]
 800b05a:	460b      	mov	r3, r1
 800b05c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b05e:	2300      	movs	r3, #0
 800b060:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b062:	2300      	movs	r3, #0
 800b064:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b06c:	7af9      	ldrb	r1, [r7, #11]
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	687a      	ldr	r2, [r7, #4]
 800b072:	f7f8 fef1 	bl	8003e58 <HAL_PCD_EP_Transmit>
 800b076:	4603      	mov	r3, r0
 800b078:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b07a:	7dfb      	ldrb	r3, [r7, #23]
 800b07c:	4618      	mov	r0, r3
 800b07e:	f000 f853 	bl	800b128 <USBD_Get_USB_Status>
 800b082:	4603      	mov	r3, r0
 800b084:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b086:	7dbb      	ldrb	r3, [r7, #22]
}
 800b088:	4618      	mov	r0, r3
 800b08a:	3718      	adds	r7, #24
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b086      	sub	sp, #24
 800b094:	af00      	add	r7, sp, #0
 800b096:	60f8      	str	r0, [r7, #12]
 800b098:	607a      	str	r2, [r7, #4]
 800b09a:	603b      	str	r3, [r7, #0]
 800b09c:	460b      	mov	r3, r1
 800b09e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b0ae:	7af9      	ldrb	r1, [r7, #11]
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	687a      	ldr	r2, [r7, #4]
 800b0b4:	f7f8 fe6d 	bl	8003d92 <HAL_PCD_EP_Receive>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0bc:	7dfb      	ldrb	r3, [r7, #23]
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f000 f832 	bl	800b128 <USBD_Get_USB_Status>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b0c8:	7dbb      	ldrb	r3, [r7, #22]
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3718      	adds	r7, #24
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}

0800b0d2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0d2:	b580      	push	{r7, lr}
 800b0d4:	b082      	sub	sp, #8
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	6078      	str	r0, [r7, #4]
 800b0da:	460b      	mov	r3, r1
 800b0dc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b0e4:	78fa      	ldrb	r2, [r7, #3]
 800b0e6:	4611      	mov	r1, r2
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f7f8 fe9d 	bl	8003e28 <HAL_PCD_EP_GetRxCount>
 800b0ee:	4603      	mov	r3, r0
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3708      	adds	r7, #8
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}

0800b0f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b083      	sub	sp, #12
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b100:	4b03      	ldr	r3, [pc, #12]	; (800b110 <USBD_static_malloc+0x18>)
}
 800b102:	4618      	mov	r0, r3
 800b104:	370c      	adds	r7, #12
 800b106:	46bd      	mov	sp, r7
 800b108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10c:	4770      	bx	lr
 800b10e:	bf00      	nop
 800b110:	200015f8 	.word	0x200015f8

0800b114 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b114:	b480      	push	{r7}
 800b116:	b083      	sub	sp, #12
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]

}
 800b11c:	bf00      	nop
 800b11e:	370c      	adds	r7, #12
 800b120:	46bd      	mov	sp, r7
 800b122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b126:	4770      	bx	lr

0800b128 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b128:	b480      	push	{r7}
 800b12a:	b085      	sub	sp, #20
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	4603      	mov	r3, r0
 800b130:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b132:	2300      	movs	r3, #0
 800b134:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b136:	79fb      	ldrb	r3, [r7, #7]
 800b138:	2b03      	cmp	r3, #3
 800b13a:	d817      	bhi.n	800b16c <USBD_Get_USB_Status+0x44>
 800b13c:	a201      	add	r2, pc, #4	; (adr r2, 800b144 <USBD_Get_USB_Status+0x1c>)
 800b13e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b142:	bf00      	nop
 800b144:	0800b155 	.word	0x0800b155
 800b148:	0800b15b 	.word	0x0800b15b
 800b14c:	0800b161 	.word	0x0800b161
 800b150:	0800b167 	.word	0x0800b167
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b154:	2300      	movs	r3, #0
 800b156:	73fb      	strb	r3, [r7, #15]
    break;
 800b158:	e00b      	b.n	800b172 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b15a:	2303      	movs	r3, #3
 800b15c:	73fb      	strb	r3, [r7, #15]
    break;
 800b15e:	e008      	b.n	800b172 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b160:	2301      	movs	r3, #1
 800b162:	73fb      	strb	r3, [r7, #15]
    break;
 800b164:	e005      	b.n	800b172 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b166:	2303      	movs	r3, #3
 800b168:	73fb      	strb	r3, [r7, #15]
    break;
 800b16a:	e002      	b.n	800b172 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b16c:	2303      	movs	r3, #3
 800b16e:	73fb      	strb	r3, [r7, #15]
    break;
 800b170:	bf00      	nop
  }
  return usb_status;
 800b172:	7bfb      	ldrb	r3, [r7, #15]
}
 800b174:	4618      	mov	r0, r3
 800b176:	3714      	adds	r7, #20
 800b178:	46bd      	mov	sp, r7
 800b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17e:	4770      	bx	lr

0800b180 <__errno>:
 800b180:	4b01      	ldr	r3, [pc, #4]	; (800b188 <__errno+0x8>)
 800b182:	6818      	ldr	r0, [r3, #0]
 800b184:	4770      	bx	lr
 800b186:	bf00      	nop
 800b188:	20000100 	.word	0x20000100

0800b18c <__libc_init_array>:
 800b18c:	b570      	push	{r4, r5, r6, lr}
 800b18e:	4d0d      	ldr	r5, [pc, #52]	; (800b1c4 <__libc_init_array+0x38>)
 800b190:	4c0d      	ldr	r4, [pc, #52]	; (800b1c8 <__libc_init_array+0x3c>)
 800b192:	1b64      	subs	r4, r4, r5
 800b194:	10a4      	asrs	r4, r4, #2
 800b196:	2600      	movs	r6, #0
 800b198:	42a6      	cmp	r6, r4
 800b19a:	d109      	bne.n	800b1b0 <__libc_init_array+0x24>
 800b19c:	4d0b      	ldr	r5, [pc, #44]	; (800b1cc <__libc_init_array+0x40>)
 800b19e:	4c0c      	ldr	r4, [pc, #48]	; (800b1d0 <__libc_init_array+0x44>)
 800b1a0:	f001 fa34 	bl	800c60c <_init>
 800b1a4:	1b64      	subs	r4, r4, r5
 800b1a6:	10a4      	asrs	r4, r4, #2
 800b1a8:	2600      	movs	r6, #0
 800b1aa:	42a6      	cmp	r6, r4
 800b1ac:	d105      	bne.n	800b1ba <__libc_init_array+0x2e>
 800b1ae:	bd70      	pop	{r4, r5, r6, pc}
 800b1b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1b4:	4798      	blx	r3
 800b1b6:	3601      	adds	r6, #1
 800b1b8:	e7ee      	b.n	800b198 <__libc_init_array+0xc>
 800b1ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1be:	4798      	blx	r3
 800b1c0:	3601      	adds	r6, #1
 800b1c2:	e7f2      	b.n	800b1aa <__libc_init_array+0x1e>
 800b1c4:	0800c800 	.word	0x0800c800
 800b1c8:	0800c800 	.word	0x0800c800
 800b1cc:	0800c800 	.word	0x0800c800
 800b1d0:	0800c804 	.word	0x0800c804

0800b1d4 <memset>:
 800b1d4:	4402      	add	r2, r0
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	d100      	bne.n	800b1de <memset+0xa>
 800b1dc:	4770      	bx	lr
 800b1de:	f803 1b01 	strb.w	r1, [r3], #1
 800b1e2:	e7f9      	b.n	800b1d8 <memset+0x4>

0800b1e4 <rand>:
 800b1e4:	4b16      	ldr	r3, [pc, #88]	; (800b240 <rand+0x5c>)
 800b1e6:	b510      	push	{r4, lr}
 800b1e8:	681c      	ldr	r4, [r3, #0]
 800b1ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b1ec:	b9b3      	cbnz	r3, 800b21c <rand+0x38>
 800b1ee:	2018      	movs	r0, #24
 800b1f0:	f000 f886 	bl	800b300 <malloc>
 800b1f4:	63a0      	str	r0, [r4, #56]	; 0x38
 800b1f6:	b928      	cbnz	r0, 800b204 <rand+0x20>
 800b1f8:	4602      	mov	r2, r0
 800b1fa:	4b12      	ldr	r3, [pc, #72]	; (800b244 <rand+0x60>)
 800b1fc:	4812      	ldr	r0, [pc, #72]	; (800b248 <rand+0x64>)
 800b1fe:	214e      	movs	r1, #78	; 0x4e
 800b200:	f000 f84e 	bl	800b2a0 <__assert_func>
 800b204:	4a11      	ldr	r2, [pc, #68]	; (800b24c <rand+0x68>)
 800b206:	4b12      	ldr	r3, [pc, #72]	; (800b250 <rand+0x6c>)
 800b208:	e9c0 2300 	strd	r2, r3, [r0]
 800b20c:	4b11      	ldr	r3, [pc, #68]	; (800b254 <rand+0x70>)
 800b20e:	6083      	str	r3, [r0, #8]
 800b210:	230b      	movs	r3, #11
 800b212:	8183      	strh	r3, [r0, #12]
 800b214:	2201      	movs	r2, #1
 800b216:	2300      	movs	r3, #0
 800b218:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800b21c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800b21e:	4a0e      	ldr	r2, [pc, #56]	; (800b258 <rand+0x74>)
 800b220:	6920      	ldr	r0, [r4, #16]
 800b222:	6963      	ldr	r3, [r4, #20]
 800b224:	490d      	ldr	r1, [pc, #52]	; (800b25c <rand+0x78>)
 800b226:	4342      	muls	r2, r0
 800b228:	fb01 2203 	mla	r2, r1, r3, r2
 800b22c:	fba0 0101 	umull	r0, r1, r0, r1
 800b230:	1c43      	adds	r3, r0, #1
 800b232:	eb42 0001 	adc.w	r0, r2, r1
 800b236:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800b23a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b23e:	bd10      	pop	{r4, pc}
 800b240:	20000100 	.word	0x20000100
 800b244:	0800c6b4 	.word	0x0800c6b4
 800b248:	0800c6cb 	.word	0x0800c6cb
 800b24c:	abcd330e 	.word	0xabcd330e
 800b250:	e66d1234 	.word	0xe66d1234
 800b254:	0005deec 	.word	0x0005deec
 800b258:	5851f42d 	.word	0x5851f42d
 800b25c:	4c957f2d 	.word	0x4c957f2d

0800b260 <siprintf>:
 800b260:	b40e      	push	{r1, r2, r3}
 800b262:	b500      	push	{lr}
 800b264:	b09c      	sub	sp, #112	; 0x70
 800b266:	ab1d      	add	r3, sp, #116	; 0x74
 800b268:	9002      	str	r0, [sp, #8]
 800b26a:	9006      	str	r0, [sp, #24]
 800b26c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b270:	4809      	ldr	r0, [pc, #36]	; (800b298 <siprintf+0x38>)
 800b272:	9107      	str	r1, [sp, #28]
 800b274:	9104      	str	r1, [sp, #16]
 800b276:	4909      	ldr	r1, [pc, #36]	; (800b29c <siprintf+0x3c>)
 800b278:	f853 2b04 	ldr.w	r2, [r3], #4
 800b27c:	9105      	str	r1, [sp, #20]
 800b27e:	6800      	ldr	r0, [r0, #0]
 800b280:	9301      	str	r3, [sp, #4]
 800b282:	a902      	add	r1, sp, #8
 800b284:	f000 f980 	bl	800b588 <_svfiprintf_r>
 800b288:	9b02      	ldr	r3, [sp, #8]
 800b28a:	2200      	movs	r2, #0
 800b28c:	701a      	strb	r2, [r3, #0]
 800b28e:	b01c      	add	sp, #112	; 0x70
 800b290:	f85d eb04 	ldr.w	lr, [sp], #4
 800b294:	b003      	add	sp, #12
 800b296:	4770      	bx	lr
 800b298:	20000100 	.word	0x20000100
 800b29c:	ffff0208 	.word	0xffff0208

0800b2a0 <__assert_func>:
 800b2a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b2a2:	4614      	mov	r4, r2
 800b2a4:	461a      	mov	r2, r3
 800b2a6:	4b09      	ldr	r3, [pc, #36]	; (800b2cc <__assert_func+0x2c>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	4605      	mov	r5, r0
 800b2ac:	68d8      	ldr	r0, [r3, #12]
 800b2ae:	b14c      	cbz	r4, 800b2c4 <__assert_func+0x24>
 800b2b0:	4b07      	ldr	r3, [pc, #28]	; (800b2d0 <__assert_func+0x30>)
 800b2b2:	9100      	str	r1, [sp, #0]
 800b2b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b2b8:	4906      	ldr	r1, [pc, #24]	; (800b2d4 <__assert_func+0x34>)
 800b2ba:	462b      	mov	r3, r5
 800b2bc:	f000 f80e 	bl	800b2dc <fiprintf>
 800b2c0:	f000 fe20 	bl	800bf04 <abort>
 800b2c4:	4b04      	ldr	r3, [pc, #16]	; (800b2d8 <__assert_func+0x38>)
 800b2c6:	461c      	mov	r4, r3
 800b2c8:	e7f3      	b.n	800b2b2 <__assert_func+0x12>
 800b2ca:	bf00      	nop
 800b2cc:	20000100 	.word	0x20000100
 800b2d0:	0800c726 	.word	0x0800c726
 800b2d4:	0800c733 	.word	0x0800c733
 800b2d8:	0800c761 	.word	0x0800c761

0800b2dc <fiprintf>:
 800b2dc:	b40e      	push	{r1, r2, r3}
 800b2de:	b503      	push	{r0, r1, lr}
 800b2e0:	4601      	mov	r1, r0
 800b2e2:	ab03      	add	r3, sp, #12
 800b2e4:	4805      	ldr	r0, [pc, #20]	; (800b2fc <fiprintf+0x20>)
 800b2e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2ea:	6800      	ldr	r0, [r0, #0]
 800b2ec:	9301      	str	r3, [sp, #4]
 800b2ee:	f000 fa75 	bl	800b7dc <_vfiprintf_r>
 800b2f2:	b002      	add	sp, #8
 800b2f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2f8:	b003      	add	sp, #12
 800b2fa:	4770      	bx	lr
 800b2fc:	20000100 	.word	0x20000100

0800b300 <malloc>:
 800b300:	4b02      	ldr	r3, [pc, #8]	; (800b30c <malloc+0xc>)
 800b302:	4601      	mov	r1, r0
 800b304:	6818      	ldr	r0, [r3, #0]
 800b306:	f000 b86f 	b.w	800b3e8 <_malloc_r>
 800b30a:	bf00      	nop
 800b30c:	20000100 	.word	0x20000100

0800b310 <_free_r>:
 800b310:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b312:	2900      	cmp	r1, #0
 800b314:	d044      	beq.n	800b3a0 <_free_r+0x90>
 800b316:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b31a:	9001      	str	r0, [sp, #4]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	f1a1 0404 	sub.w	r4, r1, #4
 800b322:	bfb8      	it	lt
 800b324:	18e4      	addlt	r4, r4, r3
 800b326:	f001 f83d 	bl	800c3a4 <__malloc_lock>
 800b32a:	4a1e      	ldr	r2, [pc, #120]	; (800b3a4 <_free_r+0x94>)
 800b32c:	9801      	ldr	r0, [sp, #4]
 800b32e:	6813      	ldr	r3, [r2, #0]
 800b330:	b933      	cbnz	r3, 800b340 <_free_r+0x30>
 800b332:	6063      	str	r3, [r4, #4]
 800b334:	6014      	str	r4, [r2, #0]
 800b336:	b003      	add	sp, #12
 800b338:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b33c:	f001 b838 	b.w	800c3b0 <__malloc_unlock>
 800b340:	42a3      	cmp	r3, r4
 800b342:	d908      	bls.n	800b356 <_free_r+0x46>
 800b344:	6825      	ldr	r5, [r4, #0]
 800b346:	1961      	adds	r1, r4, r5
 800b348:	428b      	cmp	r3, r1
 800b34a:	bf01      	itttt	eq
 800b34c:	6819      	ldreq	r1, [r3, #0]
 800b34e:	685b      	ldreq	r3, [r3, #4]
 800b350:	1949      	addeq	r1, r1, r5
 800b352:	6021      	streq	r1, [r4, #0]
 800b354:	e7ed      	b.n	800b332 <_free_r+0x22>
 800b356:	461a      	mov	r2, r3
 800b358:	685b      	ldr	r3, [r3, #4]
 800b35a:	b10b      	cbz	r3, 800b360 <_free_r+0x50>
 800b35c:	42a3      	cmp	r3, r4
 800b35e:	d9fa      	bls.n	800b356 <_free_r+0x46>
 800b360:	6811      	ldr	r1, [r2, #0]
 800b362:	1855      	adds	r5, r2, r1
 800b364:	42a5      	cmp	r5, r4
 800b366:	d10b      	bne.n	800b380 <_free_r+0x70>
 800b368:	6824      	ldr	r4, [r4, #0]
 800b36a:	4421      	add	r1, r4
 800b36c:	1854      	adds	r4, r2, r1
 800b36e:	42a3      	cmp	r3, r4
 800b370:	6011      	str	r1, [r2, #0]
 800b372:	d1e0      	bne.n	800b336 <_free_r+0x26>
 800b374:	681c      	ldr	r4, [r3, #0]
 800b376:	685b      	ldr	r3, [r3, #4]
 800b378:	6053      	str	r3, [r2, #4]
 800b37a:	4421      	add	r1, r4
 800b37c:	6011      	str	r1, [r2, #0]
 800b37e:	e7da      	b.n	800b336 <_free_r+0x26>
 800b380:	d902      	bls.n	800b388 <_free_r+0x78>
 800b382:	230c      	movs	r3, #12
 800b384:	6003      	str	r3, [r0, #0]
 800b386:	e7d6      	b.n	800b336 <_free_r+0x26>
 800b388:	6825      	ldr	r5, [r4, #0]
 800b38a:	1961      	adds	r1, r4, r5
 800b38c:	428b      	cmp	r3, r1
 800b38e:	bf04      	itt	eq
 800b390:	6819      	ldreq	r1, [r3, #0]
 800b392:	685b      	ldreq	r3, [r3, #4]
 800b394:	6063      	str	r3, [r4, #4]
 800b396:	bf04      	itt	eq
 800b398:	1949      	addeq	r1, r1, r5
 800b39a:	6021      	streq	r1, [r4, #0]
 800b39c:	6054      	str	r4, [r2, #4]
 800b39e:	e7ca      	b.n	800b336 <_free_r+0x26>
 800b3a0:	b003      	add	sp, #12
 800b3a2:	bd30      	pop	{r4, r5, pc}
 800b3a4:	20001818 	.word	0x20001818

0800b3a8 <sbrk_aligned>:
 800b3a8:	b570      	push	{r4, r5, r6, lr}
 800b3aa:	4e0e      	ldr	r6, [pc, #56]	; (800b3e4 <sbrk_aligned+0x3c>)
 800b3ac:	460c      	mov	r4, r1
 800b3ae:	6831      	ldr	r1, [r6, #0]
 800b3b0:	4605      	mov	r5, r0
 800b3b2:	b911      	cbnz	r1, 800b3ba <sbrk_aligned+0x12>
 800b3b4:	f000 fcd6 	bl	800bd64 <_sbrk_r>
 800b3b8:	6030      	str	r0, [r6, #0]
 800b3ba:	4621      	mov	r1, r4
 800b3bc:	4628      	mov	r0, r5
 800b3be:	f000 fcd1 	bl	800bd64 <_sbrk_r>
 800b3c2:	1c43      	adds	r3, r0, #1
 800b3c4:	d00a      	beq.n	800b3dc <sbrk_aligned+0x34>
 800b3c6:	1cc4      	adds	r4, r0, #3
 800b3c8:	f024 0403 	bic.w	r4, r4, #3
 800b3cc:	42a0      	cmp	r0, r4
 800b3ce:	d007      	beq.n	800b3e0 <sbrk_aligned+0x38>
 800b3d0:	1a21      	subs	r1, r4, r0
 800b3d2:	4628      	mov	r0, r5
 800b3d4:	f000 fcc6 	bl	800bd64 <_sbrk_r>
 800b3d8:	3001      	adds	r0, #1
 800b3da:	d101      	bne.n	800b3e0 <sbrk_aligned+0x38>
 800b3dc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b3e0:	4620      	mov	r0, r4
 800b3e2:	bd70      	pop	{r4, r5, r6, pc}
 800b3e4:	2000181c 	.word	0x2000181c

0800b3e8 <_malloc_r>:
 800b3e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ec:	1ccd      	adds	r5, r1, #3
 800b3ee:	f025 0503 	bic.w	r5, r5, #3
 800b3f2:	3508      	adds	r5, #8
 800b3f4:	2d0c      	cmp	r5, #12
 800b3f6:	bf38      	it	cc
 800b3f8:	250c      	movcc	r5, #12
 800b3fa:	2d00      	cmp	r5, #0
 800b3fc:	4607      	mov	r7, r0
 800b3fe:	db01      	blt.n	800b404 <_malloc_r+0x1c>
 800b400:	42a9      	cmp	r1, r5
 800b402:	d905      	bls.n	800b410 <_malloc_r+0x28>
 800b404:	230c      	movs	r3, #12
 800b406:	603b      	str	r3, [r7, #0]
 800b408:	2600      	movs	r6, #0
 800b40a:	4630      	mov	r0, r6
 800b40c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b410:	4e2e      	ldr	r6, [pc, #184]	; (800b4cc <_malloc_r+0xe4>)
 800b412:	f000 ffc7 	bl	800c3a4 <__malloc_lock>
 800b416:	6833      	ldr	r3, [r6, #0]
 800b418:	461c      	mov	r4, r3
 800b41a:	bb34      	cbnz	r4, 800b46a <_malloc_r+0x82>
 800b41c:	4629      	mov	r1, r5
 800b41e:	4638      	mov	r0, r7
 800b420:	f7ff ffc2 	bl	800b3a8 <sbrk_aligned>
 800b424:	1c43      	adds	r3, r0, #1
 800b426:	4604      	mov	r4, r0
 800b428:	d14d      	bne.n	800b4c6 <_malloc_r+0xde>
 800b42a:	6834      	ldr	r4, [r6, #0]
 800b42c:	4626      	mov	r6, r4
 800b42e:	2e00      	cmp	r6, #0
 800b430:	d140      	bne.n	800b4b4 <_malloc_r+0xcc>
 800b432:	6823      	ldr	r3, [r4, #0]
 800b434:	4631      	mov	r1, r6
 800b436:	4638      	mov	r0, r7
 800b438:	eb04 0803 	add.w	r8, r4, r3
 800b43c:	f000 fc92 	bl	800bd64 <_sbrk_r>
 800b440:	4580      	cmp	r8, r0
 800b442:	d13a      	bne.n	800b4ba <_malloc_r+0xd2>
 800b444:	6821      	ldr	r1, [r4, #0]
 800b446:	3503      	adds	r5, #3
 800b448:	1a6d      	subs	r5, r5, r1
 800b44a:	f025 0503 	bic.w	r5, r5, #3
 800b44e:	3508      	adds	r5, #8
 800b450:	2d0c      	cmp	r5, #12
 800b452:	bf38      	it	cc
 800b454:	250c      	movcc	r5, #12
 800b456:	4629      	mov	r1, r5
 800b458:	4638      	mov	r0, r7
 800b45a:	f7ff ffa5 	bl	800b3a8 <sbrk_aligned>
 800b45e:	3001      	adds	r0, #1
 800b460:	d02b      	beq.n	800b4ba <_malloc_r+0xd2>
 800b462:	6823      	ldr	r3, [r4, #0]
 800b464:	442b      	add	r3, r5
 800b466:	6023      	str	r3, [r4, #0]
 800b468:	e00e      	b.n	800b488 <_malloc_r+0xa0>
 800b46a:	6822      	ldr	r2, [r4, #0]
 800b46c:	1b52      	subs	r2, r2, r5
 800b46e:	d41e      	bmi.n	800b4ae <_malloc_r+0xc6>
 800b470:	2a0b      	cmp	r2, #11
 800b472:	d916      	bls.n	800b4a2 <_malloc_r+0xba>
 800b474:	1961      	adds	r1, r4, r5
 800b476:	42a3      	cmp	r3, r4
 800b478:	6025      	str	r5, [r4, #0]
 800b47a:	bf18      	it	ne
 800b47c:	6059      	strne	r1, [r3, #4]
 800b47e:	6863      	ldr	r3, [r4, #4]
 800b480:	bf08      	it	eq
 800b482:	6031      	streq	r1, [r6, #0]
 800b484:	5162      	str	r2, [r4, r5]
 800b486:	604b      	str	r3, [r1, #4]
 800b488:	4638      	mov	r0, r7
 800b48a:	f104 060b 	add.w	r6, r4, #11
 800b48e:	f000 ff8f 	bl	800c3b0 <__malloc_unlock>
 800b492:	f026 0607 	bic.w	r6, r6, #7
 800b496:	1d23      	adds	r3, r4, #4
 800b498:	1af2      	subs	r2, r6, r3
 800b49a:	d0b6      	beq.n	800b40a <_malloc_r+0x22>
 800b49c:	1b9b      	subs	r3, r3, r6
 800b49e:	50a3      	str	r3, [r4, r2]
 800b4a0:	e7b3      	b.n	800b40a <_malloc_r+0x22>
 800b4a2:	6862      	ldr	r2, [r4, #4]
 800b4a4:	42a3      	cmp	r3, r4
 800b4a6:	bf0c      	ite	eq
 800b4a8:	6032      	streq	r2, [r6, #0]
 800b4aa:	605a      	strne	r2, [r3, #4]
 800b4ac:	e7ec      	b.n	800b488 <_malloc_r+0xa0>
 800b4ae:	4623      	mov	r3, r4
 800b4b0:	6864      	ldr	r4, [r4, #4]
 800b4b2:	e7b2      	b.n	800b41a <_malloc_r+0x32>
 800b4b4:	4634      	mov	r4, r6
 800b4b6:	6876      	ldr	r6, [r6, #4]
 800b4b8:	e7b9      	b.n	800b42e <_malloc_r+0x46>
 800b4ba:	230c      	movs	r3, #12
 800b4bc:	603b      	str	r3, [r7, #0]
 800b4be:	4638      	mov	r0, r7
 800b4c0:	f000 ff76 	bl	800c3b0 <__malloc_unlock>
 800b4c4:	e7a1      	b.n	800b40a <_malloc_r+0x22>
 800b4c6:	6025      	str	r5, [r4, #0]
 800b4c8:	e7de      	b.n	800b488 <_malloc_r+0xa0>
 800b4ca:	bf00      	nop
 800b4cc:	20001818 	.word	0x20001818

0800b4d0 <__ssputs_r>:
 800b4d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4d4:	688e      	ldr	r6, [r1, #8]
 800b4d6:	429e      	cmp	r6, r3
 800b4d8:	4682      	mov	sl, r0
 800b4da:	460c      	mov	r4, r1
 800b4dc:	4690      	mov	r8, r2
 800b4de:	461f      	mov	r7, r3
 800b4e0:	d838      	bhi.n	800b554 <__ssputs_r+0x84>
 800b4e2:	898a      	ldrh	r2, [r1, #12]
 800b4e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b4e8:	d032      	beq.n	800b550 <__ssputs_r+0x80>
 800b4ea:	6825      	ldr	r5, [r4, #0]
 800b4ec:	6909      	ldr	r1, [r1, #16]
 800b4ee:	eba5 0901 	sub.w	r9, r5, r1
 800b4f2:	6965      	ldr	r5, [r4, #20]
 800b4f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b4fc:	3301      	adds	r3, #1
 800b4fe:	444b      	add	r3, r9
 800b500:	106d      	asrs	r5, r5, #1
 800b502:	429d      	cmp	r5, r3
 800b504:	bf38      	it	cc
 800b506:	461d      	movcc	r5, r3
 800b508:	0553      	lsls	r3, r2, #21
 800b50a:	d531      	bpl.n	800b570 <__ssputs_r+0xa0>
 800b50c:	4629      	mov	r1, r5
 800b50e:	f7ff ff6b 	bl	800b3e8 <_malloc_r>
 800b512:	4606      	mov	r6, r0
 800b514:	b950      	cbnz	r0, 800b52c <__ssputs_r+0x5c>
 800b516:	230c      	movs	r3, #12
 800b518:	f8ca 3000 	str.w	r3, [sl]
 800b51c:	89a3      	ldrh	r3, [r4, #12]
 800b51e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b522:	81a3      	strh	r3, [r4, #12]
 800b524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b52c:	6921      	ldr	r1, [r4, #16]
 800b52e:	464a      	mov	r2, r9
 800b530:	f000 ff10 	bl	800c354 <memcpy>
 800b534:	89a3      	ldrh	r3, [r4, #12]
 800b536:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b53a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b53e:	81a3      	strh	r3, [r4, #12]
 800b540:	6126      	str	r6, [r4, #16]
 800b542:	6165      	str	r5, [r4, #20]
 800b544:	444e      	add	r6, r9
 800b546:	eba5 0509 	sub.w	r5, r5, r9
 800b54a:	6026      	str	r6, [r4, #0]
 800b54c:	60a5      	str	r5, [r4, #8]
 800b54e:	463e      	mov	r6, r7
 800b550:	42be      	cmp	r6, r7
 800b552:	d900      	bls.n	800b556 <__ssputs_r+0x86>
 800b554:	463e      	mov	r6, r7
 800b556:	6820      	ldr	r0, [r4, #0]
 800b558:	4632      	mov	r2, r6
 800b55a:	4641      	mov	r1, r8
 800b55c:	f000 ff08 	bl	800c370 <memmove>
 800b560:	68a3      	ldr	r3, [r4, #8]
 800b562:	1b9b      	subs	r3, r3, r6
 800b564:	60a3      	str	r3, [r4, #8]
 800b566:	6823      	ldr	r3, [r4, #0]
 800b568:	4433      	add	r3, r6
 800b56a:	6023      	str	r3, [r4, #0]
 800b56c:	2000      	movs	r0, #0
 800b56e:	e7db      	b.n	800b528 <__ssputs_r+0x58>
 800b570:	462a      	mov	r2, r5
 800b572:	f000 ff23 	bl	800c3bc <_realloc_r>
 800b576:	4606      	mov	r6, r0
 800b578:	2800      	cmp	r0, #0
 800b57a:	d1e1      	bne.n	800b540 <__ssputs_r+0x70>
 800b57c:	6921      	ldr	r1, [r4, #16]
 800b57e:	4650      	mov	r0, sl
 800b580:	f7ff fec6 	bl	800b310 <_free_r>
 800b584:	e7c7      	b.n	800b516 <__ssputs_r+0x46>
	...

0800b588 <_svfiprintf_r>:
 800b588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b58c:	4698      	mov	r8, r3
 800b58e:	898b      	ldrh	r3, [r1, #12]
 800b590:	061b      	lsls	r3, r3, #24
 800b592:	b09d      	sub	sp, #116	; 0x74
 800b594:	4607      	mov	r7, r0
 800b596:	460d      	mov	r5, r1
 800b598:	4614      	mov	r4, r2
 800b59a:	d50e      	bpl.n	800b5ba <_svfiprintf_r+0x32>
 800b59c:	690b      	ldr	r3, [r1, #16]
 800b59e:	b963      	cbnz	r3, 800b5ba <_svfiprintf_r+0x32>
 800b5a0:	2140      	movs	r1, #64	; 0x40
 800b5a2:	f7ff ff21 	bl	800b3e8 <_malloc_r>
 800b5a6:	6028      	str	r0, [r5, #0]
 800b5a8:	6128      	str	r0, [r5, #16]
 800b5aa:	b920      	cbnz	r0, 800b5b6 <_svfiprintf_r+0x2e>
 800b5ac:	230c      	movs	r3, #12
 800b5ae:	603b      	str	r3, [r7, #0]
 800b5b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b5b4:	e0d1      	b.n	800b75a <_svfiprintf_r+0x1d2>
 800b5b6:	2340      	movs	r3, #64	; 0x40
 800b5b8:	616b      	str	r3, [r5, #20]
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	9309      	str	r3, [sp, #36]	; 0x24
 800b5be:	2320      	movs	r3, #32
 800b5c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b5c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5c8:	2330      	movs	r3, #48	; 0x30
 800b5ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b774 <_svfiprintf_r+0x1ec>
 800b5ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b5d2:	f04f 0901 	mov.w	r9, #1
 800b5d6:	4623      	mov	r3, r4
 800b5d8:	469a      	mov	sl, r3
 800b5da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5de:	b10a      	cbz	r2, 800b5e4 <_svfiprintf_r+0x5c>
 800b5e0:	2a25      	cmp	r2, #37	; 0x25
 800b5e2:	d1f9      	bne.n	800b5d8 <_svfiprintf_r+0x50>
 800b5e4:	ebba 0b04 	subs.w	fp, sl, r4
 800b5e8:	d00b      	beq.n	800b602 <_svfiprintf_r+0x7a>
 800b5ea:	465b      	mov	r3, fp
 800b5ec:	4622      	mov	r2, r4
 800b5ee:	4629      	mov	r1, r5
 800b5f0:	4638      	mov	r0, r7
 800b5f2:	f7ff ff6d 	bl	800b4d0 <__ssputs_r>
 800b5f6:	3001      	adds	r0, #1
 800b5f8:	f000 80aa 	beq.w	800b750 <_svfiprintf_r+0x1c8>
 800b5fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5fe:	445a      	add	r2, fp
 800b600:	9209      	str	r2, [sp, #36]	; 0x24
 800b602:	f89a 3000 	ldrb.w	r3, [sl]
 800b606:	2b00      	cmp	r3, #0
 800b608:	f000 80a2 	beq.w	800b750 <_svfiprintf_r+0x1c8>
 800b60c:	2300      	movs	r3, #0
 800b60e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b612:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b616:	f10a 0a01 	add.w	sl, sl, #1
 800b61a:	9304      	str	r3, [sp, #16]
 800b61c:	9307      	str	r3, [sp, #28]
 800b61e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b622:	931a      	str	r3, [sp, #104]	; 0x68
 800b624:	4654      	mov	r4, sl
 800b626:	2205      	movs	r2, #5
 800b628:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b62c:	4851      	ldr	r0, [pc, #324]	; (800b774 <_svfiprintf_r+0x1ec>)
 800b62e:	f7f4 fdcf 	bl	80001d0 <memchr>
 800b632:	9a04      	ldr	r2, [sp, #16]
 800b634:	b9d8      	cbnz	r0, 800b66e <_svfiprintf_r+0xe6>
 800b636:	06d0      	lsls	r0, r2, #27
 800b638:	bf44      	itt	mi
 800b63a:	2320      	movmi	r3, #32
 800b63c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b640:	0711      	lsls	r1, r2, #28
 800b642:	bf44      	itt	mi
 800b644:	232b      	movmi	r3, #43	; 0x2b
 800b646:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b64a:	f89a 3000 	ldrb.w	r3, [sl]
 800b64e:	2b2a      	cmp	r3, #42	; 0x2a
 800b650:	d015      	beq.n	800b67e <_svfiprintf_r+0xf6>
 800b652:	9a07      	ldr	r2, [sp, #28]
 800b654:	4654      	mov	r4, sl
 800b656:	2000      	movs	r0, #0
 800b658:	f04f 0c0a 	mov.w	ip, #10
 800b65c:	4621      	mov	r1, r4
 800b65e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b662:	3b30      	subs	r3, #48	; 0x30
 800b664:	2b09      	cmp	r3, #9
 800b666:	d94e      	bls.n	800b706 <_svfiprintf_r+0x17e>
 800b668:	b1b0      	cbz	r0, 800b698 <_svfiprintf_r+0x110>
 800b66a:	9207      	str	r2, [sp, #28]
 800b66c:	e014      	b.n	800b698 <_svfiprintf_r+0x110>
 800b66e:	eba0 0308 	sub.w	r3, r0, r8
 800b672:	fa09 f303 	lsl.w	r3, r9, r3
 800b676:	4313      	orrs	r3, r2
 800b678:	9304      	str	r3, [sp, #16]
 800b67a:	46a2      	mov	sl, r4
 800b67c:	e7d2      	b.n	800b624 <_svfiprintf_r+0x9c>
 800b67e:	9b03      	ldr	r3, [sp, #12]
 800b680:	1d19      	adds	r1, r3, #4
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	9103      	str	r1, [sp, #12]
 800b686:	2b00      	cmp	r3, #0
 800b688:	bfbb      	ittet	lt
 800b68a:	425b      	neglt	r3, r3
 800b68c:	f042 0202 	orrlt.w	r2, r2, #2
 800b690:	9307      	strge	r3, [sp, #28]
 800b692:	9307      	strlt	r3, [sp, #28]
 800b694:	bfb8      	it	lt
 800b696:	9204      	strlt	r2, [sp, #16]
 800b698:	7823      	ldrb	r3, [r4, #0]
 800b69a:	2b2e      	cmp	r3, #46	; 0x2e
 800b69c:	d10c      	bne.n	800b6b8 <_svfiprintf_r+0x130>
 800b69e:	7863      	ldrb	r3, [r4, #1]
 800b6a0:	2b2a      	cmp	r3, #42	; 0x2a
 800b6a2:	d135      	bne.n	800b710 <_svfiprintf_r+0x188>
 800b6a4:	9b03      	ldr	r3, [sp, #12]
 800b6a6:	1d1a      	adds	r2, r3, #4
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	9203      	str	r2, [sp, #12]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	bfb8      	it	lt
 800b6b0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b6b4:	3402      	adds	r4, #2
 800b6b6:	9305      	str	r3, [sp, #20]
 800b6b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b784 <_svfiprintf_r+0x1fc>
 800b6bc:	7821      	ldrb	r1, [r4, #0]
 800b6be:	2203      	movs	r2, #3
 800b6c0:	4650      	mov	r0, sl
 800b6c2:	f7f4 fd85 	bl	80001d0 <memchr>
 800b6c6:	b140      	cbz	r0, 800b6da <_svfiprintf_r+0x152>
 800b6c8:	2340      	movs	r3, #64	; 0x40
 800b6ca:	eba0 000a 	sub.w	r0, r0, sl
 800b6ce:	fa03 f000 	lsl.w	r0, r3, r0
 800b6d2:	9b04      	ldr	r3, [sp, #16]
 800b6d4:	4303      	orrs	r3, r0
 800b6d6:	3401      	adds	r4, #1
 800b6d8:	9304      	str	r3, [sp, #16]
 800b6da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6de:	4826      	ldr	r0, [pc, #152]	; (800b778 <_svfiprintf_r+0x1f0>)
 800b6e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b6e4:	2206      	movs	r2, #6
 800b6e6:	f7f4 fd73 	bl	80001d0 <memchr>
 800b6ea:	2800      	cmp	r0, #0
 800b6ec:	d038      	beq.n	800b760 <_svfiprintf_r+0x1d8>
 800b6ee:	4b23      	ldr	r3, [pc, #140]	; (800b77c <_svfiprintf_r+0x1f4>)
 800b6f0:	bb1b      	cbnz	r3, 800b73a <_svfiprintf_r+0x1b2>
 800b6f2:	9b03      	ldr	r3, [sp, #12]
 800b6f4:	3307      	adds	r3, #7
 800b6f6:	f023 0307 	bic.w	r3, r3, #7
 800b6fa:	3308      	adds	r3, #8
 800b6fc:	9303      	str	r3, [sp, #12]
 800b6fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b700:	4433      	add	r3, r6
 800b702:	9309      	str	r3, [sp, #36]	; 0x24
 800b704:	e767      	b.n	800b5d6 <_svfiprintf_r+0x4e>
 800b706:	fb0c 3202 	mla	r2, ip, r2, r3
 800b70a:	460c      	mov	r4, r1
 800b70c:	2001      	movs	r0, #1
 800b70e:	e7a5      	b.n	800b65c <_svfiprintf_r+0xd4>
 800b710:	2300      	movs	r3, #0
 800b712:	3401      	adds	r4, #1
 800b714:	9305      	str	r3, [sp, #20]
 800b716:	4619      	mov	r1, r3
 800b718:	f04f 0c0a 	mov.w	ip, #10
 800b71c:	4620      	mov	r0, r4
 800b71e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b722:	3a30      	subs	r2, #48	; 0x30
 800b724:	2a09      	cmp	r2, #9
 800b726:	d903      	bls.n	800b730 <_svfiprintf_r+0x1a8>
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d0c5      	beq.n	800b6b8 <_svfiprintf_r+0x130>
 800b72c:	9105      	str	r1, [sp, #20]
 800b72e:	e7c3      	b.n	800b6b8 <_svfiprintf_r+0x130>
 800b730:	fb0c 2101 	mla	r1, ip, r1, r2
 800b734:	4604      	mov	r4, r0
 800b736:	2301      	movs	r3, #1
 800b738:	e7f0      	b.n	800b71c <_svfiprintf_r+0x194>
 800b73a:	ab03      	add	r3, sp, #12
 800b73c:	9300      	str	r3, [sp, #0]
 800b73e:	462a      	mov	r2, r5
 800b740:	4b0f      	ldr	r3, [pc, #60]	; (800b780 <_svfiprintf_r+0x1f8>)
 800b742:	a904      	add	r1, sp, #16
 800b744:	4638      	mov	r0, r7
 800b746:	f3af 8000 	nop.w
 800b74a:	1c42      	adds	r2, r0, #1
 800b74c:	4606      	mov	r6, r0
 800b74e:	d1d6      	bne.n	800b6fe <_svfiprintf_r+0x176>
 800b750:	89ab      	ldrh	r3, [r5, #12]
 800b752:	065b      	lsls	r3, r3, #25
 800b754:	f53f af2c 	bmi.w	800b5b0 <_svfiprintf_r+0x28>
 800b758:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b75a:	b01d      	add	sp, #116	; 0x74
 800b75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b760:	ab03      	add	r3, sp, #12
 800b762:	9300      	str	r3, [sp, #0]
 800b764:	462a      	mov	r2, r5
 800b766:	4b06      	ldr	r3, [pc, #24]	; (800b780 <_svfiprintf_r+0x1f8>)
 800b768:	a904      	add	r1, sp, #16
 800b76a:	4638      	mov	r0, r7
 800b76c:	f000 f9d4 	bl	800bb18 <_printf_i>
 800b770:	e7eb      	b.n	800b74a <_svfiprintf_r+0x1c2>
 800b772:	bf00      	nop
 800b774:	0800c762 	.word	0x0800c762
 800b778:	0800c76c 	.word	0x0800c76c
 800b77c:	00000000 	.word	0x00000000
 800b780:	0800b4d1 	.word	0x0800b4d1
 800b784:	0800c768 	.word	0x0800c768

0800b788 <__sfputc_r>:
 800b788:	6893      	ldr	r3, [r2, #8]
 800b78a:	3b01      	subs	r3, #1
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	b410      	push	{r4}
 800b790:	6093      	str	r3, [r2, #8]
 800b792:	da08      	bge.n	800b7a6 <__sfputc_r+0x1e>
 800b794:	6994      	ldr	r4, [r2, #24]
 800b796:	42a3      	cmp	r3, r4
 800b798:	db01      	blt.n	800b79e <__sfputc_r+0x16>
 800b79a:	290a      	cmp	r1, #10
 800b79c:	d103      	bne.n	800b7a6 <__sfputc_r+0x1e>
 800b79e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7a2:	f000 baef 	b.w	800bd84 <__swbuf_r>
 800b7a6:	6813      	ldr	r3, [r2, #0]
 800b7a8:	1c58      	adds	r0, r3, #1
 800b7aa:	6010      	str	r0, [r2, #0]
 800b7ac:	7019      	strb	r1, [r3, #0]
 800b7ae:	4608      	mov	r0, r1
 800b7b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7b4:	4770      	bx	lr

0800b7b6 <__sfputs_r>:
 800b7b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7b8:	4606      	mov	r6, r0
 800b7ba:	460f      	mov	r7, r1
 800b7bc:	4614      	mov	r4, r2
 800b7be:	18d5      	adds	r5, r2, r3
 800b7c0:	42ac      	cmp	r4, r5
 800b7c2:	d101      	bne.n	800b7c8 <__sfputs_r+0x12>
 800b7c4:	2000      	movs	r0, #0
 800b7c6:	e007      	b.n	800b7d8 <__sfputs_r+0x22>
 800b7c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7cc:	463a      	mov	r2, r7
 800b7ce:	4630      	mov	r0, r6
 800b7d0:	f7ff ffda 	bl	800b788 <__sfputc_r>
 800b7d4:	1c43      	adds	r3, r0, #1
 800b7d6:	d1f3      	bne.n	800b7c0 <__sfputs_r+0xa>
 800b7d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b7dc <_vfiprintf_r>:
 800b7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e0:	460d      	mov	r5, r1
 800b7e2:	b09d      	sub	sp, #116	; 0x74
 800b7e4:	4614      	mov	r4, r2
 800b7e6:	4698      	mov	r8, r3
 800b7e8:	4606      	mov	r6, r0
 800b7ea:	b118      	cbz	r0, 800b7f4 <_vfiprintf_r+0x18>
 800b7ec:	6983      	ldr	r3, [r0, #24]
 800b7ee:	b90b      	cbnz	r3, 800b7f4 <_vfiprintf_r+0x18>
 800b7f0:	f000 fcaa 	bl	800c148 <__sinit>
 800b7f4:	4b89      	ldr	r3, [pc, #548]	; (800ba1c <_vfiprintf_r+0x240>)
 800b7f6:	429d      	cmp	r5, r3
 800b7f8:	d11b      	bne.n	800b832 <_vfiprintf_r+0x56>
 800b7fa:	6875      	ldr	r5, [r6, #4]
 800b7fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7fe:	07d9      	lsls	r1, r3, #31
 800b800:	d405      	bmi.n	800b80e <_vfiprintf_r+0x32>
 800b802:	89ab      	ldrh	r3, [r5, #12]
 800b804:	059a      	lsls	r2, r3, #22
 800b806:	d402      	bmi.n	800b80e <_vfiprintf_r+0x32>
 800b808:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b80a:	f000 fd3b 	bl	800c284 <__retarget_lock_acquire_recursive>
 800b80e:	89ab      	ldrh	r3, [r5, #12]
 800b810:	071b      	lsls	r3, r3, #28
 800b812:	d501      	bpl.n	800b818 <_vfiprintf_r+0x3c>
 800b814:	692b      	ldr	r3, [r5, #16]
 800b816:	b9eb      	cbnz	r3, 800b854 <_vfiprintf_r+0x78>
 800b818:	4629      	mov	r1, r5
 800b81a:	4630      	mov	r0, r6
 800b81c:	f000 fb04 	bl	800be28 <__swsetup_r>
 800b820:	b1c0      	cbz	r0, 800b854 <_vfiprintf_r+0x78>
 800b822:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b824:	07dc      	lsls	r4, r3, #31
 800b826:	d50e      	bpl.n	800b846 <_vfiprintf_r+0x6a>
 800b828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b82c:	b01d      	add	sp, #116	; 0x74
 800b82e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b832:	4b7b      	ldr	r3, [pc, #492]	; (800ba20 <_vfiprintf_r+0x244>)
 800b834:	429d      	cmp	r5, r3
 800b836:	d101      	bne.n	800b83c <_vfiprintf_r+0x60>
 800b838:	68b5      	ldr	r5, [r6, #8]
 800b83a:	e7df      	b.n	800b7fc <_vfiprintf_r+0x20>
 800b83c:	4b79      	ldr	r3, [pc, #484]	; (800ba24 <_vfiprintf_r+0x248>)
 800b83e:	429d      	cmp	r5, r3
 800b840:	bf08      	it	eq
 800b842:	68f5      	ldreq	r5, [r6, #12]
 800b844:	e7da      	b.n	800b7fc <_vfiprintf_r+0x20>
 800b846:	89ab      	ldrh	r3, [r5, #12]
 800b848:	0598      	lsls	r0, r3, #22
 800b84a:	d4ed      	bmi.n	800b828 <_vfiprintf_r+0x4c>
 800b84c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b84e:	f000 fd1a 	bl	800c286 <__retarget_lock_release_recursive>
 800b852:	e7e9      	b.n	800b828 <_vfiprintf_r+0x4c>
 800b854:	2300      	movs	r3, #0
 800b856:	9309      	str	r3, [sp, #36]	; 0x24
 800b858:	2320      	movs	r3, #32
 800b85a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b85e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b862:	2330      	movs	r3, #48	; 0x30
 800b864:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ba28 <_vfiprintf_r+0x24c>
 800b868:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b86c:	f04f 0901 	mov.w	r9, #1
 800b870:	4623      	mov	r3, r4
 800b872:	469a      	mov	sl, r3
 800b874:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b878:	b10a      	cbz	r2, 800b87e <_vfiprintf_r+0xa2>
 800b87a:	2a25      	cmp	r2, #37	; 0x25
 800b87c:	d1f9      	bne.n	800b872 <_vfiprintf_r+0x96>
 800b87e:	ebba 0b04 	subs.w	fp, sl, r4
 800b882:	d00b      	beq.n	800b89c <_vfiprintf_r+0xc0>
 800b884:	465b      	mov	r3, fp
 800b886:	4622      	mov	r2, r4
 800b888:	4629      	mov	r1, r5
 800b88a:	4630      	mov	r0, r6
 800b88c:	f7ff ff93 	bl	800b7b6 <__sfputs_r>
 800b890:	3001      	adds	r0, #1
 800b892:	f000 80aa 	beq.w	800b9ea <_vfiprintf_r+0x20e>
 800b896:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b898:	445a      	add	r2, fp
 800b89a:	9209      	str	r2, [sp, #36]	; 0x24
 800b89c:	f89a 3000 	ldrb.w	r3, [sl]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	f000 80a2 	beq.w	800b9ea <_vfiprintf_r+0x20e>
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b8ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8b0:	f10a 0a01 	add.w	sl, sl, #1
 800b8b4:	9304      	str	r3, [sp, #16]
 800b8b6:	9307      	str	r3, [sp, #28]
 800b8b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b8bc:	931a      	str	r3, [sp, #104]	; 0x68
 800b8be:	4654      	mov	r4, sl
 800b8c0:	2205      	movs	r2, #5
 800b8c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8c6:	4858      	ldr	r0, [pc, #352]	; (800ba28 <_vfiprintf_r+0x24c>)
 800b8c8:	f7f4 fc82 	bl	80001d0 <memchr>
 800b8cc:	9a04      	ldr	r2, [sp, #16]
 800b8ce:	b9d8      	cbnz	r0, 800b908 <_vfiprintf_r+0x12c>
 800b8d0:	06d1      	lsls	r1, r2, #27
 800b8d2:	bf44      	itt	mi
 800b8d4:	2320      	movmi	r3, #32
 800b8d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8da:	0713      	lsls	r3, r2, #28
 800b8dc:	bf44      	itt	mi
 800b8de:	232b      	movmi	r3, #43	; 0x2b
 800b8e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8e4:	f89a 3000 	ldrb.w	r3, [sl]
 800b8e8:	2b2a      	cmp	r3, #42	; 0x2a
 800b8ea:	d015      	beq.n	800b918 <_vfiprintf_r+0x13c>
 800b8ec:	9a07      	ldr	r2, [sp, #28]
 800b8ee:	4654      	mov	r4, sl
 800b8f0:	2000      	movs	r0, #0
 800b8f2:	f04f 0c0a 	mov.w	ip, #10
 800b8f6:	4621      	mov	r1, r4
 800b8f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8fc:	3b30      	subs	r3, #48	; 0x30
 800b8fe:	2b09      	cmp	r3, #9
 800b900:	d94e      	bls.n	800b9a0 <_vfiprintf_r+0x1c4>
 800b902:	b1b0      	cbz	r0, 800b932 <_vfiprintf_r+0x156>
 800b904:	9207      	str	r2, [sp, #28]
 800b906:	e014      	b.n	800b932 <_vfiprintf_r+0x156>
 800b908:	eba0 0308 	sub.w	r3, r0, r8
 800b90c:	fa09 f303 	lsl.w	r3, r9, r3
 800b910:	4313      	orrs	r3, r2
 800b912:	9304      	str	r3, [sp, #16]
 800b914:	46a2      	mov	sl, r4
 800b916:	e7d2      	b.n	800b8be <_vfiprintf_r+0xe2>
 800b918:	9b03      	ldr	r3, [sp, #12]
 800b91a:	1d19      	adds	r1, r3, #4
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	9103      	str	r1, [sp, #12]
 800b920:	2b00      	cmp	r3, #0
 800b922:	bfbb      	ittet	lt
 800b924:	425b      	neglt	r3, r3
 800b926:	f042 0202 	orrlt.w	r2, r2, #2
 800b92a:	9307      	strge	r3, [sp, #28]
 800b92c:	9307      	strlt	r3, [sp, #28]
 800b92e:	bfb8      	it	lt
 800b930:	9204      	strlt	r2, [sp, #16]
 800b932:	7823      	ldrb	r3, [r4, #0]
 800b934:	2b2e      	cmp	r3, #46	; 0x2e
 800b936:	d10c      	bne.n	800b952 <_vfiprintf_r+0x176>
 800b938:	7863      	ldrb	r3, [r4, #1]
 800b93a:	2b2a      	cmp	r3, #42	; 0x2a
 800b93c:	d135      	bne.n	800b9aa <_vfiprintf_r+0x1ce>
 800b93e:	9b03      	ldr	r3, [sp, #12]
 800b940:	1d1a      	adds	r2, r3, #4
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	9203      	str	r2, [sp, #12]
 800b946:	2b00      	cmp	r3, #0
 800b948:	bfb8      	it	lt
 800b94a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b94e:	3402      	adds	r4, #2
 800b950:	9305      	str	r3, [sp, #20]
 800b952:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ba38 <_vfiprintf_r+0x25c>
 800b956:	7821      	ldrb	r1, [r4, #0]
 800b958:	2203      	movs	r2, #3
 800b95a:	4650      	mov	r0, sl
 800b95c:	f7f4 fc38 	bl	80001d0 <memchr>
 800b960:	b140      	cbz	r0, 800b974 <_vfiprintf_r+0x198>
 800b962:	2340      	movs	r3, #64	; 0x40
 800b964:	eba0 000a 	sub.w	r0, r0, sl
 800b968:	fa03 f000 	lsl.w	r0, r3, r0
 800b96c:	9b04      	ldr	r3, [sp, #16]
 800b96e:	4303      	orrs	r3, r0
 800b970:	3401      	adds	r4, #1
 800b972:	9304      	str	r3, [sp, #16]
 800b974:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b978:	482c      	ldr	r0, [pc, #176]	; (800ba2c <_vfiprintf_r+0x250>)
 800b97a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b97e:	2206      	movs	r2, #6
 800b980:	f7f4 fc26 	bl	80001d0 <memchr>
 800b984:	2800      	cmp	r0, #0
 800b986:	d03f      	beq.n	800ba08 <_vfiprintf_r+0x22c>
 800b988:	4b29      	ldr	r3, [pc, #164]	; (800ba30 <_vfiprintf_r+0x254>)
 800b98a:	bb1b      	cbnz	r3, 800b9d4 <_vfiprintf_r+0x1f8>
 800b98c:	9b03      	ldr	r3, [sp, #12]
 800b98e:	3307      	adds	r3, #7
 800b990:	f023 0307 	bic.w	r3, r3, #7
 800b994:	3308      	adds	r3, #8
 800b996:	9303      	str	r3, [sp, #12]
 800b998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b99a:	443b      	add	r3, r7
 800b99c:	9309      	str	r3, [sp, #36]	; 0x24
 800b99e:	e767      	b.n	800b870 <_vfiprintf_r+0x94>
 800b9a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9a4:	460c      	mov	r4, r1
 800b9a6:	2001      	movs	r0, #1
 800b9a8:	e7a5      	b.n	800b8f6 <_vfiprintf_r+0x11a>
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	3401      	adds	r4, #1
 800b9ae:	9305      	str	r3, [sp, #20]
 800b9b0:	4619      	mov	r1, r3
 800b9b2:	f04f 0c0a 	mov.w	ip, #10
 800b9b6:	4620      	mov	r0, r4
 800b9b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9bc:	3a30      	subs	r2, #48	; 0x30
 800b9be:	2a09      	cmp	r2, #9
 800b9c0:	d903      	bls.n	800b9ca <_vfiprintf_r+0x1ee>
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d0c5      	beq.n	800b952 <_vfiprintf_r+0x176>
 800b9c6:	9105      	str	r1, [sp, #20]
 800b9c8:	e7c3      	b.n	800b952 <_vfiprintf_r+0x176>
 800b9ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9ce:	4604      	mov	r4, r0
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	e7f0      	b.n	800b9b6 <_vfiprintf_r+0x1da>
 800b9d4:	ab03      	add	r3, sp, #12
 800b9d6:	9300      	str	r3, [sp, #0]
 800b9d8:	462a      	mov	r2, r5
 800b9da:	4b16      	ldr	r3, [pc, #88]	; (800ba34 <_vfiprintf_r+0x258>)
 800b9dc:	a904      	add	r1, sp, #16
 800b9de:	4630      	mov	r0, r6
 800b9e0:	f3af 8000 	nop.w
 800b9e4:	4607      	mov	r7, r0
 800b9e6:	1c78      	adds	r0, r7, #1
 800b9e8:	d1d6      	bne.n	800b998 <_vfiprintf_r+0x1bc>
 800b9ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9ec:	07d9      	lsls	r1, r3, #31
 800b9ee:	d405      	bmi.n	800b9fc <_vfiprintf_r+0x220>
 800b9f0:	89ab      	ldrh	r3, [r5, #12]
 800b9f2:	059a      	lsls	r2, r3, #22
 800b9f4:	d402      	bmi.n	800b9fc <_vfiprintf_r+0x220>
 800b9f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9f8:	f000 fc45 	bl	800c286 <__retarget_lock_release_recursive>
 800b9fc:	89ab      	ldrh	r3, [r5, #12]
 800b9fe:	065b      	lsls	r3, r3, #25
 800ba00:	f53f af12 	bmi.w	800b828 <_vfiprintf_r+0x4c>
 800ba04:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba06:	e711      	b.n	800b82c <_vfiprintf_r+0x50>
 800ba08:	ab03      	add	r3, sp, #12
 800ba0a:	9300      	str	r3, [sp, #0]
 800ba0c:	462a      	mov	r2, r5
 800ba0e:	4b09      	ldr	r3, [pc, #36]	; (800ba34 <_vfiprintf_r+0x258>)
 800ba10:	a904      	add	r1, sp, #16
 800ba12:	4630      	mov	r0, r6
 800ba14:	f000 f880 	bl	800bb18 <_printf_i>
 800ba18:	e7e4      	b.n	800b9e4 <_vfiprintf_r+0x208>
 800ba1a:	bf00      	nop
 800ba1c:	0800c7b8 	.word	0x0800c7b8
 800ba20:	0800c7d8 	.word	0x0800c7d8
 800ba24:	0800c798 	.word	0x0800c798
 800ba28:	0800c762 	.word	0x0800c762
 800ba2c:	0800c76c 	.word	0x0800c76c
 800ba30:	00000000 	.word	0x00000000
 800ba34:	0800b7b7 	.word	0x0800b7b7
 800ba38:	0800c768 	.word	0x0800c768

0800ba3c <_printf_common>:
 800ba3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba40:	4616      	mov	r6, r2
 800ba42:	4699      	mov	r9, r3
 800ba44:	688a      	ldr	r2, [r1, #8]
 800ba46:	690b      	ldr	r3, [r1, #16]
 800ba48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	bfb8      	it	lt
 800ba50:	4613      	movlt	r3, r2
 800ba52:	6033      	str	r3, [r6, #0]
 800ba54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ba58:	4607      	mov	r7, r0
 800ba5a:	460c      	mov	r4, r1
 800ba5c:	b10a      	cbz	r2, 800ba62 <_printf_common+0x26>
 800ba5e:	3301      	adds	r3, #1
 800ba60:	6033      	str	r3, [r6, #0]
 800ba62:	6823      	ldr	r3, [r4, #0]
 800ba64:	0699      	lsls	r1, r3, #26
 800ba66:	bf42      	ittt	mi
 800ba68:	6833      	ldrmi	r3, [r6, #0]
 800ba6a:	3302      	addmi	r3, #2
 800ba6c:	6033      	strmi	r3, [r6, #0]
 800ba6e:	6825      	ldr	r5, [r4, #0]
 800ba70:	f015 0506 	ands.w	r5, r5, #6
 800ba74:	d106      	bne.n	800ba84 <_printf_common+0x48>
 800ba76:	f104 0a19 	add.w	sl, r4, #25
 800ba7a:	68e3      	ldr	r3, [r4, #12]
 800ba7c:	6832      	ldr	r2, [r6, #0]
 800ba7e:	1a9b      	subs	r3, r3, r2
 800ba80:	42ab      	cmp	r3, r5
 800ba82:	dc26      	bgt.n	800bad2 <_printf_common+0x96>
 800ba84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ba88:	1e13      	subs	r3, r2, #0
 800ba8a:	6822      	ldr	r2, [r4, #0]
 800ba8c:	bf18      	it	ne
 800ba8e:	2301      	movne	r3, #1
 800ba90:	0692      	lsls	r2, r2, #26
 800ba92:	d42b      	bmi.n	800baec <_printf_common+0xb0>
 800ba94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ba98:	4649      	mov	r1, r9
 800ba9a:	4638      	mov	r0, r7
 800ba9c:	47c0      	blx	r8
 800ba9e:	3001      	adds	r0, #1
 800baa0:	d01e      	beq.n	800bae0 <_printf_common+0xa4>
 800baa2:	6823      	ldr	r3, [r4, #0]
 800baa4:	68e5      	ldr	r5, [r4, #12]
 800baa6:	6832      	ldr	r2, [r6, #0]
 800baa8:	f003 0306 	and.w	r3, r3, #6
 800baac:	2b04      	cmp	r3, #4
 800baae:	bf08      	it	eq
 800bab0:	1aad      	subeq	r5, r5, r2
 800bab2:	68a3      	ldr	r3, [r4, #8]
 800bab4:	6922      	ldr	r2, [r4, #16]
 800bab6:	bf0c      	ite	eq
 800bab8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800babc:	2500      	movne	r5, #0
 800babe:	4293      	cmp	r3, r2
 800bac0:	bfc4      	itt	gt
 800bac2:	1a9b      	subgt	r3, r3, r2
 800bac4:	18ed      	addgt	r5, r5, r3
 800bac6:	2600      	movs	r6, #0
 800bac8:	341a      	adds	r4, #26
 800baca:	42b5      	cmp	r5, r6
 800bacc:	d11a      	bne.n	800bb04 <_printf_common+0xc8>
 800bace:	2000      	movs	r0, #0
 800bad0:	e008      	b.n	800bae4 <_printf_common+0xa8>
 800bad2:	2301      	movs	r3, #1
 800bad4:	4652      	mov	r2, sl
 800bad6:	4649      	mov	r1, r9
 800bad8:	4638      	mov	r0, r7
 800bada:	47c0      	blx	r8
 800badc:	3001      	adds	r0, #1
 800bade:	d103      	bne.n	800bae8 <_printf_common+0xac>
 800bae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bae8:	3501      	adds	r5, #1
 800baea:	e7c6      	b.n	800ba7a <_printf_common+0x3e>
 800baec:	18e1      	adds	r1, r4, r3
 800baee:	1c5a      	adds	r2, r3, #1
 800baf0:	2030      	movs	r0, #48	; 0x30
 800baf2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800baf6:	4422      	add	r2, r4
 800baf8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bafc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bb00:	3302      	adds	r3, #2
 800bb02:	e7c7      	b.n	800ba94 <_printf_common+0x58>
 800bb04:	2301      	movs	r3, #1
 800bb06:	4622      	mov	r2, r4
 800bb08:	4649      	mov	r1, r9
 800bb0a:	4638      	mov	r0, r7
 800bb0c:	47c0      	blx	r8
 800bb0e:	3001      	adds	r0, #1
 800bb10:	d0e6      	beq.n	800bae0 <_printf_common+0xa4>
 800bb12:	3601      	adds	r6, #1
 800bb14:	e7d9      	b.n	800baca <_printf_common+0x8e>
	...

0800bb18 <_printf_i>:
 800bb18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb1c:	7e0f      	ldrb	r7, [r1, #24]
 800bb1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bb20:	2f78      	cmp	r7, #120	; 0x78
 800bb22:	4691      	mov	r9, r2
 800bb24:	4680      	mov	r8, r0
 800bb26:	460c      	mov	r4, r1
 800bb28:	469a      	mov	sl, r3
 800bb2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bb2e:	d807      	bhi.n	800bb40 <_printf_i+0x28>
 800bb30:	2f62      	cmp	r7, #98	; 0x62
 800bb32:	d80a      	bhi.n	800bb4a <_printf_i+0x32>
 800bb34:	2f00      	cmp	r7, #0
 800bb36:	f000 80d8 	beq.w	800bcea <_printf_i+0x1d2>
 800bb3a:	2f58      	cmp	r7, #88	; 0x58
 800bb3c:	f000 80a3 	beq.w	800bc86 <_printf_i+0x16e>
 800bb40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bb48:	e03a      	b.n	800bbc0 <_printf_i+0xa8>
 800bb4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bb4e:	2b15      	cmp	r3, #21
 800bb50:	d8f6      	bhi.n	800bb40 <_printf_i+0x28>
 800bb52:	a101      	add	r1, pc, #4	; (adr r1, 800bb58 <_printf_i+0x40>)
 800bb54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bb58:	0800bbb1 	.word	0x0800bbb1
 800bb5c:	0800bbc5 	.word	0x0800bbc5
 800bb60:	0800bb41 	.word	0x0800bb41
 800bb64:	0800bb41 	.word	0x0800bb41
 800bb68:	0800bb41 	.word	0x0800bb41
 800bb6c:	0800bb41 	.word	0x0800bb41
 800bb70:	0800bbc5 	.word	0x0800bbc5
 800bb74:	0800bb41 	.word	0x0800bb41
 800bb78:	0800bb41 	.word	0x0800bb41
 800bb7c:	0800bb41 	.word	0x0800bb41
 800bb80:	0800bb41 	.word	0x0800bb41
 800bb84:	0800bcd1 	.word	0x0800bcd1
 800bb88:	0800bbf5 	.word	0x0800bbf5
 800bb8c:	0800bcb3 	.word	0x0800bcb3
 800bb90:	0800bb41 	.word	0x0800bb41
 800bb94:	0800bb41 	.word	0x0800bb41
 800bb98:	0800bcf3 	.word	0x0800bcf3
 800bb9c:	0800bb41 	.word	0x0800bb41
 800bba0:	0800bbf5 	.word	0x0800bbf5
 800bba4:	0800bb41 	.word	0x0800bb41
 800bba8:	0800bb41 	.word	0x0800bb41
 800bbac:	0800bcbb 	.word	0x0800bcbb
 800bbb0:	682b      	ldr	r3, [r5, #0]
 800bbb2:	1d1a      	adds	r2, r3, #4
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	602a      	str	r2, [r5, #0]
 800bbb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bbbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	e0a3      	b.n	800bd0c <_printf_i+0x1f4>
 800bbc4:	6820      	ldr	r0, [r4, #0]
 800bbc6:	6829      	ldr	r1, [r5, #0]
 800bbc8:	0606      	lsls	r6, r0, #24
 800bbca:	f101 0304 	add.w	r3, r1, #4
 800bbce:	d50a      	bpl.n	800bbe6 <_printf_i+0xce>
 800bbd0:	680e      	ldr	r6, [r1, #0]
 800bbd2:	602b      	str	r3, [r5, #0]
 800bbd4:	2e00      	cmp	r6, #0
 800bbd6:	da03      	bge.n	800bbe0 <_printf_i+0xc8>
 800bbd8:	232d      	movs	r3, #45	; 0x2d
 800bbda:	4276      	negs	r6, r6
 800bbdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbe0:	485e      	ldr	r0, [pc, #376]	; (800bd5c <_printf_i+0x244>)
 800bbe2:	230a      	movs	r3, #10
 800bbe4:	e019      	b.n	800bc1a <_printf_i+0x102>
 800bbe6:	680e      	ldr	r6, [r1, #0]
 800bbe8:	602b      	str	r3, [r5, #0]
 800bbea:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bbee:	bf18      	it	ne
 800bbf0:	b236      	sxthne	r6, r6
 800bbf2:	e7ef      	b.n	800bbd4 <_printf_i+0xbc>
 800bbf4:	682b      	ldr	r3, [r5, #0]
 800bbf6:	6820      	ldr	r0, [r4, #0]
 800bbf8:	1d19      	adds	r1, r3, #4
 800bbfa:	6029      	str	r1, [r5, #0]
 800bbfc:	0601      	lsls	r1, r0, #24
 800bbfe:	d501      	bpl.n	800bc04 <_printf_i+0xec>
 800bc00:	681e      	ldr	r6, [r3, #0]
 800bc02:	e002      	b.n	800bc0a <_printf_i+0xf2>
 800bc04:	0646      	lsls	r6, r0, #25
 800bc06:	d5fb      	bpl.n	800bc00 <_printf_i+0xe8>
 800bc08:	881e      	ldrh	r6, [r3, #0]
 800bc0a:	4854      	ldr	r0, [pc, #336]	; (800bd5c <_printf_i+0x244>)
 800bc0c:	2f6f      	cmp	r7, #111	; 0x6f
 800bc0e:	bf0c      	ite	eq
 800bc10:	2308      	moveq	r3, #8
 800bc12:	230a      	movne	r3, #10
 800bc14:	2100      	movs	r1, #0
 800bc16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bc1a:	6865      	ldr	r5, [r4, #4]
 800bc1c:	60a5      	str	r5, [r4, #8]
 800bc1e:	2d00      	cmp	r5, #0
 800bc20:	bfa2      	ittt	ge
 800bc22:	6821      	ldrge	r1, [r4, #0]
 800bc24:	f021 0104 	bicge.w	r1, r1, #4
 800bc28:	6021      	strge	r1, [r4, #0]
 800bc2a:	b90e      	cbnz	r6, 800bc30 <_printf_i+0x118>
 800bc2c:	2d00      	cmp	r5, #0
 800bc2e:	d04d      	beq.n	800bccc <_printf_i+0x1b4>
 800bc30:	4615      	mov	r5, r2
 800bc32:	fbb6 f1f3 	udiv	r1, r6, r3
 800bc36:	fb03 6711 	mls	r7, r3, r1, r6
 800bc3a:	5dc7      	ldrb	r7, [r0, r7]
 800bc3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bc40:	4637      	mov	r7, r6
 800bc42:	42bb      	cmp	r3, r7
 800bc44:	460e      	mov	r6, r1
 800bc46:	d9f4      	bls.n	800bc32 <_printf_i+0x11a>
 800bc48:	2b08      	cmp	r3, #8
 800bc4a:	d10b      	bne.n	800bc64 <_printf_i+0x14c>
 800bc4c:	6823      	ldr	r3, [r4, #0]
 800bc4e:	07de      	lsls	r6, r3, #31
 800bc50:	d508      	bpl.n	800bc64 <_printf_i+0x14c>
 800bc52:	6923      	ldr	r3, [r4, #16]
 800bc54:	6861      	ldr	r1, [r4, #4]
 800bc56:	4299      	cmp	r1, r3
 800bc58:	bfde      	ittt	le
 800bc5a:	2330      	movle	r3, #48	; 0x30
 800bc5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bc60:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800bc64:	1b52      	subs	r2, r2, r5
 800bc66:	6122      	str	r2, [r4, #16]
 800bc68:	f8cd a000 	str.w	sl, [sp]
 800bc6c:	464b      	mov	r3, r9
 800bc6e:	aa03      	add	r2, sp, #12
 800bc70:	4621      	mov	r1, r4
 800bc72:	4640      	mov	r0, r8
 800bc74:	f7ff fee2 	bl	800ba3c <_printf_common>
 800bc78:	3001      	adds	r0, #1
 800bc7a:	d14c      	bne.n	800bd16 <_printf_i+0x1fe>
 800bc7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc80:	b004      	add	sp, #16
 800bc82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc86:	4835      	ldr	r0, [pc, #212]	; (800bd5c <_printf_i+0x244>)
 800bc88:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bc8c:	6829      	ldr	r1, [r5, #0]
 800bc8e:	6823      	ldr	r3, [r4, #0]
 800bc90:	f851 6b04 	ldr.w	r6, [r1], #4
 800bc94:	6029      	str	r1, [r5, #0]
 800bc96:	061d      	lsls	r5, r3, #24
 800bc98:	d514      	bpl.n	800bcc4 <_printf_i+0x1ac>
 800bc9a:	07df      	lsls	r7, r3, #31
 800bc9c:	bf44      	itt	mi
 800bc9e:	f043 0320 	orrmi.w	r3, r3, #32
 800bca2:	6023      	strmi	r3, [r4, #0]
 800bca4:	b91e      	cbnz	r6, 800bcae <_printf_i+0x196>
 800bca6:	6823      	ldr	r3, [r4, #0]
 800bca8:	f023 0320 	bic.w	r3, r3, #32
 800bcac:	6023      	str	r3, [r4, #0]
 800bcae:	2310      	movs	r3, #16
 800bcb0:	e7b0      	b.n	800bc14 <_printf_i+0xfc>
 800bcb2:	6823      	ldr	r3, [r4, #0]
 800bcb4:	f043 0320 	orr.w	r3, r3, #32
 800bcb8:	6023      	str	r3, [r4, #0]
 800bcba:	2378      	movs	r3, #120	; 0x78
 800bcbc:	4828      	ldr	r0, [pc, #160]	; (800bd60 <_printf_i+0x248>)
 800bcbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bcc2:	e7e3      	b.n	800bc8c <_printf_i+0x174>
 800bcc4:	0659      	lsls	r1, r3, #25
 800bcc6:	bf48      	it	mi
 800bcc8:	b2b6      	uxthmi	r6, r6
 800bcca:	e7e6      	b.n	800bc9a <_printf_i+0x182>
 800bccc:	4615      	mov	r5, r2
 800bcce:	e7bb      	b.n	800bc48 <_printf_i+0x130>
 800bcd0:	682b      	ldr	r3, [r5, #0]
 800bcd2:	6826      	ldr	r6, [r4, #0]
 800bcd4:	6961      	ldr	r1, [r4, #20]
 800bcd6:	1d18      	adds	r0, r3, #4
 800bcd8:	6028      	str	r0, [r5, #0]
 800bcda:	0635      	lsls	r5, r6, #24
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	d501      	bpl.n	800bce4 <_printf_i+0x1cc>
 800bce0:	6019      	str	r1, [r3, #0]
 800bce2:	e002      	b.n	800bcea <_printf_i+0x1d2>
 800bce4:	0670      	lsls	r0, r6, #25
 800bce6:	d5fb      	bpl.n	800bce0 <_printf_i+0x1c8>
 800bce8:	8019      	strh	r1, [r3, #0]
 800bcea:	2300      	movs	r3, #0
 800bcec:	6123      	str	r3, [r4, #16]
 800bcee:	4615      	mov	r5, r2
 800bcf0:	e7ba      	b.n	800bc68 <_printf_i+0x150>
 800bcf2:	682b      	ldr	r3, [r5, #0]
 800bcf4:	1d1a      	adds	r2, r3, #4
 800bcf6:	602a      	str	r2, [r5, #0]
 800bcf8:	681d      	ldr	r5, [r3, #0]
 800bcfa:	6862      	ldr	r2, [r4, #4]
 800bcfc:	2100      	movs	r1, #0
 800bcfe:	4628      	mov	r0, r5
 800bd00:	f7f4 fa66 	bl	80001d0 <memchr>
 800bd04:	b108      	cbz	r0, 800bd0a <_printf_i+0x1f2>
 800bd06:	1b40      	subs	r0, r0, r5
 800bd08:	6060      	str	r0, [r4, #4]
 800bd0a:	6863      	ldr	r3, [r4, #4]
 800bd0c:	6123      	str	r3, [r4, #16]
 800bd0e:	2300      	movs	r3, #0
 800bd10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd14:	e7a8      	b.n	800bc68 <_printf_i+0x150>
 800bd16:	6923      	ldr	r3, [r4, #16]
 800bd18:	462a      	mov	r2, r5
 800bd1a:	4649      	mov	r1, r9
 800bd1c:	4640      	mov	r0, r8
 800bd1e:	47d0      	blx	sl
 800bd20:	3001      	adds	r0, #1
 800bd22:	d0ab      	beq.n	800bc7c <_printf_i+0x164>
 800bd24:	6823      	ldr	r3, [r4, #0]
 800bd26:	079b      	lsls	r3, r3, #30
 800bd28:	d413      	bmi.n	800bd52 <_printf_i+0x23a>
 800bd2a:	68e0      	ldr	r0, [r4, #12]
 800bd2c:	9b03      	ldr	r3, [sp, #12]
 800bd2e:	4298      	cmp	r0, r3
 800bd30:	bfb8      	it	lt
 800bd32:	4618      	movlt	r0, r3
 800bd34:	e7a4      	b.n	800bc80 <_printf_i+0x168>
 800bd36:	2301      	movs	r3, #1
 800bd38:	4632      	mov	r2, r6
 800bd3a:	4649      	mov	r1, r9
 800bd3c:	4640      	mov	r0, r8
 800bd3e:	47d0      	blx	sl
 800bd40:	3001      	adds	r0, #1
 800bd42:	d09b      	beq.n	800bc7c <_printf_i+0x164>
 800bd44:	3501      	adds	r5, #1
 800bd46:	68e3      	ldr	r3, [r4, #12]
 800bd48:	9903      	ldr	r1, [sp, #12]
 800bd4a:	1a5b      	subs	r3, r3, r1
 800bd4c:	42ab      	cmp	r3, r5
 800bd4e:	dcf2      	bgt.n	800bd36 <_printf_i+0x21e>
 800bd50:	e7eb      	b.n	800bd2a <_printf_i+0x212>
 800bd52:	2500      	movs	r5, #0
 800bd54:	f104 0619 	add.w	r6, r4, #25
 800bd58:	e7f5      	b.n	800bd46 <_printf_i+0x22e>
 800bd5a:	bf00      	nop
 800bd5c:	0800c773 	.word	0x0800c773
 800bd60:	0800c784 	.word	0x0800c784

0800bd64 <_sbrk_r>:
 800bd64:	b538      	push	{r3, r4, r5, lr}
 800bd66:	4d06      	ldr	r5, [pc, #24]	; (800bd80 <_sbrk_r+0x1c>)
 800bd68:	2300      	movs	r3, #0
 800bd6a:	4604      	mov	r4, r0
 800bd6c:	4608      	mov	r0, r1
 800bd6e:	602b      	str	r3, [r5, #0]
 800bd70:	f7f5 fd66 	bl	8001840 <_sbrk>
 800bd74:	1c43      	adds	r3, r0, #1
 800bd76:	d102      	bne.n	800bd7e <_sbrk_r+0x1a>
 800bd78:	682b      	ldr	r3, [r5, #0]
 800bd7a:	b103      	cbz	r3, 800bd7e <_sbrk_r+0x1a>
 800bd7c:	6023      	str	r3, [r4, #0]
 800bd7e:	bd38      	pop	{r3, r4, r5, pc}
 800bd80:	20001824 	.word	0x20001824

0800bd84 <__swbuf_r>:
 800bd84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd86:	460e      	mov	r6, r1
 800bd88:	4614      	mov	r4, r2
 800bd8a:	4605      	mov	r5, r0
 800bd8c:	b118      	cbz	r0, 800bd96 <__swbuf_r+0x12>
 800bd8e:	6983      	ldr	r3, [r0, #24]
 800bd90:	b90b      	cbnz	r3, 800bd96 <__swbuf_r+0x12>
 800bd92:	f000 f9d9 	bl	800c148 <__sinit>
 800bd96:	4b21      	ldr	r3, [pc, #132]	; (800be1c <__swbuf_r+0x98>)
 800bd98:	429c      	cmp	r4, r3
 800bd9a:	d12b      	bne.n	800bdf4 <__swbuf_r+0x70>
 800bd9c:	686c      	ldr	r4, [r5, #4]
 800bd9e:	69a3      	ldr	r3, [r4, #24]
 800bda0:	60a3      	str	r3, [r4, #8]
 800bda2:	89a3      	ldrh	r3, [r4, #12]
 800bda4:	071a      	lsls	r2, r3, #28
 800bda6:	d52f      	bpl.n	800be08 <__swbuf_r+0x84>
 800bda8:	6923      	ldr	r3, [r4, #16]
 800bdaa:	b36b      	cbz	r3, 800be08 <__swbuf_r+0x84>
 800bdac:	6923      	ldr	r3, [r4, #16]
 800bdae:	6820      	ldr	r0, [r4, #0]
 800bdb0:	1ac0      	subs	r0, r0, r3
 800bdb2:	6963      	ldr	r3, [r4, #20]
 800bdb4:	b2f6      	uxtb	r6, r6
 800bdb6:	4283      	cmp	r3, r0
 800bdb8:	4637      	mov	r7, r6
 800bdba:	dc04      	bgt.n	800bdc6 <__swbuf_r+0x42>
 800bdbc:	4621      	mov	r1, r4
 800bdbe:	4628      	mov	r0, r5
 800bdc0:	f000 f92e 	bl	800c020 <_fflush_r>
 800bdc4:	bb30      	cbnz	r0, 800be14 <__swbuf_r+0x90>
 800bdc6:	68a3      	ldr	r3, [r4, #8]
 800bdc8:	3b01      	subs	r3, #1
 800bdca:	60a3      	str	r3, [r4, #8]
 800bdcc:	6823      	ldr	r3, [r4, #0]
 800bdce:	1c5a      	adds	r2, r3, #1
 800bdd0:	6022      	str	r2, [r4, #0]
 800bdd2:	701e      	strb	r6, [r3, #0]
 800bdd4:	6963      	ldr	r3, [r4, #20]
 800bdd6:	3001      	adds	r0, #1
 800bdd8:	4283      	cmp	r3, r0
 800bdda:	d004      	beq.n	800bde6 <__swbuf_r+0x62>
 800bddc:	89a3      	ldrh	r3, [r4, #12]
 800bdde:	07db      	lsls	r3, r3, #31
 800bde0:	d506      	bpl.n	800bdf0 <__swbuf_r+0x6c>
 800bde2:	2e0a      	cmp	r6, #10
 800bde4:	d104      	bne.n	800bdf0 <__swbuf_r+0x6c>
 800bde6:	4621      	mov	r1, r4
 800bde8:	4628      	mov	r0, r5
 800bdea:	f000 f919 	bl	800c020 <_fflush_r>
 800bdee:	b988      	cbnz	r0, 800be14 <__swbuf_r+0x90>
 800bdf0:	4638      	mov	r0, r7
 800bdf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdf4:	4b0a      	ldr	r3, [pc, #40]	; (800be20 <__swbuf_r+0x9c>)
 800bdf6:	429c      	cmp	r4, r3
 800bdf8:	d101      	bne.n	800bdfe <__swbuf_r+0x7a>
 800bdfa:	68ac      	ldr	r4, [r5, #8]
 800bdfc:	e7cf      	b.n	800bd9e <__swbuf_r+0x1a>
 800bdfe:	4b09      	ldr	r3, [pc, #36]	; (800be24 <__swbuf_r+0xa0>)
 800be00:	429c      	cmp	r4, r3
 800be02:	bf08      	it	eq
 800be04:	68ec      	ldreq	r4, [r5, #12]
 800be06:	e7ca      	b.n	800bd9e <__swbuf_r+0x1a>
 800be08:	4621      	mov	r1, r4
 800be0a:	4628      	mov	r0, r5
 800be0c:	f000 f80c 	bl	800be28 <__swsetup_r>
 800be10:	2800      	cmp	r0, #0
 800be12:	d0cb      	beq.n	800bdac <__swbuf_r+0x28>
 800be14:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800be18:	e7ea      	b.n	800bdf0 <__swbuf_r+0x6c>
 800be1a:	bf00      	nop
 800be1c:	0800c7b8 	.word	0x0800c7b8
 800be20:	0800c7d8 	.word	0x0800c7d8
 800be24:	0800c798 	.word	0x0800c798

0800be28 <__swsetup_r>:
 800be28:	4b32      	ldr	r3, [pc, #200]	; (800bef4 <__swsetup_r+0xcc>)
 800be2a:	b570      	push	{r4, r5, r6, lr}
 800be2c:	681d      	ldr	r5, [r3, #0]
 800be2e:	4606      	mov	r6, r0
 800be30:	460c      	mov	r4, r1
 800be32:	b125      	cbz	r5, 800be3e <__swsetup_r+0x16>
 800be34:	69ab      	ldr	r3, [r5, #24]
 800be36:	b913      	cbnz	r3, 800be3e <__swsetup_r+0x16>
 800be38:	4628      	mov	r0, r5
 800be3a:	f000 f985 	bl	800c148 <__sinit>
 800be3e:	4b2e      	ldr	r3, [pc, #184]	; (800bef8 <__swsetup_r+0xd0>)
 800be40:	429c      	cmp	r4, r3
 800be42:	d10f      	bne.n	800be64 <__swsetup_r+0x3c>
 800be44:	686c      	ldr	r4, [r5, #4]
 800be46:	89a3      	ldrh	r3, [r4, #12]
 800be48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be4c:	0719      	lsls	r1, r3, #28
 800be4e:	d42c      	bmi.n	800beaa <__swsetup_r+0x82>
 800be50:	06dd      	lsls	r5, r3, #27
 800be52:	d411      	bmi.n	800be78 <__swsetup_r+0x50>
 800be54:	2309      	movs	r3, #9
 800be56:	6033      	str	r3, [r6, #0]
 800be58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800be5c:	81a3      	strh	r3, [r4, #12]
 800be5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be62:	e03e      	b.n	800bee2 <__swsetup_r+0xba>
 800be64:	4b25      	ldr	r3, [pc, #148]	; (800befc <__swsetup_r+0xd4>)
 800be66:	429c      	cmp	r4, r3
 800be68:	d101      	bne.n	800be6e <__swsetup_r+0x46>
 800be6a:	68ac      	ldr	r4, [r5, #8]
 800be6c:	e7eb      	b.n	800be46 <__swsetup_r+0x1e>
 800be6e:	4b24      	ldr	r3, [pc, #144]	; (800bf00 <__swsetup_r+0xd8>)
 800be70:	429c      	cmp	r4, r3
 800be72:	bf08      	it	eq
 800be74:	68ec      	ldreq	r4, [r5, #12]
 800be76:	e7e6      	b.n	800be46 <__swsetup_r+0x1e>
 800be78:	0758      	lsls	r0, r3, #29
 800be7a:	d512      	bpl.n	800bea2 <__swsetup_r+0x7a>
 800be7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be7e:	b141      	cbz	r1, 800be92 <__swsetup_r+0x6a>
 800be80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be84:	4299      	cmp	r1, r3
 800be86:	d002      	beq.n	800be8e <__swsetup_r+0x66>
 800be88:	4630      	mov	r0, r6
 800be8a:	f7ff fa41 	bl	800b310 <_free_r>
 800be8e:	2300      	movs	r3, #0
 800be90:	6363      	str	r3, [r4, #52]	; 0x34
 800be92:	89a3      	ldrh	r3, [r4, #12]
 800be94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800be98:	81a3      	strh	r3, [r4, #12]
 800be9a:	2300      	movs	r3, #0
 800be9c:	6063      	str	r3, [r4, #4]
 800be9e:	6923      	ldr	r3, [r4, #16]
 800bea0:	6023      	str	r3, [r4, #0]
 800bea2:	89a3      	ldrh	r3, [r4, #12]
 800bea4:	f043 0308 	orr.w	r3, r3, #8
 800bea8:	81a3      	strh	r3, [r4, #12]
 800beaa:	6923      	ldr	r3, [r4, #16]
 800beac:	b94b      	cbnz	r3, 800bec2 <__swsetup_r+0x9a>
 800beae:	89a3      	ldrh	r3, [r4, #12]
 800beb0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800beb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800beb8:	d003      	beq.n	800bec2 <__swsetup_r+0x9a>
 800beba:	4621      	mov	r1, r4
 800bebc:	4630      	mov	r0, r6
 800bebe:	f000 fa09 	bl	800c2d4 <__smakebuf_r>
 800bec2:	89a0      	ldrh	r0, [r4, #12]
 800bec4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bec8:	f010 0301 	ands.w	r3, r0, #1
 800becc:	d00a      	beq.n	800bee4 <__swsetup_r+0xbc>
 800bece:	2300      	movs	r3, #0
 800bed0:	60a3      	str	r3, [r4, #8]
 800bed2:	6963      	ldr	r3, [r4, #20]
 800bed4:	425b      	negs	r3, r3
 800bed6:	61a3      	str	r3, [r4, #24]
 800bed8:	6923      	ldr	r3, [r4, #16]
 800beda:	b943      	cbnz	r3, 800beee <__swsetup_r+0xc6>
 800bedc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bee0:	d1ba      	bne.n	800be58 <__swsetup_r+0x30>
 800bee2:	bd70      	pop	{r4, r5, r6, pc}
 800bee4:	0781      	lsls	r1, r0, #30
 800bee6:	bf58      	it	pl
 800bee8:	6963      	ldrpl	r3, [r4, #20]
 800beea:	60a3      	str	r3, [r4, #8]
 800beec:	e7f4      	b.n	800bed8 <__swsetup_r+0xb0>
 800beee:	2000      	movs	r0, #0
 800bef0:	e7f7      	b.n	800bee2 <__swsetup_r+0xba>
 800bef2:	bf00      	nop
 800bef4:	20000100 	.word	0x20000100
 800bef8:	0800c7b8 	.word	0x0800c7b8
 800befc:	0800c7d8 	.word	0x0800c7d8
 800bf00:	0800c798 	.word	0x0800c798

0800bf04 <abort>:
 800bf04:	b508      	push	{r3, lr}
 800bf06:	2006      	movs	r0, #6
 800bf08:	f000 fab0 	bl	800c46c <raise>
 800bf0c:	2001      	movs	r0, #1
 800bf0e:	f7f5 fc1f 	bl	8001750 <_exit>
	...

0800bf14 <__sflush_r>:
 800bf14:	898a      	ldrh	r2, [r1, #12]
 800bf16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf1a:	4605      	mov	r5, r0
 800bf1c:	0710      	lsls	r0, r2, #28
 800bf1e:	460c      	mov	r4, r1
 800bf20:	d458      	bmi.n	800bfd4 <__sflush_r+0xc0>
 800bf22:	684b      	ldr	r3, [r1, #4]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	dc05      	bgt.n	800bf34 <__sflush_r+0x20>
 800bf28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	dc02      	bgt.n	800bf34 <__sflush_r+0x20>
 800bf2e:	2000      	movs	r0, #0
 800bf30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf36:	2e00      	cmp	r6, #0
 800bf38:	d0f9      	beq.n	800bf2e <__sflush_r+0x1a>
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bf40:	682f      	ldr	r7, [r5, #0]
 800bf42:	602b      	str	r3, [r5, #0]
 800bf44:	d032      	beq.n	800bfac <__sflush_r+0x98>
 800bf46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bf48:	89a3      	ldrh	r3, [r4, #12]
 800bf4a:	075a      	lsls	r2, r3, #29
 800bf4c:	d505      	bpl.n	800bf5a <__sflush_r+0x46>
 800bf4e:	6863      	ldr	r3, [r4, #4]
 800bf50:	1ac0      	subs	r0, r0, r3
 800bf52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bf54:	b10b      	cbz	r3, 800bf5a <__sflush_r+0x46>
 800bf56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf58:	1ac0      	subs	r0, r0, r3
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	4602      	mov	r2, r0
 800bf5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf60:	6a21      	ldr	r1, [r4, #32]
 800bf62:	4628      	mov	r0, r5
 800bf64:	47b0      	blx	r6
 800bf66:	1c43      	adds	r3, r0, #1
 800bf68:	89a3      	ldrh	r3, [r4, #12]
 800bf6a:	d106      	bne.n	800bf7a <__sflush_r+0x66>
 800bf6c:	6829      	ldr	r1, [r5, #0]
 800bf6e:	291d      	cmp	r1, #29
 800bf70:	d82c      	bhi.n	800bfcc <__sflush_r+0xb8>
 800bf72:	4a2a      	ldr	r2, [pc, #168]	; (800c01c <__sflush_r+0x108>)
 800bf74:	40ca      	lsrs	r2, r1
 800bf76:	07d6      	lsls	r6, r2, #31
 800bf78:	d528      	bpl.n	800bfcc <__sflush_r+0xb8>
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	6062      	str	r2, [r4, #4]
 800bf7e:	04d9      	lsls	r1, r3, #19
 800bf80:	6922      	ldr	r2, [r4, #16]
 800bf82:	6022      	str	r2, [r4, #0]
 800bf84:	d504      	bpl.n	800bf90 <__sflush_r+0x7c>
 800bf86:	1c42      	adds	r2, r0, #1
 800bf88:	d101      	bne.n	800bf8e <__sflush_r+0x7a>
 800bf8a:	682b      	ldr	r3, [r5, #0]
 800bf8c:	b903      	cbnz	r3, 800bf90 <__sflush_r+0x7c>
 800bf8e:	6560      	str	r0, [r4, #84]	; 0x54
 800bf90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf92:	602f      	str	r7, [r5, #0]
 800bf94:	2900      	cmp	r1, #0
 800bf96:	d0ca      	beq.n	800bf2e <__sflush_r+0x1a>
 800bf98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf9c:	4299      	cmp	r1, r3
 800bf9e:	d002      	beq.n	800bfa6 <__sflush_r+0x92>
 800bfa0:	4628      	mov	r0, r5
 800bfa2:	f7ff f9b5 	bl	800b310 <_free_r>
 800bfa6:	2000      	movs	r0, #0
 800bfa8:	6360      	str	r0, [r4, #52]	; 0x34
 800bfaa:	e7c1      	b.n	800bf30 <__sflush_r+0x1c>
 800bfac:	6a21      	ldr	r1, [r4, #32]
 800bfae:	2301      	movs	r3, #1
 800bfb0:	4628      	mov	r0, r5
 800bfb2:	47b0      	blx	r6
 800bfb4:	1c41      	adds	r1, r0, #1
 800bfb6:	d1c7      	bne.n	800bf48 <__sflush_r+0x34>
 800bfb8:	682b      	ldr	r3, [r5, #0]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d0c4      	beq.n	800bf48 <__sflush_r+0x34>
 800bfbe:	2b1d      	cmp	r3, #29
 800bfc0:	d001      	beq.n	800bfc6 <__sflush_r+0xb2>
 800bfc2:	2b16      	cmp	r3, #22
 800bfc4:	d101      	bne.n	800bfca <__sflush_r+0xb6>
 800bfc6:	602f      	str	r7, [r5, #0]
 800bfc8:	e7b1      	b.n	800bf2e <__sflush_r+0x1a>
 800bfca:	89a3      	ldrh	r3, [r4, #12]
 800bfcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfd0:	81a3      	strh	r3, [r4, #12]
 800bfd2:	e7ad      	b.n	800bf30 <__sflush_r+0x1c>
 800bfd4:	690f      	ldr	r7, [r1, #16]
 800bfd6:	2f00      	cmp	r7, #0
 800bfd8:	d0a9      	beq.n	800bf2e <__sflush_r+0x1a>
 800bfda:	0793      	lsls	r3, r2, #30
 800bfdc:	680e      	ldr	r6, [r1, #0]
 800bfde:	bf08      	it	eq
 800bfe0:	694b      	ldreq	r3, [r1, #20]
 800bfe2:	600f      	str	r7, [r1, #0]
 800bfe4:	bf18      	it	ne
 800bfe6:	2300      	movne	r3, #0
 800bfe8:	eba6 0807 	sub.w	r8, r6, r7
 800bfec:	608b      	str	r3, [r1, #8]
 800bfee:	f1b8 0f00 	cmp.w	r8, #0
 800bff2:	dd9c      	ble.n	800bf2e <__sflush_r+0x1a>
 800bff4:	6a21      	ldr	r1, [r4, #32]
 800bff6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bff8:	4643      	mov	r3, r8
 800bffa:	463a      	mov	r2, r7
 800bffc:	4628      	mov	r0, r5
 800bffe:	47b0      	blx	r6
 800c000:	2800      	cmp	r0, #0
 800c002:	dc06      	bgt.n	800c012 <__sflush_r+0xfe>
 800c004:	89a3      	ldrh	r3, [r4, #12]
 800c006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c00a:	81a3      	strh	r3, [r4, #12]
 800c00c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c010:	e78e      	b.n	800bf30 <__sflush_r+0x1c>
 800c012:	4407      	add	r7, r0
 800c014:	eba8 0800 	sub.w	r8, r8, r0
 800c018:	e7e9      	b.n	800bfee <__sflush_r+0xda>
 800c01a:	bf00      	nop
 800c01c:	20400001 	.word	0x20400001

0800c020 <_fflush_r>:
 800c020:	b538      	push	{r3, r4, r5, lr}
 800c022:	690b      	ldr	r3, [r1, #16]
 800c024:	4605      	mov	r5, r0
 800c026:	460c      	mov	r4, r1
 800c028:	b913      	cbnz	r3, 800c030 <_fflush_r+0x10>
 800c02a:	2500      	movs	r5, #0
 800c02c:	4628      	mov	r0, r5
 800c02e:	bd38      	pop	{r3, r4, r5, pc}
 800c030:	b118      	cbz	r0, 800c03a <_fflush_r+0x1a>
 800c032:	6983      	ldr	r3, [r0, #24]
 800c034:	b90b      	cbnz	r3, 800c03a <_fflush_r+0x1a>
 800c036:	f000 f887 	bl	800c148 <__sinit>
 800c03a:	4b14      	ldr	r3, [pc, #80]	; (800c08c <_fflush_r+0x6c>)
 800c03c:	429c      	cmp	r4, r3
 800c03e:	d11b      	bne.n	800c078 <_fflush_r+0x58>
 800c040:	686c      	ldr	r4, [r5, #4]
 800c042:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d0ef      	beq.n	800c02a <_fflush_r+0xa>
 800c04a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c04c:	07d0      	lsls	r0, r2, #31
 800c04e:	d404      	bmi.n	800c05a <_fflush_r+0x3a>
 800c050:	0599      	lsls	r1, r3, #22
 800c052:	d402      	bmi.n	800c05a <_fflush_r+0x3a>
 800c054:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c056:	f000 f915 	bl	800c284 <__retarget_lock_acquire_recursive>
 800c05a:	4628      	mov	r0, r5
 800c05c:	4621      	mov	r1, r4
 800c05e:	f7ff ff59 	bl	800bf14 <__sflush_r>
 800c062:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c064:	07da      	lsls	r2, r3, #31
 800c066:	4605      	mov	r5, r0
 800c068:	d4e0      	bmi.n	800c02c <_fflush_r+0xc>
 800c06a:	89a3      	ldrh	r3, [r4, #12]
 800c06c:	059b      	lsls	r3, r3, #22
 800c06e:	d4dd      	bmi.n	800c02c <_fflush_r+0xc>
 800c070:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c072:	f000 f908 	bl	800c286 <__retarget_lock_release_recursive>
 800c076:	e7d9      	b.n	800c02c <_fflush_r+0xc>
 800c078:	4b05      	ldr	r3, [pc, #20]	; (800c090 <_fflush_r+0x70>)
 800c07a:	429c      	cmp	r4, r3
 800c07c:	d101      	bne.n	800c082 <_fflush_r+0x62>
 800c07e:	68ac      	ldr	r4, [r5, #8]
 800c080:	e7df      	b.n	800c042 <_fflush_r+0x22>
 800c082:	4b04      	ldr	r3, [pc, #16]	; (800c094 <_fflush_r+0x74>)
 800c084:	429c      	cmp	r4, r3
 800c086:	bf08      	it	eq
 800c088:	68ec      	ldreq	r4, [r5, #12]
 800c08a:	e7da      	b.n	800c042 <_fflush_r+0x22>
 800c08c:	0800c7b8 	.word	0x0800c7b8
 800c090:	0800c7d8 	.word	0x0800c7d8
 800c094:	0800c798 	.word	0x0800c798

0800c098 <std>:
 800c098:	2300      	movs	r3, #0
 800c09a:	b510      	push	{r4, lr}
 800c09c:	4604      	mov	r4, r0
 800c09e:	e9c0 3300 	strd	r3, r3, [r0]
 800c0a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c0a6:	6083      	str	r3, [r0, #8]
 800c0a8:	8181      	strh	r1, [r0, #12]
 800c0aa:	6643      	str	r3, [r0, #100]	; 0x64
 800c0ac:	81c2      	strh	r2, [r0, #14]
 800c0ae:	6183      	str	r3, [r0, #24]
 800c0b0:	4619      	mov	r1, r3
 800c0b2:	2208      	movs	r2, #8
 800c0b4:	305c      	adds	r0, #92	; 0x5c
 800c0b6:	f7ff f88d 	bl	800b1d4 <memset>
 800c0ba:	4b05      	ldr	r3, [pc, #20]	; (800c0d0 <std+0x38>)
 800c0bc:	6263      	str	r3, [r4, #36]	; 0x24
 800c0be:	4b05      	ldr	r3, [pc, #20]	; (800c0d4 <std+0x3c>)
 800c0c0:	62a3      	str	r3, [r4, #40]	; 0x28
 800c0c2:	4b05      	ldr	r3, [pc, #20]	; (800c0d8 <std+0x40>)
 800c0c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c0c6:	4b05      	ldr	r3, [pc, #20]	; (800c0dc <std+0x44>)
 800c0c8:	6224      	str	r4, [r4, #32]
 800c0ca:	6323      	str	r3, [r4, #48]	; 0x30
 800c0cc:	bd10      	pop	{r4, pc}
 800c0ce:	bf00      	nop
 800c0d0:	0800c4a5 	.word	0x0800c4a5
 800c0d4:	0800c4c7 	.word	0x0800c4c7
 800c0d8:	0800c4ff 	.word	0x0800c4ff
 800c0dc:	0800c523 	.word	0x0800c523

0800c0e0 <_cleanup_r>:
 800c0e0:	4901      	ldr	r1, [pc, #4]	; (800c0e8 <_cleanup_r+0x8>)
 800c0e2:	f000 b8af 	b.w	800c244 <_fwalk_reent>
 800c0e6:	bf00      	nop
 800c0e8:	0800c021 	.word	0x0800c021

0800c0ec <__sfmoreglue>:
 800c0ec:	b570      	push	{r4, r5, r6, lr}
 800c0ee:	2268      	movs	r2, #104	; 0x68
 800c0f0:	1e4d      	subs	r5, r1, #1
 800c0f2:	4355      	muls	r5, r2
 800c0f4:	460e      	mov	r6, r1
 800c0f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c0fa:	f7ff f975 	bl	800b3e8 <_malloc_r>
 800c0fe:	4604      	mov	r4, r0
 800c100:	b140      	cbz	r0, 800c114 <__sfmoreglue+0x28>
 800c102:	2100      	movs	r1, #0
 800c104:	e9c0 1600 	strd	r1, r6, [r0]
 800c108:	300c      	adds	r0, #12
 800c10a:	60a0      	str	r0, [r4, #8]
 800c10c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c110:	f7ff f860 	bl	800b1d4 <memset>
 800c114:	4620      	mov	r0, r4
 800c116:	bd70      	pop	{r4, r5, r6, pc}

0800c118 <__sfp_lock_acquire>:
 800c118:	4801      	ldr	r0, [pc, #4]	; (800c120 <__sfp_lock_acquire+0x8>)
 800c11a:	f000 b8b3 	b.w	800c284 <__retarget_lock_acquire_recursive>
 800c11e:	bf00      	nop
 800c120:	20001821 	.word	0x20001821

0800c124 <__sfp_lock_release>:
 800c124:	4801      	ldr	r0, [pc, #4]	; (800c12c <__sfp_lock_release+0x8>)
 800c126:	f000 b8ae 	b.w	800c286 <__retarget_lock_release_recursive>
 800c12a:	bf00      	nop
 800c12c:	20001821 	.word	0x20001821

0800c130 <__sinit_lock_acquire>:
 800c130:	4801      	ldr	r0, [pc, #4]	; (800c138 <__sinit_lock_acquire+0x8>)
 800c132:	f000 b8a7 	b.w	800c284 <__retarget_lock_acquire_recursive>
 800c136:	bf00      	nop
 800c138:	20001822 	.word	0x20001822

0800c13c <__sinit_lock_release>:
 800c13c:	4801      	ldr	r0, [pc, #4]	; (800c144 <__sinit_lock_release+0x8>)
 800c13e:	f000 b8a2 	b.w	800c286 <__retarget_lock_release_recursive>
 800c142:	bf00      	nop
 800c144:	20001822 	.word	0x20001822

0800c148 <__sinit>:
 800c148:	b510      	push	{r4, lr}
 800c14a:	4604      	mov	r4, r0
 800c14c:	f7ff fff0 	bl	800c130 <__sinit_lock_acquire>
 800c150:	69a3      	ldr	r3, [r4, #24]
 800c152:	b11b      	cbz	r3, 800c15c <__sinit+0x14>
 800c154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c158:	f7ff bff0 	b.w	800c13c <__sinit_lock_release>
 800c15c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c160:	6523      	str	r3, [r4, #80]	; 0x50
 800c162:	4b13      	ldr	r3, [pc, #76]	; (800c1b0 <__sinit+0x68>)
 800c164:	4a13      	ldr	r2, [pc, #76]	; (800c1b4 <__sinit+0x6c>)
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	62a2      	str	r2, [r4, #40]	; 0x28
 800c16a:	42a3      	cmp	r3, r4
 800c16c:	bf04      	itt	eq
 800c16e:	2301      	moveq	r3, #1
 800c170:	61a3      	streq	r3, [r4, #24]
 800c172:	4620      	mov	r0, r4
 800c174:	f000 f820 	bl	800c1b8 <__sfp>
 800c178:	6060      	str	r0, [r4, #4]
 800c17a:	4620      	mov	r0, r4
 800c17c:	f000 f81c 	bl	800c1b8 <__sfp>
 800c180:	60a0      	str	r0, [r4, #8]
 800c182:	4620      	mov	r0, r4
 800c184:	f000 f818 	bl	800c1b8 <__sfp>
 800c188:	2200      	movs	r2, #0
 800c18a:	60e0      	str	r0, [r4, #12]
 800c18c:	2104      	movs	r1, #4
 800c18e:	6860      	ldr	r0, [r4, #4]
 800c190:	f7ff ff82 	bl	800c098 <std>
 800c194:	68a0      	ldr	r0, [r4, #8]
 800c196:	2201      	movs	r2, #1
 800c198:	2109      	movs	r1, #9
 800c19a:	f7ff ff7d 	bl	800c098 <std>
 800c19e:	68e0      	ldr	r0, [r4, #12]
 800c1a0:	2202      	movs	r2, #2
 800c1a2:	2112      	movs	r1, #18
 800c1a4:	f7ff ff78 	bl	800c098 <std>
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	61a3      	str	r3, [r4, #24]
 800c1ac:	e7d2      	b.n	800c154 <__sinit+0xc>
 800c1ae:	bf00      	nop
 800c1b0:	0800c6b0 	.word	0x0800c6b0
 800c1b4:	0800c0e1 	.word	0x0800c0e1

0800c1b8 <__sfp>:
 800c1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ba:	4607      	mov	r7, r0
 800c1bc:	f7ff ffac 	bl	800c118 <__sfp_lock_acquire>
 800c1c0:	4b1e      	ldr	r3, [pc, #120]	; (800c23c <__sfp+0x84>)
 800c1c2:	681e      	ldr	r6, [r3, #0]
 800c1c4:	69b3      	ldr	r3, [r6, #24]
 800c1c6:	b913      	cbnz	r3, 800c1ce <__sfp+0x16>
 800c1c8:	4630      	mov	r0, r6
 800c1ca:	f7ff ffbd 	bl	800c148 <__sinit>
 800c1ce:	3648      	adds	r6, #72	; 0x48
 800c1d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c1d4:	3b01      	subs	r3, #1
 800c1d6:	d503      	bpl.n	800c1e0 <__sfp+0x28>
 800c1d8:	6833      	ldr	r3, [r6, #0]
 800c1da:	b30b      	cbz	r3, 800c220 <__sfp+0x68>
 800c1dc:	6836      	ldr	r6, [r6, #0]
 800c1de:	e7f7      	b.n	800c1d0 <__sfp+0x18>
 800c1e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c1e4:	b9d5      	cbnz	r5, 800c21c <__sfp+0x64>
 800c1e6:	4b16      	ldr	r3, [pc, #88]	; (800c240 <__sfp+0x88>)
 800c1e8:	60e3      	str	r3, [r4, #12]
 800c1ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c1ee:	6665      	str	r5, [r4, #100]	; 0x64
 800c1f0:	f000 f847 	bl	800c282 <__retarget_lock_init_recursive>
 800c1f4:	f7ff ff96 	bl	800c124 <__sfp_lock_release>
 800c1f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c1fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c200:	6025      	str	r5, [r4, #0]
 800c202:	61a5      	str	r5, [r4, #24]
 800c204:	2208      	movs	r2, #8
 800c206:	4629      	mov	r1, r5
 800c208:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c20c:	f7fe ffe2 	bl	800b1d4 <memset>
 800c210:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c214:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c218:	4620      	mov	r0, r4
 800c21a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c21c:	3468      	adds	r4, #104	; 0x68
 800c21e:	e7d9      	b.n	800c1d4 <__sfp+0x1c>
 800c220:	2104      	movs	r1, #4
 800c222:	4638      	mov	r0, r7
 800c224:	f7ff ff62 	bl	800c0ec <__sfmoreglue>
 800c228:	4604      	mov	r4, r0
 800c22a:	6030      	str	r0, [r6, #0]
 800c22c:	2800      	cmp	r0, #0
 800c22e:	d1d5      	bne.n	800c1dc <__sfp+0x24>
 800c230:	f7ff ff78 	bl	800c124 <__sfp_lock_release>
 800c234:	230c      	movs	r3, #12
 800c236:	603b      	str	r3, [r7, #0]
 800c238:	e7ee      	b.n	800c218 <__sfp+0x60>
 800c23a:	bf00      	nop
 800c23c:	0800c6b0 	.word	0x0800c6b0
 800c240:	ffff0001 	.word	0xffff0001

0800c244 <_fwalk_reent>:
 800c244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c248:	4606      	mov	r6, r0
 800c24a:	4688      	mov	r8, r1
 800c24c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c250:	2700      	movs	r7, #0
 800c252:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c256:	f1b9 0901 	subs.w	r9, r9, #1
 800c25a:	d505      	bpl.n	800c268 <_fwalk_reent+0x24>
 800c25c:	6824      	ldr	r4, [r4, #0]
 800c25e:	2c00      	cmp	r4, #0
 800c260:	d1f7      	bne.n	800c252 <_fwalk_reent+0xe>
 800c262:	4638      	mov	r0, r7
 800c264:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c268:	89ab      	ldrh	r3, [r5, #12]
 800c26a:	2b01      	cmp	r3, #1
 800c26c:	d907      	bls.n	800c27e <_fwalk_reent+0x3a>
 800c26e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c272:	3301      	adds	r3, #1
 800c274:	d003      	beq.n	800c27e <_fwalk_reent+0x3a>
 800c276:	4629      	mov	r1, r5
 800c278:	4630      	mov	r0, r6
 800c27a:	47c0      	blx	r8
 800c27c:	4307      	orrs	r7, r0
 800c27e:	3568      	adds	r5, #104	; 0x68
 800c280:	e7e9      	b.n	800c256 <_fwalk_reent+0x12>

0800c282 <__retarget_lock_init_recursive>:
 800c282:	4770      	bx	lr

0800c284 <__retarget_lock_acquire_recursive>:
 800c284:	4770      	bx	lr

0800c286 <__retarget_lock_release_recursive>:
 800c286:	4770      	bx	lr

0800c288 <__swhatbuf_r>:
 800c288:	b570      	push	{r4, r5, r6, lr}
 800c28a:	460e      	mov	r6, r1
 800c28c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c290:	2900      	cmp	r1, #0
 800c292:	b096      	sub	sp, #88	; 0x58
 800c294:	4614      	mov	r4, r2
 800c296:	461d      	mov	r5, r3
 800c298:	da08      	bge.n	800c2ac <__swhatbuf_r+0x24>
 800c29a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	602a      	str	r2, [r5, #0]
 800c2a2:	061a      	lsls	r2, r3, #24
 800c2a4:	d410      	bmi.n	800c2c8 <__swhatbuf_r+0x40>
 800c2a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2aa:	e00e      	b.n	800c2ca <__swhatbuf_r+0x42>
 800c2ac:	466a      	mov	r2, sp
 800c2ae:	f000 f95f 	bl	800c570 <_fstat_r>
 800c2b2:	2800      	cmp	r0, #0
 800c2b4:	dbf1      	blt.n	800c29a <__swhatbuf_r+0x12>
 800c2b6:	9a01      	ldr	r2, [sp, #4]
 800c2b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c2bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c2c0:	425a      	negs	r2, r3
 800c2c2:	415a      	adcs	r2, r3
 800c2c4:	602a      	str	r2, [r5, #0]
 800c2c6:	e7ee      	b.n	800c2a6 <__swhatbuf_r+0x1e>
 800c2c8:	2340      	movs	r3, #64	; 0x40
 800c2ca:	2000      	movs	r0, #0
 800c2cc:	6023      	str	r3, [r4, #0]
 800c2ce:	b016      	add	sp, #88	; 0x58
 800c2d0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c2d4 <__smakebuf_r>:
 800c2d4:	898b      	ldrh	r3, [r1, #12]
 800c2d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c2d8:	079d      	lsls	r5, r3, #30
 800c2da:	4606      	mov	r6, r0
 800c2dc:	460c      	mov	r4, r1
 800c2de:	d507      	bpl.n	800c2f0 <__smakebuf_r+0x1c>
 800c2e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c2e4:	6023      	str	r3, [r4, #0]
 800c2e6:	6123      	str	r3, [r4, #16]
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	6163      	str	r3, [r4, #20]
 800c2ec:	b002      	add	sp, #8
 800c2ee:	bd70      	pop	{r4, r5, r6, pc}
 800c2f0:	ab01      	add	r3, sp, #4
 800c2f2:	466a      	mov	r2, sp
 800c2f4:	f7ff ffc8 	bl	800c288 <__swhatbuf_r>
 800c2f8:	9900      	ldr	r1, [sp, #0]
 800c2fa:	4605      	mov	r5, r0
 800c2fc:	4630      	mov	r0, r6
 800c2fe:	f7ff f873 	bl	800b3e8 <_malloc_r>
 800c302:	b948      	cbnz	r0, 800c318 <__smakebuf_r+0x44>
 800c304:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c308:	059a      	lsls	r2, r3, #22
 800c30a:	d4ef      	bmi.n	800c2ec <__smakebuf_r+0x18>
 800c30c:	f023 0303 	bic.w	r3, r3, #3
 800c310:	f043 0302 	orr.w	r3, r3, #2
 800c314:	81a3      	strh	r3, [r4, #12]
 800c316:	e7e3      	b.n	800c2e0 <__smakebuf_r+0xc>
 800c318:	4b0d      	ldr	r3, [pc, #52]	; (800c350 <__smakebuf_r+0x7c>)
 800c31a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c31c:	89a3      	ldrh	r3, [r4, #12]
 800c31e:	6020      	str	r0, [r4, #0]
 800c320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c324:	81a3      	strh	r3, [r4, #12]
 800c326:	9b00      	ldr	r3, [sp, #0]
 800c328:	6163      	str	r3, [r4, #20]
 800c32a:	9b01      	ldr	r3, [sp, #4]
 800c32c:	6120      	str	r0, [r4, #16]
 800c32e:	b15b      	cbz	r3, 800c348 <__smakebuf_r+0x74>
 800c330:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c334:	4630      	mov	r0, r6
 800c336:	f000 f92d 	bl	800c594 <_isatty_r>
 800c33a:	b128      	cbz	r0, 800c348 <__smakebuf_r+0x74>
 800c33c:	89a3      	ldrh	r3, [r4, #12]
 800c33e:	f023 0303 	bic.w	r3, r3, #3
 800c342:	f043 0301 	orr.w	r3, r3, #1
 800c346:	81a3      	strh	r3, [r4, #12]
 800c348:	89a0      	ldrh	r0, [r4, #12]
 800c34a:	4305      	orrs	r5, r0
 800c34c:	81a5      	strh	r5, [r4, #12]
 800c34e:	e7cd      	b.n	800c2ec <__smakebuf_r+0x18>
 800c350:	0800c0e1 	.word	0x0800c0e1

0800c354 <memcpy>:
 800c354:	440a      	add	r2, r1
 800c356:	4291      	cmp	r1, r2
 800c358:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c35c:	d100      	bne.n	800c360 <memcpy+0xc>
 800c35e:	4770      	bx	lr
 800c360:	b510      	push	{r4, lr}
 800c362:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c366:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c36a:	4291      	cmp	r1, r2
 800c36c:	d1f9      	bne.n	800c362 <memcpy+0xe>
 800c36e:	bd10      	pop	{r4, pc}

0800c370 <memmove>:
 800c370:	4288      	cmp	r0, r1
 800c372:	b510      	push	{r4, lr}
 800c374:	eb01 0402 	add.w	r4, r1, r2
 800c378:	d902      	bls.n	800c380 <memmove+0x10>
 800c37a:	4284      	cmp	r4, r0
 800c37c:	4623      	mov	r3, r4
 800c37e:	d807      	bhi.n	800c390 <memmove+0x20>
 800c380:	1e43      	subs	r3, r0, #1
 800c382:	42a1      	cmp	r1, r4
 800c384:	d008      	beq.n	800c398 <memmove+0x28>
 800c386:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c38a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c38e:	e7f8      	b.n	800c382 <memmove+0x12>
 800c390:	4402      	add	r2, r0
 800c392:	4601      	mov	r1, r0
 800c394:	428a      	cmp	r2, r1
 800c396:	d100      	bne.n	800c39a <memmove+0x2a>
 800c398:	bd10      	pop	{r4, pc}
 800c39a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c39e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c3a2:	e7f7      	b.n	800c394 <memmove+0x24>

0800c3a4 <__malloc_lock>:
 800c3a4:	4801      	ldr	r0, [pc, #4]	; (800c3ac <__malloc_lock+0x8>)
 800c3a6:	f7ff bf6d 	b.w	800c284 <__retarget_lock_acquire_recursive>
 800c3aa:	bf00      	nop
 800c3ac:	20001820 	.word	0x20001820

0800c3b0 <__malloc_unlock>:
 800c3b0:	4801      	ldr	r0, [pc, #4]	; (800c3b8 <__malloc_unlock+0x8>)
 800c3b2:	f7ff bf68 	b.w	800c286 <__retarget_lock_release_recursive>
 800c3b6:	bf00      	nop
 800c3b8:	20001820 	.word	0x20001820

0800c3bc <_realloc_r>:
 800c3bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3c0:	4680      	mov	r8, r0
 800c3c2:	4614      	mov	r4, r2
 800c3c4:	460e      	mov	r6, r1
 800c3c6:	b921      	cbnz	r1, 800c3d2 <_realloc_r+0x16>
 800c3c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3cc:	4611      	mov	r1, r2
 800c3ce:	f7ff b80b 	b.w	800b3e8 <_malloc_r>
 800c3d2:	b92a      	cbnz	r2, 800c3e0 <_realloc_r+0x24>
 800c3d4:	f7fe ff9c 	bl	800b310 <_free_r>
 800c3d8:	4625      	mov	r5, r4
 800c3da:	4628      	mov	r0, r5
 800c3dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3e0:	f000 f8fa 	bl	800c5d8 <_malloc_usable_size_r>
 800c3e4:	4284      	cmp	r4, r0
 800c3e6:	4607      	mov	r7, r0
 800c3e8:	d802      	bhi.n	800c3f0 <_realloc_r+0x34>
 800c3ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c3ee:	d812      	bhi.n	800c416 <_realloc_r+0x5a>
 800c3f0:	4621      	mov	r1, r4
 800c3f2:	4640      	mov	r0, r8
 800c3f4:	f7fe fff8 	bl	800b3e8 <_malloc_r>
 800c3f8:	4605      	mov	r5, r0
 800c3fa:	2800      	cmp	r0, #0
 800c3fc:	d0ed      	beq.n	800c3da <_realloc_r+0x1e>
 800c3fe:	42bc      	cmp	r4, r7
 800c400:	4622      	mov	r2, r4
 800c402:	4631      	mov	r1, r6
 800c404:	bf28      	it	cs
 800c406:	463a      	movcs	r2, r7
 800c408:	f7ff ffa4 	bl	800c354 <memcpy>
 800c40c:	4631      	mov	r1, r6
 800c40e:	4640      	mov	r0, r8
 800c410:	f7fe ff7e 	bl	800b310 <_free_r>
 800c414:	e7e1      	b.n	800c3da <_realloc_r+0x1e>
 800c416:	4635      	mov	r5, r6
 800c418:	e7df      	b.n	800c3da <_realloc_r+0x1e>

0800c41a <_raise_r>:
 800c41a:	291f      	cmp	r1, #31
 800c41c:	b538      	push	{r3, r4, r5, lr}
 800c41e:	4604      	mov	r4, r0
 800c420:	460d      	mov	r5, r1
 800c422:	d904      	bls.n	800c42e <_raise_r+0x14>
 800c424:	2316      	movs	r3, #22
 800c426:	6003      	str	r3, [r0, #0]
 800c428:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c42c:	bd38      	pop	{r3, r4, r5, pc}
 800c42e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c430:	b112      	cbz	r2, 800c438 <_raise_r+0x1e>
 800c432:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c436:	b94b      	cbnz	r3, 800c44c <_raise_r+0x32>
 800c438:	4620      	mov	r0, r4
 800c43a:	f000 f831 	bl	800c4a0 <_getpid_r>
 800c43e:	462a      	mov	r2, r5
 800c440:	4601      	mov	r1, r0
 800c442:	4620      	mov	r0, r4
 800c444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c448:	f000 b818 	b.w	800c47c <_kill_r>
 800c44c:	2b01      	cmp	r3, #1
 800c44e:	d00a      	beq.n	800c466 <_raise_r+0x4c>
 800c450:	1c59      	adds	r1, r3, #1
 800c452:	d103      	bne.n	800c45c <_raise_r+0x42>
 800c454:	2316      	movs	r3, #22
 800c456:	6003      	str	r3, [r0, #0]
 800c458:	2001      	movs	r0, #1
 800c45a:	e7e7      	b.n	800c42c <_raise_r+0x12>
 800c45c:	2400      	movs	r4, #0
 800c45e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c462:	4628      	mov	r0, r5
 800c464:	4798      	blx	r3
 800c466:	2000      	movs	r0, #0
 800c468:	e7e0      	b.n	800c42c <_raise_r+0x12>
	...

0800c46c <raise>:
 800c46c:	4b02      	ldr	r3, [pc, #8]	; (800c478 <raise+0xc>)
 800c46e:	4601      	mov	r1, r0
 800c470:	6818      	ldr	r0, [r3, #0]
 800c472:	f7ff bfd2 	b.w	800c41a <_raise_r>
 800c476:	bf00      	nop
 800c478:	20000100 	.word	0x20000100

0800c47c <_kill_r>:
 800c47c:	b538      	push	{r3, r4, r5, lr}
 800c47e:	4d07      	ldr	r5, [pc, #28]	; (800c49c <_kill_r+0x20>)
 800c480:	2300      	movs	r3, #0
 800c482:	4604      	mov	r4, r0
 800c484:	4608      	mov	r0, r1
 800c486:	4611      	mov	r1, r2
 800c488:	602b      	str	r3, [r5, #0]
 800c48a:	f7f5 f951 	bl	8001730 <_kill>
 800c48e:	1c43      	adds	r3, r0, #1
 800c490:	d102      	bne.n	800c498 <_kill_r+0x1c>
 800c492:	682b      	ldr	r3, [r5, #0]
 800c494:	b103      	cbz	r3, 800c498 <_kill_r+0x1c>
 800c496:	6023      	str	r3, [r4, #0]
 800c498:	bd38      	pop	{r3, r4, r5, pc}
 800c49a:	bf00      	nop
 800c49c:	20001824 	.word	0x20001824

0800c4a0 <_getpid_r>:
 800c4a0:	f7f5 b93e 	b.w	8001720 <_getpid>

0800c4a4 <__sread>:
 800c4a4:	b510      	push	{r4, lr}
 800c4a6:	460c      	mov	r4, r1
 800c4a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4ac:	f000 f89c 	bl	800c5e8 <_read_r>
 800c4b0:	2800      	cmp	r0, #0
 800c4b2:	bfab      	itete	ge
 800c4b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c4b6:	89a3      	ldrhlt	r3, [r4, #12]
 800c4b8:	181b      	addge	r3, r3, r0
 800c4ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c4be:	bfac      	ite	ge
 800c4c0:	6563      	strge	r3, [r4, #84]	; 0x54
 800c4c2:	81a3      	strhlt	r3, [r4, #12]
 800c4c4:	bd10      	pop	{r4, pc}

0800c4c6 <__swrite>:
 800c4c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4ca:	461f      	mov	r7, r3
 800c4cc:	898b      	ldrh	r3, [r1, #12]
 800c4ce:	05db      	lsls	r3, r3, #23
 800c4d0:	4605      	mov	r5, r0
 800c4d2:	460c      	mov	r4, r1
 800c4d4:	4616      	mov	r6, r2
 800c4d6:	d505      	bpl.n	800c4e4 <__swrite+0x1e>
 800c4d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4dc:	2302      	movs	r3, #2
 800c4de:	2200      	movs	r2, #0
 800c4e0:	f000 f868 	bl	800c5b4 <_lseek_r>
 800c4e4:	89a3      	ldrh	r3, [r4, #12]
 800c4e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c4ee:	81a3      	strh	r3, [r4, #12]
 800c4f0:	4632      	mov	r2, r6
 800c4f2:	463b      	mov	r3, r7
 800c4f4:	4628      	mov	r0, r5
 800c4f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4fa:	f000 b817 	b.w	800c52c <_write_r>

0800c4fe <__sseek>:
 800c4fe:	b510      	push	{r4, lr}
 800c500:	460c      	mov	r4, r1
 800c502:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c506:	f000 f855 	bl	800c5b4 <_lseek_r>
 800c50a:	1c43      	adds	r3, r0, #1
 800c50c:	89a3      	ldrh	r3, [r4, #12]
 800c50e:	bf15      	itete	ne
 800c510:	6560      	strne	r0, [r4, #84]	; 0x54
 800c512:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c516:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c51a:	81a3      	strheq	r3, [r4, #12]
 800c51c:	bf18      	it	ne
 800c51e:	81a3      	strhne	r3, [r4, #12]
 800c520:	bd10      	pop	{r4, pc}

0800c522 <__sclose>:
 800c522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c526:	f000 b813 	b.w	800c550 <_close_r>
	...

0800c52c <_write_r>:
 800c52c:	b538      	push	{r3, r4, r5, lr}
 800c52e:	4d07      	ldr	r5, [pc, #28]	; (800c54c <_write_r+0x20>)
 800c530:	4604      	mov	r4, r0
 800c532:	4608      	mov	r0, r1
 800c534:	4611      	mov	r1, r2
 800c536:	2200      	movs	r2, #0
 800c538:	602a      	str	r2, [r5, #0]
 800c53a:	461a      	mov	r2, r3
 800c53c:	f7f5 f92f 	bl	800179e <_write>
 800c540:	1c43      	adds	r3, r0, #1
 800c542:	d102      	bne.n	800c54a <_write_r+0x1e>
 800c544:	682b      	ldr	r3, [r5, #0]
 800c546:	b103      	cbz	r3, 800c54a <_write_r+0x1e>
 800c548:	6023      	str	r3, [r4, #0]
 800c54a:	bd38      	pop	{r3, r4, r5, pc}
 800c54c:	20001824 	.word	0x20001824

0800c550 <_close_r>:
 800c550:	b538      	push	{r3, r4, r5, lr}
 800c552:	4d06      	ldr	r5, [pc, #24]	; (800c56c <_close_r+0x1c>)
 800c554:	2300      	movs	r3, #0
 800c556:	4604      	mov	r4, r0
 800c558:	4608      	mov	r0, r1
 800c55a:	602b      	str	r3, [r5, #0]
 800c55c:	f7f5 f93b 	bl	80017d6 <_close>
 800c560:	1c43      	adds	r3, r0, #1
 800c562:	d102      	bne.n	800c56a <_close_r+0x1a>
 800c564:	682b      	ldr	r3, [r5, #0]
 800c566:	b103      	cbz	r3, 800c56a <_close_r+0x1a>
 800c568:	6023      	str	r3, [r4, #0]
 800c56a:	bd38      	pop	{r3, r4, r5, pc}
 800c56c:	20001824 	.word	0x20001824

0800c570 <_fstat_r>:
 800c570:	b538      	push	{r3, r4, r5, lr}
 800c572:	4d07      	ldr	r5, [pc, #28]	; (800c590 <_fstat_r+0x20>)
 800c574:	2300      	movs	r3, #0
 800c576:	4604      	mov	r4, r0
 800c578:	4608      	mov	r0, r1
 800c57a:	4611      	mov	r1, r2
 800c57c:	602b      	str	r3, [r5, #0]
 800c57e:	f7f5 f936 	bl	80017ee <_fstat>
 800c582:	1c43      	adds	r3, r0, #1
 800c584:	d102      	bne.n	800c58c <_fstat_r+0x1c>
 800c586:	682b      	ldr	r3, [r5, #0]
 800c588:	b103      	cbz	r3, 800c58c <_fstat_r+0x1c>
 800c58a:	6023      	str	r3, [r4, #0]
 800c58c:	bd38      	pop	{r3, r4, r5, pc}
 800c58e:	bf00      	nop
 800c590:	20001824 	.word	0x20001824

0800c594 <_isatty_r>:
 800c594:	b538      	push	{r3, r4, r5, lr}
 800c596:	4d06      	ldr	r5, [pc, #24]	; (800c5b0 <_isatty_r+0x1c>)
 800c598:	2300      	movs	r3, #0
 800c59a:	4604      	mov	r4, r0
 800c59c:	4608      	mov	r0, r1
 800c59e:	602b      	str	r3, [r5, #0]
 800c5a0:	f7f5 f935 	bl	800180e <_isatty>
 800c5a4:	1c43      	adds	r3, r0, #1
 800c5a6:	d102      	bne.n	800c5ae <_isatty_r+0x1a>
 800c5a8:	682b      	ldr	r3, [r5, #0]
 800c5aa:	b103      	cbz	r3, 800c5ae <_isatty_r+0x1a>
 800c5ac:	6023      	str	r3, [r4, #0]
 800c5ae:	bd38      	pop	{r3, r4, r5, pc}
 800c5b0:	20001824 	.word	0x20001824

0800c5b4 <_lseek_r>:
 800c5b4:	b538      	push	{r3, r4, r5, lr}
 800c5b6:	4d07      	ldr	r5, [pc, #28]	; (800c5d4 <_lseek_r+0x20>)
 800c5b8:	4604      	mov	r4, r0
 800c5ba:	4608      	mov	r0, r1
 800c5bc:	4611      	mov	r1, r2
 800c5be:	2200      	movs	r2, #0
 800c5c0:	602a      	str	r2, [r5, #0]
 800c5c2:	461a      	mov	r2, r3
 800c5c4:	f7f5 f92e 	bl	8001824 <_lseek>
 800c5c8:	1c43      	adds	r3, r0, #1
 800c5ca:	d102      	bne.n	800c5d2 <_lseek_r+0x1e>
 800c5cc:	682b      	ldr	r3, [r5, #0]
 800c5ce:	b103      	cbz	r3, 800c5d2 <_lseek_r+0x1e>
 800c5d0:	6023      	str	r3, [r4, #0]
 800c5d2:	bd38      	pop	{r3, r4, r5, pc}
 800c5d4:	20001824 	.word	0x20001824

0800c5d8 <_malloc_usable_size_r>:
 800c5d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5dc:	1f18      	subs	r0, r3, #4
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	bfbc      	itt	lt
 800c5e2:	580b      	ldrlt	r3, [r1, r0]
 800c5e4:	18c0      	addlt	r0, r0, r3
 800c5e6:	4770      	bx	lr

0800c5e8 <_read_r>:
 800c5e8:	b538      	push	{r3, r4, r5, lr}
 800c5ea:	4d07      	ldr	r5, [pc, #28]	; (800c608 <_read_r+0x20>)
 800c5ec:	4604      	mov	r4, r0
 800c5ee:	4608      	mov	r0, r1
 800c5f0:	4611      	mov	r1, r2
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	602a      	str	r2, [r5, #0]
 800c5f6:	461a      	mov	r2, r3
 800c5f8:	f7f5 f8b4 	bl	8001764 <_read>
 800c5fc:	1c43      	adds	r3, r0, #1
 800c5fe:	d102      	bne.n	800c606 <_read_r+0x1e>
 800c600:	682b      	ldr	r3, [r5, #0]
 800c602:	b103      	cbz	r3, 800c606 <_read_r+0x1e>
 800c604:	6023      	str	r3, [r4, #0]
 800c606:	bd38      	pop	{r3, r4, r5, pc}
 800c608:	20001824 	.word	0x20001824

0800c60c <_init>:
 800c60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c60e:	bf00      	nop
 800c610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c612:	bc08      	pop	{r3}
 800c614:	469e      	mov	lr, r3
 800c616:	4770      	bx	lr

0800c618 <_fini>:
 800c618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c61a:	bf00      	nop
 800c61c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c61e:	bc08      	pop	{r3}
 800c620:	469e      	mov	lr, r3
 800c622:	4770      	bx	lr
