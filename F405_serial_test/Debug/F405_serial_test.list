
F405_serial_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c45c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  0800c5ec  0800c5ec  0001c5ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7b8  0800c7b8  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  0800c7b8  0800c7b8  0001c7b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7c0  0800c7c0  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7c0  0800c7c0  0001c7c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c7c4  0800c7c4  0001c7c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  0800c7c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020160  2**0
                  CONTENTS
 10 .bss          000016bc  20000160  20000160  00020160  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000181c  2000181c  00020160  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c506  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e80  00000000  00000000  0003c696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017d8  00000000  00000000  00040518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001640  00000000  00000000  00041cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024ff2  00000000  00000000  00043330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dc14  00000000  00000000  00068322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4152  00000000  00000000  00085f36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015a088  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006fe0  00000000  00000000  0015a0d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000160 	.word	0x20000160
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c5d4 	.word	0x0800c5d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000164 	.word	0x20000164
 80001cc:	0800c5d4 	.word	0x0800c5d4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b590      	push	{r4, r7, lr}
 8000576:	b09b      	sub	sp, #108	; 0x6c
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f001 f9b7 	bl	80018ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 f84f 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 fc7b 	bl	8000e7c <MX_GPIO_Init>
  MX_DMA_Init();
 8000586:	f000 fc59 	bl	8000e3c <MX_DMA_Init>
  MX_ADC1_Init();
 800058a:	f000 f8b3 	bl	80006f4 <MX_ADC1_Init>
  MX_ADC2_Init();
 800058e:	f000 f955 	bl	800083c <MX_ADC2_Init>
  MX_ADC3_Init();
 8000592:	f000 f9f5 	bl	8000980 <MX_ADC3_Init>
  MX_TIM1_Init();
 8000596:	f000 fabf 	bl	8000b18 <MX_TIM1_Init>
  MX_TIM4_Init();
 800059a:	f000 fb69 	bl	8000c70 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 800059e:	f000 fc23 	bl	8000de8 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 80005a2:	f000 fbeb 	bl	8000d7c <MX_TIM7_Init>
  MX_SPI3_Init();
 80005a6:	f000 fa7f 	bl	8000aa8 <MX_SPI3_Init>
  MX_USB_DEVICE_Init();
 80005aa:	f00a f8d9 	bl	800a760 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin (GPIOC, GPIO_PIN_9);
 80005ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005b2:	4817      	ldr	r0, [pc, #92]	; (8000610 <main+0x9c>)
 80005b4:	f002 fcf1 	bl	8002f9a <HAL_GPIO_TogglePin>
	  HAL_Delay (250);
 80005b8:	20fa      	movs	r0, #250	; 0xfa
 80005ba:	f001 fa09 	bl	80019d0 <HAL_Delay>
	  char transmit_buffer[100];
	  int sizebuff;
	  sizebuff = sprintf(transmit_buffer,"{\"amps\":%d, \"volts\":%d}\r\n", rand() %  200, rand() % 200);
 80005be:	f00a fdf5 	bl	800b1ac <rand>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a13      	ldr	r2, [pc, #76]	; (8000614 <main+0xa0>)
 80005c6:	fb82 1203 	smull	r1, r2, r2, r3
 80005ca:	1191      	asrs	r1, r2, #6
 80005cc:	17da      	asrs	r2, r3, #31
 80005ce:	1a8c      	subs	r4, r1, r2
 80005d0:	22c8      	movs	r2, #200	; 0xc8
 80005d2:	fb04 f202 	mul.w	r2, r4, r2
 80005d6:	1a9c      	subs	r4, r3, r2
 80005d8:	f00a fde8 	bl	800b1ac <rand>
 80005dc:	4602      	mov	r2, r0
 80005de:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <main+0xa0>)
 80005e0:	fb83 1302 	smull	r1, r3, r3, r2
 80005e4:	1199      	asrs	r1, r3, #6
 80005e6:	17d3      	asrs	r3, r2, #31
 80005e8:	1acb      	subs	r3, r1, r3
 80005ea:	21c8      	movs	r1, #200	; 0xc8
 80005ec:	fb01 f303 	mul.w	r3, r1, r3
 80005f0:	1ad3      	subs	r3, r2, r3
 80005f2:	4638      	mov	r0, r7
 80005f4:	4622      	mov	r2, r4
 80005f6:	4908      	ldr	r1, [pc, #32]	; (8000618 <main+0xa4>)
 80005f8:	f00a fe16 	bl	800b228 <siprintf>
 80005fc:	6678      	str	r0, [r7, #100]	; 0x64
	  HAL_UART_Transmit_DMA(&huart3, transmit_buffer, sizebuff);
 80005fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000600:	b29a      	uxth	r2, r3
 8000602:	463b      	mov	r3, r7
 8000604:	4619      	mov	r1, r3
 8000606:	4805      	ldr	r0, [pc, #20]	; (800061c <main+0xa8>)
 8000608:	f005 fcbe 	bl	8005f88 <HAL_UART_Transmit_DMA>
  {
 800060c:	e7cf      	b.n	80005ae <main+0x3a>
 800060e:	bf00      	nop
 8000610:	40020800 	.word	0x40020800
 8000614:	51eb851f 	.word	0x51eb851f
 8000618:	0800c5ec 	.word	0x0800c5ec
 800061c:	20000384 	.word	0x20000384

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	; 0x50
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0320 	add.w	r3, r7, #32
 800062a:	2230      	movs	r2, #48	; 0x30
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f00a fdb4 	bl	800b19c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000644:	2300      	movs	r3, #0
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	4b28      	ldr	r3, [pc, #160]	; (80006ec <SystemClock_Config+0xcc>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	4a27      	ldr	r2, [pc, #156]	; (80006ec <SystemClock_Config+0xcc>)
 800064e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000652:	6413      	str	r3, [r2, #64]	; 0x40
 8000654:	4b25      	ldr	r3, [pc, #148]	; (80006ec <SystemClock_Config+0xcc>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	4b22      	ldr	r3, [pc, #136]	; (80006f0 <SystemClock_Config+0xd0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a21      	ldr	r2, [pc, #132]	; (80006f0 <SystemClock_Config+0xd0>)
 800066a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <SystemClock_Config+0xd0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800067c:	2301      	movs	r3, #1
 800067e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000680:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000686:	2302      	movs	r3, #2
 8000688:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800068e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000690:	2304      	movs	r3, #4
 8000692:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000694:	2390      	movs	r3, #144	; 0x90
 8000696:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000698:	2302      	movs	r3, #2
 800069a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 6;
 800069c:	2306      	movs	r3, #6
 800069e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f107 0320 	add.w	r3, r7, #32
 80006a4:	4618      	mov	r0, r3
 80006a6:	f003 ff0f 	bl	80044c8 <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006b0:	f000 fc8a 	bl	8000fc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b8:	2302      	movs	r3, #2
 80006ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2104      	movs	r1, #4
 80006d2:	4618      	mov	r0, r3
 80006d4:	f004 f970 	bl	80049b8 <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006de:	f000 fc73 	bl	8000fc8 <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3750      	adds	r7, #80	; 0x50
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08c      	sub	sp, #48	; 0x30
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006fa:	f107 0320 	add.w	r3, r7, #32
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000708:	463b      	mov	r3, r7
 800070a:	2220      	movs	r2, #32
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f00a fd44 	bl	800b19c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000714:	4b46      	ldr	r3, [pc, #280]	; (8000830 <MX_ADC1_Init+0x13c>)
 8000716:	4a47      	ldr	r2, [pc, #284]	; (8000834 <MX_ADC1_Init+0x140>)
 8000718:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800071a:	4b45      	ldr	r3, [pc, #276]	; (8000830 <MX_ADC1_Init+0x13c>)
 800071c:	2200      	movs	r2, #0
 800071e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000720:	4b43      	ldr	r3, [pc, #268]	; (8000830 <MX_ADC1_Init+0x13c>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000726:	4b42      	ldr	r3, [pc, #264]	; (8000830 <MX_ADC1_Init+0x13c>)
 8000728:	2201      	movs	r2, #1
 800072a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800072c:	4b40      	ldr	r3, [pc, #256]	; (8000830 <MX_ADC1_Init+0x13c>)
 800072e:	2200      	movs	r2, #0
 8000730:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000732:	4b3f      	ldr	r3, [pc, #252]	; (8000830 <MX_ADC1_Init+0x13c>)
 8000734:	2200      	movs	r2, #0
 8000736:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800073a:	4b3d      	ldr	r3, [pc, #244]	; (8000830 <MX_ADC1_Init+0x13c>)
 800073c:	2200      	movs	r2, #0
 800073e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000740:	4b3b      	ldr	r3, [pc, #236]	; (8000830 <MX_ADC1_Init+0x13c>)
 8000742:	4a3d      	ldr	r2, [pc, #244]	; (8000838 <MX_ADC1_Init+0x144>)
 8000744:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000746:	4b3a      	ldr	r3, [pc, #232]	; (8000830 <MX_ADC1_Init+0x13c>)
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800074c:	4b38      	ldr	r3, [pc, #224]	; (8000830 <MX_ADC1_Init+0x13c>)
 800074e:	2201      	movs	r2, #1
 8000750:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000752:	4b37      	ldr	r3, [pc, #220]	; (8000830 <MX_ADC1_Init+0x13c>)
 8000754:	2200      	movs	r2, #0
 8000756:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800075a:	4b35      	ldr	r3, [pc, #212]	; (8000830 <MX_ADC1_Init+0x13c>)
 800075c:	2200      	movs	r2, #0
 800075e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000760:	4833      	ldr	r0, [pc, #204]	; (8000830 <MX_ADC1_Init+0x13c>)
 8000762:	f001 f959 	bl	8001a18 <HAL_ADC_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 800076c:	f000 fc2c 	bl	8000fc8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000770:	230a      	movs	r3, #10
 8000772:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8000774:	2301      	movs	r3, #1
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000778:	2300      	movs	r3, #0
 800077a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	f107 0320 	add.w	r3, r7, #32
 8000780:	4619      	mov	r1, r3
 8000782:	482b      	ldr	r0, [pc, #172]	; (8000830 <MX_ADC1_Init+0x13c>)
 8000784:	f001 f98c 	bl	8001aa0 <HAL_ADC_ConfigChannel>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800078e:	f000 fc1b 	bl	8000fc8 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 8000792:	230a      	movs	r3, #10
 8000794:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8000796:	2301      	movs	r3, #1
 8000798:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 4;
 800079a:	2304      	movs	r3, #4
 800079c:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_15CYCLES;
 800079e:	2301      	movs	r3, #1
 80007a0:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 80007a2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80007a6:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_TRGO;
 80007a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ac:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80007ae:	2300      	movs	r3, #0
 80007b0:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80007b2:	2300      	movs	r3, #0
 80007b4:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80007ba:	463b      	mov	r3, r7
 80007bc:	4619      	mov	r1, r3
 80007be:	481c      	ldr	r0, [pc, #112]	; (8000830 <MX_ADC1_Init+0x13c>)
 80007c0:	f001 fb8c 	bl	8001edc <HAL_ADCEx_InjectedConfigChannel>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80007ca:	f000 fbfd 	bl	8000fc8 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 80007d2:	2302      	movs	r3, #2
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4815      	ldr	r0, [pc, #84]	; (8000830 <MX_ADC1_Init+0x13c>)
 80007dc:	f001 fb7e 	bl	8001edc <HAL_ADCEx_InjectedConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 80007e6:	f000 fbef 	bl	8000fc8 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 80007ea:	2305      	movs	r3, #5
 80007ec:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 80007ee:	2303      	movs	r3, #3
 80007f0:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80007f2:	463b      	mov	r3, r7
 80007f4:	4619      	mov	r1, r3
 80007f6:	480e      	ldr	r0, [pc, #56]	; (8000830 <MX_ADC1_Init+0x13c>)
 80007f8:	f001 fb70 	bl	8001edc <HAL_ADCEx_InjectedConfigChannel>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8000802:	f000 fbe1 	bl	8000fc8 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8000806:	2304      	movs	r3, #4
 8000808:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 4;
 800080a:	2304      	movs	r3, #4
 800080c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000812:	463b      	mov	r3, r7
 8000814:	4619      	mov	r1, r3
 8000816:	4806      	ldr	r0, [pc, #24]	; (8000830 <MX_ADC1_Init+0x13c>)
 8000818:	f001 fb60 	bl	8001edc <HAL_ADCEx_InjectedConfigChannel>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000822:	f000 fbd1 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	3730      	adds	r7, #48	; 0x30
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	2000017c 	.word	0x2000017c
 8000834:	40012000 	.word	0x40012000
 8000838:	0f000001 	.word	0x0f000001

0800083c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08c      	sub	sp, #48	; 0x30
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000842:	f107 0320 	add.w	r3, r7, #32
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000850:	463b      	mov	r3, r7
 8000852:	2220      	movs	r2, #32
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f00a fca0 	bl	800b19c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800085c:	4b45      	ldr	r3, [pc, #276]	; (8000974 <MX_ADC2_Init+0x138>)
 800085e:	4a46      	ldr	r2, [pc, #280]	; (8000978 <MX_ADC2_Init+0x13c>)
 8000860:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000862:	4b44      	ldr	r3, [pc, #272]	; (8000974 <MX_ADC2_Init+0x138>)
 8000864:	2200      	movs	r2, #0
 8000866:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000868:	4b42      	ldr	r3, [pc, #264]	; (8000974 <MX_ADC2_Init+0x138>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800086e:	4b41      	ldr	r3, [pc, #260]	; (8000974 <MX_ADC2_Init+0x138>)
 8000870:	2201      	movs	r2, #1
 8000872:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000874:	4b3f      	ldr	r3, [pc, #252]	; (8000974 <MX_ADC2_Init+0x138>)
 8000876:	2200      	movs	r2, #0
 8000878:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800087a:	4b3e      	ldr	r3, [pc, #248]	; (8000974 <MX_ADC2_Init+0x138>)
 800087c:	2200      	movs	r2, #0
 800087e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000882:	4b3c      	ldr	r3, [pc, #240]	; (8000974 <MX_ADC2_Init+0x138>)
 8000884:	2200      	movs	r2, #0
 8000886:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000888:	4b3a      	ldr	r3, [pc, #232]	; (8000974 <MX_ADC2_Init+0x138>)
 800088a:	4a3c      	ldr	r2, [pc, #240]	; (800097c <MX_ADC2_Init+0x140>)
 800088c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800088e:	4b39      	ldr	r3, [pc, #228]	; (8000974 <MX_ADC2_Init+0x138>)
 8000890:	2200      	movs	r2, #0
 8000892:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000894:	4b37      	ldr	r3, [pc, #220]	; (8000974 <MX_ADC2_Init+0x138>)
 8000896:	2201      	movs	r2, #1
 8000898:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800089a:	4b36      	ldr	r3, [pc, #216]	; (8000974 <MX_ADC2_Init+0x138>)
 800089c:	2200      	movs	r2, #0
 800089e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80008a2:	4b34      	ldr	r3, [pc, #208]	; (8000974 <MX_ADC2_Init+0x138>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80008a8:	4832      	ldr	r0, [pc, #200]	; (8000974 <MX_ADC2_Init+0x138>)
 80008aa:	f001 f8b5 	bl	8001a18 <HAL_ADC_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_ADC2_Init+0x7c>
  {
    Error_Handler();
 80008b4:	f000 fb88 	bl	8000fc8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80008b8:	230b      	movs	r3, #11
 80008ba:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 80008bc:	2301      	movs	r3, #1
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008c4:	f107 0320 	add.w	r3, r7, #32
 80008c8:	4619      	mov	r1, r3
 80008ca:	482a      	ldr	r0, [pc, #168]	; (8000974 <MX_ADC2_Init+0x138>)
 80008cc:	f001 f8e8 	bl	8001aa0 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC2_Init+0x9e>
  {
    Error_Handler();
 80008d6:	f000 fb77 	bl	8000fc8 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 80008da:	230b      	movs	r3, #11
 80008dc:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 80008de:	2301      	movs	r3, #1
 80008e0:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 4;
 80008e2:	2304      	movs	r3, #4
 80008e4:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_15CYCLES;
 80008e6:	2301      	movs	r3, #1
 80008e8:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 80008ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80008ee:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_TRGO;
 80008f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008f4:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80008fa:	2300      	movs	r3, #0
 80008fc:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000902:	463b      	mov	r3, r7
 8000904:	4619      	mov	r1, r3
 8000906:	481b      	ldr	r0, [pc, #108]	; (8000974 <MX_ADC2_Init+0x138>)
 8000908:	f001 fae8 	bl	8001edc <HAL_ADCEx_InjectedConfigChannel>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_ADC2_Init+0xda>
  {
    Error_Handler();
 8000912:	f000 fb59 	bl	8000fc8 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 8000916:	230e      	movs	r3, #14
 8000918:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 800091a:	2302      	movs	r3, #2
 800091c:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800091e:	463b      	mov	r3, r7
 8000920:	4619      	mov	r1, r3
 8000922:	4814      	ldr	r0, [pc, #80]	; (8000974 <MX_ADC2_Init+0x138>)
 8000924:	f001 fada 	bl	8001edc <HAL_ADCEx_InjectedConfigChannel>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_ADC2_Init+0xf6>
  {
    Error_Handler();
 800092e:	f000 fb4b 	bl	8000fc8 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000932:	2301      	movs	r3, #1
 8000934:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 8000936:	2303      	movs	r3, #3
 8000938:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800093a:	463b      	mov	r3, r7
 800093c:	4619      	mov	r1, r3
 800093e:	480d      	ldr	r0, [pc, #52]	; (8000974 <MX_ADC2_Init+0x138>)
 8000940:	f001 facc 	bl	8001edc <HAL_ADCEx_InjectedConfigChannel>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_ADC2_Init+0x112>
  {
    Error_Handler();
 800094a:	f000 fb3d 	bl	8000fc8 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_9;
 800094e:	2309      	movs	r3, #9
 8000950:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 4;
 8000952:	2304      	movs	r3, #4
 8000954:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000956:	463b      	mov	r3, r7
 8000958:	4619      	mov	r1, r3
 800095a:	4806      	ldr	r0, [pc, #24]	; (8000974 <MX_ADC2_Init+0x138>)
 800095c:	f001 fabe 	bl	8001edc <HAL_ADCEx_InjectedConfigChannel>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_ADC2_Init+0x12e>
  {
    Error_Handler();
 8000966:	f000 fb2f 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	3730      	adds	r7, #48	; 0x30
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	200001c4 	.word	0x200001c4
 8000978:	40012100 	.word	0x40012100
 800097c:	0f000001 	.word	0x0f000001

08000980 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08c      	sub	sp, #48	; 0x30
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000986:	f107 0320 	add.w	r3, r7, #32
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000994:	463b      	mov	r3, r7
 8000996:	2220      	movs	r2, #32
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f00a fbfe 	bl	800b19c <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80009a0:	4b3e      	ldr	r3, [pc, #248]	; (8000a9c <MX_ADC3_Init+0x11c>)
 80009a2:	4a3f      	ldr	r2, [pc, #252]	; (8000aa0 <MX_ADC3_Init+0x120>)
 80009a4:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80009a6:	4b3d      	ldr	r3, [pc, #244]	; (8000a9c <MX_ADC3_Init+0x11c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80009ac:	4b3b      	ldr	r3, [pc, #236]	; (8000a9c <MX_ADC3_Init+0x11c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 80009b2:	4b3a      	ldr	r3, [pc, #232]	; (8000a9c <MX_ADC3_Init+0x11c>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80009b8:	4b38      	ldr	r3, [pc, #224]	; (8000a9c <MX_ADC3_Init+0x11c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80009be:	4b37      	ldr	r3, [pc, #220]	; (8000a9c <MX_ADC3_Init+0x11c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009c6:	4b35      	ldr	r3, [pc, #212]	; (8000a9c <MX_ADC3_Init+0x11c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009cc:	4b33      	ldr	r3, [pc, #204]	; (8000a9c <MX_ADC3_Init+0x11c>)
 80009ce:	4a35      	ldr	r2, [pc, #212]	; (8000aa4 <MX_ADC3_Init+0x124>)
 80009d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009d2:	4b32      	ldr	r3, [pc, #200]	; (8000a9c <MX_ADC3_Init+0x11c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80009d8:	4b30      	ldr	r3, [pc, #192]	; (8000a9c <MX_ADC3_Init+0x11c>)
 80009da:	2201      	movs	r2, #1
 80009dc:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80009de:	4b2f      	ldr	r3, [pc, #188]	; (8000a9c <MX_ADC3_Init+0x11c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80009e6:	4b2d      	ldr	r3, [pc, #180]	; (8000a9c <MX_ADC3_Init+0x11c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80009ec:	482b      	ldr	r0, [pc, #172]	; (8000a9c <MX_ADC3_Init+0x11c>)
 80009ee:	f001 f813 	bl	8001a18 <HAL_ADC_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_ADC3_Init+0x7c>
  {
    Error_Handler();
 80009f8:	f000 fae6 	bl	8000fc8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80009fc:	230c      	movs	r3, #12
 80009fe:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8000a00:	2301      	movs	r3, #1
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a08:	f107 0320 	add.w	r3, r7, #32
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4823      	ldr	r0, [pc, #140]	; (8000a9c <MX_ADC3_Init+0x11c>)
 8000a10:	f001 f846 	bl	8001aa0 <HAL_ADC_ConfigChannel>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_ADC3_Init+0x9e>
  {
    Error_Handler();
 8000a1a:	f000 fad5 	bl	8000fc8 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 8000a1e:	230c      	movs	r3, #12
 8000a20:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8000a22:	2301      	movs	r3, #1
 8000a24:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000a26:	2303      	movs	r3, #3
 8000a28:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISING;
 8000a2e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000a32:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_TRGO;
 8000a34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a38:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000a46:	463b      	mov	r3, r7
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4814      	ldr	r0, [pc, #80]	; (8000a9c <MX_ADC3_Init+0x11c>)
 8000a4c:	f001 fa46 	bl	8001edc <HAL_ADCEx_InjectedConfigChannel>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_ADC3_Init+0xda>
  {
    Error_Handler();
 8000a56:	f000 fab7 	bl	8000fc8 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_13;
 8000a5a:	230d      	movs	r3, #13
 8000a5c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000a62:	463b      	mov	r3, r7
 8000a64:	4619      	mov	r1, r3
 8000a66:	480d      	ldr	r0, [pc, #52]	; (8000a9c <MX_ADC3_Init+0x11c>)
 8000a68:	f001 fa38 	bl	8001edc <HAL_ADCEx_InjectedConfigChannel>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_ADC3_Init+0xf6>
  {
    Error_Handler();
 8000a72:	f000 faa9 	bl	8000fc8 <Error_Handler>
  }

  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8000a76:	2302      	movs	r3, #2
 8000a78:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8000a7e:	463b      	mov	r3, r7
 8000a80:	4619      	mov	r1, r3
 8000a82:	4806      	ldr	r0, [pc, #24]	; (8000a9c <MX_ADC3_Init+0x11c>)
 8000a84:	f001 fa2a 	bl	8001edc <HAL_ADCEx_InjectedConfigChannel>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_ADC3_Init+0x112>
  {
    Error_Handler();
 8000a8e:	f000 fa9b 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	3730      	adds	r7, #48	; 0x30
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	2000020c 	.word	0x2000020c
 8000aa0:	40012200 	.word	0x40012200
 8000aa4:	0f000001 	.word	0x0f000001

08000aa8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000aac:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <MX_SPI3_Init+0x68>)
 8000aae:	4a19      	ldr	r2, [pc, #100]	; (8000b14 <MX_SPI3_Init+0x6c>)
 8000ab0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000ab2:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <MX_SPI3_Init+0x68>)
 8000ab4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ab8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <MX_SPI3_Init+0x68>)
 8000abc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ac0:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8000ac2:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <MX_SPI3_Init+0x68>)
 8000ac4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ac8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aca:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <MX_SPI3_Init+0x68>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <MX_SPI3_Init+0x68>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <MX_SPI3_Init+0x68>)
 8000ad8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000adc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000ade:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <MX_SPI3_Init+0x68>)
 8000ae0:	2210      	movs	r2, #16
 8000ae2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ae4:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <MX_SPI3_Init+0x68>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <MX_SPI3_Init+0x68>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000af0:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <MX_SPI3_Init+0x68>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <MX_SPI3_Init+0x68>)
 8000af8:	220a      	movs	r2, #10
 8000afa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000afc:	4804      	ldr	r0, [pc, #16]	; (8000b10 <MX_SPI3_Init+0x68>)
 8000afe:	f004 f97b 	bl	8004df8 <HAL_SPI_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_SPI3_Init+0x64>
  {
    Error_Handler();
 8000b08:	f000 fa5e 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000254 	.word	0x20000254
 8000b14:	40003c00 	.word	0x40003c00

08000b18 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b092      	sub	sp, #72	; 0x48
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b1e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
 8000b38:	615a      	str	r2, [r3, #20]
 8000b3a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	2220      	movs	r2, #32
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f00a fb2a 	bl	800b19c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b48:	4b47      	ldr	r3, [pc, #284]	; (8000c68 <MX_TIM1_Init+0x150>)
 8000b4a:	4a48      	ldr	r2, [pc, #288]	; (8000c6c <MX_TIM1_Init+0x154>)
 8000b4c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8000b4e:	4b46      	ldr	r3, [pc, #280]	; (8000c68 <MX_TIM1_Init+0x150>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000b54:	4b44      	ldr	r3, [pc, #272]	; (8000c68 <MX_TIM1_Init+0x150>)
 8000b56:	2220      	movs	r2, #32
 8000b58:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 8000b5a:	4b43      	ldr	r3, [pc, #268]	; (8000c68 <MX_TIM1_Init+0x150>)
 8000b5c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000b60:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b62:	4b41      	ldr	r3, [pc, #260]	; (8000c68 <MX_TIM1_Init+0x150>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b68:	4b3f      	ldr	r3, [pc, #252]	; (8000c68 <MX_TIM1_Init+0x150>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6e:	4b3e      	ldr	r3, [pc, #248]	; (8000c68 <MX_TIM1_Init+0x150>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b74:	483c      	ldr	r0, [pc, #240]	; (8000c68 <MX_TIM1_Init+0x150>)
 8000b76:	f004 fa17 	bl	8004fa8 <HAL_TIM_PWM_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000b80:	f000 fa22 	bl	8000fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000b84:	2370      	movs	r3, #112	; 0x70
 8000b86:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b8c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b90:	4619      	mov	r1, r3
 8000b92:	4835      	ldr	r0, [pc, #212]	; (8000c68 <MX_TIM1_Init+0x150>)
 8000b94:	f005 f8dc 	bl	8005d50 <HAL_TIMEx_MasterConfigSynchronization>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000b9e:	f000 fa13 	bl	8000fc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ba2:	2360      	movs	r3, #96	; 0x60
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 512;
 8000ba6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4827      	ldr	r0, [pc, #156]	; (8000c68 <MX_TIM1_Init+0x150>)
 8000bca:	f004 fb31 	bl	8005230 <HAL_TIM_PWM_ConfigChannel>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000bd4:	f000 f9f8 	bl	8000fc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bdc:	2204      	movs	r2, #4
 8000bde:	4619      	mov	r1, r3
 8000be0:	4821      	ldr	r0, [pc, #132]	; (8000c68 <MX_TIM1_Init+0x150>)
 8000be2:	f004 fb25 	bl	8005230 <HAL_TIM_PWM_ConfigChannel>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8000bec:	f000 f9ec 	bl	8000fc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf4:	2208      	movs	r2, #8
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	481b      	ldr	r0, [pc, #108]	; (8000c68 <MX_TIM1_Init+0x150>)
 8000bfa:	f004 fb19 	bl	8005230 <HAL_TIM_PWM_ConfigChannel>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000c04:	f000 f9e0 	bl	8000fc8 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c10:	220c      	movs	r2, #12
 8000c12:	4619      	mov	r1, r3
 8000c14:	4814      	ldr	r0, [pc, #80]	; (8000c68 <MX_TIM1_Init+0x150>)
 8000c16:	f004 fb0b 	bl	8005230 <HAL_TIM_PWM_ConfigChannel>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000c20:	f000 f9d2 	bl	8000fc8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000c24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c28:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000c2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c2e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 50;
 8000c34:	2332      	movs	r3, #50	; 0x32
 8000c36:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8000c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c42:	2300      	movs	r3, #0
 8000c44:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4807      	ldr	r0, [pc, #28]	; (8000c68 <MX_TIM1_Init+0x150>)
 8000c4c:	f005 f8fc 	bl	8005e48 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000c56:	f000 f9b7 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c5a:	4803      	ldr	r0, [pc, #12]	; (8000c68 <MX_TIM1_Init+0x150>)
 8000c5c:	f000 fc08 	bl	8001470 <HAL_TIM_MspPostInit>

}
 8000c60:	bf00      	nop
 8000c62:	3748      	adds	r7, #72	; 0x48
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	200002ac 	.word	0x200002ac
 8000c6c:	40010000 	.word	0x40010000

08000c70 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08c      	sub	sp, #48	; 0x30
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c76:	f107 031c 	add.w	r3, r7, #28
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c9c:	4b35      	ldr	r3, [pc, #212]	; (8000d74 <MX_TIM4_Init+0x104>)
 8000c9e:	4a36      	ldr	r2, [pc, #216]	; (8000d78 <MX_TIM4_Init+0x108>)
 8000ca0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 8000ca2:	4b34      	ldr	r3, [pc, #208]	; (8000d74 <MX_TIM4_Init+0x104>)
 8000ca4:	2247      	movs	r2, #71	; 0x47
 8000ca6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca8:	4b32      	ldr	r3, [pc, #200]	; (8000d74 <MX_TIM4_Init+0x104>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000;
 8000cae:	4b31      	ldr	r3, [pc, #196]	; (8000d74 <MX_TIM4_Init+0x104>)
 8000cb0:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000cb4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb6:	4b2f      	ldr	r3, [pc, #188]	; (8000d74 <MX_TIM4_Init+0x104>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cbc:	4b2d      	ldr	r3, [pc, #180]	; (8000d74 <MX_TIM4_Init+0x104>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000cc2:	482c      	ldr	r0, [pc, #176]	; (8000d74 <MX_TIM4_Init+0x104>)
 8000cc4:	f004 f921 	bl	8004f0a <HAL_TIM_Base_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8000cce:	f000 f97b 	bl	8000fc8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000cd2:	4828      	ldr	r0, [pc, #160]	; (8000d74 <MX_TIM4_Init+0x104>)
 8000cd4:	f004 f9b7 	bl	8005046 <HAL_TIM_IC_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8000cde:	f000 f973 	bl	8000fc8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000ce2:	2304      	movs	r3, #4
 8000ce4:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000ce6:	2350      	movs	r3, #80	; 0x50
 8000ce8:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000cea:	2300      	movs	r3, #0
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000cf2:	f107 031c 	add.w	r3, r7, #28
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	481e      	ldr	r0, [pc, #120]	; (8000d74 <MX_TIM4_Init+0x104>)
 8000cfa:	f004 fb5b 	bl	80053b4 <HAL_TIM_SlaveConfigSynchro>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000d04:	f000 f960 	bl	8000fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	4619      	mov	r1, r3
 8000d16:	4817      	ldr	r0, [pc, #92]	; (8000d74 <MX_TIM4_Init+0x104>)
 8000d18:	f005 f81a 	bl	8005d50 <HAL_TIMEx_MasterConfigSynchronization>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8000d22:	f000 f951 	bl	8000fc8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	2200      	movs	r2, #0
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	480d      	ldr	r0, [pc, #52]	; (8000d74 <MX_TIM4_Init+0x104>)
 8000d3e:	f004 f9db 	bl	80050f8 <HAL_TIM_IC_ConfigChannel>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8000d48:	f000 f93e 	bl	8000fc8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000d50:	2302      	movs	r3, #2
 8000d52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	2204      	movs	r2, #4
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4806      	ldr	r0, [pc, #24]	; (8000d74 <MX_TIM4_Init+0x104>)
 8000d5c:	f004 f9cc 	bl	80050f8 <HAL_TIM_IC_ConfigChannel>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM4_Init+0xfa>
  {
    Error_Handler();
 8000d66:	f000 f92f 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d6a:	bf00      	nop
 8000d6c:	3730      	adds	r7, #48	; 0x30
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	200002f4 	.word	0x200002f4
 8000d78:	40000800 	.word	0x40000800

08000d7c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d82:	463b      	mov	r3, r7
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <MX_TIM7_Init+0x64>)
 8000d8c:	4a15      	ldr	r2, [pc, #84]	; (8000de4 <MX_TIM7_Init+0x68>)
 8000d8e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000d90:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <MX_TIM7_Init+0x64>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d96:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <MX_TIM7_Init+0x64>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000d9c:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <MX_TIM7_Init+0x64>)
 8000d9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000da2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da4:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <MX_TIM7_Init+0x64>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000daa:	480d      	ldr	r0, [pc, #52]	; (8000de0 <MX_TIM7_Init+0x64>)
 8000dac:	f004 f8ad 	bl	8004f0a <HAL_TIM_Base_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000db6:	f000 f907 	bl	8000fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4806      	ldr	r0, [pc, #24]	; (8000de0 <MX_TIM7_Init+0x64>)
 8000dc8:	f004 ffc2 	bl	8005d50 <HAL_TIMEx_MasterConfigSynchronization>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000dd2:	f000 f8f9 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	2000033c 	.word	0x2000033c
 8000de4:	40001400 	.word	0x40001400

08000de8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <MX_USART3_UART_Init+0x4c>)
 8000dee:	4a12      	ldr	r2, [pc, #72]	; (8000e38 <MX_USART3_UART_Init+0x50>)
 8000df0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000df2:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <MX_USART3_UART_Init+0x4c>)
 8000df4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000df8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <MX_USART3_UART_Init+0x4c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <MX_USART3_UART_Init+0x4c>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e06:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <MX_USART3_UART_Init+0x4c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e0c:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <MX_USART3_UART_Init+0x4c>)
 8000e0e:	220c      	movs	r2, #12
 8000e10:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e12:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <MX_USART3_UART_Init+0x4c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <MX_USART3_UART_Init+0x4c>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e1e:	4805      	ldr	r0, [pc, #20]	; (8000e34 <MX_USART3_UART_Init+0x4c>)
 8000e20:	f005 f864 	bl	8005eec <HAL_UART_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000e2a:	f000 f8cd 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000384 	.word	0x20000384
 8000e38:	40004800 	.word	0x40004800

08000e3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <MX_DMA_Init+0x3c>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a0b      	ldr	r2, [pc, #44]	; (8000e78 <MX_DMA_Init+0x3c>)
 8000e4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <MX_DMA_Init+0x3c>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e5a:	607b      	str	r3, [r7, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 1, 0);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2101      	movs	r1, #1
 8000e62:	200e      	movs	r0, #14
 8000e64:	f001 faab 	bl	80023be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000e68:	200e      	movs	r0, #14
 8000e6a:	f001 fac4 	bl	80023f6 <HAL_NVIC_EnableIRQ>

}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40023800 	.word	0x40023800

08000e7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	; 0x28
 8000e80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
 8000e90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	4b48      	ldr	r3, [pc, #288]	; (8000fb8 <MX_GPIO_Init+0x13c>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a47      	ldr	r2, [pc, #284]	; (8000fb8 <MX_GPIO_Init+0x13c>)
 8000e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b45      	ldr	r3, [pc, #276]	; (8000fb8 <MX_GPIO_Init+0x13c>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	4b41      	ldr	r3, [pc, #260]	; (8000fb8 <MX_GPIO_Init+0x13c>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a40      	ldr	r2, [pc, #256]	; (8000fb8 <MX_GPIO_Init+0x13c>)
 8000eb8:	f043 0304 	orr.w	r3, r3, #4
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b3e      	ldr	r3, [pc, #248]	; (8000fb8 <MX_GPIO_Init+0x13c>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0304 	and.w	r3, r3, #4
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	4b3a      	ldr	r3, [pc, #232]	; (8000fb8 <MX_GPIO_Init+0x13c>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a39      	ldr	r2, [pc, #228]	; (8000fb8 <MX_GPIO_Init+0x13c>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b37      	ldr	r3, [pc, #220]	; (8000fb8 <MX_GPIO_Init+0x13c>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	607b      	str	r3, [r7, #4]
 8000eea:	4b33      	ldr	r3, [pc, #204]	; (8000fb8 <MX_GPIO_Init+0x13c>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a32      	ldr	r2, [pc, #200]	; (8000fb8 <MX_GPIO_Init+0x13c>)
 8000ef0:	f043 0302 	orr.w	r3, r3, #2
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b30      	ldr	r3, [pc, #192]	; (8000fb8 <MX_GPIO_Init+0x13c>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	603b      	str	r3, [r7, #0]
 8000f06:	4b2c      	ldr	r3, [pc, #176]	; (8000fb8 <MX_GPIO_Init+0x13c>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a2b      	ldr	r2, [pc, #172]	; (8000fb8 <MX_GPIO_Init+0x13c>)
 8000f0c:	f043 0308 	orr.w	r3, r3, #8
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b29      	ldr	r3, [pc, #164]	; (8000fb8 <MX_GPIO_Init+0x13c>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0308 	and.w	r3, r3, #8
 8000f1a:	603b      	str	r3, [r7, #0]
 8000f1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f24:	4825      	ldr	r0, [pc, #148]	; (8000fbc <MX_GPIO_Init+0x140>)
 8000f26:	f002 f81f 	bl	8002f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2104      	movs	r1, #4
 8000f2e:	4824      	ldr	r0, [pc, #144]	; (8000fc0 <MX_GPIO_Init+0x144>)
 8000f30:	f002 f81a 	bl	8002f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 8000f34:	2200      	movs	r2, #0
 8000f36:	21a0      	movs	r1, #160	; 0xa0
 8000f38:	4822      	ldr	r0, [pc, #136]	; (8000fc4 <MX_GPIO_Init+0x148>)
 8000f3a:	f002 f815 	bl	8002f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC6 PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000f3e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000f42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	4619      	mov	r1, r3
 8000f52:	481a      	ldr	r0, [pc, #104]	; (8000fbc <MX_GPIO_Init+0x140>)
 8000f54:	f001 fe6c 	bl	8002c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4812      	ldr	r0, [pc, #72]	; (8000fbc <MX_GPIO_Init+0x140>)
 8000f72:	f001 fe5d 	bl	8002c30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f76:	2304      	movs	r3, #4
 8000f78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f82:	2300      	movs	r3, #0
 8000f84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <MX_GPIO_Init+0x144>)
 8000f8e:	f001 fe4f 	bl	8002c30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f92:	23a0      	movs	r3, #160	; 0xa0
 8000f94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f96:	2301      	movs	r3, #1
 8000f98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4806      	ldr	r0, [pc, #24]	; (8000fc4 <MX_GPIO_Init+0x148>)
 8000faa:	f001 fe41 	bl	8002c30 <HAL_GPIO_Init>

}
 8000fae:	bf00      	nop
 8000fb0:	3728      	adds	r7, #40	; 0x28
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40020800 	.word	0x40020800
 8000fc0:	40020c00 	.word	0x40020c00
 8000fc4:	40020400 	.word	0x40020400

08000fc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fcc:	b672      	cpsid	i
}
 8000fce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <Error_Handler+0x8>
	...

08000fd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	607b      	str	r3, [r7, #4]
 8000fde:	4b10      	ldr	r3, [pc, #64]	; (8001020 <HAL_MspInit+0x4c>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe2:	4a0f      	ldr	r2, [pc, #60]	; (8001020 <HAL_MspInit+0x4c>)
 8000fe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fea:	4b0d      	ldr	r3, [pc, #52]	; (8001020 <HAL_MspInit+0x4c>)
 8000fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	603b      	str	r3, [r7, #0]
 8000ffa:	4b09      	ldr	r3, [pc, #36]	; (8001020 <HAL_MspInit+0x4c>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	4a08      	ldr	r2, [pc, #32]	; (8001020 <HAL_MspInit+0x4c>)
 8001000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001004:	6413      	str	r3, [r2, #64]	; 0x40
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_MspInit+0x4c>)
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100e:	603b      	str	r3, [r7, #0]
 8001010:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	40023800 	.word	0x40023800

08001024 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b092      	sub	sp, #72	; 0x48
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a85      	ldr	r2, [pc, #532]	; (8001258 <HAL_ADC_MspInit+0x234>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d14a      	bne.n	80010dc <HAL_ADC_MspInit+0xb8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	633b      	str	r3, [r7, #48]	; 0x30
 800104a:	4b84      	ldr	r3, [pc, #528]	; (800125c <HAL_ADC_MspInit+0x238>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	4a83      	ldr	r2, [pc, #524]	; (800125c <HAL_ADC_MspInit+0x238>)
 8001050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001054:	6453      	str	r3, [r2, #68]	; 0x44
 8001056:	4b81      	ldr	r3, [pc, #516]	; (800125c <HAL_ADC_MspInit+0x238>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800105e:	633b      	str	r3, [r7, #48]	; 0x30
 8001060:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001066:	4b7d      	ldr	r3, [pc, #500]	; (800125c <HAL_ADC_MspInit+0x238>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a7c      	ldr	r2, [pc, #496]	; (800125c <HAL_ADC_MspInit+0x238>)
 800106c:	f043 0304 	orr.w	r3, r3, #4
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b7a      	ldr	r3, [pc, #488]	; (800125c <HAL_ADC_MspInit+0x238>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800107c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28
 8001082:	4b76      	ldr	r3, [pc, #472]	; (800125c <HAL_ADC_MspInit+0x238>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a75      	ldr	r2, [pc, #468]	; (800125c <HAL_ADC_MspInit+0x238>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b73      	ldr	r3, [pc, #460]	; (800125c <HAL_ADC_MspInit+0x238>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	62bb      	str	r3, [r7, #40]	; 0x28
 8001098:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PA0-WKUP     ------> ADC1_IN0
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5;
 800109a:	2321      	movs	r3, #33	; 0x21
 800109c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800109e:	2303      	movs	r3, #3
 80010a0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010aa:	4619      	mov	r1, r3
 80010ac:	486c      	ldr	r0, [pc, #432]	; (8001260 <HAL_ADC_MspInit+0x23c>)
 80010ae:	f001 fdbf 	bl	8002c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5;
 80010b2:	2331      	movs	r3, #49	; 0x31
 80010b4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010b6:	2303      	movs	r3, #3
 80010b8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010c2:	4619      	mov	r1, r3
 80010c4:	4867      	ldr	r0, [pc, #412]	; (8001264 <HAL_ADC_MspInit+0x240>)
 80010c6:	f001 fdb3 	bl	8002c30 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2100      	movs	r1, #0
 80010ce:	2012      	movs	r0, #18
 80010d0:	f001 f975 	bl	80023be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80010d4:	2012      	movs	r0, #18
 80010d6:	f001 f98e 	bl	80023f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80010da:	e0b8      	b.n	800124e <HAL_ADC_MspInit+0x22a>
  else if(hadc->Instance==ADC2)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a61      	ldr	r2, [pc, #388]	; (8001268 <HAL_ADC_MspInit+0x244>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d164      	bne.n	80011b0 <HAL_ADC_MspInit+0x18c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
 80010ea:	4b5c      	ldr	r3, [pc, #368]	; (800125c <HAL_ADC_MspInit+0x238>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	4a5b      	ldr	r2, [pc, #364]	; (800125c <HAL_ADC_MspInit+0x238>)
 80010f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010f4:	6453      	str	r3, [r2, #68]	; 0x44
 80010f6:	4b59      	ldr	r3, [pc, #356]	; (800125c <HAL_ADC_MspInit+0x238>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	623b      	str	r3, [r7, #32]
 8001106:	4b55      	ldr	r3, [pc, #340]	; (800125c <HAL_ADC_MspInit+0x238>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a54      	ldr	r2, [pc, #336]	; (800125c <HAL_ADC_MspInit+0x238>)
 800110c:	f043 0304 	orr.w	r3, r3, #4
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b52      	ldr	r3, [pc, #328]	; (800125c <HAL_ADC_MspInit+0x238>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0304 	and.w	r3, r3, #4
 800111a:	623b      	str	r3, [r7, #32]
 800111c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
 8001122:	4b4e      	ldr	r3, [pc, #312]	; (800125c <HAL_ADC_MspInit+0x238>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a4d      	ldr	r2, [pc, #308]	; (800125c <HAL_ADC_MspInit+0x238>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b4b      	ldr	r3, [pc, #300]	; (800125c <HAL_ADC_MspInit+0x238>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	61fb      	str	r3, [r7, #28]
 8001138:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	61bb      	str	r3, [r7, #24]
 800113e:	4b47      	ldr	r3, [pc, #284]	; (800125c <HAL_ADC_MspInit+0x238>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a46      	ldr	r2, [pc, #280]	; (800125c <HAL_ADC_MspInit+0x238>)
 8001144:	f043 0302 	orr.w	r3, r3, #2
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b44      	ldr	r3, [pc, #272]	; (800125c <HAL_ADC_MspInit+0x238>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	61bb      	str	r3, [r7, #24]
 8001154:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 8001156:	2312      	movs	r3, #18
 8001158:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800115a:	2303      	movs	r3, #3
 800115c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001162:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001166:	4619      	mov	r1, r3
 8001168:	483d      	ldr	r0, [pc, #244]	; (8001260 <HAL_ADC_MspInit+0x23c>)
 800116a:	f001 fd61 	bl	8002c30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800116e:	2302      	movs	r3, #2
 8001170:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001172:	2303      	movs	r3, #3
 8001174:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800117e:	4619      	mov	r1, r3
 8001180:	4838      	ldr	r0, [pc, #224]	; (8001264 <HAL_ADC_MspInit+0x240>)
 8001182:	f001 fd55 	bl	8002c30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001186:	2302      	movs	r3, #2
 8001188:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800118a:	2303      	movs	r3, #3
 800118c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001192:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001196:	4619      	mov	r1, r3
 8001198:	4834      	ldr	r0, [pc, #208]	; (800126c <HAL_ADC_MspInit+0x248>)
 800119a:	f001 fd49 	bl	8002c30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2100      	movs	r1, #0
 80011a2:	2012      	movs	r0, #18
 80011a4:	f001 f90b 	bl	80023be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80011a8:	2012      	movs	r0, #18
 80011aa:	f001 f924 	bl	80023f6 <HAL_NVIC_EnableIRQ>
}
 80011ae:	e04e      	b.n	800124e <HAL_ADC_MspInit+0x22a>
  else if(hadc->Instance==ADC3)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a2e      	ldr	r2, [pc, #184]	; (8001270 <HAL_ADC_MspInit+0x24c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d149      	bne.n	800124e <HAL_ADC_MspInit+0x22a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
 80011be:	4b27      	ldr	r3, [pc, #156]	; (800125c <HAL_ADC_MspInit+0x238>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	4a26      	ldr	r2, [pc, #152]	; (800125c <HAL_ADC_MspInit+0x238>)
 80011c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011c8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ca:	4b24      	ldr	r3, [pc, #144]	; (800125c <HAL_ADC_MspInit+0x238>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	4b20      	ldr	r3, [pc, #128]	; (800125c <HAL_ADC_MspInit+0x238>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a1f      	ldr	r2, [pc, #124]	; (800125c <HAL_ADC_MspInit+0x238>)
 80011e0:	f043 0304 	orr.w	r3, r3, #4
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b1d      	ldr	r3, [pc, #116]	; (800125c <HAL_ADC_MspInit+0x238>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0304 	and.w	r3, r3, #4
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	4b19      	ldr	r3, [pc, #100]	; (800125c <HAL_ADC_MspInit+0x238>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a18      	ldr	r2, [pc, #96]	; (800125c <HAL_ADC_MspInit+0x238>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b16      	ldr	r3, [pc, #88]	; (800125c <HAL_ADC_MspInit+0x238>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800120e:	230c      	movs	r3, #12
 8001210:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001212:	2303      	movs	r3, #3
 8001214:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800121a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800121e:	4619      	mov	r1, r3
 8001220:	480f      	ldr	r0, [pc, #60]	; (8001260 <HAL_ADC_MspInit+0x23c>)
 8001222:	f001 fd05 	bl	8002c30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001226:	2304      	movs	r3, #4
 8001228:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800122a:	2303      	movs	r3, #3
 800122c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001232:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001236:	4619      	mov	r1, r3
 8001238:	480a      	ldr	r0, [pc, #40]	; (8001264 <HAL_ADC_MspInit+0x240>)
 800123a:	f001 fcf9 	bl	8002c30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2100      	movs	r1, #0
 8001242:	2012      	movs	r0, #18
 8001244:	f001 f8bb 	bl	80023be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001248:	2012      	movs	r0, #18
 800124a:	f001 f8d4 	bl	80023f6 <HAL_NVIC_EnableIRQ>
}
 800124e:	bf00      	nop
 8001250:	3748      	adds	r7, #72	; 0x48
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40012000 	.word	0x40012000
 800125c:	40023800 	.word	0x40023800
 8001260:	40020800 	.word	0x40020800
 8001264:	40020000 	.word	0x40020000
 8001268:	40012100 	.word	0x40012100
 800126c:	40020400 	.word	0x40020400
 8001270:	40012200 	.word	0x40012200

08001274 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	; 0x28
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a19      	ldr	r2, [pc, #100]	; (80012f8 <HAL_SPI_MspInit+0x84>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d12c      	bne.n	80012f0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	4b18      	ldr	r3, [pc, #96]	; (80012fc <HAL_SPI_MspInit+0x88>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	4a17      	ldr	r2, [pc, #92]	; (80012fc <HAL_SPI_MspInit+0x88>)
 80012a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012a4:	6413      	str	r3, [r2, #64]	; 0x40
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <HAL_SPI_MspInit+0x88>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	4b11      	ldr	r3, [pc, #68]	; (80012fc <HAL_SPI_MspInit+0x88>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a10      	ldr	r2, [pc, #64]	; (80012fc <HAL_SPI_MspInit+0x88>)
 80012bc:	f043 0304 	orr.w	r3, r3, #4
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <HAL_SPI_MspInit+0x88>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0304 	and.w	r3, r3, #4
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80012ce:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80012d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012dc:	2303      	movs	r3, #3
 80012de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012e0:	2306      	movs	r3, #6
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	4619      	mov	r1, r3
 80012ea:	4805      	ldr	r0, [pc, #20]	; (8001300 <HAL_SPI_MspInit+0x8c>)
 80012ec:	f001 fca0 	bl	8002c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80012f0:	bf00      	nop
 80012f2:	3728      	adds	r7, #40	; 0x28
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40003c00 	.word	0x40003c00
 80012fc:	40023800 	.word	0x40023800
 8001300:	40020800 	.word	0x40020800

08001304 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08a      	sub	sp, #40	; 0x28
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a1d      	ldr	r2, [pc, #116]	; (8001398 <HAL_TIM_PWM_MspInit+0x94>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d134      	bne.n	8001390 <HAL_TIM_PWM_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	4b1c      	ldr	r3, [pc, #112]	; (800139c <HAL_TIM_PWM_MspInit+0x98>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	4a1b      	ldr	r2, [pc, #108]	; (800139c <HAL_TIM_PWM_MspInit+0x98>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6453      	str	r3, [r2, #68]	; 0x44
 8001336:	4b19      	ldr	r3, [pc, #100]	; (800139c <HAL_TIM_PWM_MspInit+0x98>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <HAL_TIM_PWM_MspInit+0x98>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a14      	ldr	r2, [pc, #80]	; (800139c <HAL_TIM_PWM_MspInit+0x98>)
 800134c:	f043 0302 	orr.w	r3, r3, #2
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b12      	ldr	r3, [pc, #72]	; (800139c <HAL_TIM_PWM_MspInit+0x98>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PB12     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800135e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001364:	2302      	movs	r3, #2
 8001366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	2300      	movs	r3, #0
 800136e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001370:	2301      	movs	r3, #1
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	4619      	mov	r1, r3
 800137a:	4809      	ldr	r0, [pc, #36]	; (80013a0 <HAL_TIM_PWM_MspInit+0x9c>)
 800137c:	f001 fc58 	bl	8002c30 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8001380:	2200      	movs	r2, #0
 8001382:	2101      	movs	r1, #1
 8001384:	2019      	movs	r0, #25
 8001386:	f001 f81a 	bl	80023be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800138a:	2019      	movs	r0, #25
 800138c:	f001 f833 	bl	80023f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001390:	bf00      	nop
 8001392:	3728      	adds	r7, #40	; 0x28
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40010000 	.word	0x40010000
 800139c:	40023800 	.word	0x40023800
 80013a0:	40020400 	.word	0x40020400

080013a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08a      	sub	sp, #40	; 0x28
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM4)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a27      	ldr	r2, [pc, #156]	; (8001460 <HAL_TIM_Base_MspInit+0xbc>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d134      	bne.n	8001430 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
 80013ca:	4b26      	ldr	r3, [pc, #152]	; (8001464 <HAL_TIM_Base_MspInit+0xc0>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	4a25      	ldr	r2, [pc, #148]	; (8001464 <HAL_TIM_Base_MspInit+0xc0>)
 80013d0:	f043 0304 	orr.w	r3, r3, #4
 80013d4:	6413      	str	r3, [r2, #64]	; 0x40
 80013d6:	4b23      	ldr	r3, [pc, #140]	; (8001464 <HAL_TIM_Base_MspInit+0xc0>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f003 0304 	and.w	r3, r3, #4
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <HAL_TIM_Base_MspInit+0xc0>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a1e      	ldr	r2, [pc, #120]	; (8001464 <HAL_TIM_Base_MspInit+0xc0>)
 80013ec:	f043 0302 	orr.w	r3, r3, #2
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <HAL_TIM_Base_MspInit+0xc0>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013fe:	2340      	movs	r3, #64	; 0x40
 8001400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001402:	2302      	movs	r3, #2
 8001404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140a:	2300      	movs	r3, #0
 800140c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800140e:	2302      	movs	r3, #2
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	4619      	mov	r1, r3
 8001418:	4813      	ldr	r0, [pc, #76]	; (8001468 <HAL_TIM_Base_MspInit+0xc4>)
 800141a:	f001 fc09 	bl	8002c30 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	2102      	movs	r1, #2
 8001422:	201e      	movs	r0, #30
 8001424:	f000 ffcb 	bl	80023be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001428:	201e      	movs	r0, #30
 800142a:	f000 ffe4 	bl	80023f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800142e:	e012      	b.n	8001456 <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM7)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a0d      	ldr	r2, [pc, #52]	; (800146c <HAL_TIM_Base_MspInit+0xc8>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d10d      	bne.n	8001456 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	4b09      	ldr	r3, [pc, #36]	; (8001464 <HAL_TIM_Base_MspInit+0xc0>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	4a08      	ldr	r2, [pc, #32]	; (8001464 <HAL_TIM_Base_MspInit+0xc0>)
 8001444:	f043 0320 	orr.w	r3, r3, #32
 8001448:	6413      	str	r3, [r2, #64]	; 0x40
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <HAL_TIM_Base_MspInit+0xc0>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	f003 0320 	and.w	r3, r3, #32
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	68bb      	ldr	r3, [r7, #8]
}
 8001456:	bf00      	nop
 8001458:	3728      	adds	r7, #40	; 0x28
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40000800 	.word	0x40000800
 8001464:	40023800 	.word	0x40023800
 8001468:	40020400 	.word	0x40020400
 800146c:	40001400 	.word	0x40001400

08001470 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	; 0x28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a22      	ldr	r2, [pc, #136]	; (8001518 <HAL_TIM_MspPostInit+0xa8>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d13d      	bne.n	800150e <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	4b21      	ldr	r3, [pc, #132]	; (800151c <HAL_TIM_MspPostInit+0xac>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a20      	ldr	r2, [pc, #128]	; (800151c <HAL_TIM_MspPostInit+0xac>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b1e      	ldr	r3, [pc, #120]	; (800151c <HAL_TIM_MspPostInit+0xac>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	4b1a      	ldr	r3, [pc, #104]	; (800151c <HAL_TIM_MspPostInit+0xac>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a19      	ldr	r2, [pc, #100]	; (800151c <HAL_TIM_MspPostInit+0xac>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b17      	ldr	r3, [pc, #92]	; (800151c <HAL_TIM_MspPostInit+0xac>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80014ca:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80014ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d0:	2302      	movs	r3, #2
 80014d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d8:	2300      	movs	r3, #0
 80014da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014dc:	2301      	movs	r3, #1
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	4619      	mov	r1, r3
 80014e6:	480e      	ldr	r0, [pc, #56]	; (8001520 <HAL_TIM_MspPostInit+0xb0>)
 80014e8:	f001 fba2 	bl	8002c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80014ec:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80014f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f2:	2302      	movs	r3, #2
 80014f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fa:	2300      	movs	r3, #0
 80014fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80014fe:	2301      	movs	r3, #1
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	4619      	mov	r1, r3
 8001508:	4806      	ldr	r0, [pc, #24]	; (8001524 <HAL_TIM_MspPostInit+0xb4>)
 800150a:	f001 fb91 	bl	8002c30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800150e:	bf00      	nop
 8001510:	3728      	adds	r7, #40	; 0x28
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40010000 	.word	0x40010000
 800151c:	40023800 	.word	0x40023800
 8001520:	40020400 	.word	0x40020400
 8001524:	40020000 	.word	0x40020000

08001528 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	; 0x28
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a34      	ldr	r2, [pc, #208]	; (8001618 <HAL_UART_MspInit+0xf0>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d162      	bne.n	8001610 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	4b33      	ldr	r3, [pc, #204]	; (800161c <HAL_UART_MspInit+0xf4>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	4a32      	ldr	r2, [pc, #200]	; (800161c <HAL_UART_MspInit+0xf4>)
 8001554:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001558:	6413      	str	r3, [r2, #64]	; 0x40
 800155a:	4b30      	ldr	r3, [pc, #192]	; (800161c <HAL_UART_MspInit+0xf4>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001562:	613b      	str	r3, [r7, #16]
 8001564:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	4b2c      	ldr	r3, [pc, #176]	; (800161c <HAL_UART_MspInit+0xf4>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a2b      	ldr	r2, [pc, #172]	; (800161c <HAL_UART_MspInit+0xf4>)
 8001570:	f043 0302 	orr.w	r3, r3, #2
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b29      	ldr	r3, [pc, #164]	; (800161c <HAL_UART_MspInit+0xf4>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001582:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001588:	2302      	movs	r3, #2
 800158a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001590:	2303      	movs	r3, #3
 8001592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001594:	2307      	movs	r3, #7
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	4619      	mov	r1, r3
 800159e:	4820      	ldr	r0, [pc, #128]	; (8001620 <HAL_UART_MspInit+0xf8>)
 80015a0:	f001 fb46 	bl	8002c30 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80015a4:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <HAL_UART_MspInit+0xfc>)
 80015a6:	4a20      	ldr	r2, [pc, #128]	; (8001628 <HAL_UART_MspInit+0x100>)
 80015a8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80015aa:	4b1e      	ldr	r3, [pc, #120]	; (8001624 <HAL_UART_MspInit+0xfc>)
 80015ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015b0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015b2:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <HAL_UART_MspInit+0xfc>)
 80015b4:	2240      	movs	r2, #64	; 0x40
 80015b6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015b8:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <HAL_UART_MspInit+0xfc>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015be:	4b19      	ldr	r3, [pc, #100]	; (8001624 <HAL_UART_MspInit+0xfc>)
 80015c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015c4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015c6:	4b17      	ldr	r3, [pc, #92]	; (8001624 <HAL_UART_MspInit+0xfc>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015cc:	4b15      	ldr	r3, [pc, #84]	; (8001624 <HAL_UART_MspInit+0xfc>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80015d2:	4b14      	ldr	r3, [pc, #80]	; (8001624 <HAL_UART_MspInit+0xfc>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015d8:	4b12      	ldr	r3, [pc, #72]	; (8001624 <HAL_UART_MspInit+0xfc>)
 80015da:	2200      	movs	r2, #0
 80015dc:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015de:	4b11      	ldr	r3, [pc, #68]	; (8001624 <HAL_UART_MspInit+0xfc>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80015e4:	480f      	ldr	r0, [pc, #60]	; (8001624 <HAL_UART_MspInit+0xfc>)
 80015e6:	f000 ff21 	bl	800242c <HAL_DMA_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80015f0:	f7ff fcea 	bl	8000fc8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a0b      	ldr	r2, [pc, #44]	; (8001624 <HAL_UART_MspInit+0xfc>)
 80015f8:	635a      	str	r2, [r3, #52]	; 0x34
 80015fa:	4a0a      	ldr	r2, [pc, #40]	; (8001624 <HAL_UART_MspInit+0xfc>)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 8001600:	2200      	movs	r2, #0
 8001602:	2102      	movs	r1, #2
 8001604:	2027      	movs	r0, #39	; 0x27
 8001606:	f000 feda 	bl	80023be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800160a:	2027      	movs	r0, #39	; 0x27
 800160c:	f000 fef3 	bl	80023f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001610:	bf00      	nop
 8001612:	3728      	adds	r7, #40	; 0x28
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40004800 	.word	0x40004800
 800161c:	40023800 	.word	0x40023800
 8001620:	40020400 	.word	0x40020400
 8001624:	200003c8 	.word	0x200003c8
 8001628:	40026058 	.word	0x40026058

0800162c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001630:	e7fe      	b.n	8001630 <NMI_Handler+0x4>

08001632 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001636:	e7fe      	b.n	8001636 <HardFault_Handler+0x4>

08001638 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800163c:	e7fe      	b.n	800163c <MemManage_Handler+0x4>

0800163e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001642:	e7fe      	b.n	8001642 <BusFault_Handler+0x4>

08001644 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001648:	e7fe      	b.n	8001648 <UsageFault_Handler+0x4>

0800164a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001678:	f000 f98a 	bl	8001990 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}

08001680 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001684:	4802      	ldr	r0, [pc, #8]	; (8001690 <DMA1_Stream3_IRQHandler+0x10>)
 8001686:	f001 f869 	bl	800275c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200003c8 	.word	0x200003c8

08001694 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_IRQn 0 */
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0

  /* USER CODE END TIM4_IRQn 0 */
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
	...

080016c0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80016c4:	4802      	ldr	r0, [pc, #8]	; (80016d0 <USART3_IRQHandler+0x10>)
 80016c6:	f004 fcdd 	bl	8006084 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000384 	.word	0x20000384

080016d4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80016d8:	4802      	ldr	r0, [pc, #8]	; (80016e4 <OTG_FS_IRQHandler+0x10>)
 80016da:	f001 fdc8 	bl	800326e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	200010e0 	.word	0x200010e0

080016e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
	return 1;
 80016ec:	2301      	movs	r3, #1
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <_kill>:

int _kill(int pid, int sig)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001702:	f009 fd21 	bl	800b148 <__errno>
 8001706:	4603      	mov	r3, r0
 8001708:	2216      	movs	r2, #22
 800170a:	601a      	str	r2, [r3, #0]
	return -1;
 800170c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001710:	4618      	mov	r0, r3
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <_exit>:

void _exit (int status)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001720:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f7ff ffe7 	bl	80016f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800172a:	e7fe      	b.n	800172a <_exit+0x12>

0800172c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	e00a      	b.n	8001754 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800173e:	f3af 8000 	nop.w
 8001742:	4601      	mov	r1, r0
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	1c5a      	adds	r2, r3, #1
 8001748:	60ba      	str	r2, [r7, #8]
 800174a:	b2ca      	uxtb	r2, r1
 800174c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	3301      	adds	r3, #1
 8001752:	617b      	str	r3, [r7, #20]
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	429a      	cmp	r2, r3
 800175a:	dbf0      	blt.n	800173e <_read+0x12>
	}

return len;
 800175c:	687b      	ldr	r3, [r7, #4]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b086      	sub	sp, #24
 800176a:	af00      	add	r7, sp, #0
 800176c:	60f8      	str	r0, [r7, #12]
 800176e:	60b9      	str	r1, [r7, #8]
 8001770:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
 8001776:	e009      	b.n	800178c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	1c5a      	adds	r2, r3, #1
 800177c:	60ba      	str	r2, [r7, #8]
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	3301      	adds	r3, #1
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	429a      	cmp	r2, r3
 8001792:	dbf1      	blt.n	8001778 <_write+0x12>
	}
	return len;
 8001794:	687b      	ldr	r3, [r7, #4]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <_close>:

int _close(int file)
{
 800179e:	b480      	push	{r7}
 80017a0:	b083      	sub	sp, #12
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
	return -1;
 80017a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
 80017be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017c6:	605a      	str	r2, [r3, #4]
	return 0;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <_isatty>:

int _isatty(int file)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
	return 1;
 80017de:	2301      	movs	r3, #1
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
	return 0;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
	...

08001808 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001810:	4a14      	ldr	r2, [pc, #80]	; (8001864 <_sbrk+0x5c>)
 8001812:	4b15      	ldr	r3, [pc, #84]	; (8001868 <_sbrk+0x60>)
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800181c:	4b13      	ldr	r3, [pc, #76]	; (800186c <_sbrk+0x64>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d102      	bne.n	800182a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001824:	4b11      	ldr	r3, [pc, #68]	; (800186c <_sbrk+0x64>)
 8001826:	4a12      	ldr	r2, [pc, #72]	; (8001870 <_sbrk+0x68>)
 8001828:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <_sbrk+0x64>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4413      	add	r3, r2
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	429a      	cmp	r2, r3
 8001836:	d207      	bcs.n	8001848 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001838:	f009 fc86 	bl	800b148 <__errno>
 800183c:	4603      	mov	r3, r0
 800183e:	220c      	movs	r2, #12
 8001840:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001842:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001846:	e009      	b.n	800185c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001848:	4b08      	ldr	r3, [pc, #32]	; (800186c <_sbrk+0x64>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800184e:	4b07      	ldr	r3, [pc, #28]	; (800186c <_sbrk+0x64>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	4a05      	ldr	r2, [pc, #20]	; (800186c <_sbrk+0x64>)
 8001858:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800185a:	68fb      	ldr	r3, [r7, #12]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20020000 	.word	0x20020000
 8001868:	00000400 	.word	0x00000400
 800186c:	20000428 	.word	0x20000428
 8001870:	20001820 	.word	0x20001820

08001874 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <SystemInit+0x20>)
 800187a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800187e:	4a05      	ldr	r2, [pc, #20]	; (8001894 <SystemInit+0x20>)
 8001880:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001884:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001898:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800189c:	480d      	ldr	r0, [pc, #52]	; (80018d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800189e:	490e      	ldr	r1, [pc, #56]	; (80018d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018a0:	4a0e      	ldr	r2, [pc, #56]	; (80018dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018a4:	e002      	b.n	80018ac <LoopCopyDataInit>

080018a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018aa:	3304      	adds	r3, #4

080018ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018b0:	d3f9      	bcc.n	80018a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018b2:	4a0b      	ldr	r2, [pc, #44]	; (80018e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018b4:	4c0b      	ldr	r4, [pc, #44]	; (80018e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018b8:	e001      	b.n	80018be <LoopFillZerobss>

080018ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018bc:	3204      	adds	r2, #4

080018be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018c0:	d3fb      	bcc.n	80018ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018c2:	f7ff ffd7 	bl	8001874 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018c6:	f009 fc45 	bl	800b154 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ca:	f7fe fe53 	bl	8000574 <main>
  bx  lr    
 80018ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018d8:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 80018dc:	0800c7c8 	.word	0x0800c7c8
  ldr r2, =_sbss
 80018e0:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 80018e4:	2000181c 	.word	0x2000181c

080018e8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018e8:	e7fe      	b.n	80018e8 <CAN1_RX0_IRQHandler>
	...

080018ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018f0:	4b0e      	ldr	r3, [pc, #56]	; (800192c <HAL_Init+0x40>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a0d      	ldr	r2, [pc, #52]	; (800192c <HAL_Init+0x40>)
 80018f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018fc:	4b0b      	ldr	r3, [pc, #44]	; (800192c <HAL_Init+0x40>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a0a      	ldr	r2, [pc, #40]	; (800192c <HAL_Init+0x40>)
 8001902:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001906:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001908:	4b08      	ldr	r3, [pc, #32]	; (800192c <HAL_Init+0x40>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a07      	ldr	r2, [pc, #28]	; (800192c <HAL_Init+0x40>)
 800190e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001912:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001914:	2003      	movs	r0, #3
 8001916:	f000 fd47 	bl	80023a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800191a:	2001      	movs	r0, #1
 800191c:	f000 f808 	bl	8001930 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001920:	f7ff fb58 	bl	8000fd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40023c00 	.word	0x40023c00

08001930 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001938:	4b12      	ldr	r3, [pc, #72]	; (8001984 <HAL_InitTick+0x54>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	4b12      	ldr	r3, [pc, #72]	; (8001988 <HAL_InitTick+0x58>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	4619      	mov	r1, r3
 8001942:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001946:	fbb3 f3f1 	udiv	r3, r3, r1
 800194a:	fbb2 f3f3 	udiv	r3, r2, r3
 800194e:	4618      	mov	r0, r3
 8001950:	f000 fd5f 	bl	8002412 <HAL_SYSTICK_Config>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e00e      	b.n	800197c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2b0f      	cmp	r3, #15
 8001962:	d80a      	bhi.n	800197a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001964:	2200      	movs	r2, #0
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800196c:	f000 fd27 	bl	80023be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001970:	4a06      	ldr	r2, [pc, #24]	; (800198c <HAL_InitTick+0x5c>)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001976:	2300      	movs	r3, #0
 8001978:	e000      	b.n	800197c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
}
 800197c:	4618      	mov	r0, r3
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20000000 	.word	0x20000000
 8001988:	20000008 	.word	0x20000008
 800198c:	20000004 	.word	0x20000004

08001990 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <HAL_IncTick+0x20>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	461a      	mov	r2, r3
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <HAL_IncTick+0x24>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4413      	add	r3, r2
 80019a0:	4a04      	ldr	r2, [pc, #16]	; (80019b4 <HAL_IncTick+0x24>)
 80019a2:	6013      	str	r3, [r2, #0]
}
 80019a4:	bf00      	nop
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	20000008 	.word	0x20000008
 80019b4:	2000042c 	.word	0x2000042c

080019b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return uwTick;
 80019bc:	4b03      	ldr	r3, [pc, #12]	; (80019cc <HAL_GetTick+0x14>)
 80019be:	681b      	ldr	r3, [r3, #0]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	2000042c 	.word	0x2000042c

080019d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019d8:	f7ff ffee 	bl	80019b8 <HAL_GetTick>
 80019dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019e8:	d005      	beq.n	80019f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ea:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <HAL_Delay+0x44>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	461a      	mov	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4413      	add	r3, r2
 80019f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019f6:	bf00      	nop
 80019f8:	f7ff ffde 	bl	80019b8 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d8f7      	bhi.n	80019f8 <HAL_Delay+0x28>
  {
  }
}
 8001a08:	bf00      	nop
 8001a0a:	bf00      	nop
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000008 	.word	0x20000008

08001a18 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a20:	2300      	movs	r3, #0
 8001a22:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e033      	b.n	8001a96 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d109      	bne.n	8001a4a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff faf4 	bl	8001024 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	f003 0310 	and.w	r3, r3, #16
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d118      	bne.n	8001a88 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a5e:	f023 0302 	bic.w	r3, r3, #2
 8001a62:	f043 0202 	orr.w	r2, r3, #2
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 f93a 	bl	8001ce4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	f023 0303 	bic.w	r3, r3, #3
 8001a7e:	f043 0201 	orr.w	r2, r3, #1
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	641a      	str	r2, [r3, #64]	; 0x40
 8001a86:	e001      	b.n	8001a8c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
	...

08001aa0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d101      	bne.n	8001abc <HAL_ADC_ConfigChannel+0x1c>
 8001ab8:	2302      	movs	r3, #2
 8001aba:	e105      	b.n	8001cc8 <HAL_ADC_ConfigChannel+0x228>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b09      	cmp	r3, #9
 8001aca:	d925      	bls.n	8001b18 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68d9      	ldr	r1, [r3, #12]
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4613      	mov	r3, r2
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	4413      	add	r3, r2
 8001ae0:	3b1e      	subs	r3, #30
 8001ae2:	2207      	movs	r2, #7
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	43da      	mvns	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	400a      	ands	r2, r1
 8001af0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	68d9      	ldr	r1, [r3, #12]
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	4618      	mov	r0, r3
 8001b04:	4603      	mov	r3, r0
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	4403      	add	r3, r0
 8001b0a:	3b1e      	subs	r3, #30
 8001b0c:	409a      	lsls	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	430a      	orrs	r2, r1
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	e022      	b.n	8001b5e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6919      	ldr	r1, [r3, #16]
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	461a      	mov	r2, r3
 8001b26:	4613      	mov	r3, r2
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	4413      	add	r3, r2
 8001b2c:	2207      	movs	r2, #7
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43da      	mvns	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	400a      	ands	r2, r1
 8001b3a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6919      	ldr	r1, [r3, #16]
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	689a      	ldr	r2, [r3, #8]
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	4603      	mov	r3, r0
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	4403      	add	r3, r0
 8001b54:	409a      	lsls	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b06      	cmp	r3, #6
 8001b64:	d824      	bhi.n	8001bb0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	4613      	mov	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	3b05      	subs	r3, #5
 8001b78:	221f      	movs	r2, #31
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43da      	mvns	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	400a      	ands	r2, r1
 8001b86:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	4618      	mov	r0, r3
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4413      	add	r3, r2
 8001ba0:	3b05      	subs	r3, #5
 8001ba2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	430a      	orrs	r2, r1
 8001bac:	635a      	str	r2, [r3, #52]	; 0x34
 8001bae:	e04c      	b.n	8001c4a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b0c      	cmp	r3, #12
 8001bb6:	d824      	bhi.n	8001c02 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	3b23      	subs	r3, #35	; 0x23
 8001bca:	221f      	movs	r2, #31
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43da      	mvns	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	400a      	ands	r2, r1
 8001bd8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	4618      	mov	r0, r3
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	4613      	mov	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	3b23      	subs	r3, #35	; 0x23
 8001bf4:	fa00 f203 	lsl.w	r2, r0, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	631a      	str	r2, [r3, #48]	; 0x30
 8001c00:	e023      	b.n	8001c4a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	3b41      	subs	r3, #65	; 0x41
 8001c14:	221f      	movs	r2, #31
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43da      	mvns	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	400a      	ands	r2, r1
 8001c22:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	4618      	mov	r0, r3
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	3b41      	subs	r3, #65	; 0x41
 8001c3e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c4a:	4b22      	ldr	r3, [pc, #136]	; (8001cd4 <HAL_ADC_ConfigChannel+0x234>)
 8001c4c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a21      	ldr	r2, [pc, #132]	; (8001cd8 <HAL_ADC_ConfigChannel+0x238>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d109      	bne.n	8001c6c <HAL_ADC_ConfigChannel+0x1cc>
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b12      	cmp	r3, #18
 8001c5e:	d105      	bne.n	8001c6c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a19      	ldr	r2, [pc, #100]	; (8001cd8 <HAL_ADC_ConfigChannel+0x238>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d123      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x21e>
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2b10      	cmp	r3, #16
 8001c7c:	d003      	beq.n	8001c86 <HAL_ADC_ConfigChannel+0x1e6>
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2b11      	cmp	r3, #17
 8001c84:	d11b      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2b10      	cmp	r3, #16
 8001c98:	d111      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c9a:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <HAL_ADC_ConfigChannel+0x23c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a10      	ldr	r2, [pc, #64]	; (8001ce0 <HAL_ADC_ConfigChannel+0x240>)
 8001ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca4:	0c9a      	lsrs	r2, r3, #18
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	4413      	add	r3, r2
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cb0:	e002      	b.n	8001cb8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f9      	bne.n	8001cb2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	40012300 	.word	0x40012300
 8001cd8:	40012000 	.word	0x40012000
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	431bde83 	.word	0x431bde83

08001ce4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cec:	4b79      	ldr	r3, [pc, #484]	; (8001ed4 <ADC_Init+0x1f0>)
 8001cee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	685a      	ldr	r2, [r3, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	431a      	orrs	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6859      	ldr	r1, [r3, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	021a      	lsls	r2, r3, #8
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6859      	ldr	r1, [r3, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689a      	ldr	r2, [r3, #8]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6899      	ldr	r1, [r3, #8]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68da      	ldr	r2, [r3, #12]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d76:	4a58      	ldr	r2, [pc, #352]	; (8001ed8 <ADC_Init+0x1f4>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d022      	beq.n	8001dc2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	689a      	ldr	r2, [r3, #8]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d8a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6899      	ldr	r1, [r3, #8]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001dac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6899      	ldr	r1, [r3, #8]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	e00f      	b.n	8001de2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001de0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 0202 	bic.w	r2, r2, #2
 8001df0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6899      	ldr	r1, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	7e1b      	ldrb	r3, [r3, #24]
 8001dfc:	005a      	lsls	r2, r3, #1
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d01b      	beq.n	8001e48 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	685a      	ldr	r2, [r3, #4]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e1e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	685a      	ldr	r2, [r3, #4]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6859      	ldr	r1, [r3, #4]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	035a      	lsls	r2, r3, #13
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	430a      	orrs	r2, r1
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	e007      	b.n	8001e58 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e56:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	051a      	lsls	r2, r3, #20
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6899      	ldr	r1, [r3, #8]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e9a:	025a      	lsls	r2, r3, #9
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	689a      	ldr	r2, [r3, #8]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001eb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6899      	ldr	r1, [r3, #8]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	029a      	lsls	r2, r3, #10
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	609a      	str	r2, [r3, #8]
}
 8001ec8:	bf00      	nop
 8001eca:	3714      	adds	r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	40012300 	.word	0x40012300
 8001ed8:	0f000001 	.word	0x0f000001

08001edc <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d101      	bne.n	8001ef4 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	e17d      	b.n	80021f0 <HAL_ADCEx_InjectedConfigChannel+0x314>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2b09      	cmp	r3, #9
 8001f02:	d925      	bls.n	8001f50 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68d9      	ldr	r1, [r3, #12]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	461a      	mov	r2, r3
 8001f12:	4613      	mov	r3, r2
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	4413      	add	r3, r2
 8001f18:	3b1e      	subs	r3, #30
 8001f1a:	2207      	movs	r2, #7
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43da      	mvns	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	400a      	ands	r2, r1
 8001f28:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68d9      	ldr	r1, [r3, #12]
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	4403      	add	r3, r0
 8001f42:	3b1e      	subs	r3, #30
 8001f44:	409a      	lsls	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	60da      	str	r2, [r3, #12]
 8001f4e:	e022      	b.n	8001f96 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6919      	ldr	r1, [r3, #16]
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4613      	mov	r3, r2
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	4413      	add	r3, r2
 8001f64:	2207      	movs	r2, #7
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43da      	mvns	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	400a      	ands	r2, r1
 8001f72:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6919      	ldr	r1, [r3, #16]
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	689a      	ldr	r2, [r3, #8]
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	4618      	mov	r0, r3
 8001f86:	4603      	mov	r3, r0
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	4403      	add	r3, r0
 8001f8c:	409a      	lsls	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001fa4:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	051a      	lsls	r2, r3, #20
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	3303      	adds	r3, #3
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	4613      	mov	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	221f      	movs	r2, #31
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43da      	mvns	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	400a      	ands	r2, r1
 8001fec:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	b2da      	uxtb	r2, r3
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	b2db      	uxtb	r3, r3
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	b2db      	uxtb	r3, r3
 800200c:	3303      	adds	r3, #3
 800200e:	b2db      	uxtb	r3, r3
 8002010:	461a      	mov	r2, r3
 8002012:	4613      	mov	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	fa00 f203 	lsl.w	r2, r0, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	430a      	orrs	r2, r1
 8002022:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	4a74      	ldr	r2, [pc, #464]	; (80021fc <HAL_ADCEx_InjectedConfigChannel+0x320>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d022      	beq.n	8002074 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800203c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6899      	ldr	r1, [r3, #8]
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	699a      	ldr	r2, [r3, #24]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	430a      	orrs	r2, r1
 800204e:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800205e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6899      	ldr	r1, [r3, #8]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	69da      	ldr	r2, [r3, #28]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	609a      	str	r2, [r3, #8]
 8002072:	e00f      	b.n	8002094 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8002082:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689a      	ldr	r2, [r3, #8]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002092:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	7d5b      	ldrb	r3, [r3, #21]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d008      	beq.n	80020ae <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80020aa:	605a      	str	r2, [r3, #4]
 80020ac:	e007      	b.n	80020be <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020bc:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	7d1b      	ldrb	r3, [r3, #20]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d008      	beq.n	80020d8 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	e007      	b.n	80020e8 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80020e6:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b03      	cmp	r3, #3
 80020ee:	d02e      	beq.n	800214e <HAL_ADCEx_InjectedConfigChannel+0x272>
 80020f0:	2b03      	cmp	r3, #3
 80020f2:	d840      	bhi.n	8002176 <HAL_ADCEx_InjectedConfigChannel+0x29a>
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d002      	beq.n	80020fe <HAL_ADCEx_InjectedConfigChannel+0x222>
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d014      	beq.n	8002126 <HAL_ADCEx_InjectedConfigChannel+0x24a>
 80020fc:	e03b      	b.n	8002176 <HAL_ADCEx_InjectedConfigChannel+0x29a>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	695b      	ldr	r3, [r3, #20]
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	6812      	ldr	r2, [r2, #0]
 8002108:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800210c:	f023 030f 	bic.w	r3, r3, #15
 8002110:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6959      	ldr	r1, [r3, #20]
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	68da      	ldr	r2, [r3, #12]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	430a      	orrs	r2, r1
 8002122:	615a      	str	r2, [r3, #20]
      break;
 8002124:	e03b      	b.n	800219e <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6812      	ldr	r2, [r2, #0]
 8002130:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002134:	f023 030f 	bic.w	r3, r3, #15
 8002138:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6999      	ldr	r1, [r3, #24]
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	68da      	ldr	r2, [r3, #12]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	430a      	orrs	r2, r1
 800214a:	619a      	str	r2, [r3, #24]
      break;
 800214c:	e027      	b.n	800219e <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	69db      	ldr	r3, [r3, #28]
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6812      	ldr	r2, [r2, #0]
 8002158:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800215c:	f023 030f 	bic.w	r3, r3, #15
 8002160:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	69d9      	ldr	r1, [r3, #28]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	430a      	orrs	r2, r1
 8002172:	61da      	str	r2, [r3, #28]
      break;
 8002174:	e013      	b.n	800219e <HAL_ADCEx_InjectedConfigChannel+0x2c2>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	6812      	ldr	r2, [r2, #0]
 8002180:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002184:	f023 030f 	bic.w	r3, r3, #15
 8002188:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6a19      	ldr	r1, [r3, #32]
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	68da      	ldr	r2, [r3, #12]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	621a      	str	r2, [r3, #32]
      break;
 800219c:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800219e:	4b18      	ldr	r3, [pc, #96]	; (8002200 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 80021a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a17      	ldr	r2, [pc, #92]	; (8002204 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d109      	bne.n	80021c0 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b12      	cmp	r3, #18
 80021b2:	d105      	bne.n	80021c0 <HAL_ADCEx_InjectedConfigChannel+0x2e4>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a0f      	ldr	r2, [pc, #60]	; (8002204 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d10d      	bne.n	80021e6 <HAL_ADCEx_InjectedConfigChannel+0x30a>
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2b10      	cmp	r3, #16
 80021d0:	d003      	beq.n	80021da <HAL_ADCEx_InjectedConfigChannel+0x2fe>
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2b11      	cmp	r3, #17
 80021d8:	d105      	bne.n	80021e6 <HAL_ADCEx_InjectedConfigChannel+0x30a>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	000f0001 	.word	0x000f0001
 8002200:	40012300 	.word	0x40012300
 8002204:	40012000 	.word	0x40012000

08002208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002218:	4b0c      	ldr	r3, [pc, #48]	; (800224c <__NVIC_SetPriorityGrouping+0x44>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002224:	4013      	ands	r3, r2
 8002226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002230:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002238:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800223a:	4a04      	ldr	r2, [pc, #16]	; (800224c <__NVIC_SetPriorityGrouping+0x44>)
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	60d3      	str	r3, [r2, #12]
}
 8002240:	bf00      	nop
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	e000ed00 	.word	0xe000ed00

08002250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002254:	4b04      	ldr	r3, [pc, #16]	; (8002268 <__NVIC_GetPriorityGrouping+0x18>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	0a1b      	lsrs	r3, r3, #8
 800225a:	f003 0307 	and.w	r3, r3, #7
}
 800225e:	4618      	mov	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227a:	2b00      	cmp	r3, #0
 800227c:	db0b      	blt.n	8002296 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	f003 021f 	and.w	r2, r3, #31
 8002284:	4907      	ldr	r1, [pc, #28]	; (80022a4 <__NVIC_EnableIRQ+0x38>)
 8002286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228a:	095b      	lsrs	r3, r3, #5
 800228c:	2001      	movs	r0, #1
 800228e:	fa00 f202 	lsl.w	r2, r0, r2
 8002292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	e000e100 	.word	0xe000e100

080022a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	6039      	str	r1, [r7, #0]
 80022b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	db0a      	blt.n	80022d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	490c      	ldr	r1, [pc, #48]	; (80022f4 <__NVIC_SetPriority+0x4c>)
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	0112      	lsls	r2, r2, #4
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	440b      	add	r3, r1
 80022cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022d0:	e00a      	b.n	80022e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	4908      	ldr	r1, [pc, #32]	; (80022f8 <__NVIC_SetPriority+0x50>)
 80022d8:	79fb      	ldrb	r3, [r7, #7]
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	3b04      	subs	r3, #4
 80022e0:	0112      	lsls	r2, r2, #4
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	440b      	add	r3, r1
 80022e6:	761a      	strb	r2, [r3, #24]
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	e000e100 	.word	0xe000e100
 80022f8:	e000ed00 	.word	0xe000ed00

080022fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b089      	sub	sp, #36	; 0x24
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f1c3 0307 	rsb	r3, r3, #7
 8002316:	2b04      	cmp	r3, #4
 8002318:	bf28      	it	cs
 800231a:	2304      	movcs	r3, #4
 800231c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	3304      	adds	r3, #4
 8002322:	2b06      	cmp	r3, #6
 8002324:	d902      	bls.n	800232c <NVIC_EncodePriority+0x30>
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	3b03      	subs	r3, #3
 800232a:	e000      	b.n	800232e <NVIC_EncodePriority+0x32>
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002330:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43da      	mvns	r2, r3
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	401a      	ands	r2, r3
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002344:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	fa01 f303 	lsl.w	r3, r1, r3
 800234e:	43d9      	mvns	r1, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002354:	4313      	orrs	r3, r2
         );
}
 8002356:	4618      	mov	r0, r3
 8002358:	3724      	adds	r7, #36	; 0x24
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
	...

08002364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3b01      	subs	r3, #1
 8002370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002374:	d301      	bcc.n	800237a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002376:	2301      	movs	r3, #1
 8002378:	e00f      	b.n	800239a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800237a:	4a0a      	ldr	r2, [pc, #40]	; (80023a4 <SysTick_Config+0x40>)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3b01      	subs	r3, #1
 8002380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002382:	210f      	movs	r1, #15
 8002384:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002388:	f7ff ff8e 	bl	80022a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800238c:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <SysTick_Config+0x40>)
 800238e:	2200      	movs	r2, #0
 8002390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002392:	4b04      	ldr	r3, [pc, #16]	; (80023a4 <SysTick_Config+0x40>)
 8002394:	2207      	movs	r2, #7
 8002396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	e000e010 	.word	0xe000e010

080023a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff ff29 	bl	8002208 <__NVIC_SetPriorityGrouping>
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023be:	b580      	push	{r7, lr}
 80023c0:	b086      	sub	sp, #24
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	4603      	mov	r3, r0
 80023c6:	60b9      	str	r1, [r7, #8]
 80023c8:	607a      	str	r2, [r7, #4]
 80023ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023d0:	f7ff ff3e 	bl	8002250 <__NVIC_GetPriorityGrouping>
 80023d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	68b9      	ldr	r1, [r7, #8]
 80023da:	6978      	ldr	r0, [r7, #20]
 80023dc:	f7ff ff8e 	bl	80022fc <NVIC_EncodePriority>
 80023e0:	4602      	mov	r2, r0
 80023e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023e6:	4611      	mov	r1, r2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff5d 	bl	80022a8 <__NVIC_SetPriority>
}
 80023ee:	bf00      	nop
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	4603      	mov	r3, r0
 80023fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff ff31 	bl	800226c <__NVIC_EnableIRQ>
}
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7ff ffa2 	bl	8002364 <SysTick_Config>
 8002420:	4603      	mov	r3, r0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002438:	f7ff fabe 	bl	80019b8 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e099      	b.n	800257c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2202      	movs	r2, #2
 800244c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 0201 	bic.w	r2, r2, #1
 8002466:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002468:	e00f      	b.n	800248a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800246a:	f7ff faa5 	bl	80019b8 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b05      	cmp	r3, #5
 8002476:	d908      	bls.n	800248a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2220      	movs	r2, #32
 800247c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2203      	movs	r2, #3
 8002482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e078      	b.n	800257c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1e8      	bne.n	800246a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	4b38      	ldr	r3, [pc, #224]	; (8002584 <HAL_DMA_Init+0x158>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	4313      	orrs	r3, r2
 80024da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	2b04      	cmp	r3, #4
 80024e2:	d107      	bne.n	80024f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ec:	4313      	orrs	r3, r2
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	f023 0307 	bic.w	r3, r3, #7
 800250a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	4313      	orrs	r3, r2
 8002514:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251a:	2b04      	cmp	r3, #4
 800251c:	d117      	bne.n	800254e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	4313      	orrs	r3, r2
 8002526:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00e      	beq.n	800254e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 fb01 	bl	8002b38 <DMA_CheckFifoParam>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d008      	beq.n	800254e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2240      	movs	r2, #64	; 0x40
 8002540:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800254a:	2301      	movs	r3, #1
 800254c:	e016      	b.n	800257c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 fab8 	bl	8002acc <DMA_CalcBaseAndBitshift>
 800255c:	4603      	mov	r3, r0
 800255e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002564:	223f      	movs	r2, #63	; 0x3f
 8002566:	409a      	lsls	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3718      	adds	r7, #24
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	f010803f 	.word	0xf010803f

08002588 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
 8002594:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002596:	2300      	movs	r3, #0
 8002598:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d101      	bne.n	80025ae <HAL_DMA_Start_IT+0x26>
 80025aa:	2302      	movs	r3, #2
 80025ac:	e040      	b.n	8002630 <HAL_DMA_Start_IT+0xa8>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d12f      	bne.n	8002622 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2202      	movs	r2, #2
 80025c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	68b9      	ldr	r1, [r7, #8]
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 fa4a 	bl	8002a70 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e0:	223f      	movs	r2, #63	; 0x3f
 80025e2:	409a      	lsls	r2, r3
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0216 	orr.w	r2, r2, #22
 80025f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d007      	beq.n	8002610 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 0208 	orr.w	r2, r2, #8
 800260e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f042 0201 	orr.w	r2, r2, #1
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	e005      	b.n	800262e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800262a:	2302      	movs	r3, #2
 800262c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800262e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002630:	4618      	mov	r0, r3
 8002632:	3718      	adds	r7, #24
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002644:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002646:	f7ff f9b7 	bl	80019b8 <HAL_GetTick>
 800264a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d008      	beq.n	800266a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2280      	movs	r2, #128	; 0x80
 800265c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e052      	b.n	8002710 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 0216 	bic.w	r2, r2, #22
 8002678:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	695a      	ldr	r2, [r3, #20]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002688:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	2b00      	cmp	r3, #0
 8002690:	d103      	bne.n	800269a <HAL_DMA_Abort+0x62>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002696:	2b00      	cmp	r3, #0
 8002698:	d007      	beq.n	80026aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f022 0208 	bic.w	r2, r2, #8
 80026a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 0201 	bic.w	r2, r2, #1
 80026b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026ba:	e013      	b.n	80026e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026bc:	f7ff f97c 	bl	80019b8 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b05      	cmp	r3, #5
 80026c8:	d90c      	bls.n	80026e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2220      	movs	r2, #32
 80026ce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2203      	movs	r2, #3
 80026d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e015      	b.n	8002710 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1e4      	bne.n	80026bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f6:	223f      	movs	r2, #63	; 0x3f
 80026f8:	409a      	lsls	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d004      	beq.n	8002736 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2280      	movs	r2, #128	; 0x80
 8002730:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e00c      	b.n	8002750 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2205      	movs	r2, #5
 800273a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 0201 	bic.w	r2, r2, #1
 800274c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002764:	2300      	movs	r3, #0
 8002766:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002768:	4b8e      	ldr	r3, [pc, #568]	; (80029a4 <HAL_DMA_IRQHandler+0x248>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a8e      	ldr	r2, [pc, #568]	; (80029a8 <HAL_DMA_IRQHandler+0x24c>)
 800276e:	fba2 2303 	umull	r2, r3, r2, r3
 8002772:	0a9b      	lsrs	r3, r3, #10
 8002774:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800277a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002786:	2208      	movs	r2, #8
 8002788:	409a      	lsls	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	4013      	ands	r3, r2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d01a      	beq.n	80027c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	2b00      	cmp	r3, #0
 800279e:	d013      	beq.n	80027c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 0204 	bic.w	r2, r2, #4
 80027ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b4:	2208      	movs	r2, #8
 80027b6:	409a      	lsls	r2, r3
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c0:	f043 0201 	orr.w	r2, r3, #1
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027cc:	2201      	movs	r2, #1
 80027ce:	409a      	lsls	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4013      	ands	r3, r2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d012      	beq.n	80027fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00b      	beq.n	80027fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ea:	2201      	movs	r2, #1
 80027ec:	409a      	lsls	r2, r3
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f6:	f043 0202 	orr.w	r2, r3, #2
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002802:	2204      	movs	r2, #4
 8002804:	409a      	lsls	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	4013      	ands	r3, r2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d012      	beq.n	8002834 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00b      	beq.n	8002834 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002820:	2204      	movs	r2, #4
 8002822:	409a      	lsls	r2, r3
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282c:	f043 0204 	orr.w	r2, r3, #4
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002838:	2210      	movs	r2, #16
 800283a:	409a      	lsls	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4013      	ands	r3, r2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d043      	beq.n	80028cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b00      	cmp	r3, #0
 8002850:	d03c      	beq.n	80028cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002856:	2210      	movs	r2, #16
 8002858:	409a      	lsls	r2, r3
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d018      	beq.n	800289e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d108      	bne.n	800288c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	2b00      	cmp	r3, #0
 8002880:	d024      	beq.n	80028cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	4798      	blx	r3
 800288a:	e01f      	b.n	80028cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002890:	2b00      	cmp	r3, #0
 8002892:	d01b      	beq.n	80028cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	4798      	blx	r3
 800289c:	e016      	b.n	80028cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d107      	bne.n	80028bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 0208 	bic.w	r2, r2, #8
 80028ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d003      	beq.n	80028cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d0:	2220      	movs	r2, #32
 80028d2:	409a      	lsls	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4013      	ands	r3, r2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 808f 	beq.w	80029fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0310 	and.w	r3, r3, #16
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 8087 	beq.w	80029fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f2:	2220      	movs	r2, #32
 80028f4:	409a      	lsls	r2, r3
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b05      	cmp	r3, #5
 8002904:	d136      	bne.n	8002974 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 0216 	bic.w	r2, r2, #22
 8002914:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	695a      	ldr	r2, [r3, #20]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002924:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	2b00      	cmp	r3, #0
 800292c:	d103      	bne.n	8002936 <HAL_DMA_IRQHandler+0x1da>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002932:	2b00      	cmp	r3, #0
 8002934:	d007      	beq.n	8002946 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 0208 	bic.w	r2, r2, #8
 8002944:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294a:	223f      	movs	r2, #63	; 0x3f
 800294c:	409a      	lsls	r2, r3
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002966:	2b00      	cmp	r3, #0
 8002968:	d07e      	beq.n	8002a68 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	4798      	blx	r3
        }
        return;
 8002972:	e079      	b.n	8002a68 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d01d      	beq.n	80029be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10d      	bne.n	80029ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002994:	2b00      	cmp	r3, #0
 8002996:	d031      	beq.n	80029fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	4798      	blx	r3
 80029a0:	e02c      	b.n	80029fc <HAL_DMA_IRQHandler+0x2a0>
 80029a2:	bf00      	nop
 80029a4:	20000000 	.word	0x20000000
 80029a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d023      	beq.n	80029fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	4798      	blx	r3
 80029bc:	e01e      	b.n	80029fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d10f      	bne.n	80029ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0210 	bic.w	r2, r2, #16
 80029da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d032      	beq.n	8002a6a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d022      	beq.n	8002a56 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2205      	movs	r2, #5
 8002a14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 0201 	bic.w	r2, r2, #1
 8002a26:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	60bb      	str	r3, [r7, #8]
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d307      	bcc.n	8002a44 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1f2      	bne.n	8002a28 <HAL_DMA_IRQHandler+0x2cc>
 8002a42:	e000      	b.n	8002a46 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a44:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d005      	beq.n	8002a6a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	4798      	blx	r3
 8002a66:	e000      	b.n	8002a6a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a68:	bf00      	nop
    }
  }
}
 8002a6a:	3718      	adds	r7, #24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
 8002a7c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a8c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	2b40      	cmp	r3, #64	; 0x40
 8002a9c:	d108      	bne.n	8002ab0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002aae:	e007      	b.n	8002ac0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68ba      	ldr	r2, [r7, #8]
 8002ab6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	60da      	str	r2, [r3, #12]
}
 8002ac0:	bf00      	nop
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	3b10      	subs	r3, #16
 8002adc:	4a14      	ldr	r2, [pc, #80]	; (8002b30 <DMA_CalcBaseAndBitshift+0x64>)
 8002ade:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae2:	091b      	lsrs	r3, r3, #4
 8002ae4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ae6:	4a13      	ldr	r2, [pc, #76]	; (8002b34 <DMA_CalcBaseAndBitshift+0x68>)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	4413      	add	r3, r2
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	461a      	mov	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2b03      	cmp	r3, #3
 8002af8:	d909      	bls.n	8002b0e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b02:	f023 0303 	bic.w	r3, r3, #3
 8002b06:	1d1a      	adds	r2, r3, #4
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	659a      	str	r2, [r3, #88]	; 0x58
 8002b0c:	e007      	b.n	8002b1e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b16:	f023 0303 	bic.w	r3, r3, #3
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3714      	adds	r7, #20
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	aaaaaaab 	.word	0xaaaaaaab
 8002b34:	0800c668 	.word	0x0800c668

08002b38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b40:	2300      	movs	r3, #0
 8002b42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d11f      	bne.n	8002b92 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	2b03      	cmp	r3, #3
 8002b56:	d856      	bhi.n	8002c06 <DMA_CheckFifoParam+0xce>
 8002b58:	a201      	add	r2, pc, #4	; (adr r2, 8002b60 <DMA_CheckFifoParam+0x28>)
 8002b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b5e:	bf00      	nop
 8002b60:	08002b71 	.word	0x08002b71
 8002b64:	08002b83 	.word	0x08002b83
 8002b68:	08002b71 	.word	0x08002b71
 8002b6c:	08002c07 	.word	0x08002c07
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d046      	beq.n	8002c0a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b80:	e043      	b.n	8002c0a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b86:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b8a:	d140      	bne.n	8002c0e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b90:	e03d      	b.n	8002c0e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b9a:	d121      	bne.n	8002be0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	2b03      	cmp	r3, #3
 8002ba0:	d837      	bhi.n	8002c12 <DMA_CheckFifoParam+0xda>
 8002ba2:	a201      	add	r2, pc, #4	; (adr r2, 8002ba8 <DMA_CheckFifoParam+0x70>)
 8002ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba8:	08002bb9 	.word	0x08002bb9
 8002bac:	08002bbf 	.word	0x08002bbf
 8002bb0:	08002bb9 	.word	0x08002bb9
 8002bb4:	08002bd1 	.word	0x08002bd1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	73fb      	strb	r3, [r7, #15]
      break;
 8002bbc:	e030      	b.n	8002c20 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d025      	beq.n	8002c16 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bce:	e022      	b.n	8002c16 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bd8:	d11f      	bne.n	8002c1a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002bde:	e01c      	b.n	8002c1a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d903      	bls.n	8002bee <DMA_CheckFifoParam+0xb6>
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	2b03      	cmp	r3, #3
 8002bea:	d003      	beq.n	8002bf4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002bec:	e018      	b.n	8002c20 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	73fb      	strb	r3, [r7, #15]
      break;
 8002bf2:	e015      	b.n	8002c20 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00e      	beq.n	8002c1e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	73fb      	strb	r3, [r7, #15]
      break;
 8002c04:	e00b      	b.n	8002c1e <DMA_CheckFifoParam+0xe6>
      break;
 8002c06:	bf00      	nop
 8002c08:	e00a      	b.n	8002c20 <DMA_CheckFifoParam+0xe8>
      break;
 8002c0a:	bf00      	nop
 8002c0c:	e008      	b.n	8002c20 <DMA_CheckFifoParam+0xe8>
      break;
 8002c0e:	bf00      	nop
 8002c10:	e006      	b.n	8002c20 <DMA_CheckFifoParam+0xe8>
      break;
 8002c12:	bf00      	nop
 8002c14:	e004      	b.n	8002c20 <DMA_CheckFifoParam+0xe8>
      break;
 8002c16:	bf00      	nop
 8002c18:	e002      	b.n	8002c20 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c1a:	bf00      	nop
 8002c1c:	e000      	b.n	8002c20 <DMA_CheckFifoParam+0xe8>
      break;
 8002c1e:	bf00      	nop
    }
  } 
  
  return status; 
 8002c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3714      	adds	r7, #20
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop

08002c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b089      	sub	sp, #36	; 0x24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c42:	2300      	movs	r3, #0
 8002c44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c46:	2300      	movs	r3, #0
 8002c48:	61fb      	str	r3, [r7, #28]
 8002c4a:	e16b      	b.n	8002f24 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	f040 815a 	bne.w	8002f1e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f003 0303 	and.w	r3, r3, #3
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d005      	beq.n	8002c82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d130      	bne.n	8002ce4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	2203      	movs	r2, #3
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	43db      	mvns	r3, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4013      	ands	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cb8:	2201      	movs	r2, #1
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	091b      	lsrs	r3, r3, #4
 8002cce:	f003 0201 	and.w	r2, r3, #1
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f003 0303 	and.w	r3, r3, #3
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	d017      	beq.n	8002d20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	2203      	movs	r2, #3
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	43db      	mvns	r3, r3
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4013      	ands	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f003 0303 	and.w	r3, r3, #3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d123      	bne.n	8002d74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	08da      	lsrs	r2, r3, #3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3208      	adds	r2, #8
 8002d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	220f      	movs	r2, #15
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	691a      	ldr	r2, [r3, #16]
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	08da      	lsrs	r2, r3, #3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	3208      	adds	r2, #8
 8002d6e:	69b9      	ldr	r1, [r7, #24]
 8002d70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	2203      	movs	r2, #3
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	43db      	mvns	r3, r3
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f003 0203 	and.w	r2, r3, #3
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 80b4 	beq.w	8002f1e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	4b60      	ldr	r3, [pc, #384]	; (8002f3c <HAL_GPIO_Init+0x30c>)
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbe:	4a5f      	ldr	r2, [pc, #380]	; (8002f3c <HAL_GPIO_Init+0x30c>)
 8002dc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8002dc6:	4b5d      	ldr	r3, [pc, #372]	; (8002f3c <HAL_GPIO_Init+0x30c>)
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dd2:	4a5b      	ldr	r2, [pc, #364]	; (8002f40 <HAL_GPIO_Init+0x310>)
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	089b      	lsrs	r3, r3, #2
 8002dd8:	3302      	adds	r3, #2
 8002dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	f003 0303 	and.w	r3, r3, #3
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	220f      	movs	r2, #15
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	43db      	mvns	r3, r3
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	4013      	ands	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a52      	ldr	r2, [pc, #328]	; (8002f44 <HAL_GPIO_Init+0x314>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d02b      	beq.n	8002e56 <HAL_GPIO_Init+0x226>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a51      	ldr	r2, [pc, #324]	; (8002f48 <HAL_GPIO_Init+0x318>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d025      	beq.n	8002e52 <HAL_GPIO_Init+0x222>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a50      	ldr	r2, [pc, #320]	; (8002f4c <HAL_GPIO_Init+0x31c>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d01f      	beq.n	8002e4e <HAL_GPIO_Init+0x21e>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a4f      	ldr	r2, [pc, #316]	; (8002f50 <HAL_GPIO_Init+0x320>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d019      	beq.n	8002e4a <HAL_GPIO_Init+0x21a>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a4e      	ldr	r2, [pc, #312]	; (8002f54 <HAL_GPIO_Init+0x324>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d013      	beq.n	8002e46 <HAL_GPIO_Init+0x216>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a4d      	ldr	r2, [pc, #308]	; (8002f58 <HAL_GPIO_Init+0x328>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d00d      	beq.n	8002e42 <HAL_GPIO_Init+0x212>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a4c      	ldr	r2, [pc, #304]	; (8002f5c <HAL_GPIO_Init+0x32c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d007      	beq.n	8002e3e <HAL_GPIO_Init+0x20e>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a4b      	ldr	r2, [pc, #300]	; (8002f60 <HAL_GPIO_Init+0x330>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d101      	bne.n	8002e3a <HAL_GPIO_Init+0x20a>
 8002e36:	2307      	movs	r3, #7
 8002e38:	e00e      	b.n	8002e58 <HAL_GPIO_Init+0x228>
 8002e3a:	2308      	movs	r3, #8
 8002e3c:	e00c      	b.n	8002e58 <HAL_GPIO_Init+0x228>
 8002e3e:	2306      	movs	r3, #6
 8002e40:	e00a      	b.n	8002e58 <HAL_GPIO_Init+0x228>
 8002e42:	2305      	movs	r3, #5
 8002e44:	e008      	b.n	8002e58 <HAL_GPIO_Init+0x228>
 8002e46:	2304      	movs	r3, #4
 8002e48:	e006      	b.n	8002e58 <HAL_GPIO_Init+0x228>
 8002e4a:	2303      	movs	r3, #3
 8002e4c:	e004      	b.n	8002e58 <HAL_GPIO_Init+0x228>
 8002e4e:	2302      	movs	r3, #2
 8002e50:	e002      	b.n	8002e58 <HAL_GPIO_Init+0x228>
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <HAL_GPIO_Init+0x228>
 8002e56:	2300      	movs	r3, #0
 8002e58:	69fa      	ldr	r2, [r7, #28]
 8002e5a:	f002 0203 	and.w	r2, r2, #3
 8002e5e:	0092      	lsls	r2, r2, #2
 8002e60:	4093      	lsls	r3, r2
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e68:	4935      	ldr	r1, [pc, #212]	; (8002f40 <HAL_GPIO_Init+0x310>)
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	089b      	lsrs	r3, r3, #2
 8002e6e:	3302      	adds	r3, #2
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e76:	4b3b      	ldr	r3, [pc, #236]	; (8002f64 <HAL_GPIO_Init+0x334>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	4013      	ands	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e9a:	4a32      	ldr	r2, [pc, #200]	; (8002f64 <HAL_GPIO_Init+0x334>)
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ea0:	4b30      	ldr	r3, [pc, #192]	; (8002f64 <HAL_GPIO_Init+0x334>)
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4013      	ands	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d003      	beq.n	8002ec4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ec4:	4a27      	ldr	r2, [pc, #156]	; (8002f64 <HAL_GPIO_Init+0x334>)
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002eca:	4b26      	ldr	r3, [pc, #152]	; (8002f64 <HAL_GPIO_Init+0x334>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002eee:	4a1d      	ldr	r2, [pc, #116]	; (8002f64 <HAL_GPIO_Init+0x334>)
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ef4:	4b1b      	ldr	r3, [pc, #108]	; (8002f64 <HAL_GPIO_Init+0x334>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	43db      	mvns	r3, r3
 8002efe:	69ba      	ldr	r2, [r7, #24]
 8002f00:	4013      	ands	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f18:	4a12      	ldr	r2, [pc, #72]	; (8002f64 <HAL_GPIO_Init+0x334>)
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	3301      	adds	r3, #1
 8002f22:	61fb      	str	r3, [r7, #28]
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	2b0f      	cmp	r3, #15
 8002f28:	f67f ae90 	bls.w	8002c4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f2c:	bf00      	nop
 8002f2e:	bf00      	nop
 8002f30:	3724      	adds	r7, #36	; 0x24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	40013800 	.word	0x40013800
 8002f44:	40020000 	.word	0x40020000
 8002f48:	40020400 	.word	0x40020400
 8002f4c:	40020800 	.word	0x40020800
 8002f50:	40020c00 	.word	0x40020c00
 8002f54:	40021000 	.word	0x40021000
 8002f58:	40021400 	.word	0x40021400
 8002f5c:	40021800 	.word	0x40021800
 8002f60:	40021c00 	.word	0x40021c00
 8002f64:	40013c00 	.word	0x40013c00

08002f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	460b      	mov	r3, r1
 8002f72:	807b      	strh	r3, [r7, #2]
 8002f74:	4613      	mov	r3, r2
 8002f76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f78:	787b      	ldrb	r3, [r7, #1]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f7e:	887a      	ldrh	r2, [r7, #2]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f84:	e003      	b.n	8002f8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f86:	887b      	ldrh	r3, [r7, #2]
 8002f88:	041a      	lsls	r2, r3, #16
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	619a      	str	r2, [r3, #24]
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b085      	sub	sp, #20
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002fac:	887a      	ldrh	r2, [r7, #2]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	041a      	lsls	r2, r3, #16
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	43d9      	mvns	r1, r3
 8002fb8:	887b      	ldrh	r3, [r7, #2]
 8002fba:	400b      	ands	r3, r1
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	619a      	str	r2, [r3, #24]
}
 8002fc2:	bf00      	nop
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fce:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fd0:	b08f      	sub	sp, #60	; 0x3c
 8002fd2:	af0a      	add	r7, sp, #40	; 0x28
 8002fd4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e10f      	b.n	8003200 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d106      	bne.n	8003000 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f007 fd90 	bl	800ab20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2203      	movs	r2, #3
 8003004:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003010:	2b00      	cmp	r3, #0
 8003012:	d102      	bne.n	800301a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f004 f8e3 	bl	80071ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	603b      	str	r3, [r7, #0]
 800302a:	687e      	ldr	r6, [r7, #4]
 800302c:	466d      	mov	r5, sp
 800302e:	f106 0410 	add.w	r4, r6, #16
 8003032:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003034:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003036:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003038:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800303a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800303e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003042:	1d33      	adds	r3, r6, #4
 8003044:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003046:	6838      	ldr	r0, [r7, #0]
 8003048:	f003 ffba 	bl	8006fc0 <USB_CoreInit>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d005      	beq.n	800305e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2202      	movs	r2, #2
 8003056:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e0d0      	b.n	8003200 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2100      	movs	r1, #0
 8003064:	4618      	mov	r0, r3
 8003066:	f004 f8d1 	bl	800720c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800306a:	2300      	movs	r3, #0
 800306c:	73fb      	strb	r3, [r7, #15]
 800306e:	e04a      	b.n	8003106 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003070:	7bfa      	ldrb	r2, [r7, #15]
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	4613      	mov	r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	4413      	add	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	333d      	adds	r3, #61	; 0x3d
 8003080:	2201      	movs	r2, #1
 8003082:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003084:	7bfa      	ldrb	r2, [r7, #15]
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	4613      	mov	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	4413      	add	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	333c      	adds	r3, #60	; 0x3c
 8003094:	7bfa      	ldrb	r2, [r7, #15]
 8003096:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003098:	7bfa      	ldrb	r2, [r7, #15]
 800309a:	7bfb      	ldrb	r3, [r7, #15]
 800309c:	b298      	uxth	r0, r3
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	4613      	mov	r3, r2
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	4413      	add	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	440b      	add	r3, r1
 80030aa:	3344      	adds	r3, #68	; 0x44
 80030ac:	4602      	mov	r2, r0
 80030ae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030b0:	7bfa      	ldrb	r2, [r7, #15]
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	4613      	mov	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	4413      	add	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	440b      	add	r3, r1
 80030be:	3340      	adds	r3, #64	; 0x40
 80030c0:	2200      	movs	r2, #0
 80030c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030c4:	7bfa      	ldrb	r2, [r7, #15]
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	4613      	mov	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	4413      	add	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	3348      	adds	r3, #72	; 0x48
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030d8:	7bfa      	ldrb	r2, [r7, #15]
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	4613      	mov	r3, r2
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	4413      	add	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	440b      	add	r3, r1
 80030e6:	334c      	adds	r3, #76	; 0x4c
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030ec:	7bfa      	ldrb	r2, [r7, #15]
 80030ee:	6879      	ldr	r1, [r7, #4]
 80030f0:	4613      	mov	r3, r2
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	4413      	add	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	440b      	add	r3, r1
 80030fa:	3354      	adds	r3, #84	; 0x54
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003100:	7bfb      	ldrb	r3, [r7, #15]
 8003102:	3301      	adds	r3, #1
 8003104:	73fb      	strb	r3, [r7, #15]
 8003106:	7bfa      	ldrb	r2, [r7, #15]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	429a      	cmp	r2, r3
 800310e:	d3af      	bcc.n	8003070 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003110:	2300      	movs	r3, #0
 8003112:	73fb      	strb	r3, [r7, #15]
 8003114:	e044      	b.n	80031a0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003116:	7bfa      	ldrb	r2, [r7, #15]
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	4613      	mov	r3, r2
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	4413      	add	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	440b      	add	r3, r1
 8003124:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003128:	2200      	movs	r2, #0
 800312a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800312c:	7bfa      	ldrb	r2, [r7, #15]
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	4613      	mov	r3, r2
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	4413      	add	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800313e:	7bfa      	ldrb	r2, [r7, #15]
 8003140:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003142:	7bfa      	ldrb	r2, [r7, #15]
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	4613      	mov	r3, r2
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	4413      	add	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	440b      	add	r3, r1
 8003150:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003154:	2200      	movs	r2, #0
 8003156:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003158:	7bfa      	ldrb	r2, [r7, #15]
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	4613      	mov	r3, r2
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	4413      	add	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800316a:	2200      	movs	r2, #0
 800316c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800316e:	7bfa      	ldrb	r2, [r7, #15]
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	4613      	mov	r3, r2
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	4413      	add	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	440b      	add	r3, r1
 800317c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003180:	2200      	movs	r2, #0
 8003182:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003184:	7bfa      	ldrb	r2, [r7, #15]
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	4613      	mov	r3, r2
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	4413      	add	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800319a:	7bfb      	ldrb	r3, [r7, #15]
 800319c:	3301      	adds	r3, #1
 800319e:	73fb      	strb	r3, [r7, #15]
 80031a0:	7bfa      	ldrb	r2, [r7, #15]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d3b5      	bcc.n	8003116 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	603b      	str	r3, [r7, #0]
 80031b0:	687e      	ldr	r6, [r7, #4]
 80031b2:	466d      	mov	r5, sp
 80031b4:	f106 0410 	add.w	r4, r6, #16
 80031b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80031c8:	1d33      	adds	r3, r6, #4
 80031ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031cc:	6838      	ldr	r0, [r7, #0]
 80031ce:	f004 f869 	bl	80072a4 <USB_DevInit>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d005      	beq.n	80031e4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2202      	movs	r2, #2
 80031dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e00d      	b.n	8003200 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f005 f9b8 	bl	800856e <USB_DevDisconnect>

  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3714      	adds	r7, #20
 8003204:	46bd      	mov	sp, r7
 8003206:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003208 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800321c:	2b01      	cmp	r3, #1
 800321e:	d101      	bne.n	8003224 <HAL_PCD_Start+0x1c>
 8003220:	2302      	movs	r3, #2
 8003222:	e020      	b.n	8003266 <HAL_PCD_Start+0x5e>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003230:	2b01      	cmp	r3, #1
 8003232:	d109      	bne.n	8003248 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003238:	2b01      	cmp	r3, #1
 800323a:	d005      	beq.n	8003248 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003240:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4618      	mov	r0, r3
 800324e:	f003 ffbb 	bl	80071c8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4618      	mov	r0, r3
 8003258:	f005 f968 	bl	800852c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800326e:	b590      	push	{r4, r7, lr}
 8003270:	b08d      	sub	sp, #52	; 0x34
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800327c:	6a3b      	ldr	r3, [r7, #32]
 800327e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4618      	mov	r0, r3
 8003286:	f005 fa26 	bl	80086d6 <USB_GetMode>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	f040 848a 	bne.w	8003ba6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f005 f98a 	bl	80085b0 <USB_ReadInterrupts>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f000 8480 	beq.w	8003ba4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	0a1b      	lsrs	r3, r3, #8
 80032ae:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4618      	mov	r0, r3
 80032be:	f005 f977 	bl	80085b0 <USB_ReadInterrupts>
 80032c2:	4603      	mov	r3, r0
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d107      	bne.n	80032dc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	695a      	ldr	r2, [r3, #20]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f002 0202 	and.w	r2, r2, #2
 80032da:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f005 f965 	bl	80085b0 <USB_ReadInterrupts>
 80032e6:	4603      	mov	r3, r0
 80032e8:	f003 0310 	and.w	r3, r3, #16
 80032ec:	2b10      	cmp	r3, #16
 80032ee:	d161      	bne.n	80033b4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	699a      	ldr	r2, [r3, #24]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0210 	bic.w	r2, r2, #16
 80032fe:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003300:	6a3b      	ldr	r3, [r7, #32]
 8003302:	6a1b      	ldr	r3, [r3, #32]
 8003304:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	f003 020f 	and.w	r2, r3, #15
 800330c:	4613      	mov	r3, r2
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	4413      	add	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	4413      	add	r3, r2
 800331c:	3304      	adds	r3, #4
 800331e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	0c5b      	lsrs	r3, r3, #17
 8003324:	f003 030f 	and.w	r3, r3, #15
 8003328:	2b02      	cmp	r3, #2
 800332a:	d124      	bne.n	8003376 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003332:	4013      	ands	r3, r2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d035      	beq.n	80033a4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	091b      	lsrs	r3, r3, #4
 8003340:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003342:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003346:	b29b      	uxth	r3, r3
 8003348:	461a      	mov	r2, r3
 800334a:	6a38      	ldr	r0, [r7, #32]
 800334c:	f004 ff9c 	bl	8008288 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	691a      	ldr	r2, [r3, #16]
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	091b      	lsrs	r3, r3, #4
 8003358:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800335c:	441a      	add	r2, r3
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	6a1a      	ldr	r2, [r3, #32]
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	091b      	lsrs	r3, r3, #4
 800336a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800336e:	441a      	add	r2, r3
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	621a      	str	r2, [r3, #32]
 8003374:	e016      	b.n	80033a4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	0c5b      	lsrs	r3, r3, #17
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	2b06      	cmp	r3, #6
 8003380:	d110      	bne.n	80033a4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003388:	2208      	movs	r2, #8
 800338a:	4619      	mov	r1, r3
 800338c:	6a38      	ldr	r0, [r7, #32]
 800338e:	f004 ff7b 	bl	8008288 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	6a1a      	ldr	r2, [r3, #32]
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	091b      	lsrs	r3, r3, #4
 800339a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800339e:	441a      	add	r2, r3
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699a      	ldr	r2, [r3, #24]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f042 0210 	orr.w	r2, r2, #16
 80033b2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f005 f8f9 	bl	80085b0 <USB_ReadInterrupts>
 80033be:	4603      	mov	r3, r0
 80033c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80033c8:	f040 80a7 	bne.w	800351a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f005 f8fe 	bl	80085d6 <USB_ReadDevAllOutEpInterrupt>
 80033da:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80033dc:	e099      	b.n	8003512 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80033de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 808e 	beq.w	8003506 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f0:	b2d2      	uxtb	r2, r2
 80033f2:	4611      	mov	r1, r2
 80033f4:	4618      	mov	r0, r3
 80033f6:	f005 f922 	bl	800863e <USB_ReadDevOutEPInterrupt>
 80033fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00c      	beq.n	8003420 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	015a      	lsls	r2, r3, #5
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	4413      	add	r3, r2
 800340e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003412:	461a      	mov	r2, r3
 8003414:	2301      	movs	r3, #1
 8003416:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003418:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 fec2 	bl	80041a4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	f003 0308 	and.w	r3, r3, #8
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00c      	beq.n	8003444 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	015a      	lsls	r2, r3, #5
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	4413      	add	r3, r2
 8003432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003436:	461a      	mov	r2, r3
 8003438:	2308      	movs	r3, #8
 800343a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800343c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 ff98 	bl	8004374 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	f003 0310 	and.w	r3, r3, #16
 800344a:	2b00      	cmp	r3, #0
 800344c:	d008      	beq.n	8003460 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	015a      	lsls	r2, r3, #5
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	4413      	add	r3, r2
 8003456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800345a:	461a      	mov	r2, r3
 800345c:	2310      	movs	r3, #16
 800345e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d030      	beq.n	80034cc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800346a:	6a3b      	ldr	r3, [r7, #32]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003472:	2b80      	cmp	r3, #128	; 0x80
 8003474:	d109      	bne.n	800348a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	69fa      	ldr	r2, [r7, #28]
 8003480:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003484:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003488:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800348a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800348c:	4613      	mov	r3, r2
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	4413      	add	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	4413      	add	r3, r2
 800349c:	3304      	adds	r3, #4
 800349e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	78db      	ldrb	r3, [r3, #3]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d108      	bne.n	80034ba <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	2200      	movs	r2, #0
 80034ac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	4619      	mov	r1, r3
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f007 fc39 	bl	800ad2c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80034ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034bc:	015a      	lsls	r2, r3, #5
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	4413      	add	r3, r2
 80034c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c6:	461a      	mov	r2, r3
 80034c8:	2302      	movs	r3, #2
 80034ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	f003 0320 	and.w	r3, r3, #32
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d008      	beq.n	80034e8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	015a      	lsls	r2, r3, #5
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	4413      	add	r3, r2
 80034de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034e2:	461a      	mov	r2, r3
 80034e4:	2320      	movs	r3, #32
 80034e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d009      	beq.n	8003506 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	015a      	lsls	r2, r3, #5
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	4413      	add	r3, r2
 80034fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034fe:	461a      	mov	r2, r3
 8003500:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003504:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	3301      	adds	r3, #1
 800350a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800350c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350e:	085b      	lsrs	r3, r3, #1
 8003510:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003514:	2b00      	cmp	r3, #0
 8003516:	f47f af62 	bne.w	80033de <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f005 f846 	bl	80085b0 <USB_ReadInterrupts>
 8003524:	4603      	mov	r3, r0
 8003526:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800352a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800352e:	f040 80db 	bne.w	80036e8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f005 f867 	bl	800860a <USB_ReadDevAllInEpInterrupt>
 800353c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800353e:	2300      	movs	r3, #0
 8003540:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003542:	e0cd      	b.n	80036e0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 80c2 	beq.w	80036d4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003556:	b2d2      	uxtb	r2, r2
 8003558:	4611      	mov	r1, r2
 800355a:	4618      	mov	r0, r3
 800355c:	f005 f88d 	bl	800867a <USB_ReadDevInEPInterrupt>
 8003560:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b00      	cmp	r3, #0
 800356a:	d057      	beq.n	800361c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	2201      	movs	r2, #1
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003580:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	43db      	mvns	r3, r3
 8003586:	69f9      	ldr	r1, [r7, #28]
 8003588:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800358c:	4013      	ands	r3, r2
 800358e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003592:	015a      	lsls	r2, r3, #5
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	4413      	add	r3, r2
 8003598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800359c:	461a      	mov	r2, r3
 800359e:	2301      	movs	r3, #1
 80035a0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d132      	bne.n	8003610 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ae:	4613      	mov	r3, r2
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	4413      	add	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	440b      	add	r3, r1
 80035b8:	334c      	adds	r3, #76	; 0x4c
 80035ba:	6819      	ldr	r1, [r3, #0]
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c0:	4613      	mov	r3, r2
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	4413      	add	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4403      	add	r3, r0
 80035ca:	3348      	adds	r3, #72	; 0x48
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4419      	add	r1, r3
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d4:	4613      	mov	r3, r2
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	4413      	add	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4403      	add	r3, r0
 80035de:	334c      	adds	r3, #76	; 0x4c
 80035e0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80035e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d113      	bne.n	8003610 <HAL_PCD_IRQHandler+0x3a2>
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ec:	4613      	mov	r3, r2
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	4413      	add	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	3354      	adds	r3, #84	; 0x54
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d108      	bne.n	8003610 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6818      	ldr	r0, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003608:	461a      	mov	r2, r3
 800360a:	2101      	movs	r1, #1
 800360c:	f005 f894 	bl	8008738 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	b2db      	uxtb	r3, r3
 8003614:	4619      	mov	r1, r3
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f007 fb03 	bl	800ac22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	f003 0308 	and.w	r3, r3, #8
 8003622:	2b00      	cmp	r3, #0
 8003624:	d008      	beq.n	8003638 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	015a      	lsls	r2, r3, #5
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	4413      	add	r3, r2
 800362e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003632:	461a      	mov	r2, r3
 8003634:	2308      	movs	r3, #8
 8003636:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	f003 0310 	and.w	r3, r3, #16
 800363e:	2b00      	cmp	r3, #0
 8003640:	d008      	beq.n	8003654 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	015a      	lsls	r2, r3, #5
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	4413      	add	r3, r2
 800364a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800364e:	461a      	mov	r2, r3
 8003650:	2310      	movs	r3, #16
 8003652:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365a:	2b00      	cmp	r3, #0
 800365c:	d008      	beq.n	8003670 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	015a      	lsls	r2, r3, #5
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	4413      	add	r3, r2
 8003666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800366a:	461a      	mov	r2, r3
 800366c:	2340      	movs	r3, #64	; 0x40
 800366e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d023      	beq.n	80036c2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800367a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800367c:	6a38      	ldr	r0, [r7, #32]
 800367e:	f003 ff75 	bl	800756c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003684:	4613      	mov	r3, r2
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	4413      	add	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	3338      	adds	r3, #56	; 0x38
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	4413      	add	r3, r2
 8003692:	3304      	adds	r3, #4
 8003694:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	78db      	ldrb	r3, [r3, #3]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d108      	bne.n	80036b0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	2200      	movs	r2, #0
 80036a2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	4619      	mov	r1, r3
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f007 fb50 	bl	800ad50 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	015a      	lsls	r2, r3, #5
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	4413      	add	r3, r2
 80036b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036bc:	461a      	mov	r2, r3
 80036be:	2302      	movs	r3, #2
 80036c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d003      	beq.n	80036d4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80036cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 fcdb 	bl	800408a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	3301      	adds	r3, #1
 80036d8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80036da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036dc:	085b      	lsrs	r3, r3, #1
 80036de:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80036e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f47f af2e 	bne.w	8003544 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f004 ff5f 	bl	80085b0 <USB_ReadInterrupts>
 80036f2:	4603      	mov	r3, r0
 80036f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80036f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036fc:	d122      	bne.n	8003744 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	69fa      	ldr	r2, [r7, #28]
 8003708:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800370c:	f023 0301 	bic.w	r3, r3, #1
 8003710:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003718:	2b01      	cmp	r3, #1
 800371a:	d108      	bne.n	800372e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003724:	2100      	movs	r1, #0
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fec2 	bl	80044b0 <HAL_PCDEx_LPM_Callback>
 800372c:	e002      	b.n	8003734 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f007 faee 	bl	800ad10 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	695a      	ldr	r2, [r3, #20]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003742:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4618      	mov	r0, r3
 800374a:	f004 ff31 	bl	80085b0 <USB_ReadInterrupts>
 800374e:	4603      	mov	r3, r0
 8003750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003754:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003758:	d112      	bne.n	8003780 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b01      	cmp	r3, #1
 8003768:	d102      	bne.n	8003770 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f007 faaa 	bl	800acc4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	695a      	ldr	r2, [r3, #20]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800377e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4618      	mov	r0, r3
 8003786:	f004 ff13 	bl	80085b0 <USB_ReadInterrupts>
 800378a:	4603      	mov	r3, r0
 800378c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003794:	f040 80b7 	bne.w	8003906 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	69fa      	ldr	r2, [r7, #28]
 80037a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037a6:	f023 0301 	bic.w	r3, r3, #1
 80037aa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2110      	movs	r1, #16
 80037b2:	4618      	mov	r0, r3
 80037b4:	f003 feda 	bl	800756c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037b8:	2300      	movs	r3, #0
 80037ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037bc:	e046      	b.n	800384c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80037be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c0:	015a      	lsls	r2, r3, #5
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	4413      	add	r3, r2
 80037c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ca:	461a      	mov	r2, r3
 80037cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037d0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80037d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d4:	015a      	lsls	r2, r3, #5
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	4413      	add	r3, r2
 80037da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037e2:	0151      	lsls	r1, r2, #5
 80037e4:	69fa      	ldr	r2, [r7, #28]
 80037e6:	440a      	add	r2, r1
 80037e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80037f0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80037f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f4:	015a      	lsls	r2, r3, #5
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	4413      	add	r3, r2
 80037fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037fe:	461a      	mov	r2, r3
 8003800:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003804:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003808:	015a      	lsls	r2, r3, #5
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	4413      	add	r3, r2
 800380e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003816:	0151      	lsls	r1, r2, #5
 8003818:	69fa      	ldr	r2, [r7, #28]
 800381a:	440a      	add	r2, r1
 800381c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003820:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003824:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003828:	015a      	lsls	r2, r3, #5
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	4413      	add	r3, r2
 800382e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003836:	0151      	lsls	r1, r2, #5
 8003838:	69fa      	ldr	r2, [r7, #28]
 800383a:	440a      	add	r2, r1
 800383c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003840:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003844:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003848:	3301      	adds	r3, #1
 800384a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003852:	429a      	cmp	r2, r3
 8003854:	d3b3      	bcc.n	80037be <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	69fa      	ldr	r2, [r7, #28]
 8003860:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003864:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003868:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	2b00      	cmp	r3, #0
 8003870:	d016      	beq.n	80038a0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800387c:	69fa      	ldr	r2, [r7, #28]
 800387e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003882:	f043 030b 	orr.w	r3, r3, #11
 8003886:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003892:	69fa      	ldr	r2, [r7, #28]
 8003894:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003898:	f043 030b 	orr.w	r3, r3, #11
 800389c:	6453      	str	r3, [r2, #68]	; 0x44
 800389e:	e015      	b.n	80038cc <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	69fa      	ldr	r2, [r7, #28]
 80038aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80038b2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80038b6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	69fa      	ldr	r2, [r7, #28]
 80038c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038c6:	f043 030b 	orr.w	r3, r3, #11
 80038ca:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	69fa      	ldr	r2, [r7, #28]
 80038d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038da:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80038de:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6818      	ldr	r0, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80038f0:	461a      	mov	r2, r3
 80038f2:	f004 ff21 	bl	8008738 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	695a      	ldr	r2, [r3, #20]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003904:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4618      	mov	r0, r3
 800390c:	f004 fe50 	bl	80085b0 <USB_ReadInterrupts>
 8003910:	4603      	mov	r3, r0
 8003912:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003916:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800391a:	d124      	bne.n	8003966 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4618      	mov	r0, r3
 8003922:	f004 fee6 	bl	80086f2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4618      	mov	r0, r3
 800392c:	f003 fe9b 	bl	8007666 <USB_GetDevSpeed>
 8003930:	4603      	mov	r3, r0
 8003932:	461a      	mov	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681c      	ldr	r4, [r3, #0]
 800393c:	f001 fa28 	bl	8004d90 <HAL_RCC_GetHCLKFreq>
 8003940:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003946:	b2db      	uxtb	r3, r3
 8003948:	461a      	mov	r2, r3
 800394a:	4620      	mov	r0, r4
 800394c:	f003 fb9a 	bl	8007084 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f007 f98e 	bl	800ac72 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	695a      	ldr	r2, [r3, #20]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003964:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f004 fe20 	bl	80085b0 <USB_ReadInterrupts>
 8003970:	4603      	mov	r3, r0
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	2b08      	cmp	r3, #8
 8003978:	d10a      	bne.n	8003990 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f007 f96b 	bl	800ac56 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695a      	ldr	r2, [r3, #20]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f002 0208 	and.w	r2, r2, #8
 800398e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4618      	mov	r0, r3
 8003996:	f004 fe0b 	bl	80085b0 <USB_ReadInterrupts>
 800399a:	4603      	mov	r3, r0
 800399c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a0:	2b80      	cmp	r3, #128	; 0x80
 80039a2:	d122      	bne.n	80039ea <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80039a4:	6a3b      	ldr	r3, [r7, #32]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039ac:	6a3b      	ldr	r3, [r7, #32]
 80039ae:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039b0:	2301      	movs	r3, #1
 80039b2:	627b      	str	r3, [r7, #36]	; 0x24
 80039b4:	e014      	b.n	80039e0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ba:	4613      	mov	r3, r2
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	4413      	add	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	440b      	add	r3, r1
 80039c4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d105      	bne.n	80039da <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80039ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	4619      	mov	r1, r3
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 fb27 	bl	8004028 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	3301      	adds	r3, #1
 80039de:	627b      	str	r3, [r7, #36]	; 0x24
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d3e5      	bcc.n	80039b6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f004 fdde 	bl	80085b0 <USB_ReadInterrupts>
 80039f4:	4603      	mov	r3, r0
 80039f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039fe:	d13b      	bne.n	8003a78 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a00:	2301      	movs	r3, #1
 8003a02:	627b      	str	r3, [r7, #36]	; 0x24
 8003a04:	e02b      	b.n	8003a5e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	015a      	lsls	r2, r3, #5
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a16:	6879      	ldr	r1, [r7, #4]
 8003a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	4413      	add	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	440b      	add	r3, r1
 8003a24:	3340      	adds	r3, #64	; 0x40
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d115      	bne.n	8003a58 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003a2c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	da12      	bge.n	8003a58 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a36:	4613      	mov	r3, r2
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	4413      	add	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	440b      	add	r3, r1
 8003a40:	333f      	adds	r3, #63	; 0x3f
 8003a42:	2201      	movs	r2, #1
 8003a44:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	4619      	mov	r1, r3
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 fae8 	bl	8004028 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d3ce      	bcc.n	8003a06 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	695a      	ldr	r2, [r3, #20]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003a76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f004 fd97 	bl	80085b0 <USB_ReadInterrupts>
 8003a82:	4603      	mov	r3, r0
 8003a84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a8c:	d155      	bne.n	8003b3a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a8e:	2301      	movs	r3, #1
 8003a90:	627b      	str	r3, [r7, #36]	; 0x24
 8003a92:	e045      	b.n	8003b20 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003aa4:	6879      	ldr	r1, [r7, #4]
 8003aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	4413      	add	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d12e      	bne.n	8003b1a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003abc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	da2b      	bge.n	8003b1a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003ace:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d121      	bne.n	8003b1a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ada:	4613      	mov	r3, r2
 8003adc:	00db      	lsls	r3, r3, #3
 8003ade:	4413      	add	r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	440b      	add	r3, r1
 8003ae4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003ae8:	2201      	movs	r2, #1
 8003aea:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003aec:	6a3b      	ldr	r3, [r7, #32]
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003af4:	6a3b      	ldr	r3, [r7, #32]
 8003af6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003af8:	6a3b      	ldr	r3, [r7, #32]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10a      	bne.n	8003b1a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	69fa      	ldr	r2, [r7, #28]
 8003b0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b16:	6053      	str	r3, [r2, #4]
            break;
 8003b18:	e007      	b.n	8003b2a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d3b4      	bcc.n	8003a94 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	695a      	ldr	r2, [r3, #20]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003b38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f004 fd36 	bl	80085b0 <USB_ReadInterrupts>
 8003b44:	4603      	mov	r3, r0
 8003b46:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b4e:	d10a      	bne.n	8003b66 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f007 f90f 	bl	800ad74 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	695a      	ldr	r2, [r3, #20]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003b64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f004 fd20 	bl	80085b0 <USB_ReadInterrupts>
 8003b70:	4603      	mov	r3, r0
 8003b72:	f003 0304 	and.w	r3, r3, #4
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	d115      	bne.n	8003ba6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d002      	beq.n	8003b92 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f007 f8ff 	bl	800ad90 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6859      	ldr	r1, [r3, #4]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	605a      	str	r2, [r3, #4]
 8003ba2:	e000      	b.n	8003ba6 <HAL_PCD_IRQHandler+0x938>
      return;
 8003ba4:	bf00      	nop
    }
  }
}
 8003ba6:	3734      	adds	r7, #52	; 0x34
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd90      	pop	{r4, r7, pc}

08003bac <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d101      	bne.n	8003bc6 <HAL_PCD_SetAddress+0x1a>
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	e013      	b.n	8003bee <HAL_PCD_SetAddress+0x42>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	78fa      	ldrb	r2, [r7, #3]
 8003bd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	78fa      	ldrb	r2, [r7, #3]
 8003bdc:	4611      	mov	r1, r2
 8003bde:	4618      	mov	r0, r3
 8003be0:	f004 fc7e 	bl	80084e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b084      	sub	sp, #16
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
 8003bfe:	4608      	mov	r0, r1
 8003c00:	4611      	mov	r1, r2
 8003c02:	461a      	mov	r2, r3
 8003c04:	4603      	mov	r3, r0
 8003c06:	70fb      	strb	r3, [r7, #3]
 8003c08:	460b      	mov	r3, r1
 8003c0a:	803b      	strh	r3, [r7, #0]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003c10:	2300      	movs	r3, #0
 8003c12:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	da0f      	bge.n	8003c3c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c1c:	78fb      	ldrb	r3, [r7, #3]
 8003c1e:	f003 020f 	and.w	r2, r3, #15
 8003c22:	4613      	mov	r3, r2
 8003c24:	00db      	lsls	r3, r3, #3
 8003c26:	4413      	add	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	3338      	adds	r3, #56	; 0x38
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	4413      	add	r3, r2
 8003c30:	3304      	adds	r3, #4
 8003c32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2201      	movs	r2, #1
 8003c38:	705a      	strb	r2, [r3, #1]
 8003c3a:	e00f      	b.n	8003c5c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c3c:	78fb      	ldrb	r3, [r7, #3]
 8003c3e:	f003 020f 	and.w	r2, r3, #15
 8003c42:	4613      	mov	r3, r2
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	4413      	add	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	4413      	add	r3, r2
 8003c52:	3304      	adds	r3, #4
 8003c54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003c5c:	78fb      	ldrb	r3, [r7, #3]
 8003c5e:	f003 030f 	and.w	r3, r3, #15
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003c68:	883a      	ldrh	r2, [r7, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	78ba      	ldrb	r2, [r7, #2]
 8003c72:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	785b      	ldrb	r3, [r3, #1]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d004      	beq.n	8003c86 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003c86:	78bb      	ldrb	r3, [r7, #2]
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d102      	bne.n	8003c92 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d101      	bne.n	8003ca0 <HAL_PCD_EP_Open+0xaa>
 8003c9c:	2302      	movs	r3, #2
 8003c9e:	e00e      	b.n	8003cbe <HAL_PCD_EP_Open+0xc8>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68f9      	ldr	r1, [r7, #12]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f003 fcfe 	bl	80076b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003cbc:	7afb      	ldrb	r3, [r7, #11]
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b084      	sub	sp, #16
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
 8003cce:	460b      	mov	r3, r1
 8003cd0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003cd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	da0f      	bge.n	8003cfa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cda:	78fb      	ldrb	r3, [r7, #3]
 8003cdc:	f003 020f 	and.w	r2, r3, #15
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	4413      	add	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	3338      	adds	r3, #56	; 0x38
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	4413      	add	r3, r2
 8003cee:	3304      	adds	r3, #4
 8003cf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	705a      	strb	r2, [r3, #1]
 8003cf8:	e00f      	b.n	8003d1a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cfa:	78fb      	ldrb	r3, [r7, #3]
 8003cfc:	f003 020f 	and.w	r2, r3, #15
 8003d00:	4613      	mov	r3, r2
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	4413      	add	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	4413      	add	r3, r2
 8003d10:	3304      	adds	r3, #4
 8003d12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003d1a:	78fb      	ldrb	r3, [r7, #3]
 8003d1c:	f003 030f 	and.w	r3, r3, #15
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d101      	bne.n	8003d34 <HAL_PCD_EP_Close+0x6e>
 8003d30:	2302      	movs	r3, #2
 8003d32:	e00e      	b.n	8003d52 <HAL_PCD_EP_Close+0x8c>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68f9      	ldr	r1, [r7, #12]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f003 fd3c 	bl	80077c0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b086      	sub	sp, #24
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	60f8      	str	r0, [r7, #12]
 8003d62:	607a      	str	r2, [r7, #4]
 8003d64:	603b      	str	r3, [r7, #0]
 8003d66:	460b      	mov	r3, r1
 8003d68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d6a:	7afb      	ldrb	r3, [r7, #11]
 8003d6c:	f003 020f 	and.w	r2, r3, #15
 8003d70:	4613      	mov	r3, r2
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	4413      	add	r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	4413      	add	r3, r2
 8003d80:	3304      	adds	r3, #4
 8003d82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	2200      	movs	r2, #0
 8003d94:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d9c:	7afb      	ldrb	r3, [r7, #11]
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	b2da      	uxtb	r2, r3
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d102      	bne.n	8003db6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003db6:	7afb      	ldrb	r3, [r7, #11]
 8003db8:	f003 030f 	and.w	r3, r3, #15
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d109      	bne.n	8003dd4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6818      	ldr	r0, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	461a      	mov	r2, r3
 8003dcc:	6979      	ldr	r1, [r7, #20]
 8003dce:	f004 f81b 	bl	8007e08 <USB_EP0StartXfer>
 8003dd2:	e008      	b.n	8003de6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6818      	ldr	r0, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	461a      	mov	r2, r3
 8003de0:	6979      	ldr	r1, [r7, #20]
 8003de2:	f003 fdc9 	bl	8007978 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3718      	adds	r7, #24
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	460b      	mov	r3, r1
 8003dfa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003dfc:	78fb      	ldrb	r3, [r7, #3]
 8003dfe:	f003 020f 	and.w	r2, r3, #15
 8003e02:	6879      	ldr	r1, [r7, #4]
 8003e04:	4613      	mov	r3, r2
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	4413      	add	r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	440b      	add	r3, r1
 8003e0e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003e12:	681b      	ldr	r3, [r3, #0]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	607a      	str	r2, [r7, #4]
 8003e2a:	603b      	str	r3, [r7, #0]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e30:	7afb      	ldrb	r3, [r7, #11]
 8003e32:	f003 020f 	and.w	r2, r3, #15
 8003e36:	4613      	mov	r3, r2
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	4413      	add	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	3338      	adds	r3, #56	; 0x38
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	4413      	add	r3, r2
 8003e44:	3304      	adds	r3, #4
 8003e46:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	2200      	movs	r2, #0
 8003e58:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e60:	7afb      	ldrb	r3, [r7, #11]
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	b2da      	uxtb	r2, r3
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d102      	bne.n	8003e7a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e7a:	7afb      	ldrb	r3, [r7, #11]
 8003e7c:	f003 030f 	and.w	r3, r3, #15
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d109      	bne.n	8003e98 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6818      	ldr	r0, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	461a      	mov	r2, r3
 8003e90:	6979      	ldr	r1, [r7, #20]
 8003e92:	f003 ffb9 	bl	8007e08 <USB_EP0StartXfer>
 8003e96:	e008      	b.n	8003eaa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6818      	ldr	r0, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	6979      	ldr	r1, [r7, #20]
 8003ea6:	f003 fd67 	bl	8007978 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003ec0:	78fb      	ldrb	r3, [r7, #3]
 8003ec2:	f003 020f 	and.w	r2, r3, #15
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d901      	bls.n	8003ed2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e050      	b.n	8003f74 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ed2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	da0f      	bge.n	8003efa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003eda:	78fb      	ldrb	r3, [r7, #3]
 8003edc:	f003 020f 	and.w	r2, r3, #15
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	4413      	add	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	3338      	adds	r3, #56	; 0x38
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	4413      	add	r3, r2
 8003eee:	3304      	adds	r3, #4
 8003ef0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	705a      	strb	r2, [r3, #1]
 8003ef8:	e00d      	b.n	8003f16 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003efa:	78fa      	ldrb	r2, [r7, #3]
 8003efc:	4613      	mov	r3, r2
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	4413      	add	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f1c:	78fb      	ldrb	r3, [r7, #3]
 8003f1e:	f003 030f 	and.w	r3, r3, #15
 8003f22:	b2da      	uxtb	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d101      	bne.n	8003f36 <HAL_PCD_EP_SetStall+0x82>
 8003f32:	2302      	movs	r3, #2
 8003f34:	e01e      	b.n	8003f74 <HAL_PCD_EP_SetStall+0xc0>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68f9      	ldr	r1, [r7, #12]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f004 f9f7 	bl	8008338 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f4a:	78fb      	ldrb	r3, [r7, #3]
 8003f4c:	f003 030f 	and.w	r3, r3, #15
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10a      	bne.n	8003f6a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6818      	ldr	r0, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	b2d9      	uxtb	r1, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f64:	461a      	mov	r2, r3
 8003f66:	f004 fbe7 	bl	8008738 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	460b      	mov	r3, r1
 8003f86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003f88:	78fb      	ldrb	r3, [r7, #3]
 8003f8a:	f003 020f 	and.w	r2, r3, #15
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d901      	bls.n	8003f9a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e042      	b.n	8004020 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	da0f      	bge.n	8003fc2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fa2:	78fb      	ldrb	r3, [r7, #3]
 8003fa4:	f003 020f 	and.w	r2, r3, #15
 8003fa8:	4613      	mov	r3, r2
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	4413      	add	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	3338      	adds	r3, #56	; 0x38
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	3304      	adds	r3, #4
 8003fb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	705a      	strb	r2, [r3, #1]
 8003fc0:	e00f      	b.n	8003fe2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fc2:	78fb      	ldrb	r3, [r7, #3]
 8003fc4:	f003 020f 	and.w	r2, r3, #15
 8003fc8:	4613      	mov	r3, r2
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	4413      	add	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	3304      	adds	r3, #4
 8003fda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fe8:	78fb      	ldrb	r3, [r7, #3]
 8003fea:	f003 030f 	and.w	r3, r3, #15
 8003fee:	b2da      	uxtb	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d101      	bne.n	8004002 <HAL_PCD_EP_ClrStall+0x86>
 8003ffe:	2302      	movs	r3, #2
 8004000:	e00e      	b.n	8004020 <HAL_PCD_EP_ClrStall+0xa4>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68f9      	ldr	r1, [r7, #12]
 8004010:	4618      	mov	r0, r3
 8004012:	f004 f9ff 	bl	8008414 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	460b      	mov	r3, r1
 8004032:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004034:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004038:	2b00      	cmp	r3, #0
 800403a:	da0c      	bge.n	8004056 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800403c:	78fb      	ldrb	r3, [r7, #3]
 800403e:	f003 020f 	and.w	r2, r3, #15
 8004042:	4613      	mov	r3, r2
 8004044:	00db      	lsls	r3, r3, #3
 8004046:	4413      	add	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	3338      	adds	r3, #56	; 0x38
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	4413      	add	r3, r2
 8004050:	3304      	adds	r3, #4
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	e00c      	b.n	8004070 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004056:	78fb      	ldrb	r3, [r7, #3]
 8004058:	f003 020f 	and.w	r2, r3, #15
 800405c:	4613      	mov	r3, r2
 800405e:	00db      	lsls	r3, r3, #3
 8004060:	4413      	add	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	4413      	add	r3, r2
 800406c:	3304      	adds	r3, #4
 800406e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68f9      	ldr	r1, [r7, #12]
 8004076:	4618      	mov	r0, r3
 8004078:	f004 f81e 	bl	80080b8 <USB_EPStopXfer>
 800407c:	4603      	mov	r3, r0
 800407e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004080:	7afb      	ldrb	r3, [r7, #11]
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b08a      	sub	sp, #40	; 0x28
 800408e:	af02      	add	r7, sp, #8
 8004090:	6078      	str	r0, [r7, #4]
 8004092:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	4613      	mov	r3, r2
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	4413      	add	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	3338      	adds	r3, #56	; 0x38
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	4413      	add	r3, r2
 80040ae:	3304      	adds	r3, #4
 80040b0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6a1a      	ldr	r2, [r3, #32]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d901      	bls.n	80040c2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e06c      	b.n	800419c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	699a      	ldr	r2, [r3, #24]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	69fa      	ldr	r2, [r7, #28]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d902      	bls.n	80040de <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	3303      	adds	r3, #3
 80040e2:	089b      	lsrs	r3, r3, #2
 80040e4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040e6:	e02b      	b.n	8004140 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	699a      	ldr	r2, [r3, #24]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	69fa      	ldr	r2, [r7, #28]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d902      	bls.n	8004104 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	3303      	adds	r3, #3
 8004108:	089b      	lsrs	r3, r3, #2
 800410a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6919      	ldr	r1, [r3, #16]
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	b2da      	uxtb	r2, r3
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800411c:	b2db      	uxtb	r3, r3
 800411e:	9300      	str	r3, [sp, #0]
 8004120:	4603      	mov	r3, r0
 8004122:	6978      	ldr	r0, [r7, #20]
 8004124:	f004 f872 	bl	800820c <USB_WritePacket>

    ep->xfer_buff  += len;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	691a      	ldr	r2, [r3, #16]
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	441a      	add	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6a1a      	ldr	r2, [r3, #32]
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	441a      	add	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	015a      	lsls	r2, r3, #5
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	4413      	add	r3, r2
 8004148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	b29b      	uxth	r3, r3
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	429a      	cmp	r2, r3
 8004154:	d809      	bhi.n	800416a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6a1a      	ldr	r2, [r3, #32]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800415e:	429a      	cmp	r2, r3
 8004160:	d203      	bcs.n	800416a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1be      	bne.n	80040e8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	699a      	ldr	r2, [r3, #24]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	429a      	cmp	r2, r3
 8004174:	d811      	bhi.n	800419a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	f003 030f 	and.w	r3, r3, #15
 800417c:	2201      	movs	r2, #1
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
 8004182:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800418a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	43db      	mvns	r3, r3
 8004190:	6939      	ldr	r1, [r7, #16]
 8004192:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004196:	4013      	ands	r3, r2
 8004198:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3720      	adds	r7, #32
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b088      	sub	sp, #32
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	333c      	adds	r3, #60	; 0x3c
 80041bc:	3304      	adds	r3, #4
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	015a      	lsls	r2, r3, #5
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	4413      	add	r3, r2
 80041ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d17b      	bne.n	80042d2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	f003 0308 	and.w	r3, r3, #8
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d015      	beq.n	8004210 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	4a61      	ldr	r2, [pc, #388]	; (800436c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	f240 80b9 	bls.w	8004360 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 80b3 	beq.w	8004360 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	015a      	lsls	r2, r3, #5
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	4413      	add	r3, r2
 8004202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004206:	461a      	mov	r2, r3
 8004208:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800420c:	6093      	str	r3, [r2, #8]
 800420e:	e0a7      	b.n	8004360 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	f003 0320 	and.w	r3, r3, #32
 8004216:	2b00      	cmp	r3, #0
 8004218:	d009      	beq.n	800422e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	015a      	lsls	r2, r3, #5
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	4413      	add	r3, r2
 8004222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004226:	461a      	mov	r2, r3
 8004228:	2320      	movs	r3, #32
 800422a:	6093      	str	r3, [r2, #8]
 800422c:	e098      	b.n	8004360 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004234:	2b00      	cmp	r3, #0
 8004236:	f040 8093 	bne.w	8004360 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	4a4b      	ldr	r2, [pc, #300]	; (800436c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d90f      	bls.n	8004262 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00a      	beq.n	8004262 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	015a      	lsls	r2, r3, #5
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	4413      	add	r3, r2
 8004254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004258:	461a      	mov	r2, r3
 800425a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800425e:	6093      	str	r3, [r2, #8]
 8004260:	e07e      	b.n	8004360 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	4613      	mov	r3, r2
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	4413      	add	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	4413      	add	r3, r2
 8004274:	3304      	adds	r3, #4
 8004276:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	69da      	ldr	r2, [r3, #28]
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	0159      	lsls	r1, r3, #5
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	440b      	add	r3, r1
 8004284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800428e:	1ad2      	subs	r2, r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d114      	bne.n	80042c4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d109      	bne.n	80042b6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6818      	ldr	r0, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80042ac:	461a      	mov	r2, r3
 80042ae:	2101      	movs	r1, #1
 80042b0:	f004 fa42 	bl	8008738 <USB_EP0_OutStart>
 80042b4:	e006      	b.n	80042c4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	691a      	ldr	r2, [r3, #16]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	441a      	add	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	4619      	mov	r1, r3
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f006 fc8e 	bl	800abec <HAL_PCD_DataOutStageCallback>
 80042d0:	e046      	b.n	8004360 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	4a26      	ldr	r2, [pc, #152]	; (8004370 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d124      	bne.n	8004324 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00a      	beq.n	80042fa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	015a      	lsls	r2, r3, #5
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	4413      	add	r3, r2
 80042ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f0:	461a      	mov	r2, r3
 80042f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042f6:	6093      	str	r3, [r2, #8]
 80042f8:	e032      	b.n	8004360 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f003 0320 	and.w	r3, r3, #32
 8004300:	2b00      	cmp	r3, #0
 8004302:	d008      	beq.n	8004316 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	015a      	lsls	r2, r3, #5
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	4413      	add	r3, r2
 800430c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004310:	461a      	mov	r2, r3
 8004312:	2320      	movs	r3, #32
 8004314:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	b2db      	uxtb	r3, r3
 800431a:	4619      	mov	r1, r3
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f006 fc65 	bl	800abec <HAL_PCD_DataOutStageCallback>
 8004322:	e01d      	b.n	8004360 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d114      	bne.n	8004354 <PCD_EP_OutXfrComplete_int+0x1b0>
 800432a:	6879      	ldr	r1, [r7, #4]
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	4613      	mov	r3, r2
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	4413      	add	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	440b      	add	r3, r1
 8004338:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d108      	bne.n	8004354 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6818      	ldr	r0, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800434c:	461a      	mov	r2, r3
 800434e:	2100      	movs	r1, #0
 8004350:	f004 f9f2 	bl	8008738 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	b2db      	uxtb	r3, r3
 8004358:	4619      	mov	r1, r3
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f006 fc46 	bl	800abec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3720      	adds	r7, #32
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	4f54300a 	.word	0x4f54300a
 8004370:	4f54310a 	.word	0x4f54310a

08004374 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	333c      	adds	r3, #60	; 0x3c
 800438c:	3304      	adds	r3, #4
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	015a      	lsls	r2, r3, #5
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	4413      	add	r3, r2
 800439a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	4a15      	ldr	r2, [pc, #84]	; (80043fc <PCD_EP_OutSetupPacket_int+0x88>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d90e      	bls.n	80043c8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d009      	beq.n	80043c8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	015a      	lsls	r2, r3, #5
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c0:	461a      	mov	r2, r3
 80043c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043c6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f006 fbfd 	bl	800abc8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	4a0a      	ldr	r2, [pc, #40]	; (80043fc <PCD_EP_OutSetupPacket_int+0x88>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d90c      	bls.n	80043f0 <PCD_EP_OutSetupPacket_int+0x7c>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d108      	bne.n	80043f0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6818      	ldr	r0, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80043e8:	461a      	mov	r2, r3
 80043ea:	2101      	movs	r1, #1
 80043ec:	f004 f9a4 	bl	8008738 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3718      	adds	r7, #24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	4f54300a 	.word	0x4f54300a

08004400 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	460b      	mov	r3, r1
 800440a:	70fb      	strb	r3, [r7, #3]
 800440c:	4613      	mov	r3, r2
 800440e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004416:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004418:	78fb      	ldrb	r3, [r7, #3]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d107      	bne.n	800442e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800441e:	883b      	ldrh	r3, [r7, #0]
 8004420:	0419      	lsls	r1, r3, #16
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	430a      	orrs	r2, r1
 800442a:	629a      	str	r2, [r3, #40]	; 0x28
 800442c:	e028      	b.n	8004480 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004434:	0c1b      	lsrs	r3, r3, #16
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	4413      	add	r3, r2
 800443a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800443c:	2300      	movs	r3, #0
 800443e:	73fb      	strb	r3, [r7, #15]
 8004440:	e00d      	b.n	800445e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	7bfb      	ldrb	r3, [r7, #15]
 8004448:	3340      	adds	r3, #64	; 0x40
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	0c1b      	lsrs	r3, r3, #16
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	4413      	add	r3, r2
 8004456:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004458:	7bfb      	ldrb	r3, [r7, #15]
 800445a:	3301      	adds	r3, #1
 800445c:	73fb      	strb	r3, [r7, #15]
 800445e:	7bfa      	ldrb	r2, [r7, #15]
 8004460:	78fb      	ldrb	r3, [r7, #3]
 8004462:	3b01      	subs	r3, #1
 8004464:	429a      	cmp	r2, r3
 8004466:	d3ec      	bcc.n	8004442 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004468:	883b      	ldrh	r3, [r7, #0]
 800446a:	0418      	lsls	r0, r3, #16
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6819      	ldr	r1, [r3, #0]
 8004470:	78fb      	ldrb	r3, [r7, #3]
 8004472:	3b01      	subs	r3, #1
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	4302      	orrs	r2, r0
 8004478:	3340      	adds	r3, #64	; 0x40
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	440b      	add	r3, r1
 800447e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3714      	adds	r7, #20
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr

0800448e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800448e:	b480      	push	{r7}
 8004490:	b083      	sub	sp, #12
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
 8004496:	460b      	mov	r3, r1
 8004498:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	887a      	ldrh	r2, [r7, #2]
 80044a0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	460b      	mov	r3, r1
 80044ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e267      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d075      	beq.n	80045d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044e6:	4b88      	ldr	r3, [pc, #544]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f003 030c 	and.w	r3, r3, #12
 80044ee:	2b04      	cmp	r3, #4
 80044f0:	d00c      	beq.n	800450c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044f2:	4b85      	ldr	r3, [pc, #532]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044fa:	2b08      	cmp	r3, #8
 80044fc:	d112      	bne.n	8004524 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044fe:	4b82      	ldr	r3, [pc, #520]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004506:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800450a:	d10b      	bne.n	8004524 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800450c:	4b7e      	ldr	r3, [pc, #504]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d05b      	beq.n	80045d0 <HAL_RCC_OscConfig+0x108>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d157      	bne.n	80045d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e242      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800452c:	d106      	bne.n	800453c <HAL_RCC_OscConfig+0x74>
 800452e:	4b76      	ldr	r3, [pc, #472]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a75      	ldr	r2, [pc, #468]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 8004534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004538:	6013      	str	r3, [r2, #0]
 800453a:	e01d      	b.n	8004578 <HAL_RCC_OscConfig+0xb0>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004544:	d10c      	bne.n	8004560 <HAL_RCC_OscConfig+0x98>
 8004546:	4b70      	ldr	r3, [pc, #448]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a6f      	ldr	r2, [pc, #444]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 800454c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004550:	6013      	str	r3, [r2, #0]
 8004552:	4b6d      	ldr	r3, [pc, #436]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a6c      	ldr	r2, [pc, #432]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 8004558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800455c:	6013      	str	r3, [r2, #0]
 800455e:	e00b      	b.n	8004578 <HAL_RCC_OscConfig+0xb0>
 8004560:	4b69      	ldr	r3, [pc, #420]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a68      	ldr	r2, [pc, #416]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 8004566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800456a:	6013      	str	r3, [r2, #0]
 800456c:	4b66      	ldr	r3, [pc, #408]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a65      	ldr	r2, [pc, #404]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 8004572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004576:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d013      	beq.n	80045a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004580:	f7fd fa1a 	bl	80019b8 <HAL_GetTick>
 8004584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004586:	e008      	b.n	800459a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004588:	f7fd fa16 	bl	80019b8 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b64      	cmp	r3, #100	; 0x64
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e207      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800459a:	4b5b      	ldr	r3, [pc, #364]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d0f0      	beq.n	8004588 <HAL_RCC_OscConfig+0xc0>
 80045a6:	e014      	b.n	80045d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a8:	f7fd fa06 	bl	80019b8 <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045b0:	f7fd fa02 	bl	80019b8 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b64      	cmp	r3, #100	; 0x64
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e1f3      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045c2:	4b51      	ldr	r3, [pc, #324]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1f0      	bne.n	80045b0 <HAL_RCC_OscConfig+0xe8>
 80045ce:	e000      	b.n	80045d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d063      	beq.n	80046a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045de:	4b4a      	ldr	r3, [pc, #296]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f003 030c 	and.w	r3, r3, #12
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00b      	beq.n	8004602 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ea:	4b47      	ldr	r3, [pc, #284]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045f2:	2b08      	cmp	r3, #8
 80045f4:	d11c      	bne.n	8004630 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045f6:	4b44      	ldr	r3, [pc, #272]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d116      	bne.n	8004630 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004602:	4b41      	ldr	r3, [pc, #260]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d005      	beq.n	800461a <HAL_RCC_OscConfig+0x152>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d001      	beq.n	800461a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e1c7      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800461a:	4b3b      	ldr	r3, [pc, #236]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	4937      	ldr	r1, [pc, #220]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 800462a:	4313      	orrs	r3, r2
 800462c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800462e:	e03a      	b.n	80046a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d020      	beq.n	800467a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004638:	4b34      	ldr	r3, [pc, #208]	; (800470c <HAL_RCC_OscConfig+0x244>)
 800463a:	2201      	movs	r2, #1
 800463c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800463e:	f7fd f9bb 	bl	80019b8 <HAL_GetTick>
 8004642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004644:	e008      	b.n	8004658 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004646:	f7fd f9b7 	bl	80019b8 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d901      	bls.n	8004658 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e1a8      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004658:	4b2b      	ldr	r3, [pc, #172]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0f0      	beq.n	8004646 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004664:	4b28      	ldr	r3, [pc, #160]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	00db      	lsls	r3, r3, #3
 8004672:	4925      	ldr	r1, [pc, #148]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 8004674:	4313      	orrs	r3, r2
 8004676:	600b      	str	r3, [r1, #0]
 8004678:	e015      	b.n	80046a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800467a:	4b24      	ldr	r3, [pc, #144]	; (800470c <HAL_RCC_OscConfig+0x244>)
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004680:	f7fd f99a 	bl	80019b8 <HAL_GetTick>
 8004684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004686:	e008      	b.n	800469a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004688:	f7fd f996 	bl	80019b8 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e187      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800469a:	4b1b      	ldr	r3, [pc, #108]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1f0      	bne.n	8004688 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0308 	and.w	r3, r3, #8
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d036      	beq.n	8004720 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d016      	beq.n	80046e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046ba:	4b15      	ldr	r3, [pc, #84]	; (8004710 <HAL_RCC_OscConfig+0x248>)
 80046bc:	2201      	movs	r2, #1
 80046be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c0:	f7fd f97a 	bl	80019b8 <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046c6:	e008      	b.n	80046da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046c8:	f7fd f976 	bl	80019b8 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e167      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046da:	4b0b      	ldr	r3, [pc, #44]	; (8004708 <HAL_RCC_OscConfig+0x240>)
 80046dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d0f0      	beq.n	80046c8 <HAL_RCC_OscConfig+0x200>
 80046e6:	e01b      	b.n	8004720 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046e8:	4b09      	ldr	r3, [pc, #36]	; (8004710 <HAL_RCC_OscConfig+0x248>)
 80046ea:	2200      	movs	r2, #0
 80046ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ee:	f7fd f963 	bl	80019b8 <HAL_GetTick>
 80046f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046f4:	e00e      	b.n	8004714 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046f6:	f7fd f95f 	bl	80019b8 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	2b02      	cmp	r3, #2
 8004702:	d907      	bls.n	8004714 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e150      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
 8004708:	40023800 	.word	0x40023800
 800470c:	42470000 	.word	0x42470000
 8004710:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004714:	4b88      	ldr	r3, [pc, #544]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 8004716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1ea      	bne.n	80046f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0304 	and.w	r3, r3, #4
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 8097 	beq.w	800485c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800472e:	2300      	movs	r3, #0
 8004730:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004732:	4b81      	ldr	r3, [pc, #516]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10f      	bne.n	800475e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800473e:	2300      	movs	r3, #0
 8004740:	60bb      	str	r3, [r7, #8]
 8004742:	4b7d      	ldr	r3, [pc, #500]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	4a7c      	ldr	r2, [pc, #496]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 8004748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800474c:	6413      	str	r3, [r2, #64]	; 0x40
 800474e:	4b7a      	ldr	r3, [pc, #488]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004756:	60bb      	str	r3, [r7, #8]
 8004758:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800475a:	2301      	movs	r3, #1
 800475c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800475e:	4b77      	ldr	r3, [pc, #476]	; (800493c <HAL_RCC_OscConfig+0x474>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004766:	2b00      	cmp	r3, #0
 8004768:	d118      	bne.n	800479c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800476a:	4b74      	ldr	r3, [pc, #464]	; (800493c <HAL_RCC_OscConfig+0x474>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a73      	ldr	r2, [pc, #460]	; (800493c <HAL_RCC_OscConfig+0x474>)
 8004770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004774:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004776:	f7fd f91f 	bl	80019b8 <HAL_GetTick>
 800477a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800477c:	e008      	b.n	8004790 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800477e:	f7fd f91b 	bl	80019b8 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	2b02      	cmp	r3, #2
 800478a:	d901      	bls.n	8004790 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e10c      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004790:	4b6a      	ldr	r3, [pc, #424]	; (800493c <HAL_RCC_OscConfig+0x474>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004798:	2b00      	cmp	r3, #0
 800479a:	d0f0      	beq.n	800477e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d106      	bne.n	80047b2 <HAL_RCC_OscConfig+0x2ea>
 80047a4:	4b64      	ldr	r3, [pc, #400]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 80047a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a8:	4a63      	ldr	r2, [pc, #396]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 80047aa:	f043 0301 	orr.w	r3, r3, #1
 80047ae:	6713      	str	r3, [r2, #112]	; 0x70
 80047b0:	e01c      	b.n	80047ec <HAL_RCC_OscConfig+0x324>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	2b05      	cmp	r3, #5
 80047b8:	d10c      	bne.n	80047d4 <HAL_RCC_OscConfig+0x30c>
 80047ba:	4b5f      	ldr	r3, [pc, #380]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 80047bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047be:	4a5e      	ldr	r2, [pc, #376]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 80047c0:	f043 0304 	orr.w	r3, r3, #4
 80047c4:	6713      	str	r3, [r2, #112]	; 0x70
 80047c6:	4b5c      	ldr	r3, [pc, #368]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 80047c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ca:	4a5b      	ldr	r2, [pc, #364]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 80047cc:	f043 0301 	orr.w	r3, r3, #1
 80047d0:	6713      	str	r3, [r2, #112]	; 0x70
 80047d2:	e00b      	b.n	80047ec <HAL_RCC_OscConfig+0x324>
 80047d4:	4b58      	ldr	r3, [pc, #352]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 80047d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d8:	4a57      	ldr	r2, [pc, #348]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 80047da:	f023 0301 	bic.w	r3, r3, #1
 80047de:	6713      	str	r3, [r2, #112]	; 0x70
 80047e0:	4b55      	ldr	r3, [pc, #340]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 80047e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e4:	4a54      	ldr	r2, [pc, #336]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 80047e6:	f023 0304 	bic.w	r3, r3, #4
 80047ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d015      	beq.n	8004820 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f4:	f7fd f8e0 	bl	80019b8 <HAL_GetTick>
 80047f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047fa:	e00a      	b.n	8004812 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047fc:	f7fd f8dc 	bl	80019b8 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	f241 3288 	movw	r2, #5000	; 0x1388
 800480a:	4293      	cmp	r3, r2
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e0cb      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004812:	4b49      	ldr	r3, [pc, #292]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 8004814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d0ee      	beq.n	80047fc <HAL_RCC_OscConfig+0x334>
 800481e:	e014      	b.n	800484a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004820:	f7fd f8ca 	bl	80019b8 <HAL_GetTick>
 8004824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004826:	e00a      	b.n	800483e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004828:	f7fd f8c6 	bl	80019b8 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	f241 3288 	movw	r2, #5000	; 0x1388
 8004836:	4293      	cmp	r3, r2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e0b5      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800483e:	4b3e      	ldr	r3, [pc, #248]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 8004840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1ee      	bne.n	8004828 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800484a:	7dfb      	ldrb	r3, [r7, #23]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d105      	bne.n	800485c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004850:	4b39      	ldr	r3, [pc, #228]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 8004852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004854:	4a38      	ldr	r2, [pc, #224]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 8004856:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800485a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	2b00      	cmp	r3, #0
 8004862:	f000 80a1 	beq.w	80049a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004866:	4b34      	ldr	r3, [pc, #208]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f003 030c 	and.w	r3, r3, #12
 800486e:	2b08      	cmp	r3, #8
 8004870:	d05c      	beq.n	800492c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	2b02      	cmp	r3, #2
 8004878:	d141      	bne.n	80048fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800487a:	4b31      	ldr	r3, [pc, #196]	; (8004940 <HAL_RCC_OscConfig+0x478>)
 800487c:	2200      	movs	r2, #0
 800487e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004880:	f7fd f89a 	bl	80019b8 <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004886:	e008      	b.n	800489a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004888:	f7fd f896 	bl	80019b8 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b02      	cmp	r3, #2
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e087      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800489a:	4b27      	ldr	r3, [pc, #156]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1f0      	bne.n	8004888 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	69da      	ldr	r2, [r3, #28]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b4:	019b      	lsls	r3, r3, #6
 80048b6:	431a      	orrs	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048bc:	085b      	lsrs	r3, r3, #1
 80048be:	3b01      	subs	r3, #1
 80048c0:	041b      	lsls	r3, r3, #16
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c8:	061b      	lsls	r3, r3, #24
 80048ca:	491b      	ldr	r1, [pc, #108]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048d0:	4b1b      	ldr	r3, [pc, #108]	; (8004940 <HAL_RCC_OscConfig+0x478>)
 80048d2:	2201      	movs	r2, #1
 80048d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d6:	f7fd f86f 	bl	80019b8 <HAL_GetTick>
 80048da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048dc:	e008      	b.n	80048f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048de:	f7fd f86b 	bl	80019b8 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d901      	bls.n	80048f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e05c      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048f0:	4b11      	ldr	r3, [pc, #68]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d0f0      	beq.n	80048de <HAL_RCC_OscConfig+0x416>
 80048fc:	e054      	b.n	80049a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048fe:	4b10      	ldr	r3, [pc, #64]	; (8004940 <HAL_RCC_OscConfig+0x478>)
 8004900:	2200      	movs	r2, #0
 8004902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004904:	f7fd f858 	bl	80019b8 <HAL_GetTick>
 8004908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800490a:	e008      	b.n	800491e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800490c:	f7fd f854 	bl	80019b8 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e045      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800491e:	4b06      	ldr	r3, [pc, #24]	; (8004938 <HAL_RCC_OscConfig+0x470>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1f0      	bne.n	800490c <HAL_RCC_OscConfig+0x444>
 800492a:	e03d      	b.n	80049a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d107      	bne.n	8004944 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e038      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
 8004938:	40023800 	.word	0x40023800
 800493c:	40007000 	.word	0x40007000
 8004940:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004944:	4b1b      	ldr	r3, [pc, #108]	; (80049b4 <HAL_RCC_OscConfig+0x4ec>)
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d028      	beq.n	80049a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800495c:	429a      	cmp	r2, r3
 800495e:	d121      	bne.n	80049a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800496a:	429a      	cmp	r2, r3
 800496c:	d11a      	bne.n	80049a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004974:	4013      	ands	r3, r2
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800497a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800497c:	4293      	cmp	r3, r2
 800497e:	d111      	bne.n	80049a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498a:	085b      	lsrs	r3, r3, #1
 800498c:	3b01      	subs	r3, #1
 800498e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004990:	429a      	cmp	r2, r3
 8004992:	d107      	bne.n	80049a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d001      	beq.n	80049a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e000      	b.n	80049aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3718      	adds	r7, #24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	40023800 	.word	0x40023800

080049b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e0cc      	b.n	8004b66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049cc:	4b68      	ldr	r3, [pc, #416]	; (8004b70 <HAL_RCC_ClockConfig+0x1b8>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0307 	and.w	r3, r3, #7
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d90c      	bls.n	80049f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049da:	4b65      	ldr	r3, [pc, #404]	; (8004b70 <HAL_RCC_ClockConfig+0x1b8>)
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	b2d2      	uxtb	r2, r2
 80049e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049e2:	4b63      	ldr	r3, [pc, #396]	; (8004b70 <HAL_RCC_ClockConfig+0x1b8>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0307 	and.w	r3, r3, #7
 80049ea:	683a      	ldr	r2, [r7, #0]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d001      	beq.n	80049f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e0b8      	b.n	8004b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d020      	beq.n	8004a42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0304 	and.w	r3, r3, #4
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d005      	beq.n	8004a18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a0c:	4b59      	ldr	r3, [pc, #356]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	4a58      	ldr	r2, [pc, #352]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004a12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0308 	and.w	r3, r3, #8
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d005      	beq.n	8004a30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a24:	4b53      	ldr	r3, [pc, #332]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	4a52      	ldr	r2, [pc, #328]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a30:	4b50      	ldr	r3, [pc, #320]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	494d      	ldr	r1, [pc, #308]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d044      	beq.n	8004ad8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d107      	bne.n	8004a66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a56:	4b47      	ldr	r3, [pc, #284]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d119      	bne.n	8004a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e07f      	b.n	8004b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d003      	beq.n	8004a76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a72:	2b03      	cmp	r3, #3
 8004a74:	d107      	bne.n	8004a86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a76:	4b3f      	ldr	r3, [pc, #252]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d109      	bne.n	8004a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e06f      	b.n	8004b66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a86:	4b3b      	ldr	r3, [pc, #236]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e067      	b.n	8004b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a96:	4b37      	ldr	r3, [pc, #220]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f023 0203 	bic.w	r2, r3, #3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	4934      	ldr	r1, [pc, #208]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004aa8:	f7fc ff86 	bl	80019b8 <HAL_GetTick>
 8004aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aae:	e00a      	b.n	8004ac6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ab0:	f7fc ff82 	bl	80019b8 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e04f      	b.n	8004b66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ac6:	4b2b      	ldr	r3, [pc, #172]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f003 020c 	and.w	r2, r3, #12
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d1eb      	bne.n	8004ab0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ad8:	4b25      	ldr	r3, [pc, #148]	; (8004b70 <HAL_RCC_ClockConfig+0x1b8>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0307 	and.w	r3, r3, #7
 8004ae0:	683a      	ldr	r2, [r7, #0]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d20c      	bcs.n	8004b00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ae6:	4b22      	ldr	r3, [pc, #136]	; (8004b70 <HAL_RCC_ClockConfig+0x1b8>)
 8004ae8:	683a      	ldr	r2, [r7, #0]
 8004aea:	b2d2      	uxtb	r2, r2
 8004aec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aee:	4b20      	ldr	r3, [pc, #128]	; (8004b70 <HAL_RCC_ClockConfig+0x1b8>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0307 	and.w	r3, r3, #7
 8004af6:	683a      	ldr	r2, [r7, #0]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d001      	beq.n	8004b00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e032      	b.n	8004b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d008      	beq.n	8004b1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b0c:	4b19      	ldr	r3, [pc, #100]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	4916      	ldr	r1, [pc, #88]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0308 	and.w	r3, r3, #8
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d009      	beq.n	8004b3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b2a:	4b12      	ldr	r3, [pc, #72]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	00db      	lsls	r3, r3, #3
 8004b38:	490e      	ldr	r1, [pc, #56]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b3e:	f000 f821 	bl	8004b84 <HAL_RCC_GetSysClockFreq>
 8004b42:	4602      	mov	r2, r0
 8004b44:	4b0b      	ldr	r3, [pc, #44]	; (8004b74 <HAL_RCC_ClockConfig+0x1bc>)
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	091b      	lsrs	r3, r3, #4
 8004b4a:	f003 030f 	and.w	r3, r3, #15
 8004b4e:	490a      	ldr	r1, [pc, #40]	; (8004b78 <HAL_RCC_ClockConfig+0x1c0>)
 8004b50:	5ccb      	ldrb	r3, [r1, r3]
 8004b52:	fa22 f303 	lsr.w	r3, r2, r3
 8004b56:	4a09      	ldr	r2, [pc, #36]	; (8004b7c <HAL_RCC_ClockConfig+0x1c4>)
 8004b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b5a:	4b09      	ldr	r3, [pc, #36]	; (8004b80 <HAL_RCC_ClockConfig+0x1c8>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7fc fee6 	bl	8001930 <HAL_InitTick>

  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	40023c00 	.word	0x40023c00
 8004b74:	40023800 	.word	0x40023800
 8004b78:	0800c650 	.word	0x0800c650
 8004b7c:	20000000 	.word	0x20000000
 8004b80:	20000004 	.word	0x20000004

08004b84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b88:	b094      	sub	sp, #80	; 0x50
 8004b8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	647b      	str	r3, [r7, #68]	; 0x44
 8004b90:	2300      	movs	r3, #0
 8004b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b94:	2300      	movs	r3, #0
 8004b96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b9c:	4b79      	ldr	r3, [pc, #484]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f003 030c 	and.w	r3, r3, #12
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	d00d      	beq.n	8004bc4 <HAL_RCC_GetSysClockFreq+0x40>
 8004ba8:	2b08      	cmp	r3, #8
 8004baa:	f200 80e1 	bhi.w	8004d70 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d002      	beq.n	8004bb8 <HAL_RCC_GetSysClockFreq+0x34>
 8004bb2:	2b04      	cmp	r3, #4
 8004bb4:	d003      	beq.n	8004bbe <HAL_RCC_GetSysClockFreq+0x3a>
 8004bb6:	e0db      	b.n	8004d70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bb8:	4b73      	ldr	r3, [pc, #460]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004bbc:	e0db      	b.n	8004d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bbe:	4b73      	ldr	r3, [pc, #460]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x208>)
 8004bc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004bc2:	e0d8      	b.n	8004d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bc4:	4b6f      	ldr	r3, [pc, #444]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bcc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bce:	4b6d      	ldr	r3, [pc, #436]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d063      	beq.n	8004ca2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bda:	4b6a      	ldr	r3, [pc, #424]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	099b      	lsrs	r3, r3, #6
 8004be0:	2200      	movs	r2, #0
 8004be2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004be4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bec:	633b      	str	r3, [r7, #48]	; 0x30
 8004bee:	2300      	movs	r3, #0
 8004bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8004bf2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004bf6:	4622      	mov	r2, r4
 8004bf8:	462b      	mov	r3, r5
 8004bfa:	f04f 0000 	mov.w	r0, #0
 8004bfe:	f04f 0100 	mov.w	r1, #0
 8004c02:	0159      	lsls	r1, r3, #5
 8004c04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c08:	0150      	lsls	r0, r2, #5
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	4621      	mov	r1, r4
 8004c10:	1a51      	subs	r1, r2, r1
 8004c12:	6139      	str	r1, [r7, #16]
 8004c14:	4629      	mov	r1, r5
 8004c16:	eb63 0301 	sbc.w	r3, r3, r1
 8004c1a:	617b      	str	r3, [r7, #20]
 8004c1c:	f04f 0200 	mov.w	r2, #0
 8004c20:	f04f 0300 	mov.w	r3, #0
 8004c24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c28:	4659      	mov	r1, fp
 8004c2a:	018b      	lsls	r3, r1, #6
 8004c2c:	4651      	mov	r1, sl
 8004c2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c32:	4651      	mov	r1, sl
 8004c34:	018a      	lsls	r2, r1, #6
 8004c36:	4651      	mov	r1, sl
 8004c38:	ebb2 0801 	subs.w	r8, r2, r1
 8004c3c:	4659      	mov	r1, fp
 8004c3e:	eb63 0901 	sbc.w	r9, r3, r1
 8004c42:	f04f 0200 	mov.w	r2, #0
 8004c46:	f04f 0300 	mov.w	r3, #0
 8004c4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c56:	4690      	mov	r8, r2
 8004c58:	4699      	mov	r9, r3
 8004c5a:	4623      	mov	r3, r4
 8004c5c:	eb18 0303 	adds.w	r3, r8, r3
 8004c60:	60bb      	str	r3, [r7, #8]
 8004c62:	462b      	mov	r3, r5
 8004c64:	eb49 0303 	adc.w	r3, r9, r3
 8004c68:	60fb      	str	r3, [r7, #12]
 8004c6a:	f04f 0200 	mov.w	r2, #0
 8004c6e:	f04f 0300 	mov.w	r3, #0
 8004c72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c76:	4629      	mov	r1, r5
 8004c78:	024b      	lsls	r3, r1, #9
 8004c7a:	4621      	mov	r1, r4
 8004c7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c80:	4621      	mov	r1, r4
 8004c82:	024a      	lsls	r2, r1, #9
 8004c84:	4610      	mov	r0, r2
 8004c86:	4619      	mov	r1, r3
 8004c88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c94:	f7fb faec 	bl	8000270 <__aeabi_uldivmod>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ca0:	e058      	b.n	8004d54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ca2:	4b38      	ldr	r3, [pc, #224]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	099b      	lsrs	r3, r3, #6
 8004ca8:	2200      	movs	r2, #0
 8004caa:	4618      	mov	r0, r3
 8004cac:	4611      	mov	r1, r2
 8004cae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004cb2:	623b      	str	r3, [r7, #32]
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8004cb8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004cbc:	4642      	mov	r2, r8
 8004cbe:	464b      	mov	r3, r9
 8004cc0:	f04f 0000 	mov.w	r0, #0
 8004cc4:	f04f 0100 	mov.w	r1, #0
 8004cc8:	0159      	lsls	r1, r3, #5
 8004cca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cce:	0150      	lsls	r0, r2, #5
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	4641      	mov	r1, r8
 8004cd6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004cda:	4649      	mov	r1, r9
 8004cdc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ce0:	f04f 0200 	mov.w	r2, #0
 8004ce4:	f04f 0300 	mov.w	r3, #0
 8004ce8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004cec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004cf0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004cf4:	ebb2 040a 	subs.w	r4, r2, sl
 8004cf8:	eb63 050b 	sbc.w	r5, r3, fp
 8004cfc:	f04f 0200 	mov.w	r2, #0
 8004d00:	f04f 0300 	mov.w	r3, #0
 8004d04:	00eb      	lsls	r3, r5, #3
 8004d06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d0a:	00e2      	lsls	r2, r4, #3
 8004d0c:	4614      	mov	r4, r2
 8004d0e:	461d      	mov	r5, r3
 8004d10:	4643      	mov	r3, r8
 8004d12:	18e3      	adds	r3, r4, r3
 8004d14:	603b      	str	r3, [r7, #0]
 8004d16:	464b      	mov	r3, r9
 8004d18:	eb45 0303 	adc.w	r3, r5, r3
 8004d1c:	607b      	str	r3, [r7, #4]
 8004d1e:	f04f 0200 	mov.w	r2, #0
 8004d22:	f04f 0300 	mov.w	r3, #0
 8004d26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d2a:	4629      	mov	r1, r5
 8004d2c:	028b      	lsls	r3, r1, #10
 8004d2e:	4621      	mov	r1, r4
 8004d30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d34:	4621      	mov	r1, r4
 8004d36:	028a      	lsls	r2, r1, #10
 8004d38:	4610      	mov	r0, r2
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d3e:	2200      	movs	r2, #0
 8004d40:	61bb      	str	r3, [r7, #24]
 8004d42:	61fa      	str	r2, [r7, #28]
 8004d44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d48:	f7fb fa92 	bl	8000270 <__aeabi_uldivmod>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	460b      	mov	r3, r1
 8004d50:	4613      	mov	r3, r2
 8004d52:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d54:	4b0b      	ldr	r3, [pc, #44]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	0c1b      	lsrs	r3, r3, #16
 8004d5a:	f003 0303 	and.w	r3, r3, #3
 8004d5e:	3301      	adds	r3, #1
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004d64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d6e:	e002      	b.n	8004d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d70:	4b05      	ldr	r3, [pc, #20]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3750      	adds	r7, #80	; 0x50
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d82:	bf00      	nop
 8004d84:	40023800 	.word	0x40023800
 8004d88:	00f42400 	.word	0x00f42400
 8004d8c:	007a1200 	.word	0x007a1200

08004d90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d94:	4b03      	ldr	r3, [pc, #12]	; (8004da4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d96:	681b      	ldr	r3, [r3, #0]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	20000000 	.word	0x20000000

08004da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004dac:	f7ff fff0 	bl	8004d90 <HAL_RCC_GetHCLKFreq>
 8004db0:	4602      	mov	r2, r0
 8004db2:	4b05      	ldr	r3, [pc, #20]	; (8004dc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	0a9b      	lsrs	r3, r3, #10
 8004db8:	f003 0307 	and.w	r3, r3, #7
 8004dbc:	4903      	ldr	r1, [pc, #12]	; (8004dcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dbe:	5ccb      	ldrb	r3, [r1, r3]
 8004dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	40023800 	.word	0x40023800
 8004dcc:	0800c660 	.word	0x0800c660

08004dd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004dd4:	f7ff ffdc 	bl	8004d90 <HAL_RCC_GetHCLKFreq>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	4b05      	ldr	r3, [pc, #20]	; (8004df0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	0b5b      	lsrs	r3, r3, #13
 8004de0:	f003 0307 	and.w	r3, r3, #7
 8004de4:	4903      	ldr	r1, [pc, #12]	; (8004df4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004de6:	5ccb      	ldrb	r3, [r1, r3]
 8004de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	40023800 	.word	0x40023800
 8004df4:	0800c660 	.word	0x0800c660

08004df8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e07b      	b.n	8004f02 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d108      	bne.n	8004e24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e1a:	d009      	beq.n	8004e30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	61da      	str	r2, [r3, #28]
 8004e22:	e005      	b.n	8004e30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d106      	bne.n	8004e50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7fc fa12 	bl	8001274 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e66:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e78:	431a      	orrs	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e82:	431a      	orrs	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	f003 0302 	and.w	r3, r3, #2
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	431a      	orrs	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ea0:	431a      	orrs	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a1b      	ldr	r3, [r3, #32]
 8004eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eb4:	ea42 0103 	orr.w	r1, r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ebc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	0c1b      	lsrs	r3, r3, #16
 8004ece:	f003 0104 	and.w	r1, r3, #4
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed6:	f003 0210 	and.w	r2, r3, #16
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	69da      	ldr	r2, [r3, #28]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ef0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b082      	sub	sp, #8
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d101      	bne.n	8004f1c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e041      	b.n	8004fa0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d106      	bne.n	8004f36 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f7fc fa37 	bl	80013a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2202      	movs	r2, #2
 8004f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	3304      	adds	r3, #4
 8004f46:	4619      	mov	r1, r3
 8004f48:	4610      	mov	r0, r2
 8004f4a:	f000 fa75 	bl	8005438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3708      	adds	r7, #8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d101      	bne.n	8004fba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e041      	b.n	800503e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d106      	bne.n	8004fd4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f7fc f998 	bl	8001304 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	3304      	adds	r3, #4
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	4610      	mov	r0, r2
 8004fe8:	f000 fa26 	bl	8005438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}

08005046 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005046:	b580      	push	{r7, lr}
 8005048:	b082      	sub	sp, #8
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d101      	bne.n	8005058 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e041      	b.n	80050dc <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b00      	cmp	r3, #0
 8005062:	d106      	bne.n	8005072 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f839 	bl	80050e4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2202      	movs	r2, #2
 8005076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	3304      	adds	r3, #4
 8005082:	4619      	mov	r1, r3
 8005084:	4610      	mov	r0, r2
 8005086:	f000 f9d7 	bl	8005438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005104:	2300      	movs	r3, #0
 8005106:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800510e:	2b01      	cmp	r3, #1
 8005110:	d101      	bne.n	8005116 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005112:	2302      	movs	r3, #2
 8005114:	e088      	b.n	8005228 <HAL_TIM_IC_ConfigChannel+0x130>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d11b      	bne.n	800515c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6818      	ldr	r0, [r3, #0]
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	6819      	ldr	r1, [r3, #0]
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	f000 fc62 	bl	80059fc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	699a      	ldr	r2, [r3, #24]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f022 020c 	bic.w	r2, r2, #12
 8005146:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6999      	ldr	r1, [r3, #24]
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	689a      	ldr	r2, [r3, #8]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	430a      	orrs	r2, r1
 8005158:	619a      	str	r2, [r3, #24]
 800515a:	e060      	b.n	800521e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b04      	cmp	r3, #4
 8005160:	d11c      	bne.n	800519c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6818      	ldr	r0, [r3, #0]
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	6819      	ldr	r1, [r3, #0]
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	f000 fce6 	bl	8005b42 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	699a      	ldr	r2, [r3, #24]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005184:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	6999      	ldr	r1, [r3, #24]
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	021a      	lsls	r2, r3, #8
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	430a      	orrs	r2, r1
 8005198:	619a      	str	r2, [r3, #24]
 800519a:	e040      	b.n	800521e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b08      	cmp	r3, #8
 80051a0:	d11b      	bne.n	80051da <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6818      	ldr	r0, [r3, #0]
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	6819      	ldr	r1, [r3, #0]
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	f000 fd33 	bl	8005c1c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	69da      	ldr	r2, [r3, #28]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f022 020c 	bic.w	r2, r2, #12
 80051c4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	69d9      	ldr	r1, [r3, #28]
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	689a      	ldr	r2, [r3, #8]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	430a      	orrs	r2, r1
 80051d6:	61da      	str	r2, [r3, #28]
 80051d8:	e021      	b.n	800521e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2b0c      	cmp	r3, #12
 80051de:	d11c      	bne.n	800521a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6818      	ldr	r0, [r3, #0]
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	6819      	ldr	r1, [r3, #0]
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	f000 fd50 	bl	8005c94 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	69da      	ldr	r2, [r3, #28]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005202:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	69d9      	ldr	r1, [r3, #28]
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	021a      	lsls	r2, r3, #8
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	430a      	orrs	r2, r1
 8005216:	61da      	str	r2, [r3, #28]
 8005218:	e001      	b.n	800521e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005226:	7dfb      	ldrb	r3, [r7, #23]
}
 8005228:	4618      	mov	r0, r3
 800522a:	3718      	adds	r7, #24
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800523c:	2300      	movs	r3, #0
 800523e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005246:	2b01      	cmp	r3, #1
 8005248:	d101      	bne.n	800524e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800524a:	2302      	movs	r3, #2
 800524c:	e0ae      	b.n	80053ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b0c      	cmp	r3, #12
 800525a:	f200 809f 	bhi.w	800539c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800525e:	a201      	add	r2, pc, #4	; (adr r2, 8005264 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005264:	08005299 	.word	0x08005299
 8005268:	0800539d 	.word	0x0800539d
 800526c:	0800539d 	.word	0x0800539d
 8005270:	0800539d 	.word	0x0800539d
 8005274:	080052d9 	.word	0x080052d9
 8005278:	0800539d 	.word	0x0800539d
 800527c:	0800539d 	.word	0x0800539d
 8005280:	0800539d 	.word	0x0800539d
 8005284:	0800531b 	.word	0x0800531b
 8005288:	0800539d 	.word	0x0800539d
 800528c:	0800539d 	.word	0x0800539d
 8005290:	0800539d 	.word	0x0800539d
 8005294:	0800535b 	.word	0x0800535b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68b9      	ldr	r1, [r7, #8]
 800529e:	4618      	mov	r0, r3
 80052a0:	f000 f96a 	bl	8005578 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	699a      	ldr	r2, [r3, #24]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f042 0208 	orr.w	r2, r2, #8
 80052b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	699a      	ldr	r2, [r3, #24]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f022 0204 	bic.w	r2, r2, #4
 80052c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6999      	ldr	r1, [r3, #24]
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	691a      	ldr	r2, [r3, #16]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	619a      	str	r2, [r3, #24]
      break;
 80052d6:	e064      	b.n	80053a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68b9      	ldr	r1, [r7, #8]
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 f9ba 	bl	8005658 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	699a      	ldr	r2, [r3, #24]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	699a      	ldr	r2, [r3, #24]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6999      	ldr	r1, [r3, #24]
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	021a      	lsls	r2, r3, #8
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	430a      	orrs	r2, r1
 8005316:	619a      	str	r2, [r3, #24]
      break;
 8005318:	e043      	b.n	80053a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68b9      	ldr	r1, [r7, #8]
 8005320:	4618      	mov	r0, r3
 8005322:	f000 fa0f 	bl	8005744 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	69da      	ldr	r2, [r3, #28]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f042 0208 	orr.w	r2, r2, #8
 8005334:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	69da      	ldr	r2, [r3, #28]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f022 0204 	bic.w	r2, r2, #4
 8005344:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	69d9      	ldr	r1, [r3, #28]
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	691a      	ldr	r2, [r3, #16]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	430a      	orrs	r2, r1
 8005356:	61da      	str	r2, [r3, #28]
      break;
 8005358:	e023      	b.n	80053a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68b9      	ldr	r1, [r7, #8]
 8005360:	4618      	mov	r0, r3
 8005362:	f000 fa63 	bl	800582c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	69da      	ldr	r2, [r3, #28]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005374:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	69da      	ldr	r2, [r3, #28]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005384:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	69d9      	ldr	r1, [r3, #28]
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	021a      	lsls	r2, r3, #8
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	430a      	orrs	r2, r1
 8005398:	61da      	str	r2, [r3, #28]
      break;
 800539a:	e002      	b.n	80053a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	75fb      	strb	r3, [r7, #23]
      break;
 80053a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3718      	adds	r7, #24
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d101      	bne.n	80053cc <HAL_TIM_SlaveConfigSynchro+0x18>
 80053c8:	2302      	movs	r3, #2
 80053ca:	e031      	b.n	8005430 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2202      	movs	r2, #2
 80053d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80053dc:	6839      	ldr	r1, [r7, #0]
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 fa7a 	bl	80058d8 <TIM_SlaveTimer_SetConfig>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d009      	beq.n	80053fe <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e018      	b.n	8005430 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68da      	ldr	r2, [r3, #12]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800540c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68da      	ldr	r2, [r3, #12]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800541c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3708      	adds	r7, #8
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a40      	ldr	r2, [pc, #256]	; (800554c <TIM_Base_SetConfig+0x114>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d013      	beq.n	8005478 <TIM_Base_SetConfig+0x40>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005456:	d00f      	beq.n	8005478 <TIM_Base_SetConfig+0x40>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a3d      	ldr	r2, [pc, #244]	; (8005550 <TIM_Base_SetConfig+0x118>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d00b      	beq.n	8005478 <TIM_Base_SetConfig+0x40>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a3c      	ldr	r2, [pc, #240]	; (8005554 <TIM_Base_SetConfig+0x11c>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d007      	beq.n	8005478 <TIM_Base_SetConfig+0x40>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a3b      	ldr	r2, [pc, #236]	; (8005558 <TIM_Base_SetConfig+0x120>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d003      	beq.n	8005478 <TIM_Base_SetConfig+0x40>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a3a      	ldr	r2, [pc, #232]	; (800555c <TIM_Base_SetConfig+0x124>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d108      	bne.n	800548a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800547e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	4313      	orrs	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a2f      	ldr	r2, [pc, #188]	; (800554c <TIM_Base_SetConfig+0x114>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d02b      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005498:	d027      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a2c      	ldr	r2, [pc, #176]	; (8005550 <TIM_Base_SetConfig+0x118>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d023      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a2b      	ldr	r2, [pc, #172]	; (8005554 <TIM_Base_SetConfig+0x11c>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d01f      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a2a      	ldr	r2, [pc, #168]	; (8005558 <TIM_Base_SetConfig+0x120>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d01b      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a29      	ldr	r2, [pc, #164]	; (800555c <TIM_Base_SetConfig+0x124>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d017      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a28      	ldr	r2, [pc, #160]	; (8005560 <TIM_Base_SetConfig+0x128>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d013      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a27      	ldr	r2, [pc, #156]	; (8005564 <TIM_Base_SetConfig+0x12c>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d00f      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a26      	ldr	r2, [pc, #152]	; (8005568 <TIM_Base_SetConfig+0x130>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d00b      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a25      	ldr	r2, [pc, #148]	; (800556c <TIM_Base_SetConfig+0x134>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d007      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a24      	ldr	r2, [pc, #144]	; (8005570 <TIM_Base_SetConfig+0x138>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d003      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a23      	ldr	r2, [pc, #140]	; (8005574 <TIM_Base_SetConfig+0x13c>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d108      	bne.n	80054fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	4313      	orrs	r3, r2
 8005508:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	689a      	ldr	r2, [r3, #8]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a0a      	ldr	r2, [pc, #40]	; (800554c <TIM_Base_SetConfig+0x114>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d003      	beq.n	8005530 <TIM_Base_SetConfig+0xf8>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a0c      	ldr	r2, [pc, #48]	; (800555c <TIM_Base_SetConfig+0x124>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d103      	bne.n	8005538 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	691a      	ldr	r2, [r3, #16]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	615a      	str	r2, [r3, #20]
}
 800553e:	bf00      	nop
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	40010000 	.word	0x40010000
 8005550:	40000400 	.word	0x40000400
 8005554:	40000800 	.word	0x40000800
 8005558:	40000c00 	.word	0x40000c00
 800555c:	40010400 	.word	0x40010400
 8005560:	40014000 	.word	0x40014000
 8005564:	40014400 	.word	0x40014400
 8005568:	40014800 	.word	0x40014800
 800556c:	40001800 	.word	0x40001800
 8005570:	40001c00 	.word	0x40001c00
 8005574:	40002000 	.word	0x40002000

08005578 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005578:	b480      	push	{r7}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	f023 0201 	bic.w	r2, r3, #1
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f023 0303 	bic.w	r3, r3, #3
 80055ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f023 0302 	bic.w	r3, r3, #2
 80055c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a20      	ldr	r2, [pc, #128]	; (8005650 <TIM_OC1_SetConfig+0xd8>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d003      	beq.n	80055dc <TIM_OC1_SetConfig+0x64>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a1f      	ldr	r2, [pc, #124]	; (8005654 <TIM_OC1_SetConfig+0xdc>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d10c      	bne.n	80055f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	f023 0308 	bic.w	r3, r3, #8
 80055e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f023 0304 	bic.w	r3, r3, #4
 80055f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a15      	ldr	r2, [pc, #84]	; (8005650 <TIM_OC1_SetConfig+0xd8>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d003      	beq.n	8005606 <TIM_OC1_SetConfig+0x8e>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a14      	ldr	r2, [pc, #80]	; (8005654 <TIM_OC1_SetConfig+0xdc>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d111      	bne.n	800562a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800560c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005614:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	4313      	orrs	r3, r2
 800561e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	4313      	orrs	r3, r2
 8005628:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	621a      	str	r2, [r3, #32]
}
 8005644:	bf00      	nop
 8005646:	371c      	adds	r7, #28
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr
 8005650:	40010000 	.word	0x40010000
 8005654:	40010400 	.word	0x40010400

08005658 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005658:	b480      	push	{r7}
 800565a:	b087      	sub	sp, #28
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	f023 0210 	bic.w	r2, r3, #16
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800568e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	021b      	lsls	r3, r3, #8
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	4313      	orrs	r3, r2
 800569a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	f023 0320 	bic.w	r3, r3, #32
 80056a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	011b      	lsls	r3, r3, #4
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a22      	ldr	r2, [pc, #136]	; (800573c <TIM_OC2_SetConfig+0xe4>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d003      	beq.n	80056c0 <TIM_OC2_SetConfig+0x68>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a21      	ldr	r2, [pc, #132]	; (8005740 <TIM_OC2_SetConfig+0xe8>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d10d      	bne.n	80056dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	011b      	lsls	r3, r3, #4
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a17      	ldr	r2, [pc, #92]	; (800573c <TIM_OC2_SetConfig+0xe4>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d003      	beq.n	80056ec <TIM_OC2_SetConfig+0x94>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a16      	ldr	r2, [pc, #88]	; (8005740 <TIM_OC2_SetConfig+0xe8>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d113      	bne.n	8005714 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	4313      	orrs	r3, r2
 8005706:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	4313      	orrs	r3, r2
 8005712:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	685a      	ldr	r2, [r3, #4]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	621a      	str	r2, [r3, #32]
}
 800572e:	bf00      	nop
 8005730:	371c      	adds	r7, #28
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	40010000 	.word	0x40010000
 8005740:	40010400 	.word	0x40010400

08005744 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005744:	b480      	push	{r7}
 8005746:	b087      	sub	sp, #28
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	69db      	ldr	r3, [r3, #28]
 800576a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f023 0303 	bic.w	r3, r3, #3
 800577a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	4313      	orrs	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800578c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	021b      	lsls	r3, r3, #8
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	4313      	orrs	r3, r2
 8005798:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a21      	ldr	r2, [pc, #132]	; (8005824 <TIM_OC3_SetConfig+0xe0>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d003      	beq.n	80057aa <TIM_OC3_SetConfig+0x66>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a20      	ldr	r2, [pc, #128]	; (8005828 <TIM_OC3_SetConfig+0xe4>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d10d      	bne.n	80057c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	021b      	lsls	r3, r3, #8
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a16      	ldr	r2, [pc, #88]	; (8005824 <TIM_OC3_SetConfig+0xe0>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d003      	beq.n	80057d6 <TIM_OC3_SetConfig+0x92>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a15      	ldr	r2, [pc, #84]	; (8005828 <TIM_OC3_SetConfig+0xe4>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d113      	bne.n	80057fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	011b      	lsls	r3, r3, #4
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	011b      	lsls	r3, r3, #4
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	685a      	ldr	r2, [r3, #4]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	621a      	str	r2, [r3, #32]
}
 8005818:	bf00      	nop
 800581a:	371c      	adds	r7, #28
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	40010000 	.word	0x40010000
 8005828:	40010400 	.word	0x40010400

0800582c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800582c:	b480      	push	{r7}
 800582e:	b087      	sub	sp, #28
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	69db      	ldr	r3, [r3, #28]
 8005852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800585a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005862:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	021b      	lsls	r3, r3, #8
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	4313      	orrs	r3, r2
 800586e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005876:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	031b      	lsls	r3, r3, #12
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	4313      	orrs	r3, r2
 8005882:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a12      	ldr	r2, [pc, #72]	; (80058d0 <TIM_OC4_SetConfig+0xa4>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d003      	beq.n	8005894 <TIM_OC4_SetConfig+0x68>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a11      	ldr	r2, [pc, #68]	; (80058d4 <TIM_OC4_SetConfig+0xa8>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d109      	bne.n	80058a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800589a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	695b      	ldr	r3, [r3, #20]
 80058a0:	019b      	lsls	r3, r3, #6
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	685a      	ldr	r2, [r3, #4]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	693a      	ldr	r2, [r7, #16]
 80058c0:	621a      	str	r2, [r3, #32]
}
 80058c2:	bf00      	nop
 80058c4:	371c      	adds	r7, #28
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	40010000 	.word	0x40010000
 80058d4:	40010400 	.word	0x40010400

080058d8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058e2:	2300      	movs	r3, #0
 80058e4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	693a      	ldr	r2, [r7, #16]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	f023 0307 	bic.w	r3, r3, #7
 8005906:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	4313      	orrs	r3, r2
 8005910:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	693a      	ldr	r2, [r7, #16]
 8005918:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	2b70      	cmp	r3, #112	; 0x70
 8005920:	d01a      	beq.n	8005958 <TIM_SlaveTimer_SetConfig+0x80>
 8005922:	2b70      	cmp	r3, #112	; 0x70
 8005924:	d860      	bhi.n	80059e8 <TIM_SlaveTimer_SetConfig+0x110>
 8005926:	2b60      	cmp	r3, #96	; 0x60
 8005928:	d054      	beq.n	80059d4 <TIM_SlaveTimer_SetConfig+0xfc>
 800592a:	2b60      	cmp	r3, #96	; 0x60
 800592c:	d85c      	bhi.n	80059e8 <TIM_SlaveTimer_SetConfig+0x110>
 800592e:	2b50      	cmp	r3, #80	; 0x50
 8005930:	d046      	beq.n	80059c0 <TIM_SlaveTimer_SetConfig+0xe8>
 8005932:	2b50      	cmp	r3, #80	; 0x50
 8005934:	d858      	bhi.n	80059e8 <TIM_SlaveTimer_SetConfig+0x110>
 8005936:	2b40      	cmp	r3, #64	; 0x40
 8005938:	d019      	beq.n	800596e <TIM_SlaveTimer_SetConfig+0x96>
 800593a:	2b40      	cmp	r3, #64	; 0x40
 800593c:	d854      	bhi.n	80059e8 <TIM_SlaveTimer_SetConfig+0x110>
 800593e:	2b30      	cmp	r3, #48	; 0x30
 8005940:	d055      	beq.n	80059ee <TIM_SlaveTimer_SetConfig+0x116>
 8005942:	2b30      	cmp	r3, #48	; 0x30
 8005944:	d850      	bhi.n	80059e8 <TIM_SlaveTimer_SetConfig+0x110>
 8005946:	2b20      	cmp	r3, #32
 8005948:	d051      	beq.n	80059ee <TIM_SlaveTimer_SetConfig+0x116>
 800594a:	2b20      	cmp	r3, #32
 800594c:	d84c      	bhi.n	80059e8 <TIM_SlaveTimer_SetConfig+0x110>
 800594e:	2b00      	cmp	r3, #0
 8005950:	d04d      	beq.n	80059ee <TIM_SlaveTimer_SetConfig+0x116>
 8005952:	2b10      	cmp	r3, #16
 8005954:	d04b      	beq.n	80059ee <TIM_SlaveTimer_SetConfig+0x116>
 8005956:	e047      	b.n	80059e8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6818      	ldr	r0, [r3, #0]
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	68d9      	ldr	r1, [r3, #12]
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	689a      	ldr	r2, [r3, #8]
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	f000 f9d1 	bl	8005d0e <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800596c:	e040      	b.n	80059f0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2b05      	cmp	r3, #5
 8005974:	d101      	bne.n	800597a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e03b      	b.n	80059f2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	6a1b      	ldr	r3, [r3, #32]
 8005980:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	6a1a      	ldr	r2, [r3, #32]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f022 0201 	bic.w	r2, r2, #1
 8005990:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	699b      	ldr	r3, [r3, #24]
 8005998:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059a0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	011b      	lsls	r3, r3, #4
 80059a8:	68ba      	ldr	r2, [r7, #8]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	621a      	str	r2, [r3, #32]
      break;
 80059be:	e017      	b.n	80059f0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6818      	ldr	r0, [r3, #0]
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	6899      	ldr	r1, [r3, #8]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	461a      	mov	r2, r3
 80059ce:	f000 f889 	bl	8005ae4 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80059d2:	e00d      	b.n	80059f0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6818      	ldr	r0, [r3, #0]
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	6899      	ldr	r1, [r3, #8]
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	461a      	mov	r2, r3
 80059e2:	f000 f8eb 	bl	8005bbc <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80059e6:	e003      	b.n	80059f0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	75fb      	strb	r3, [r7, #23]
      break;
 80059ec:	e000      	b.n	80059f0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80059ee:	bf00      	nop
  }

  return status;
 80059f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3718      	adds	r7, #24
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
	...

080059fc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b087      	sub	sp, #28
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]
 8005a08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	f023 0201 	bic.w	r2, r3, #1
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6a1b      	ldr	r3, [r3, #32]
 8005a20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	4a28      	ldr	r2, [pc, #160]	; (8005ac8 <TIM_TI1_SetConfig+0xcc>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d01b      	beq.n	8005a62 <TIM_TI1_SetConfig+0x66>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a30:	d017      	beq.n	8005a62 <TIM_TI1_SetConfig+0x66>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	4a25      	ldr	r2, [pc, #148]	; (8005acc <TIM_TI1_SetConfig+0xd0>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d013      	beq.n	8005a62 <TIM_TI1_SetConfig+0x66>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	4a24      	ldr	r2, [pc, #144]	; (8005ad0 <TIM_TI1_SetConfig+0xd4>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d00f      	beq.n	8005a62 <TIM_TI1_SetConfig+0x66>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	4a23      	ldr	r2, [pc, #140]	; (8005ad4 <TIM_TI1_SetConfig+0xd8>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d00b      	beq.n	8005a62 <TIM_TI1_SetConfig+0x66>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	4a22      	ldr	r2, [pc, #136]	; (8005ad8 <TIM_TI1_SetConfig+0xdc>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d007      	beq.n	8005a62 <TIM_TI1_SetConfig+0x66>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	4a21      	ldr	r2, [pc, #132]	; (8005adc <TIM_TI1_SetConfig+0xe0>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d003      	beq.n	8005a62 <TIM_TI1_SetConfig+0x66>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	4a20      	ldr	r2, [pc, #128]	; (8005ae0 <TIM_TI1_SetConfig+0xe4>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d101      	bne.n	8005a66 <TIM_TI1_SetConfig+0x6a>
 8005a62:	2301      	movs	r3, #1
 8005a64:	e000      	b.n	8005a68 <TIM_TI1_SetConfig+0x6c>
 8005a66:	2300      	movs	r3, #0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d008      	beq.n	8005a7e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	f023 0303 	bic.w	r3, r3, #3
 8005a72:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	617b      	str	r3, [r7, #20]
 8005a7c:	e003      	b.n	8005a86 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	f043 0301 	orr.w	r3, r3, #1
 8005a84:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	011b      	lsls	r3, r3, #4
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	f023 030a 	bic.w	r3, r3, #10
 8005aa0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	f003 030a 	and.w	r3, r3, #10
 8005aa8:	693a      	ldr	r2, [r7, #16]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	621a      	str	r2, [r3, #32]
}
 8005aba:	bf00      	nop
 8005abc:	371c      	adds	r7, #28
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	40010000 	.word	0x40010000
 8005acc:	40000400 	.word	0x40000400
 8005ad0:	40000800 	.word	0x40000800
 8005ad4:	40000c00 	.word	0x40000c00
 8005ad8:	40010400 	.word	0x40010400
 8005adc:	40014000 	.word	0x40014000
 8005ae0:	40001800 	.word	0x40001800

08005ae4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6a1b      	ldr	r3, [r3, #32]
 8005af4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6a1b      	ldr	r3, [r3, #32]
 8005afa:	f023 0201 	bic.w	r2, r3, #1
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	011b      	lsls	r3, r3, #4
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f023 030a 	bic.w	r3, r3, #10
 8005b20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	621a      	str	r2, [r3, #32]
}
 8005b36:	bf00      	nop
 8005b38:	371c      	adds	r7, #28
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b087      	sub	sp, #28
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	60f8      	str	r0, [r7, #12]
 8005b4a:	60b9      	str	r1, [r7, #8]
 8005b4c:	607a      	str	r2, [r7, #4]
 8005b4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6a1b      	ldr	r3, [r3, #32]
 8005b54:	f023 0210 	bic.w	r2, r3, #16
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b6e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	021b      	lsls	r3, r3, #8
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	031b      	lsls	r3, r3, #12
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b94:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	011b      	lsls	r3, r3, #4
 8005b9a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005b9e:	693a      	ldr	r2, [r7, #16]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	621a      	str	r2, [r3, #32]
}
 8005bb0:	bf00      	nop
 8005bb2:	371c      	adds	r7, #28
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b087      	sub	sp, #28
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6a1b      	ldr	r3, [r3, #32]
 8005bcc:	f023 0210 	bic.w	r2, r3, #16
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6a1b      	ldr	r3, [r3, #32]
 8005bde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005be6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	031b      	lsls	r3, r3, #12
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bf8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	011b      	lsls	r3, r3, #4
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	621a      	str	r2, [r3, #32]
}
 8005c10:	bf00      	nop
 8005c12:	371c      	adds	r7, #28
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b087      	sub	sp, #28
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
 8005c28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	69db      	ldr	r3, [r3, #28]
 8005c3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6a1b      	ldr	r3, [r3, #32]
 8005c40:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	f023 0303 	bic.w	r3, r3, #3
 8005c48:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c58:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	011b      	lsls	r3, r3, #4
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005c6c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	021b      	lsls	r3, r3, #8
 8005c72:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	621a      	str	r2, [r3, #32]
}
 8005c88:	bf00      	nop
 8005c8a:	371c      	adds	r7, #28
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b087      	sub	sp, #28
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
 8005ca0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cc0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	021b      	lsls	r3, r3, #8
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cd2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	031b      	lsls	r3, r3, #12
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	697a      	ldr	r2, [r7, #20]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005ce6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	031b      	lsls	r3, r3, #12
 8005cec:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	621a      	str	r2, [r3, #32]
}
 8005d02:	bf00      	nop
 8005d04:	371c      	adds	r7, #28
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr

08005d0e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d0e:	b480      	push	{r7}
 8005d10:	b087      	sub	sp, #28
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	60f8      	str	r0, [r7, #12]
 8005d16:	60b9      	str	r1, [r7, #8]
 8005d18:	607a      	str	r2, [r7, #4]
 8005d1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d28:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	021a      	lsls	r2, r3, #8
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	431a      	orrs	r2, r3
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	609a      	str	r2, [r3, #8]
}
 8005d42:	bf00      	nop
 8005d44:	371c      	adds	r7, #28
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
	...

08005d50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d101      	bne.n	8005d68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d64:	2302      	movs	r3, #2
 8005d66:	e05a      	b.n	8005e1e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2202      	movs	r2, #2
 8005d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a21      	ldr	r2, [pc, #132]	; (8005e2c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d022      	beq.n	8005df2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005db4:	d01d      	beq.n	8005df2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a1d      	ldr	r2, [pc, #116]	; (8005e30 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d018      	beq.n	8005df2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a1b      	ldr	r2, [pc, #108]	; (8005e34 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d013      	beq.n	8005df2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a1a      	ldr	r2, [pc, #104]	; (8005e38 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d00e      	beq.n	8005df2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a18      	ldr	r2, [pc, #96]	; (8005e3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d009      	beq.n	8005df2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a17      	ldr	r2, [pc, #92]	; (8005e40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d004      	beq.n	8005df2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a15      	ldr	r2, [pc, #84]	; (8005e44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d10c      	bne.n	8005e0c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005df8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68ba      	ldr	r2, [r7, #8]
 8005e0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3714      	adds	r7, #20
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	40010000 	.word	0x40010000
 8005e30:	40000400 	.word	0x40000400
 8005e34:	40000800 	.word	0x40000800
 8005e38:	40000c00 	.word	0x40000c00
 8005e3c:	40010400 	.word	0x40010400
 8005e40:	40014000 	.word	0x40014000
 8005e44:	40001800 	.word	0x40001800

08005e48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005e52:	2300      	movs	r3, #0
 8005e54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d101      	bne.n	8005e64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005e60:	2302      	movs	r3, #2
 8005e62:	e03d      	b.n	8005ee0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	695b      	ldr	r3, [r3, #20]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	69db      	ldr	r3, [r3, #28]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3714      	adds	r7, #20
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e03f      	b.n	8005f7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d106      	bne.n	8005f18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7fb fb08 	bl	8001528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2224      	movs	r2, #36	; 0x24
 8005f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68da      	ldr	r2, [r3, #12]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 fdd1 	bl	8006ad8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	691a      	ldr	r2, [r3, #16]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	695a      	ldr	r2, [r3, #20]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68da      	ldr	r2, [r3, #12]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2220      	movs	r2, #32
 8005f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2220      	movs	r2, #32
 8005f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3708      	adds	r7, #8
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
	...

08005f88 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b08c      	sub	sp, #48	; 0x30
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	4613      	mov	r3, r2
 8005f94:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b20      	cmp	r3, #32
 8005fa0:	d165      	bne.n	800606e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d002      	beq.n	8005fae <HAL_UART_Transmit_DMA+0x26>
 8005fa8:	88fb      	ldrh	r3, [r7, #6]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d101      	bne.n	8005fb2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e05e      	b.n	8006070 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d101      	bne.n	8005fc0 <HAL_UART_Transmit_DMA+0x38>
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	e057      	b.n	8006070 <HAL_UART_Transmit_DMA+0xe8>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005fc8:	68ba      	ldr	r2, [r7, #8]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	88fa      	ldrh	r2, [r7, #6]
 8005fd2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	88fa      	ldrh	r2, [r7, #6]
 8005fd8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2221      	movs	r2, #33	; 0x21
 8005fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fec:	4a22      	ldr	r2, [pc, #136]	; (8006078 <HAL_UART_Transmit_DMA+0xf0>)
 8005fee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff4:	4a21      	ldr	r2, [pc, #132]	; (800607c <HAL_UART_Transmit_DMA+0xf4>)
 8005ff6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ffc:	4a20      	ldr	r2, [pc, #128]	; (8006080 <HAL_UART_Transmit_DMA+0xf8>)
 8005ffe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006004:	2200      	movs	r2, #0
 8006006:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006008:	f107 0308 	add.w	r3, r7, #8
 800600c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006014:	6819      	ldr	r1, [r3, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	3304      	adds	r3, #4
 800601c:	461a      	mov	r2, r3
 800601e:	88fb      	ldrh	r3, [r7, #6]
 8006020:	f7fc fab2 	bl	8002588 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800602c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	3314      	adds	r3, #20
 800603c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	e853 3f00 	ldrex	r3, [r3]
 8006044:	617b      	str	r3, [r7, #20]
   return(result);
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800604c:	62bb      	str	r3, [r7, #40]	; 0x28
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	3314      	adds	r3, #20
 8006054:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006056:	627a      	str	r2, [r7, #36]	; 0x24
 8006058:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605a:	6a39      	ldr	r1, [r7, #32]
 800605c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800605e:	e841 2300 	strex	r3, r2, [r1]
 8006062:	61fb      	str	r3, [r7, #28]
   return(result);
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d1e5      	bne.n	8006036 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800606a:	2300      	movs	r3, #0
 800606c:	e000      	b.n	8006070 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800606e:	2302      	movs	r3, #2
  }
}
 8006070:	4618      	mov	r0, r3
 8006072:	3730      	adds	r7, #48	; 0x30
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	08006609 	.word	0x08006609
 800607c:	080066a3 	.word	0x080066a3
 8006080:	080066bf 	.word	0x080066bf

08006084 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b0ba      	sub	sp, #232	; 0xe8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80060aa:	2300      	movs	r3, #0
 80060ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80060b0:	2300      	movs	r3, #0
 80060b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80060b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ba:	f003 030f 	and.w	r3, r3, #15
 80060be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80060c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d10f      	bne.n	80060ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ce:	f003 0320 	and.w	r3, r3, #32
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d009      	beq.n	80060ea <HAL_UART_IRQHandler+0x66>
 80060d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060da:	f003 0320 	and.w	r3, r3, #32
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d003      	beq.n	80060ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 fc3c 	bl	8006960 <UART_Receive_IT>
      return;
 80060e8:	e256      	b.n	8006598 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80060ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	f000 80de 	beq.w	80062b0 <HAL_UART_IRQHandler+0x22c>
 80060f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060f8:	f003 0301 	and.w	r3, r3, #1
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d106      	bne.n	800610e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006104:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006108:	2b00      	cmp	r3, #0
 800610a:	f000 80d1 	beq.w	80062b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800610e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006112:	f003 0301 	and.w	r3, r3, #1
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00b      	beq.n	8006132 <HAL_UART_IRQHandler+0xae>
 800611a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800611e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006122:	2b00      	cmp	r3, #0
 8006124:	d005      	beq.n	8006132 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612a:	f043 0201 	orr.w	r2, r3, #1
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006136:	f003 0304 	and.w	r3, r3, #4
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00b      	beq.n	8006156 <HAL_UART_IRQHandler+0xd2>
 800613e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006142:	f003 0301 	and.w	r3, r3, #1
 8006146:	2b00      	cmp	r3, #0
 8006148:	d005      	beq.n	8006156 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614e:	f043 0202 	orr.w	r2, r3, #2
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800615a:	f003 0302 	and.w	r3, r3, #2
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00b      	beq.n	800617a <HAL_UART_IRQHandler+0xf6>
 8006162:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006166:	f003 0301 	and.w	r3, r3, #1
 800616a:	2b00      	cmp	r3, #0
 800616c:	d005      	beq.n	800617a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006172:	f043 0204 	orr.w	r2, r3, #4
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800617a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800617e:	f003 0308 	and.w	r3, r3, #8
 8006182:	2b00      	cmp	r3, #0
 8006184:	d011      	beq.n	80061aa <HAL_UART_IRQHandler+0x126>
 8006186:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800618a:	f003 0320 	and.w	r3, r3, #32
 800618e:	2b00      	cmp	r3, #0
 8006190:	d105      	bne.n	800619e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006192:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	2b00      	cmp	r3, #0
 800619c:	d005      	beq.n	80061aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a2:	f043 0208 	orr.w	r2, r3, #8
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f000 81ed 	beq.w	800658e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061b8:	f003 0320 	and.w	r3, r3, #32
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d008      	beq.n	80061d2 <HAL_UART_IRQHandler+0x14e>
 80061c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061c4:	f003 0320 	and.w	r3, r3, #32
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d002      	beq.n	80061d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 fbc7 	bl	8006960 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	695b      	ldr	r3, [r3, #20]
 80061d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061dc:	2b40      	cmp	r3, #64	; 0x40
 80061de:	bf0c      	ite	eq
 80061e0:	2301      	moveq	r3, #1
 80061e2:	2300      	movne	r3, #0
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ee:	f003 0308 	and.w	r3, r3, #8
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d103      	bne.n	80061fe <HAL_UART_IRQHandler+0x17a>
 80061f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d04f      	beq.n	800629e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 facf 	bl	80067a2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800620e:	2b40      	cmp	r3, #64	; 0x40
 8006210:	d141      	bne.n	8006296 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	3314      	adds	r3, #20
 8006218:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006220:	e853 3f00 	ldrex	r3, [r3]
 8006224:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006228:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800622c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006230:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	3314      	adds	r3, #20
 800623a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800623e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006242:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006246:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800624a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800624e:	e841 2300 	strex	r3, r2, [r1]
 8006252:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006256:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1d9      	bne.n	8006212 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006262:	2b00      	cmp	r3, #0
 8006264:	d013      	beq.n	800628e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626a:	4a7d      	ldr	r2, [pc, #500]	; (8006460 <HAL_UART_IRQHandler+0x3dc>)
 800626c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006272:	4618      	mov	r0, r3
 8006274:	f7fc fa50 	bl	8002718 <HAL_DMA_Abort_IT>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d016      	beq.n	80062ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006288:	4610      	mov	r0, r2
 800628a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800628c:	e00e      	b.n	80062ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 f9a4 	bl	80065dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006294:	e00a      	b.n	80062ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 f9a0 	bl	80065dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800629c:	e006      	b.n	80062ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f99c 	bl	80065dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80062aa:	e170      	b.n	800658e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062ac:	bf00      	nop
    return;
 80062ae:	e16e      	b.n	800658e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	f040 814a 	bne.w	800654e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80062ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062be:	f003 0310 	and.w	r3, r3, #16
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f000 8143 	beq.w	800654e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80062c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062cc:	f003 0310 	and.w	r3, r3, #16
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f000 813c 	beq.w	800654e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062d6:	2300      	movs	r3, #0
 80062d8:	60bb      	str	r3, [r7, #8]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	60bb      	str	r3, [r7, #8]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	60bb      	str	r3, [r7, #8]
 80062ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	695b      	ldr	r3, [r3, #20]
 80062f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f6:	2b40      	cmp	r3, #64	; 0x40
 80062f8:	f040 80b4 	bne.w	8006464 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006308:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800630c:	2b00      	cmp	r3, #0
 800630e:	f000 8140 	beq.w	8006592 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006316:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800631a:	429a      	cmp	r2, r3
 800631c:	f080 8139 	bcs.w	8006592 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006326:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006332:	f000 8088 	beq.w	8006446 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	330c      	adds	r3, #12
 800633c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006340:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006344:	e853 3f00 	ldrex	r3, [r3]
 8006348:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800634c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006350:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006354:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	330c      	adds	r3, #12
 800635e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006362:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006366:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800636e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006372:	e841 2300 	strex	r3, r2, [r1]
 8006376:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800637a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800637e:	2b00      	cmp	r3, #0
 8006380:	d1d9      	bne.n	8006336 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	3314      	adds	r3, #20
 8006388:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800638c:	e853 3f00 	ldrex	r3, [r3]
 8006390:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006392:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006394:	f023 0301 	bic.w	r3, r3, #1
 8006398:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	3314      	adds	r3, #20
 80063a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80063a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80063aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80063ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80063b2:	e841 2300 	strex	r3, r2, [r1]
 80063b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80063b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1e1      	bne.n	8006382 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	3314      	adds	r3, #20
 80063c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063c8:	e853 3f00 	ldrex	r3, [r3]
 80063cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80063ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3314      	adds	r3, #20
 80063de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80063e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80063e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80063e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80063ea:	e841 2300 	strex	r3, r2, [r1]
 80063ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80063f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d1e3      	bne.n	80063be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2220      	movs	r2, #32
 80063fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	330c      	adds	r3, #12
 800640a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800640e:	e853 3f00 	ldrex	r3, [r3]
 8006412:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006414:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006416:	f023 0310 	bic.w	r3, r3, #16
 800641a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	330c      	adds	r3, #12
 8006424:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006428:	65ba      	str	r2, [r7, #88]	; 0x58
 800642a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800642e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006430:	e841 2300 	strex	r3, r2, [r1]
 8006434:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1e3      	bne.n	8006404 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006440:	4618      	mov	r0, r3
 8006442:	f7fc f8f9 	bl	8002638 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800644e:	b29b      	uxth	r3, r3
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	b29b      	uxth	r3, r3
 8006454:	4619      	mov	r1, r3
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 f8ca 	bl	80065f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800645c:	e099      	b.n	8006592 <HAL_UART_IRQHandler+0x50e>
 800645e:	bf00      	nop
 8006460:	08006869 	.word	0x08006869
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800646c:	b29b      	uxth	r3, r3
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006478:	b29b      	uxth	r3, r3
 800647a:	2b00      	cmp	r3, #0
 800647c:	f000 808b 	beq.w	8006596 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006480:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006484:	2b00      	cmp	r3, #0
 8006486:	f000 8086 	beq.w	8006596 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	330c      	adds	r3, #12
 8006490:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006494:	e853 3f00 	ldrex	r3, [r3]
 8006498:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800649a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800649c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	330c      	adds	r3, #12
 80064aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80064ae:	647a      	str	r2, [r7, #68]	; 0x44
 80064b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80064b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064b6:	e841 2300 	strex	r3, r2, [r1]
 80064ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1e3      	bne.n	800648a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	3314      	adds	r3, #20
 80064c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064cc:	e853 3f00 	ldrex	r3, [r3]
 80064d0:	623b      	str	r3, [r7, #32]
   return(result);
 80064d2:	6a3b      	ldr	r3, [r7, #32]
 80064d4:	f023 0301 	bic.w	r3, r3, #1
 80064d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	3314      	adds	r3, #20
 80064e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80064e6:	633a      	str	r2, [r7, #48]	; 0x30
 80064e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064ee:	e841 2300 	strex	r3, r2, [r1]
 80064f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d1e3      	bne.n	80064c2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2220      	movs	r2, #32
 80064fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	330c      	adds	r3, #12
 800650e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	e853 3f00 	ldrex	r3, [r3]
 8006516:	60fb      	str	r3, [r7, #12]
   return(result);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f023 0310 	bic.w	r3, r3, #16
 800651e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	330c      	adds	r3, #12
 8006528:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800652c:	61fa      	str	r2, [r7, #28]
 800652e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006530:	69b9      	ldr	r1, [r7, #24]
 8006532:	69fa      	ldr	r2, [r7, #28]
 8006534:	e841 2300 	strex	r3, r2, [r1]
 8006538:	617b      	str	r3, [r7, #20]
   return(result);
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d1e3      	bne.n	8006508 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006540:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006544:	4619      	mov	r1, r3
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 f852 	bl	80065f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800654c:	e023      	b.n	8006596 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800654e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006556:	2b00      	cmp	r3, #0
 8006558:	d009      	beq.n	800656e <HAL_UART_IRQHandler+0x4ea>
 800655a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800655e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 f992 	bl	8006890 <UART_Transmit_IT>
    return;
 800656c:	e014      	b.n	8006598 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800656e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00e      	beq.n	8006598 <HAL_UART_IRQHandler+0x514>
 800657a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800657e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006582:	2b00      	cmp	r3, #0
 8006584:	d008      	beq.n	8006598 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 f9d2 	bl	8006930 <UART_EndTransmit_IT>
    return;
 800658c:	e004      	b.n	8006598 <HAL_UART_IRQHandler+0x514>
    return;
 800658e:	bf00      	nop
 8006590:	e002      	b.n	8006598 <HAL_UART_IRQHandler+0x514>
      return;
 8006592:	bf00      	nop
 8006594:	e000      	b.n	8006598 <HAL_UART_IRQHandler+0x514>
      return;
 8006596:	bf00      	nop
  }
}
 8006598:	37e8      	adds	r7, #232	; 0xe8
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop

080065a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80065bc:	bf00      	nop
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80065d0:	bf00      	nop
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80065e4:	bf00      	nop
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	460b      	mov	r3, r1
 80065fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80065fc:	bf00      	nop
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b090      	sub	sp, #64	; 0x40
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006614:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006620:	2b00      	cmp	r3, #0
 8006622:	d137      	bne.n	8006694 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006626:	2200      	movs	r2, #0
 8006628:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800662a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	3314      	adds	r3, #20
 8006630:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006634:	e853 3f00 	ldrex	r3, [r3]
 8006638:	623b      	str	r3, [r7, #32]
   return(result);
 800663a:	6a3b      	ldr	r3, [r7, #32]
 800663c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006640:	63bb      	str	r3, [r7, #56]	; 0x38
 8006642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	3314      	adds	r3, #20
 8006648:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800664a:	633a      	str	r2, [r7, #48]	; 0x30
 800664c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006652:	e841 2300 	strex	r3, r2, [r1]
 8006656:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1e5      	bne.n	800662a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800665e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	330c      	adds	r3, #12
 8006664:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	e853 3f00 	ldrex	r3, [r3]
 800666c:	60fb      	str	r3, [r7, #12]
   return(result);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006674:	637b      	str	r3, [r7, #52]	; 0x34
 8006676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	330c      	adds	r3, #12
 800667c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800667e:	61fa      	str	r2, [r7, #28]
 8006680:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006682:	69b9      	ldr	r1, [r7, #24]
 8006684:	69fa      	ldr	r2, [r7, #28]
 8006686:	e841 2300 	strex	r3, r2, [r1]
 800668a:	617b      	str	r3, [r7, #20]
   return(result);
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1e5      	bne.n	800665e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006692:	e002      	b.n	800669a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006694:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006696:	f7ff ff83 	bl	80065a0 <HAL_UART_TxCpltCallback>
}
 800669a:	bf00      	nop
 800669c:	3740      	adds	r7, #64	; 0x40
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80066a2:	b580      	push	{r7, lr}
 80066a4:	b084      	sub	sp, #16
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ae:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	f7ff ff7f 	bl	80065b4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066b6:	bf00      	nop
 80066b8:	3710      	adds	r7, #16
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b084      	sub	sp, #16
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80066c6:	2300      	movs	r3, #0
 80066c8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ce:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	695b      	ldr	r3, [r3, #20]
 80066d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066da:	2b80      	cmp	r3, #128	; 0x80
 80066dc:	bf0c      	ite	eq
 80066de:	2301      	moveq	r3, #1
 80066e0:	2300      	movne	r3, #0
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b21      	cmp	r3, #33	; 0x21
 80066f0:	d108      	bne.n	8006704 <UART_DMAError+0x46>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d005      	beq.n	8006704 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	2200      	movs	r2, #0
 80066fc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80066fe:	68b8      	ldr	r0, [r7, #8]
 8006700:	f000 f827 	bl	8006752 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	695b      	ldr	r3, [r3, #20]
 800670a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800670e:	2b40      	cmp	r3, #64	; 0x40
 8006710:	bf0c      	ite	eq
 8006712:	2301      	moveq	r3, #1
 8006714:	2300      	movne	r3, #0
 8006716:	b2db      	uxtb	r3, r3
 8006718:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006720:	b2db      	uxtb	r3, r3
 8006722:	2b22      	cmp	r3, #34	; 0x22
 8006724:	d108      	bne.n	8006738 <UART_DMAError+0x7a>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d005      	beq.n	8006738 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	2200      	movs	r2, #0
 8006730:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006732:	68b8      	ldr	r0, [r7, #8]
 8006734:	f000 f835 	bl	80067a2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673c:	f043 0210 	orr.w	r2, r3, #16
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006744:	68b8      	ldr	r0, [r7, #8]
 8006746:	f7ff ff49 	bl	80065dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800674a:	bf00      	nop
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006752:	b480      	push	{r7}
 8006754:	b089      	sub	sp, #36	; 0x24
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	330c      	adds	r3, #12
 8006760:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	e853 3f00 	ldrex	r3, [r3]
 8006768:	60bb      	str	r3, [r7, #8]
   return(result);
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006770:	61fb      	str	r3, [r7, #28]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	330c      	adds	r3, #12
 8006778:	69fa      	ldr	r2, [r7, #28]
 800677a:	61ba      	str	r2, [r7, #24]
 800677c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800677e:	6979      	ldr	r1, [r7, #20]
 8006780:	69ba      	ldr	r2, [r7, #24]
 8006782:	e841 2300 	strex	r3, r2, [r1]
 8006786:	613b      	str	r3, [r7, #16]
   return(result);
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1e5      	bne.n	800675a <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2220      	movs	r2, #32
 8006792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006796:	bf00      	nop
 8006798:	3724      	adds	r7, #36	; 0x24
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr

080067a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b095      	sub	sp, #84	; 0x54
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	330c      	adds	r3, #12
 80067b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067b4:	e853 3f00 	ldrex	r3, [r3]
 80067b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80067ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	330c      	adds	r3, #12
 80067c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80067ca:	643a      	str	r2, [r7, #64]	; 0x40
 80067cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80067d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067d2:	e841 2300 	strex	r3, r2, [r1]
 80067d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1e5      	bne.n	80067aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	3314      	adds	r3, #20
 80067e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e6:	6a3b      	ldr	r3, [r7, #32]
 80067e8:	e853 3f00 	ldrex	r3, [r3]
 80067ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	f023 0301 	bic.w	r3, r3, #1
 80067f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	3314      	adds	r3, #20
 80067fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006800:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006802:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006804:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006806:	e841 2300 	strex	r3, r2, [r1]
 800680a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800680c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680e:	2b00      	cmp	r3, #0
 8006810:	d1e5      	bne.n	80067de <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006816:	2b01      	cmp	r3, #1
 8006818:	d119      	bne.n	800684e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	330c      	adds	r3, #12
 8006820:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	e853 3f00 	ldrex	r3, [r3]
 8006828:	60bb      	str	r3, [r7, #8]
   return(result);
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	f023 0310 	bic.w	r3, r3, #16
 8006830:	647b      	str	r3, [r7, #68]	; 0x44
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	330c      	adds	r3, #12
 8006838:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800683a:	61ba      	str	r2, [r7, #24]
 800683c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683e:	6979      	ldr	r1, [r7, #20]
 8006840:	69ba      	ldr	r2, [r7, #24]
 8006842:	e841 2300 	strex	r3, r2, [r1]
 8006846:	613b      	str	r3, [r7, #16]
   return(result);
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1e5      	bne.n	800681a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2220      	movs	r2, #32
 8006852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800685c:	bf00      	nop
 800685e:	3754      	adds	r7, #84	; 0x54
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006874:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	f7ff feaa 	bl	80065dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006888:	bf00      	nop
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006890:	b480      	push	{r7}
 8006892:	b085      	sub	sp, #20
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	2b21      	cmp	r3, #33	; 0x21
 80068a2:	d13e      	bne.n	8006922 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ac:	d114      	bne.n	80068d8 <UART_Transmit_IT+0x48>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d110      	bne.n	80068d8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	881b      	ldrh	r3, [r3, #0]
 80068c0:	461a      	mov	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068ca:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6a1b      	ldr	r3, [r3, #32]
 80068d0:	1c9a      	adds	r2, r3, #2
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	621a      	str	r2, [r3, #32]
 80068d6:	e008      	b.n	80068ea <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6a1b      	ldr	r3, [r3, #32]
 80068dc:	1c59      	adds	r1, r3, #1
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	6211      	str	r1, [r2, #32]
 80068e2:	781a      	ldrb	r2, [r3, #0]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	3b01      	subs	r3, #1
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	4619      	mov	r1, r3
 80068f8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10f      	bne.n	800691e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68da      	ldr	r2, [r3, #12]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800690c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68da      	ldr	r2, [r3, #12]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800691c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800691e:	2300      	movs	r3, #0
 8006920:	e000      	b.n	8006924 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006922:	2302      	movs	r3, #2
  }
}
 8006924:	4618      	mov	r0, r3
 8006926:	3714      	adds	r7, #20
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68da      	ldr	r2, [r3, #12]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006946:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2220      	movs	r2, #32
 800694c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f7ff fe25 	bl	80065a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	3708      	adds	r7, #8
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b08c      	sub	sp, #48	; 0x30
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800696e:	b2db      	uxtb	r3, r3
 8006970:	2b22      	cmp	r3, #34	; 0x22
 8006972:	f040 80ab 	bne.w	8006acc <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800697e:	d117      	bne.n	80069b0 <UART_Receive_IT+0x50>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d113      	bne.n	80069b0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006988:	2300      	movs	r3, #0
 800698a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006990:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	b29b      	uxth	r3, r3
 800699a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800699e:	b29a      	uxth	r2, r3
 80069a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a8:	1c9a      	adds	r2, r3, #2
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	629a      	str	r2, [r3, #40]	; 0x28
 80069ae:	e026      	b.n	80069fe <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80069b6:	2300      	movs	r3, #0
 80069b8:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069c2:	d007      	beq.n	80069d4 <UART_Receive_IT+0x74>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d10a      	bne.n	80069e2 <UART_Receive_IT+0x82>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	691b      	ldr	r3, [r3, #16]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d106      	bne.n	80069e2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	b2da      	uxtb	r2, r3
 80069dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069de:	701a      	strb	r2, [r3, #0]
 80069e0:	e008      	b.n	80069f4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069ee:	b2da      	uxtb	r2, r3
 80069f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f8:	1c5a      	adds	r2, r3, #1
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	3b01      	subs	r3, #1
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d15a      	bne.n	8006ac8 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68da      	ldr	r2, [r3, #12]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f022 0220 	bic.w	r2, r2, #32
 8006a20:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68da      	ldr	r2, [r3, #12]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a30:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	695a      	ldr	r2, [r3, #20]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f022 0201 	bic.w	r2, r2, #1
 8006a40:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2220      	movs	r2, #32
 8006a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d135      	bne.n	8006abe <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	330c      	adds	r3, #12
 8006a5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	e853 3f00 	ldrex	r3, [r3]
 8006a66:	613b      	str	r3, [r7, #16]
   return(result);
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	f023 0310 	bic.w	r3, r3, #16
 8006a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	330c      	adds	r3, #12
 8006a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a78:	623a      	str	r2, [r7, #32]
 8006a7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7c:	69f9      	ldr	r1, [r7, #28]
 8006a7e:	6a3a      	ldr	r2, [r7, #32]
 8006a80:	e841 2300 	strex	r3, r2, [r1]
 8006a84:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1e5      	bne.n	8006a58 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 0310 	and.w	r3, r3, #16
 8006a96:	2b10      	cmp	r3, #16
 8006a98:	d10a      	bne.n	8006ab0 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	60fb      	str	r3, [r7, #12]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	60fb      	str	r3, [r7, #12]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	60fb      	str	r3, [r7, #12]
 8006aae:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f7ff fd9a 	bl	80065f0 <HAL_UARTEx_RxEventCallback>
 8006abc:	e002      	b.n	8006ac4 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f7ff fd82 	bl	80065c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	e002      	b.n	8006ace <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	e000      	b.n	8006ace <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006acc:	2302      	movs	r3, #2
  }
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3730      	adds	r7, #48	; 0x30
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
	...

08006ad8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006adc:	b0c0      	sub	sp, #256	; 0x100
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006af4:	68d9      	ldr	r1, [r3, #12]
 8006af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	ea40 0301 	orr.w	r3, r0, r1
 8006b00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b06:	689a      	ldr	r2, [r3, #8]
 8006b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	431a      	orrs	r2, r3
 8006b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b14:	695b      	ldr	r3, [r3, #20]
 8006b16:	431a      	orrs	r2, r3
 8006b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b1c:	69db      	ldr	r3, [r3, #28]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006b30:	f021 010c 	bic.w	r1, r1, #12
 8006b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b3e:	430b      	orrs	r3, r1
 8006b40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b52:	6999      	ldr	r1, [r3, #24]
 8006b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	ea40 0301 	orr.w	r3, r0, r1
 8006b5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	4b8f      	ldr	r3, [pc, #572]	; (8006da4 <UART_SetConfig+0x2cc>)
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d005      	beq.n	8006b78 <UART_SetConfig+0xa0>
 8006b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	4b8d      	ldr	r3, [pc, #564]	; (8006da8 <UART_SetConfig+0x2d0>)
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d104      	bne.n	8006b82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b78:	f7fe f92a 	bl	8004dd0 <HAL_RCC_GetPCLK2Freq>
 8006b7c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006b80:	e003      	b.n	8006b8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b82:	f7fe f911 	bl	8004da8 <HAL_RCC_GetPCLK1Freq>
 8006b86:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b8e:	69db      	ldr	r3, [r3, #28]
 8006b90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b94:	f040 810c 	bne.w	8006db0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006ba2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006ba6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006baa:	4622      	mov	r2, r4
 8006bac:	462b      	mov	r3, r5
 8006bae:	1891      	adds	r1, r2, r2
 8006bb0:	65b9      	str	r1, [r7, #88]	; 0x58
 8006bb2:	415b      	adcs	r3, r3
 8006bb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006bba:	4621      	mov	r1, r4
 8006bbc:	eb12 0801 	adds.w	r8, r2, r1
 8006bc0:	4629      	mov	r1, r5
 8006bc2:	eb43 0901 	adc.w	r9, r3, r1
 8006bc6:	f04f 0200 	mov.w	r2, #0
 8006bca:	f04f 0300 	mov.w	r3, #0
 8006bce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006bd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006bd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006bda:	4690      	mov	r8, r2
 8006bdc:	4699      	mov	r9, r3
 8006bde:	4623      	mov	r3, r4
 8006be0:	eb18 0303 	adds.w	r3, r8, r3
 8006be4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006be8:	462b      	mov	r3, r5
 8006bea:	eb49 0303 	adc.w	r3, r9, r3
 8006bee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006bfe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006c02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006c06:	460b      	mov	r3, r1
 8006c08:	18db      	adds	r3, r3, r3
 8006c0a:	653b      	str	r3, [r7, #80]	; 0x50
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	eb42 0303 	adc.w	r3, r2, r3
 8006c12:	657b      	str	r3, [r7, #84]	; 0x54
 8006c14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006c18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006c1c:	f7f9 fb28 	bl	8000270 <__aeabi_uldivmod>
 8006c20:	4602      	mov	r2, r0
 8006c22:	460b      	mov	r3, r1
 8006c24:	4b61      	ldr	r3, [pc, #388]	; (8006dac <UART_SetConfig+0x2d4>)
 8006c26:	fba3 2302 	umull	r2, r3, r3, r2
 8006c2a:	095b      	lsrs	r3, r3, #5
 8006c2c:	011c      	lsls	r4, r3, #4
 8006c2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c32:	2200      	movs	r2, #0
 8006c34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c38:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006c3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006c40:	4642      	mov	r2, r8
 8006c42:	464b      	mov	r3, r9
 8006c44:	1891      	adds	r1, r2, r2
 8006c46:	64b9      	str	r1, [r7, #72]	; 0x48
 8006c48:	415b      	adcs	r3, r3
 8006c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006c50:	4641      	mov	r1, r8
 8006c52:	eb12 0a01 	adds.w	sl, r2, r1
 8006c56:	4649      	mov	r1, r9
 8006c58:	eb43 0b01 	adc.w	fp, r3, r1
 8006c5c:	f04f 0200 	mov.w	r2, #0
 8006c60:	f04f 0300 	mov.w	r3, #0
 8006c64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006c68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006c6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c70:	4692      	mov	sl, r2
 8006c72:	469b      	mov	fp, r3
 8006c74:	4643      	mov	r3, r8
 8006c76:	eb1a 0303 	adds.w	r3, sl, r3
 8006c7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c7e:	464b      	mov	r3, r9
 8006c80:	eb4b 0303 	adc.w	r3, fp, r3
 8006c84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c94:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006c98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	18db      	adds	r3, r3, r3
 8006ca0:	643b      	str	r3, [r7, #64]	; 0x40
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	eb42 0303 	adc.w	r3, r2, r3
 8006ca8:	647b      	str	r3, [r7, #68]	; 0x44
 8006caa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006cae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006cb2:	f7f9 fadd 	bl	8000270 <__aeabi_uldivmod>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	460b      	mov	r3, r1
 8006cba:	4611      	mov	r1, r2
 8006cbc:	4b3b      	ldr	r3, [pc, #236]	; (8006dac <UART_SetConfig+0x2d4>)
 8006cbe:	fba3 2301 	umull	r2, r3, r3, r1
 8006cc2:	095b      	lsrs	r3, r3, #5
 8006cc4:	2264      	movs	r2, #100	; 0x64
 8006cc6:	fb02 f303 	mul.w	r3, r2, r3
 8006cca:	1acb      	subs	r3, r1, r3
 8006ccc:	00db      	lsls	r3, r3, #3
 8006cce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006cd2:	4b36      	ldr	r3, [pc, #216]	; (8006dac <UART_SetConfig+0x2d4>)
 8006cd4:	fba3 2302 	umull	r2, r3, r3, r2
 8006cd8:	095b      	lsrs	r3, r3, #5
 8006cda:	005b      	lsls	r3, r3, #1
 8006cdc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006ce0:	441c      	add	r4, r3
 8006ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006cec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006cf0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006cf4:	4642      	mov	r2, r8
 8006cf6:	464b      	mov	r3, r9
 8006cf8:	1891      	adds	r1, r2, r2
 8006cfa:	63b9      	str	r1, [r7, #56]	; 0x38
 8006cfc:	415b      	adcs	r3, r3
 8006cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006d04:	4641      	mov	r1, r8
 8006d06:	1851      	adds	r1, r2, r1
 8006d08:	6339      	str	r1, [r7, #48]	; 0x30
 8006d0a:	4649      	mov	r1, r9
 8006d0c:	414b      	adcs	r3, r1
 8006d0e:	637b      	str	r3, [r7, #52]	; 0x34
 8006d10:	f04f 0200 	mov.w	r2, #0
 8006d14:	f04f 0300 	mov.w	r3, #0
 8006d18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006d1c:	4659      	mov	r1, fp
 8006d1e:	00cb      	lsls	r3, r1, #3
 8006d20:	4651      	mov	r1, sl
 8006d22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d26:	4651      	mov	r1, sl
 8006d28:	00ca      	lsls	r2, r1, #3
 8006d2a:	4610      	mov	r0, r2
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	4603      	mov	r3, r0
 8006d30:	4642      	mov	r2, r8
 8006d32:	189b      	adds	r3, r3, r2
 8006d34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d38:	464b      	mov	r3, r9
 8006d3a:	460a      	mov	r2, r1
 8006d3c:	eb42 0303 	adc.w	r3, r2, r3
 8006d40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006d50:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006d54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006d58:	460b      	mov	r3, r1
 8006d5a:	18db      	adds	r3, r3, r3
 8006d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d5e:	4613      	mov	r3, r2
 8006d60:	eb42 0303 	adc.w	r3, r2, r3
 8006d64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006d6e:	f7f9 fa7f 	bl	8000270 <__aeabi_uldivmod>
 8006d72:	4602      	mov	r2, r0
 8006d74:	460b      	mov	r3, r1
 8006d76:	4b0d      	ldr	r3, [pc, #52]	; (8006dac <UART_SetConfig+0x2d4>)
 8006d78:	fba3 1302 	umull	r1, r3, r3, r2
 8006d7c:	095b      	lsrs	r3, r3, #5
 8006d7e:	2164      	movs	r1, #100	; 0x64
 8006d80:	fb01 f303 	mul.w	r3, r1, r3
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	00db      	lsls	r3, r3, #3
 8006d88:	3332      	adds	r3, #50	; 0x32
 8006d8a:	4a08      	ldr	r2, [pc, #32]	; (8006dac <UART_SetConfig+0x2d4>)
 8006d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d90:	095b      	lsrs	r3, r3, #5
 8006d92:	f003 0207 	and.w	r2, r3, #7
 8006d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4422      	add	r2, r4
 8006d9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006da0:	e105      	b.n	8006fae <UART_SetConfig+0x4d6>
 8006da2:	bf00      	nop
 8006da4:	40011000 	.word	0x40011000
 8006da8:	40011400 	.word	0x40011400
 8006dac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006db0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006db4:	2200      	movs	r2, #0
 8006db6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006dba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006dbe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006dc2:	4642      	mov	r2, r8
 8006dc4:	464b      	mov	r3, r9
 8006dc6:	1891      	adds	r1, r2, r2
 8006dc8:	6239      	str	r1, [r7, #32]
 8006dca:	415b      	adcs	r3, r3
 8006dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8006dce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006dd2:	4641      	mov	r1, r8
 8006dd4:	1854      	adds	r4, r2, r1
 8006dd6:	4649      	mov	r1, r9
 8006dd8:	eb43 0501 	adc.w	r5, r3, r1
 8006ddc:	f04f 0200 	mov.w	r2, #0
 8006de0:	f04f 0300 	mov.w	r3, #0
 8006de4:	00eb      	lsls	r3, r5, #3
 8006de6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006dea:	00e2      	lsls	r2, r4, #3
 8006dec:	4614      	mov	r4, r2
 8006dee:	461d      	mov	r5, r3
 8006df0:	4643      	mov	r3, r8
 8006df2:	18e3      	adds	r3, r4, r3
 8006df4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006df8:	464b      	mov	r3, r9
 8006dfa:	eb45 0303 	adc.w	r3, r5, r3
 8006dfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006e12:	f04f 0200 	mov.w	r2, #0
 8006e16:	f04f 0300 	mov.w	r3, #0
 8006e1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006e1e:	4629      	mov	r1, r5
 8006e20:	008b      	lsls	r3, r1, #2
 8006e22:	4621      	mov	r1, r4
 8006e24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e28:	4621      	mov	r1, r4
 8006e2a:	008a      	lsls	r2, r1, #2
 8006e2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006e30:	f7f9 fa1e 	bl	8000270 <__aeabi_uldivmod>
 8006e34:	4602      	mov	r2, r0
 8006e36:	460b      	mov	r3, r1
 8006e38:	4b60      	ldr	r3, [pc, #384]	; (8006fbc <UART_SetConfig+0x4e4>)
 8006e3a:	fba3 2302 	umull	r2, r3, r3, r2
 8006e3e:	095b      	lsrs	r3, r3, #5
 8006e40:	011c      	lsls	r4, r3, #4
 8006e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e46:	2200      	movs	r2, #0
 8006e48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006e4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006e50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006e54:	4642      	mov	r2, r8
 8006e56:	464b      	mov	r3, r9
 8006e58:	1891      	adds	r1, r2, r2
 8006e5a:	61b9      	str	r1, [r7, #24]
 8006e5c:	415b      	adcs	r3, r3
 8006e5e:	61fb      	str	r3, [r7, #28]
 8006e60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e64:	4641      	mov	r1, r8
 8006e66:	1851      	adds	r1, r2, r1
 8006e68:	6139      	str	r1, [r7, #16]
 8006e6a:	4649      	mov	r1, r9
 8006e6c:	414b      	adcs	r3, r1
 8006e6e:	617b      	str	r3, [r7, #20]
 8006e70:	f04f 0200 	mov.w	r2, #0
 8006e74:	f04f 0300 	mov.w	r3, #0
 8006e78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e7c:	4659      	mov	r1, fp
 8006e7e:	00cb      	lsls	r3, r1, #3
 8006e80:	4651      	mov	r1, sl
 8006e82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e86:	4651      	mov	r1, sl
 8006e88:	00ca      	lsls	r2, r1, #3
 8006e8a:	4610      	mov	r0, r2
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	4603      	mov	r3, r0
 8006e90:	4642      	mov	r2, r8
 8006e92:	189b      	adds	r3, r3, r2
 8006e94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e98:	464b      	mov	r3, r9
 8006e9a:	460a      	mov	r2, r1
 8006e9c:	eb42 0303 	adc.w	r3, r2, r3
 8006ea0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	67bb      	str	r3, [r7, #120]	; 0x78
 8006eae:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006eb0:	f04f 0200 	mov.w	r2, #0
 8006eb4:	f04f 0300 	mov.w	r3, #0
 8006eb8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006ebc:	4649      	mov	r1, r9
 8006ebe:	008b      	lsls	r3, r1, #2
 8006ec0:	4641      	mov	r1, r8
 8006ec2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ec6:	4641      	mov	r1, r8
 8006ec8:	008a      	lsls	r2, r1, #2
 8006eca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006ece:	f7f9 f9cf 	bl	8000270 <__aeabi_uldivmod>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	460b      	mov	r3, r1
 8006ed6:	4b39      	ldr	r3, [pc, #228]	; (8006fbc <UART_SetConfig+0x4e4>)
 8006ed8:	fba3 1302 	umull	r1, r3, r3, r2
 8006edc:	095b      	lsrs	r3, r3, #5
 8006ede:	2164      	movs	r1, #100	; 0x64
 8006ee0:	fb01 f303 	mul.w	r3, r1, r3
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	011b      	lsls	r3, r3, #4
 8006ee8:	3332      	adds	r3, #50	; 0x32
 8006eea:	4a34      	ldr	r2, [pc, #208]	; (8006fbc <UART_SetConfig+0x4e4>)
 8006eec:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef0:	095b      	lsrs	r3, r3, #5
 8006ef2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ef6:	441c      	add	r4, r3
 8006ef8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006efc:	2200      	movs	r2, #0
 8006efe:	673b      	str	r3, [r7, #112]	; 0x70
 8006f00:	677a      	str	r2, [r7, #116]	; 0x74
 8006f02:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006f06:	4642      	mov	r2, r8
 8006f08:	464b      	mov	r3, r9
 8006f0a:	1891      	adds	r1, r2, r2
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	415b      	adcs	r3, r3
 8006f10:	60fb      	str	r3, [r7, #12]
 8006f12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f16:	4641      	mov	r1, r8
 8006f18:	1851      	adds	r1, r2, r1
 8006f1a:	6039      	str	r1, [r7, #0]
 8006f1c:	4649      	mov	r1, r9
 8006f1e:	414b      	adcs	r3, r1
 8006f20:	607b      	str	r3, [r7, #4]
 8006f22:	f04f 0200 	mov.w	r2, #0
 8006f26:	f04f 0300 	mov.w	r3, #0
 8006f2a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006f2e:	4659      	mov	r1, fp
 8006f30:	00cb      	lsls	r3, r1, #3
 8006f32:	4651      	mov	r1, sl
 8006f34:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f38:	4651      	mov	r1, sl
 8006f3a:	00ca      	lsls	r2, r1, #3
 8006f3c:	4610      	mov	r0, r2
 8006f3e:	4619      	mov	r1, r3
 8006f40:	4603      	mov	r3, r0
 8006f42:	4642      	mov	r2, r8
 8006f44:	189b      	adds	r3, r3, r2
 8006f46:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f48:	464b      	mov	r3, r9
 8006f4a:	460a      	mov	r2, r1
 8006f4c:	eb42 0303 	adc.w	r3, r2, r3
 8006f50:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	663b      	str	r3, [r7, #96]	; 0x60
 8006f5c:	667a      	str	r2, [r7, #100]	; 0x64
 8006f5e:	f04f 0200 	mov.w	r2, #0
 8006f62:	f04f 0300 	mov.w	r3, #0
 8006f66:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006f6a:	4649      	mov	r1, r9
 8006f6c:	008b      	lsls	r3, r1, #2
 8006f6e:	4641      	mov	r1, r8
 8006f70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f74:	4641      	mov	r1, r8
 8006f76:	008a      	lsls	r2, r1, #2
 8006f78:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006f7c:	f7f9 f978 	bl	8000270 <__aeabi_uldivmod>
 8006f80:	4602      	mov	r2, r0
 8006f82:	460b      	mov	r3, r1
 8006f84:	4b0d      	ldr	r3, [pc, #52]	; (8006fbc <UART_SetConfig+0x4e4>)
 8006f86:	fba3 1302 	umull	r1, r3, r3, r2
 8006f8a:	095b      	lsrs	r3, r3, #5
 8006f8c:	2164      	movs	r1, #100	; 0x64
 8006f8e:	fb01 f303 	mul.w	r3, r1, r3
 8006f92:	1ad3      	subs	r3, r2, r3
 8006f94:	011b      	lsls	r3, r3, #4
 8006f96:	3332      	adds	r3, #50	; 0x32
 8006f98:	4a08      	ldr	r2, [pc, #32]	; (8006fbc <UART_SetConfig+0x4e4>)
 8006f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f9e:	095b      	lsrs	r3, r3, #5
 8006fa0:	f003 020f 	and.w	r2, r3, #15
 8006fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4422      	add	r2, r4
 8006fac:	609a      	str	r2, [r3, #8]
}
 8006fae:	bf00      	nop
 8006fb0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fba:	bf00      	nop
 8006fbc:	51eb851f 	.word	0x51eb851f

08006fc0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006fc0:	b084      	sub	sp, #16
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b084      	sub	sp, #16
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
 8006fca:	f107 001c 	add.w	r0, r7, #28
 8006fce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d122      	bne.n	800701e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fdc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006fec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007002:	2b01      	cmp	r3, #1
 8007004:	d105      	bne.n	8007012 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f001 fbee 	bl	80087f4 <USB_CoreReset>
 8007018:	4603      	mov	r3, r0
 800701a:	73fb      	strb	r3, [r7, #15]
 800701c:	e01a      	b.n	8007054 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f001 fbe2 	bl	80087f4 <USB_CoreReset>
 8007030:	4603      	mov	r3, r0
 8007032:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007034:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007036:	2b00      	cmp	r3, #0
 8007038:	d106      	bne.n	8007048 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800703e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	639a      	str	r2, [r3, #56]	; 0x38
 8007046:	e005      	b.n	8007054 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007056:	2b01      	cmp	r3, #1
 8007058:	d10b      	bne.n	8007072 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	f043 0206 	orr.w	r2, r3, #6
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	f043 0220 	orr.w	r2, r3, #32
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007072:	7bfb      	ldrb	r3, [r7, #15]
}
 8007074:	4618      	mov	r0, r3
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800707e:	b004      	add	sp, #16
 8007080:	4770      	bx	lr
	...

08007084 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007084:	b480      	push	{r7}
 8007086:	b087      	sub	sp, #28
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	4613      	mov	r3, r2
 8007090:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007092:	79fb      	ldrb	r3, [r7, #7]
 8007094:	2b02      	cmp	r3, #2
 8007096:	d165      	bne.n	8007164 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	4a41      	ldr	r2, [pc, #260]	; (80071a0 <USB_SetTurnaroundTime+0x11c>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d906      	bls.n	80070ae <USB_SetTurnaroundTime+0x2a>
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	4a40      	ldr	r2, [pc, #256]	; (80071a4 <USB_SetTurnaroundTime+0x120>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d202      	bcs.n	80070ae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80070a8:	230f      	movs	r3, #15
 80070aa:	617b      	str	r3, [r7, #20]
 80070ac:	e062      	b.n	8007174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	4a3c      	ldr	r2, [pc, #240]	; (80071a4 <USB_SetTurnaroundTime+0x120>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d306      	bcc.n	80070c4 <USB_SetTurnaroundTime+0x40>
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	4a3b      	ldr	r2, [pc, #236]	; (80071a8 <USB_SetTurnaroundTime+0x124>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d202      	bcs.n	80070c4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80070be:	230e      	movs	r3, #14
 80070c0:	617b      	str	r3, [r7, #20]
 80070c2:	e057      	b.n	8007174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	4a38      	ldr	r2, [pc, #224]	; (80071a8 <USB_SetTurnaroundTime+0x124>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d306      	bcc.n	80070da <USB_SetTurnaroundTime+0x56>
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	4a37      	ldr	r2, [pc, #220]	; (80071ac <USB_SetTurnaroundTime+0x128>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d202      	bcs.n	80070da <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80070d4:	230d      	movs	r3, #13
 80070d6:	617b      	str	r3, [r7, #20]
 80070d8:	e04c      	b.n	8007174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	4a33      	ldr	r2, [pc, #204]	; (80071ac <USB_SetTurnaroundTime+0x128>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d306      	bcc.n	80070f0 <USB_SetTurnaroundTime+0x6c>
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	4a32      	ldr	r2, [pc, #200]	; (80071b0 <USB_SetTurnaroundTime+0x12c>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d802      	bhi.n	80070f0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80070ea:	230c      	movs	r3, #12
 80070ec:	617b      	str	r3, [r7, #20]
 80070ee:	e041      	b.n	8007174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	4a2f      	ldr	r2, [pc, #188]	; (80071b0 <USB_SetTurnaroundTime+0x12c>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d906      	bls.n	8007106 <USB_SetTurnaroundTime+0x82>
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	4a2e      	ldr	r2, [pc, #184]	; (80071b4 <USB_SetTurnaroundTime+0x130>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d802      	bhi.n	8007106 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007100:	230b      	movs	r3, #11
 8007102:	617b      	str	r3, [r7, #20]
 8007104:	e036      	b.n	8007174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	4a2a      	ldr	r2, [pc, #168]	; (80071b4 <USB_SetTurnaroundTime+0x130>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d906      	bls.n	800711c <USB_SetTurnaroundTime+0x98>
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	4a29      	ldr	r2, [pc, #164]	; (80071b8 <USB_SetTurnaroundTime+0x134>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d802      	bhi.n	800711c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007116:	230a      	movs	r3, #10
 8007118:	617b      	str	r3, [r7, #20]
 800711a:	e02b      	b.n	8007174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	4a26      	ldr	r2, [pc, #152]	; (80071b8 <USB_SetTurnaroundTime+0x134>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d906      	bls.n	8007132 <USB_SetTurnaroundTime+0xae>
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	4a25      	ldr	r2, [pc, #148]	; (80071bc <USB_SetTurnaroundTime+0x138>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d202      	bcs.n	8007132 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800712c:	2309      	movs	r3, #9
 800712e:	617b      	str	r3, [r7, #20]
 8007130:	e020      	b.n	8007174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	4a21      	ldr	r2, [pc, #132]	; (80071bc <USB_SetTurnaroundTime+0x138>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d306      	bcc.n	8007148 <USB_SetTurnaroundTime+0xc4>
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	4a20      	ldr	r2, [pc, #128]	; (80071c0 <USB_SetTurnaroundTime+0x13c>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d802      	bhi.n	8007148 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007142:	2308      	movs	r3, #8
 8007144:	617b      	str	r3, [r7, #20]
 8007146:	e015      	b.n	8007174 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	4a1d      	ldr	r2, [pc, #116]	; (80071c0 <USB_SetTurnaroundTime+0x13c>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d906      	bls.n	800715e <USB_SetTurnaroundTime+0xda>
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	4a1c      	ldr	r2, [pc, #112]	; (80071c4 <USB_SetTurnaroundTime+0x140>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d202      	bcs.n	800715e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007158:	2307      	movs	r3, #7
 800715a:	617b      	str	r3, [r7, #20]
 800715c:	e00a      	b.n	8007174 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800715e:	2306      	movs	r3, #6
 8007160:	617b      	str	r3, [r7, #20]
 8007162:	e007      	b.n	8007174 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007164:	79fb      	ldrb	r3, [r7, #7]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d102      	bne.n	8007170 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800716a:	2309      	movs	r3, #9
 800716c:	617b      	str	r3, [r7, #20]
 800716e:	e001      	b.n	8007174 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007170:	2309      	movs	r3, #9
 8007172:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	68da      	ldr	r2, [r3, #12]
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	029b      	lsls	r3, r3, #10
 8007188:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800718c:	431a      	orrs	r2, r3
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	371c      	adds	r7, #28
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr
 80071a0:	00d8acbf 	.word	0x00d8acbf
 80071a4:	00e4e1c0 	.word	0x00e4e1c0
 80071a8:	00f42400 	.word	0x00f42400
 80071ac:	01067380 	.word	0x01067380
 80071b0:	011a499f 	.word	0x011a499f
 80071b4:	01312cff 	.word	0x01312cff
 80071b8:	014ca43f 	.word	0x014ca43f
 80071bc:	016e3600 	.word	0x016e3600
 80071c0:	01a6ab1f 	.word	0x01a6ab1f
 80071c4:	01e84800 	.word	0x01e84800

080071c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	f043 0201 	orr.w	r2, r3, #1
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80071dc:	2300      	movs	r3, #0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	370c      	adds	r7, #12
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80071ea:	b480      	push	{r7}
 80071ec:	b083      	sub	sp, #12
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	f023 0201 	bic.w	r2, r3, #1
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	460b      	mov	r3, r1
 8007216:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007218:	2300      	movs	r3, #0
 800721a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007228:	78fb      	ldrb	r3, [r7, #3]
 800722a:	2b01      	cmp	r3, #1
 800722c:	d115      	bne.n	800725a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800723a:	2001      	movs	r0, #1
 800723c:	f7fa fbc8 	bl	80019d0 <HAL_Delay>
      ms++;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	3301      	adds	r3, #1
 8007244:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f001 fa45 	bl	80086d6 <USB_GetMode>
 800724c:	4603      	mov	r3, r0
 800724e:	2b01      	cmp	r3, #1
 8007250:	d01e      	beq.n	8007290 <USB_SetCurrentMode+0x84>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2b31      	cmp	r3, #49	; 0x31
 8007256:	d9f0      	bls.n	800723a <USB_SetCurrentMode+0x2e>
 8007258:	e01a      	b.n	8007290 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800725a:	78fb      	ldrb	r3, [r7, #3]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d115      	bne.n	800728c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800726c:	2001      	movs	r0, #1
 800726e:	f7fa fbaf 	bl	80019d0 <HAL_Delay>
      ms++;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	3301      	adds	r3, #1
 8007276:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f001 fa2c 	bl	80086d6 <USB_GetMode>
 800727e:	4603      	mov	r3, r0
 8007280:	2b00      	cmp	r3, #0
 8007282:	d005      	beq.n	8007290 <USB_SetCurrentMode+0x84>
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2b31      	cmp	r3, #49	; 0x31
 8007288:	d9f0      	bls.n	800726c <USB_SetCurrentMode+0x60>
 800728a:	e001      	b.n	8007290 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	e005      	b.n	800729c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2b32      	cmp	r3, #50	; 0x32
 8007294:	d101      	bne.n	800729a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e000      	b.n	800729c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80072a4:	b084      	sub	sp, #16
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b086      	sub	sp, #24
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
 80072ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80072b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80072b6:	2300      	movs	r3, #0
 80072b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80072be:	2300      	movs	r3, #0
 80072c0:	613b      	str	r3, [r7, #16]
 80072c2:	e009      	b.n	80072d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	3340      	adds	r3, #64	; 0x40
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	4413      	add	r3, r2
 80072ce:	2200      	movs	r2, #0
 80072d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	3301      	adds	r3, #1
 80072d6:	613b      	str	r3, [r7, #16]
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	2b0e      	cmp	r3, #14
 80072dc:	d9f2      	bls.n	80072c4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80072de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d11c      	bne.n	800731e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	68fa      	ldr	r2, [r7, #12]
 80072ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072f2:	f043 0302 	orr.w	r3, r3, #2
 80072f6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007308:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007314:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	639a      	str	r2, [r3, #56]	; 0x38
 800731c:	e00b      	b.n	8007336 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007322:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800732e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800733c:	461a      	mov	r2, r3
 800733e:	2300      	movs	r3, #0
 8007340:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007348:	4619      	mov	r1, r3
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007350:	461a      	mov	r2, r3
 8007352:	680b      	ldr	r3, [r1, #0]
 8007354:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007358:	2b01      	cmp	r3, #1
 800735a:	d10c      	bne.n	8007376 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800735c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800735e:	2b00      	cmp	r3, #0
 8007360:	d104      	bne.n	800736c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007362:	2100      	movs	r1, #0
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 f965 	bl	8007634 <USB_SetDevSpeed>
 800736a:	e008      	b.n	800737e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800736c:	2101      	movs	r1, #1
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 f960 	bl	8007634 <USB_SetDevSpeed>
 8007374:	e003      	b.n	800737e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007376:	2103      	movs	r1, #3
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 f95b 	bl	8007634 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800737e:	2110      	movs	r1, #16
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 f8f3 	bl	800756c <USB_FlushTxFifo>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d001      	beq.n	8007390 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 f91f 	bl	80075d4 <USB_FlushRxFifo>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d001      	beq.n	80073a0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073a6:	461a      	mov	r2, r3
 80073a8:	2300      	movs	r3, #0
 80073aa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073b2:	461a      	mov	r2, r3
 80073b4:	2300      	movs	r3, #0
 80073b6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073be:	461a      	mov	r2, r3
 80073c0:	2300      	movs	r3, #0
 80073c2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073c4:	2300      	movs	r3, #0
 80073c6:	613b      	str	r3, [r7, #16]
 80073c8:	e043      	b.n	8007452 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	015a      	lsls	r2, r3, #5
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	4413      	add	r3, r2
 80073d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073e0:	d118      	bne.n	8007414 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d10a      	bne.n	80073fe <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	015a      	lsls	r2, r3, #5
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	4413      	add	r3, r2
 80073f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073f4:	461a      	mov	r2, r3
 80073f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80073fa:	6013      	str	r3, [r2, #0]
 80073fc:	e013      	b.n	8007426 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	015a      	lsls	r2, r3, #5
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	4413      	add	r3, r2
 8007406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800740a:	461a      	mov	r2, r3
 800740c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007410:	6013      	str	r3, [r2, #0]
 8007412:	e008      	b.n	8007426 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	015a      	lsls	r2, r3, #5
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	4413      	add	r3, r2
 800741c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007420:	461a      	mov	r2, r3
 8007422:	2300      	movs	r3, #0
 8007424:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	015a      	lsls	r2, r3, #5
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	4413      	add	r3, r2
 800742e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007432:	461a      	mov	r2, r3
 8007434:	2300      	movs	r3, #0
 8007436:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	015a      	lsls	r2, r3, #5
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	4413      	add	r3, r2
 8007440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007444:	461a      	mov	r2, r3
 8007446:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800744a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	3301      	adds	r3, #1
 8007450:	613b      	str	r3, [r7, #16]
 8007452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007454:	693a      	ldr	r2, [r7, #16]
 8007456:	429a      	cmp	r2, r3
 8007458:	d3b7      	bcc.n	80073ca <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800745a:	2300      	movs	r3, #0
 800745c:	613b      	str	r3, [r7, #16]
 800745e:	e043      	b.n	80074e8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	015a      	lsls	r2, r3, #5
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	4413      	add	r3, r2
 8007468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007472:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007476:	d118      	bne.n	80074aa <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10a      	bne.n	8007494 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	015a      	lsls	r2, r3, #5
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	4413      	add	r3, r2
 8007486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800748a:	461a      	mov	r2, r3
 800748c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007490:	6013      	str	r3, [r2, #0]
 8007492:	e013      	b.n	80074bc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	015a      	lsls	r2, r3, #5
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	4413      	add	r3, r2
 800749c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074a0:	461a      	mov	r2, r3
 80074a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80074a6:	6013      	str	r3, [r2, #0]
 80074a8:	e008      	b.n	80074bc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	015a      	lsls	r2, r3, #5
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	4413      	add	r3, r2
 80074b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074b6:	461a      	mov	r2, r3
 80074b8:	2300      	movs	r3, #0
 80074ba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	015a      	lsls	r2, r3, #5
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	4413      	add	r3, r2
 80074c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074c8:	461a      	mov	r2, r3
 80074ca:	2300      	movs	r3, #0
 80074cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	015a      	lsls	r2, r3, #5
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	4413      	add	r3, r2
 80074d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074da:	461a      	mov	r2, r3
 80074dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80074e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	3301      	adds	r3, #1
 80074e6:	613b      	str	r3, [r7, #16]
 80074e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ea:	693a      	ldr	r2, [r7, #16]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d3b7      	bcc.n	8007460 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074f6:	691b      	ldr	r3, [r3, #16]
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007502:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007510:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007514:	2b00      	cmp	r3, #0
 8007516:	d105      	bne.n	8007524 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	699b      	ldr	r3, [r3, #24]
 800751c:	f043 0210 	orr.w	r2, r3, #16
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	699a      	ldr	r2, [r3, #24]
 8007528:	4b0f      	ldr	r3, [pc, #60]	; (8007568 <USB_DevInit+0x2c4>)
 800752a:	4313      	orrs	r3, r2
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007532:	2b00      	cmp	r3, #0
 8007534:	d005      	beq.n	8007542 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	699b      	ldr	r3, [r3, #24]
 800753a:	f043 0208 	orr.w	r2, r3, #8
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007544:	2b01      	cmp	r3, #1
 8007546:	d107      	bne.n	8007558 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	699b      	ldr	r3, [r3, #24]
 800754c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007550:	f043 0304 	orr.w	r3, r3, #4
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007558:	7dfb      	ldrb	r3, [r7, #23]
}
 800755a:	4618      	mov	r0, r3
 800755c:	3718      	adds	r7, #24
 800755e:	46bd      	mov	sp, r7
 8007560:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007564:	b004      	add	sp, #16
 8007566:	4770      	bx	lr
 8007568:	803c3800 	.word	0x803c3800

0800756c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800756c:	b480      	push	{r7}
 800756e:	b085      	sub	sp, #20
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007576:	2300      	movs	r3, #0
 8007578:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	3301      	adds	r3, #1
 800757e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	4a13      	ldr	r2, [pc, #76]	; (80075d0 <USB_FlushTxFifo+0x64>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d901      	bls.n	800758c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007588:	2303      	movs	r3, #3
 800758a:	e01b      	b.n	80075c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	2b00      	cmp	r3, #0
 8007592:	daf2      	bge.n	800757a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007594:	2300      	movs	r3, #0
 8007596:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	019b      	lsls	r3, r3, #6
 800759c:	f043 0220 	orr.w	r2, r3, #32
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	3301      	adds	r3, #1
 80075a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	4a08      	ldr	r2, [pc, #32]	; (80075d0 <USB_FlushTxFifo+0x64>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d901      	bls.n	80075b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80075b2:	2303      	movs	r3, #3
 80075b4:	e006      	b.n	80075c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	f003 0320 	and.w	r3, r3, #32
 80075be:	2b20      	cmp	r3, #32
 80075c0:	d0f0      	beq.n	80075a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3714      	adds	r7, #20
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr
 80075d0:	00030d40 	.word	0x00030d40

080075d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b085      	sub	sp, #20
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80075dc:	2300      	movs	r3, #0
 80075de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	3301      	adds	r3, #1
 80075e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	4a11      	ldr	r2, [pc, #68]	; (8007630 <USB_FlushRxFifo+0x5c>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d901      	bls.n	80075f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80075ee:	2303      	movs	r3, #3
 80075f0:	e018      	b.n	8007624 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	daf2      	bge.n	80075e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80075fa:	2300      	movs	r3, #0
 80075fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2210      	movs	r2, #16
 8007602:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	3301      	adds	r3, #1
 8007608:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	4a08      	ldr	r2, [pc, #32]	; (8007630 <USB_FlushRxFifo+0x5c>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d901      	bls.n	8007616 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	e006      	b.n	8007624 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	f003 0310 	and.w	r3, r3, #16
 800761e:	2b10      	cmp	r3, #16
 8007620:	d0f0      	beq.n	8007604 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	3714      	adds	r7, #20
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr
 8007630:	00030d40 	.word	0x00030d40

08007634 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007634:	b480      	push	{r7}
 8007636:	b085      	sub	sp, #20
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	460b      	mov	r3, r1
 800763e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	78fb      	ldrb	r3, [r7, #3]
 800764e:	68f9      	ldr	r1, [r7, #12]
 8007650:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007654:	4313      	orrs	r3, r2
 8007656:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	4618      	mov	r0, r3
 800765c:	3714      	adds	r7, #20
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr

08007666 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007666:	b480      	push	{r7}
 8007668:	b087      	sub	sp, #28
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	f003 0306 	and.w	r3, r3, #6
 800767e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d102      	bne.n	800768c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007686:	2300      	movs	r3, #0
 8007688:	75fb      	strb	r3, [r7, #23]
 800768a:	e00a      	b.n	80076a2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2b02      	cmp	r3, #2
 8007690:	d002      	beq.n	8007698 <USB_GetDevSpeed+0x32>
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2b06      	cmp	r3, #6
 8007696:	d102      	bne.n	800769e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007698:	2302      	movs	r3, #2
 800769a:	75fb      	strb	r3, [r7, #23]
 800769c:	e001      	b.n	80076a2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800769e:	230f      	movs	r3, #15
 80076a0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80076a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	371c      	adds	r7, #28
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	785b      	ldrb	r3, [r3, #1]
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d13a      	bne.n	8007742 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076d2:	69da      	ldr	r2, [r3, #28]
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	f003 030f 	and.w	r3, r3, #15
 80076dc:	2101      	movs	r1, #1
 80076de:	fa01 f303 	lsl.w	r3, r1, r3
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	68f9      	ldr	r1, [r7, #12]
 80076e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076ea:	4313      	orrs	r3, r2
 80076ec:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	015a      	lsls	r2, r3, #5
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	4413      	add	r3, r2
 80076f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007700:	2b00      	cmp	r3, #0
 8007702:	d155      	bne.n	80077b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	015a      	lsls	r2, r3, #5
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	4413      	add	r3, r2
 800770c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	791b      	ldrb	r3, [r3, #4]
 800771e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007720:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	059b      	lsls	r3, r3, #22
 8007726:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007728:	4313      	orrs	r3, r2
 800772a:	68ba      	ldr	r2, [r7, #8]
 800772c:	0151      	lsls	r1, r2, #5
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	440a      	add	r2, r1
 8007732:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800773a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800773e:	6013      	str	r3, [r2, #0]
 8007740:	e036      	b.n	80077b0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007748:	69da      	ldr	r2, [r3, #28]
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	f003 030f 	and.w	r3, r3, #15
 8007752:	2101      	movs	r1, #1
 8007754:	fa01 f303 	lsl.w	r3, r1, r3
 8007758:	041b      	lsls	r3, r3, #16
 800775a:	68f9      	ldr	r1, [r7, #12]
 800775c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007760:	4313      	orrs	r3, r2
 8007762:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	015a      	lsls	r2, r3, #5
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	4413      	add	r3, r2
 800776c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007776:	2b00      	cmp	r3, #0
 8007778:	d11a      	bne.n	80077b0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	015a      	lsls	r2, r3, #5
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	4413      	add	r3, r2
 8007782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	791b      	ldrb	r3, [r3, #4]
 8007794:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007796:	430b      	orrs	r3, r1
 8007798:	4313      	orrs	r3, r2
 800779a:	68ba      	ldr	r2, [r7, #8]
 800779c:	0151      	lsls	r1, r2, #5
 800779e:	68fa      	ldr	r2, [r7, #12]
 80077a0:	440a      	add	r2, r1
 80077a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077ae:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3714      	adds	r7, #20
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr
	...

080077c0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b085      	sub	sp, #20
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	785b      	ldrb	r3, [r3, #1]
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d161      	bne.n	80078a0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	015a      	lsls	r2, r3, #5
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	4413      	add	r3, r2
 80077e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077f2:	d11f      	bne.n	8007834 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	015a      	lsls	r2, r3, #5
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	4413      	add	r3, r2
 80077fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68ba      	ldr	r2, [r7, #8]
 8007804:	0151      	lsls	r1, r2, #5
 8007806:	68fa      	ldr	r2, [r7, #12]
 8007808:	440a      	add	r2, r1
 800780a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800780e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007812:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	015a      	lsls	r2, r3, #5
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	4413      	add	r3, r2
 800781c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	68ba      	ldr	r2, [r7, #8]
 8007824:	0151      	lsls	r1, r2, #5
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	440a      	add	r2, r1
 800782a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800782e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007832:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800783a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	f003 030f 	and.w	r3, r3, #15
 8007844:	2101      	movs	r1, #1
 8007846:	fa01 f303 	lsl.w	r3, r1, r3
 800784a:	b29b      	uxth	r3, r3
 800784c:	43db      	mvns	r3, r3
 800784e:	68f9      	ldr	r1, [r7, #12]
 8007850:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007854:	4013      	ands	r3, r2
 8007856:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800785e:	69da      	ldr	r2, [r3, #28]
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	f003 030f 	and.w	r3, r3, #15
 8007868:	2101      	movs	r1, #1
 800786a:	fa01 f303 	lsl.w	r3, r1, r3
 800786e:	b29b      	uxth	r3, r3
 8007870:	43db      	mvns	r3, r3
 8007872:	68f9      	ldr	r1, [r7, #12]
 8007874:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007878:	4013      	ands	r3, r2
 800787a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	015a      	lsls	r2, r3, #5
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	4413      	add	r3, r2
 8007884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	0159      	lsls	r1, r3, #5
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	440b      	add	r3, r1
 8007892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007896:	4619      	mov	r1, r3
 8007898:	4b35      	ldr	r3, [pc, #212]	; (8007970 <USB_DeactivateEndpoint+0x1b0>)
 800789a:	4013      	ands	r3, r2
 800789c:	600b      	str	r3, [r1, #0]
 800789e:	e060      	b.n	8007962 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	015a      	lsls	r2, r3, #5
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	4413      	add	r3, r2
 80078a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078b6:	d11f      	bne.n	80078f8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	015a      	lsls	r2, r3, #5
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	4413      	add	r3, r2
 80078c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	68ba      	ldr	r2, [r7, #8]
 80078c8:	0151      	lsls	r1, r2, #5
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	440a      	add	r2, r1
 80078ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80078d6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	015a      	lsls	r2, r3, #5
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	4413      	add	r3, r2
 80078e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	0151      	lsls	r1, r2, #5
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	440a      	add	r2, r1
 80078ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80078f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	f003 030f 	and.w	r3, r3, #15
 8007908:	2101      	movs	r1, #1
 800790a:	fa01 f303 	lsl.w	r3, r1, r3
 800790e:	041b      	lsls	r3, r3, #16
 8007910:	43db      	mvns	r3, r3
 8007912:	68f9      	ldr	r1, [r7, #12]
 8007914:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007918:	4013      	ands	r3, r2
 800791a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007922:	69da      	ldr	r2, [r3, #28]
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	f003 030f 	and.w	r3, r3, #15
 800792c:	2101      	movs	r1, #1
 800792e:	fa01 f303 	lsl.w	r3, r1, r3
 8007932:	041b      	lsls	r3, r3, #16
 8007934:	43db      	mvns	r3, r3
 8007936:	68f9      	ldr	r1, [r7, #12]
 8007938:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800793c:	4013      	ands	r3, r2
 800793e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	015a      	lsls	r2, r3, #5
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	4413      	add	r3, r2
 8007948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	0159      	lsls	r1, r3, #5
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	440b      	add	r3, r1
 8007956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800795a:	4619      	mov	r1, r3
 800795c:	4b05      	ldr	r3, [pc, #20]	; (8007974 <USB_DeactivateEndpoint+0x1b4>)
 800795e:	4013      	ands	r3, r2
 8007960:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	3714      	adds	r7, #20
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr
 8007970:	ec337800 	.word	0xec337800
 8007974:	eff37800 	.word	0xeff37800

08007978 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b08a      	sub	sp, #40	; 0x28
 800797c:	af02      	add	r7, sp, #8
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	4613      	mov	r3, r2
 8007984:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	785b      	ldrb	r3, [r3, #1]
 8007994:	2b01      	cmp	r3, #1
 8007996:	f040 815c 	bne.w	8007c52 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	699b      	ldr	r3, [r3, #24]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d132      	bne.n	8007a08 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	015a      	lsls	r2, r3, #5
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	4413      	add	r3, r2
 80079aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079ae:	691b      	ldr	r3, [r3, #16]
 80079b0:	69ba      	ldr	r2, [r7, #24]
 80079b2:	0151      	lsls	r1, r2, #5
 80079b4:	69fa      	ldr	r2, [r7, #28]
 80079b6:	440a      	add	r2, r1
 80079b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80079c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80079c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	015a      	lsls	r2, r3, #5
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	4413      	add	r3, r2
 80079ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079d2:	691b      	ldr	r3, [r3, #16]
 80079d4:	69ba      	ldr	r2, [r7, #24]
 80079d6:	0151      	lsls	r1, r2, #5
 80079d8:	69fa      	ldr	r2, [r7, #28]
 80079da:	440a      	add	r2, r1
 80079dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	015a      	lsls	r2, r3, #5
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	4413      	add	r3, r2
 80079ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079f2:	691b      	ldr	r3, [r3, #16]
 80079f4:	69ba      	ldr	r2, [r7, #24]
 80079f6:	0151      	lsls	r1, r2, #5
 80079f8:	69fa      	ldr	r2, [r7, #28]
 80079fa:	440a      	add	r2, r1
 80079fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a00:	0cdb      	lsrs	r3, r3, #19
 8007a02:	04db      	lsls	r3, r3, #19
 8007a04:	6113      	str	r3, [r2, #16]
 8007a06:	e074      	b.n	8007af2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	015a      	lsls	r2, r3, #5
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	4413      	add	r3, r2
 8007a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	69ba      	ldr	r2, [r7, #24]
 8007a18:	0151      	lsls	r1, r2, #5
 8007a1a:	69fa      	ldr	r2, [r7, #28]
 8007a1c:	440a      	add	r2, r1
 8007a1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a22:	0cdb      	lsrs	r3, r3, #19
 8007a24:	04db      	lsls	r3, r3, #19
 8007a26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	015a      	lsls	r2, r3, #5
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	4413      	add	r3, r2
 8007a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a34:	691b      	ldr	r3, [r3, #16]
 8007a36:	69ba      	ldr	r2, [r7, #24]
 8007a38:	0151      	lsls	r1, r2, #5
 8007a3a:	69fa      	ldr	r2, [r7, #28]
 8007a3c:	440a      	add	r2, r1
 8007a3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a42:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007a46:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007a4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007a4c:	69bb      	ldr	r3, [r7, #24]
 8007a4e:	015a      	lsls	r2, r3, #5
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	4413      	add	r3, r2
 8007a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a58:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	6999      	ldr	r1, [r3, #24]
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	440b      	add	r3, r1
 8007a64:	1e59      	subs	r1, r3, #1
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8007a6e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007a70:	4b9d      	ldr	r3, [pc, #628]	; (8007ce8 <USB_EPStartXfer+0x370>)
 8007a72:	400b      	ands	r3, r1
 8007a74:	69b9      	ldr	r1, [r7, #24]
 8007a76:	0148      	lsls	r0, r1, #5
 8007a78:	69f9      	ldr	r1, [r7, #28]
 8007a7a:	4401      	add	r1, r0
 8007a7c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007a80:	4313      	orrs	r3, r2
 8007a82:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	015a      	lsls	r2, r3, #5
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a90:	691a      	ldr	r2, [r3, #16]
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	699b      	ldr	r3, [r3, #24]
 8007a96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a9a:	69b9      	ldr	r1, [r7, #24]
 8007a9c:	0148      	lsls	r0, r1, #5
 8007a9e:	69f9      	ldr	r1, [r7, #28]
 8007aa0:	4401      	add	r1, r0
 8007aa2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	791b      	ldrb	r3, [r3, #4]
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d11f      	bne.n	8007af2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007ab2:	69bb      	ldr	r3, [r7, #24]
 8007ab4:	015a      	lsls	r2, r3, #5
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	4413      	add	r3, r2
 8007aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007abe:	691b      	ldr	r3, [r3, #16]
 8007ac0:	69ba      	ldr	r2, [r7, #24]
 8007ac2:	0151      	lsls	r1, r2, #5
 8007ac4:	69fa      	ldr	r2, [r7, #28]
 8007ac6:	440a      	add	r2, r1
 8007ac8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007acc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007ad0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	015a      	lsls	r2, r3, #5
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	4413      	add	r3, r2
 8007ada:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ade:	691b      	ldr	r3, [r3, #16]
 8007ae0:	69ba      	ldr	r2, [r7, #24]
 8007ae2:	0151      	lsls	r1, r2, #5
 8007ae4:	69fa      	ldr	r2, [r7, #28]
 8007ae6:	440a      	add	r2, r1
 8007ae8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007aec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007af0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007af2:	79fb      	ldrb	r3, [r7, #7]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d14b      	bne.n	8007b90 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	695b      	ldr	r3, [r3, #20]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d009      	beq.n	8007b14 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	015a      	lsls	r2, r3, #5
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	4413      	add	r3, r2
 8007b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	695b      	ldr	r3, [r3, #20]
 8007b12:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	791b      	ldrb	r3, [r3, #4]
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d128      	bne.n	8007b6e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d110      	bne.n	8007b4e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	015a      	lsls	r2, r3, #5
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	4413      	add	r3, r2
 8007b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	69ba      	ldr	r2, [r7, #24]
 8007b3c:	0151      	lsls	r1, r2, #5
 8007b3e:	69fa      	ldr	r2, [r7, #28]
 8007b40:	440a      	add	r2, r1
 8007b42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b4a:	6013      	str	r3, [r2, #0]
 8007b4c:	e00f      	b.n	8007b6e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	015a      	lsls	r2, r3, #5
 8007b52:	69fb      	ldr	r3, [r7, #28]
 8007b54:	4413      	add	r3, r2
 8007b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	69ba      	ldr	r2, [r7, #24]
 8007b5e:	0151      	lsls	r1, r2, #5
 8007b60:	69fa      	ldr	r2, [r7, #28]
 8007b62:	440a      	add	r2, r1
 8007b64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b6c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	015a      	lsls	r2, r3, #5
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	4413      	add	r3, r2
 8007b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	69ba      	ldr	r2, [r7, #24]
 8007b7e:	0151      	lsls	r1, r2, #5
 8007b80:	69fa      	ldr	r2, [r7, #28]
 8007b82:	440a      	add	r2, r1
 8007b84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b88:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b8c:	6013      	str	r3, [r2, #0]
 8007b8e:	e133      	b.n	8007df8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b90:	69bb      	ldr	r3, [r7, #24]
 8007b92:	015a      	lsls	r2, r3, #5
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	4413      	add	r3, r2
 8007b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	69ba      	ldr	r2, [r7, #24]
 8007ba0:	0151      	lsls	r1, r2, #5
 8007ba2:	69fa      	ldr	r2, [r7, #28]
 8007ba4:	440a      	add	r2, r1
 8007ba6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007baa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007bae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	791b      	ldrb	r3, [r3, #4]
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d015      	beq.n	8007be4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	699b      	ldr	r3, [r3, #24]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f000 811b 	beq.w	8007df8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	f003 030f 	and.w	r3, r3, #15
 8007bd2:	2101      	movs	r1, #1
 8007bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8007bd8:	69f9      	ldr	r1, [r7, #28]
 8007bda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bde:	4313      	orrs	r3, r2
 8007be0:	634b      	str	r3, [r1, #52]	; 0x34
 8007be2:	e109      	b.n	8007df8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d110      	bne.n	8007c16 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	015a      	lsls	r2, r3, #5
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	69ba      	ldr	r2, [r7, #24]
 8007c04:	0151      	lsls	r1, r2, #5
 8007c06:	69fa      	ldr	r2, [r7, #28]
 8007c08:	440a      	add	r2, r1
 8007c0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c12:	6013      	str	r3, [r2, #0]
 8007c14:	e00f      	b.n	8007c36 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	015a      	lsls	r2, r3, #5
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	69ba      	ldr	r2, [r7, #24]
 8007c26:	0151      	lsls	r1, r2, #5
 8007c28:	69fa      	ldr	r2, [r7, #28]
 8007c2a:	440a      	add	r2, r1
 8007c2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c34:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	6919      	ldr	r1, [r3, #16]
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	781a      	ldrb	r2, [r3, #0]
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	699b      	ldr	r3, [r3, #24]
 8007c42:	b298      	uxth	r0, r3
 8007c44:	79fb      	ldrb	r3, [r7, #7]
 8007c46:	9300      	str	r3, [sp, #0]
 8007c48:	4603      	mov	r3, r0
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	f000 fade 	bl	800820c <USB_WritePacket>
 8007c50:	e0d2      	b.n	8007df8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	015a      	lsls	r2, r3, #5
 8007c56:	69fb      	ldr	r3, [r7, #28]
 8007c58:	4413      	add	r3, r2
 8007c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	69ba      	ldr	r2, [r7, #24]
 8007c62:	0151      	lsls	r1, r2, #5
 8007c64:	69fa      	ldr	r2, [r7, #28]
 8007c66:	440a      	add	r2, r1
 8007c68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c6c:	0cdb      	lsrs	r3, r3, #19
 8007c6e:	04db      	lsls	r3, r3, #19
 8007c70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	015a      	lsls	r2, r3, #5
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	4413      	add	r3, r2
 8007c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c7e:	691b      	ldr	r3, [r3, #16]
 8007c80:	69ba      	ldr	r2, [r7, #24]
 8007c82:	0151      	lsls	r1, r2, #5
 8007c84:	69fa      	ldr	r2, [r7, #28]
 8007c86:	440a      	add	r2, r1
 8007c88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007c90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007c94:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	699b      	ldr	r3, [r3, #24]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d126      	bne.n	8007cec <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	015a      	lsls	r2, r3, #5
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007caa:	691a      	ldr	r2, [r3, #16]
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cb4:	69b9      	ldr	r1, [r7, #24]
 8007cb6:	0148      	lsls	r0, r1, #5
 8007cb8:	69f9      	ldr	r1, [r7, #28]
 8007cba:	4401      	add	r1, r0
 8007cbc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007cc4:	69bb      	ldr	r3, [r7, #24]
 8007cc6:	015a      	lsls	r2, r3, #5
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	4413      	add	r3, r2
 8007ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cd0:	691b      	ldr	r3, [r3, #16]
 8007cd2:	69ba      	ldr	r2, [r7, #24]
 8007cd4:	0151      	lsls	r1, r2, #5
 8007cd6:	69fa      	ldr	r2, [r7, #28]
 8007cd8:	440a      	add	r2, r1
 8007cda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ce2:	6113      	str	r3, [r2, #16]
 8007ce4:	e03a      	b.n	8007d5c <USB_EPStartXfer+0x3e4>
 8007ce6:	bf00      	nop
 8007ce8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	699a      	ldr	r2, [r3, #24]
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	4413      	add	r3, r2
 8007cf6:	1e5a      	subs	r2, r3, #1
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d00:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	8afa      	ldrh	r2, [r7, #22]
 8007d08:	fb03 f202 	mul.w	r2, r3, r2
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	015a      	lsls	r2, r3, #5
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	4413      	add	r3, r2
 8007d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d1c:	691a      	ldr	r2, [r3, #16]
 8007d1e:	8afb      	ldrh	r3, [r7, #22]
 8007d20:	04d9      	lsls	r1, r3, #19
 8007d22:	4b38      	ldr	r3, [pc, #224]	; (8007e04 <USB_EPStartXfer+0x48c>)
 8007d24:	400b      	ands	r3, r1
 8007d26:	69b9      	ldr	r1, [r7, #24]
 8007d28:	0148      	lsls	r0, r1, #5
 8007d2a:	69f9      	ldr	r1, [r7, #28]
 8007d2c:	4401      	add	r1, r0
 8007d2e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007d32:	4313      	orrs	r3, r2
 8007d34:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	015a      	lsls	r2, r3, #5
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d42:	691a      	ldr	r2, [r3, #16]
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	69db      	ldr	r3, [r3, #28]
 8007d48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d4c:	69b9      	ldr	r1, [r7, #24]
 8007d4e:	0148      	lsls	r0, r1, #5
 8007d50:	69f9      	ldr	r1, [r7, #28]
 8007d52:	4401      	add	r1, r0
 8007d54:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007d5c:	79fb      	ldrb	r3, [r7, #7]
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d10d      	bne.n	8007d7e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d009      	beq.n	8007d7e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	6919      	ldr	r1, [r3, #16]
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	015a      	lsls	r2, r3, #5
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	4413      	add	r3, r2
 8007d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d7a:	460a      	mov	r2, r1
 8007d7c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	791b      	ldrb	r3, [r3, #4]
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d128      	bne.n	8007dd8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007d86:	69fb      	ldr	r3, [r7, #28]
 8007d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d110      	bne.n	8007db8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	015a      	lsls	r2, r3, #5
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	69ba      	ldr	r2, [r7, #24]
 8007da6:	0151      	lsls	r1, r2, #5
 8007da8:	69fa      	ldr	r2, [r7, #28]
 8007daa:	440a      	add	r2, r1
 8007dac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007db0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007db4:	6013      	str	r3, [r2, #0]
 8007db6:	e00f      	b.n	8007dd8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	015a      	lsls	r2, r3, #5
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	69ba      	ldr	r2, [r7, #24]
 8007dc8:	0151      	lsls	r1, r2, #5
 8007dca:	69fa      	ldr	r2, [r7, #28]
 8007dcc:	440a      	add	r2, r1
 8007dce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dd6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007dd8:	69bb      	ldr	r3, [r7, #24]
 8007dda:	015a      	lsls	r2, r3, #5
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	4413      	add	r3, r2
 8007de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	69ba      	ldr	r2, [r7, #24]
 8007de8:	0151      	lsls	r1, r2, #5
 8007dea:	69fa      	ldr	r2, [r7, #28]
 8007dec:	440a      	add	r2, r1
 8007dee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007df2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007df6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3720      	adds	r7, #32
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	bf00      	nop
 8007e04:	1ff80000 	.word	0x1ff80000

08007e08 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b087      	sub	sp, #28
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	4613      	mov	r3, r2
 8007e14:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	785b      	ldrb	r3, [r3, #1]
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	f040 80ce 	bne.w	8007fc6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	699b      	ldr	r3, [r3, #24]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d132      	bne.n	8007e98 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	015a      	lsls	r2, r3, #5
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	4413      	add	r3, r2
 8007e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e3e:	691b      	ldr	r3, [r3, #16]
 8007e40:	693a      	ldr	r2, [r7, #16]
 8007e42:	0151      	lsls	r1, r2, #5
 8007e44:	697a      	ldr	r2, [r7, #20]
 8007e46:	440a      	add	r2, r1
 8007e48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007e50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007e54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	015a      	lsls	r2, r3, #5
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e62:	691b      	ldr	r3, [r3, #16]
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	0151      	lsls	r1, r2, #5
 8007e68:	697a      	ldr	r2, [r7, #20]
 8007e6a:	440a      	add	r2, r1
 8007e6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	015a      	lsls	r2, r3, #5
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e82:	691b      	ldr	r3, [r3, #16]
 8007e84:	693a      	ldr	r2, [r7, #16]
 8007e86:	0151      	lsls	r1, r2, #5
 8007e88:	697a      	ldr	r2, [r7, #20]
 8007e8a:	440a      	add	r2, r1
 8007e8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e90:	0cdb      	lsrs	r3, r3, #19
 8007e92:	04db      	lsls	r3, r3, #19
 8007e94:	6113      	str	r3, [r2, #16]
 8007e96:	e04e      	b.n	8007f36 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	015a      	lsls	r2, r3, #5
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	4413      	add	r3, r2
 8007ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	693a      	ldr	r2, [r7, #16]
 8007ea8:	0151      	lsls	r1, r2, #5
 8007eaa:	697a      	ldr	r2, [r7, #20]
 8007eac:	440a      	add	r2, r1
 8007eae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eb2:	0cdb      	lsrs	r3, r3, #19
 8007eb4:	04db      	lsls	r3, r3, #19
 8007eb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	015a      	lsls	r2, r3, #5
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	693a      	ldr	r2, [r7, #16]
 8007ec8:	0151      	lsls	r1, r2, #5
 8007eca:	697a      	ldr	r2, [r7, #20]
 8007ecc:	440a      	add	r2, r1
 8007ece:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ed2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007ed6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007eda:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	699a      	ldr	r2, [r3, #24]
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d903      	bls.n	8007ef0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	68da      	ldr	r2, [r3, #12]
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	015a      	lsls	r2, r3, #5
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	4413      	add	r3, r2
 8007ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007efc:	691b      	ldr	r3, [r3, #16]
 8007efe:	693a      	ldr	r2, [r7, #16]
 8007f00:	0151      	lsls	r1, r2, #5
 8007f02:	697a      	ldr	r2, [r7, #20]
 8007f04:	440a      	add	r2, r1
 8007f06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	015a      	lsls	r2, r3, #5
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	4413      	add	r3, r2
 8007f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f1c:	691a      	ldr	r2, [r3, #16]
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	699b      	ldr	r3, [r3, #24]
 8007f22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f26:	6939      	ldr	r1, [r7, #16]
 8007f28:	0148      	lsls	r0, r1, #5
 8007f2a:	6979      	ldr	r1, [r7, #20]
 8007f2c:	4401      	add	r1, r0
 8007f2e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007f32:	4313      	orrs	r3, r2
 8007f34:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007f36:	79fb      	ldrb	r3, [r7, #7]
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d11e      	bne.n	8007f7a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	695b      	ldr	r3, [r3, #20]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d009      	beq.n	8007f58 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	015a      	lsls	r2, r3, #5
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	4413      	add	r3, r2
 8007f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f50:	461a      	mov	r2, r3
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	695b      	ldr	r3, [r3, #20]
 8007f56:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	015a      	lsls	r2, r3, #5
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	4413      	add	r3, r2
 8007f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	693a      	ldr	r2, [r7, #16]
 8007f68:	0151      	lsls	r1, r2, #5
 8007f6a:	697a      	ldr	r2, [r7, #20]
 8007f6c:	440a      	add	r2, r1
 8007f6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f76:	6013      	str	r3, [r2, #0]
 8007f78:	e097      	b.n	80080aa <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	015a      	lsls	r2, r3, #5
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	4413      	add	r3, r2
 8007f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	693a      	ldr	r2, [r7, #16]
 8007f8a:	0151      	lsls	r1, r2, #5
 8007f8c:	697a      	ldr	r2, [r7, #20]
 8007f8e:	440a      	add	r2, r1
 8007f90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f94:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f98:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	699b      	ldr	r3, [r3, #24]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	f000 8083 	beq.w	80080aa <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007faa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	f003 030f 	and.w	r3, r3, #15
 8007fb4:	2101      	movs	r1, #1
 8007fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8007fba:	6979      	ldr	r1, [r7, #20]
 8007fbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	634b      	str	r3, [r1, #52]	; 0x34
 8007fc4:	e071      	b.n	80080aa <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	015a      	lsls	r2, r3, #5
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	4413      	add	r3, r2
 8007fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	693a      	ldr	r2, [r7, #16]
 8007fd6:	0151      	lsls	r1, r2, #5
 8007fd8:	697a      	ldr	r2, [r7, #20]
 8007fda:	440a      	add	r2, r1
 8007fdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fe0:	0cdb      	lsrs	r3, r3, #19
 8007fe2:	04db      	lsls	r3, r3, #19
 8007fe4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	015a      	lsls	r2, r3, #5
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	4413      	add	r3, r2
 8007fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ff2:	691b      	ldr	r3, [r3, #16]
 8007ff4:	693a      	ldr	r2, [r7, #16]
 8007ff6:	0151      	lsls	r1, r2, #5
 8007ff8:	697a      	ldr	r2, [r7, #20]
 8007ffa:	440a      	add	r2, r1
 8007ffc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008000:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008004:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008008:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	699b      	ldr	r3, [r3, #24]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d003      	beq.n	800801a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	68da      	ldr	r2, [r3, #12]
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	68da      	ldr	r2, [r3, #12]
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	015a      	lsls	r2, r3, #5
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	4413      	add	r3, r2
 800802a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800802e:	691b      	ldr	r3, [r3, #16]
 8008030:	693a      	ldr	r2, [r7, #16]
 8008032:	0151      	lsls	r1, r2, #5
 8008034:	697a      	ldr	r2, [r7, #20]
 8008036:	440a      	add	r2, r1
 8008038:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800803c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008040:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	015a      	lsls	r2, r3, #5
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	4413      	add	r3, r2
 800804a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800804e:	691a      	ldr	r2, [r3, #16]
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	69db      	ldr	r3, [r3, #28]
 8008054:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008058:	6939      	ldr	r1, [r7, #16]
 800805a:	0148      	lsls	r0, r1, #5
 800805c:	6979      	ldr	r1, [r7, #20]
 800805e:	4401      	add	r1, r0
 8008060:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008064:	4313      	orrs	r3, r2
 8008066:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008068:	79fb      	ldrb	r3, [r7, #7]
 800806a:	2b01      	cmp	r3, #1
 800806c:	d10d      	bne.n	800808a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	691b      	ldr	r3, [r3, #16]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d009      	beq.n	800808a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	6919      	ldr	r1, [r3, #16]
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	015a      	lsls	r2, r3, #5
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	4413      	add	r3, r2
 8008082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008086:	460a      	mov	r2, r1
 8008088:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	015a      	lsls	r2, r3, #5
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	4413      	add	r3, r2
 8008092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	693a      	ldr	r2, [r7, #16]
 800809a:	0151      	lsls	r1, r2, #5
 800809c:	697a      	ldr	r2, [r7, #20]
 800809e:	440a      	add	r2, r1
 80080a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80080a8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	371c      	adds	r7, #28
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b087      	sub	sp, #28
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80080c2:	2300      	movs	r3, #0
 80080c4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80080c6:	2300      	movs	r3, #0
 80080c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	785b      	ldrb	r3, [r3, #1]
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d14a      	bne.n	800816c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	015a      	lsls	r2, r3, #5
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	4413      	add	r3, r2
 80080e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080ee:	f040 8086 	bne.w	80081fe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	015a      	lsls	r2, r3, #5
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	4413      	add	r3, r2
 80080fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	683a      	ldr	r2, [r7, #0]
 8008104:	7812      	ldrb	r2, [r2, #0]
 8008106:	0151      	lsls	r1, r2, #5
 8008108:	693a      	ldr	r2, [r7, #16]
 800810a:	440a      	add	r2, r1
 800810c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008110:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008114:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	015a      	lsls	r2, r3, #5
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	4413      	add	r3, r2
 8008120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	683a      	ldr	r2, [r7, #0]
 8008128:	7812      	ldrb	r2, [r2, #0]
 800812a:	0151      	lsls	r1, r2, #5
 800812c:	693a      	ldr	r2, [r7, #16]
 800812e:	440a      	add	r2, r1
 8008130:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008134:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008138:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	3301      	adds	r3, #1
 800813e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f242 7210 	movw	r2, #10000	; 0x2710
 8008146:	4293      	cmp	r3, r2
 8008148:	d902      	bls.n	8008150 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	75fb      	strb	r3, [r7, #23]
          break;
 800814e:	e056      	b.n	80081fe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	015a      	lsls	r2, r3, #5
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	4413      	add	r3, r2
 800815a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008164:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008168:	d0e7      	beq.n	800813a <USB_EPStopXfer+0x82>
 800816a:	e048      	b.n	80081fe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	015a      	lsls	r2, r3, #5
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	4413      	add	r3, r2
 8008176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008180:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008184:	d13b      	bne.n	80081fe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	015a      	lsls	r2, r3, #5
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	4413      	add	r3, r2
 8008190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	683a      	ldr	r2, [r7, #0]
 8008198:	7812      	ldrb	r2, [r2, #0]
 800819a:	0151      	lsls	r1, r2, #5
 800819c:	693a      	ldr	r2, [r7, #16]
 800819e:	440a      	add	r2, r1
 80081a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80081a8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	015a      	lsls	r2, r3, #5
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	4413      	add	r3, r2
 80081b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	683a      	ldr	r2, [r7, #0]
 80081bc:	7812      	ldrb	r2, [r2, #0]
 80081be:	0151      	lsls	r1, r2, #5
 80081c0:	693a      	ldr	r2, [r7, #16]
 80081c2:	440a      	add	r2, r1
 80081c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80081cc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	3301      	adds	r3, #1
 80081d2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f242 7210 	movw	r2, #10000	; 0x2710
 80081da:	4293      	cmp	r3, r2
 80081dc:	d902      	bls.n	80081e4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	75fb      	strb	r3, [r7, #23]
          break;
 80081e2:	e00c      	b.n	80081fe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	015a      	lsls	r2, r3, #5
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	4413      	add	r3, r2
 80081ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081fc:	d0e7      	beq.n	80081ce <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80081fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008200:	4618      	mov	r0, r3
 8008202:	371c      	adds	r7, #28
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800820c:	b480      	push	{r7}
 800820e:	b089      	sub	sp, #36	; 0x24
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	4611      	mov	r1, r2
 8008218:	461a      	mov	r2, r3
 800821a:	460b      	mov	r3, r1
 800821c:	71fb      	strb	r3, [r7, #7]
 800821e:	4613      	mov	r3, r2
 8008220:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800822a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800822e:	2b00      	cmp	r3, #0
 8008230:	d123      	bne.n	800827a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008232:	88bb      	ldrh	r3, [r7, #4]
 8008234:	3303      	adds	r3, #3
 8008236:	089b      	lsrs	r3, r3, #2
 8008238:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800823a:	2300      	movs	r3, #0
 800823c:	61bb      	str	r3, [r7, #24]
 800823e:	e018      	b.n	8008272 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008240:	79fb      	ldrb	r3, [r7, #7]
 8008242:	031a      	lsls	r2, r3, #12
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	4413      	add	r3, r2
 8008248:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800824c:	461a      	mov	r2, r3
 800824e:	69fb      	ldr	r3, [r7, #28]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	3301      	adds	r3, #1
 8008258:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	3301      	adds	r3, #1
 800825e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	3301      	adds	r3, #1
 8008264:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008266:	69fb      	ldr	r3, [r7, #28]
 8008268:	3301      	adds	r3, #1
 800826a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800826c:	69bb      	ldr	r3, [r7, #24]
 800826e:	3301      	adds	r3, #1
 8008270:	61bb      	str	r3, [r7, #24]
 8008272:	69ba      	ldr	r2, [r7, #24]
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	429a      	cmp	r2, r3
 8008278:	d3e2      	bcc.n	8008240 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800827a:	2300      	movs	r3, #0
}
 800827c:	4618      	mov	r0, r3
 800827e:	3724      	adds	r7, #36	; 0x24
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008288:	b480      	push	{r7}
 800828a:	b08b      	sub	sp, #44	; 0x2c
 800828c:	af00      	add	r7, sp, #0
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	60b9      	str	r1, [r7, #8]
 8008292:	4613      	mov	r3, r2
 8008294:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800829e:	88fb      	ldrh	r3, [r7, #6]
 80082a0:	089b      	lsrs	r3, r3, #2
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80082a6:	88fb      	ldrh	r3, [r7, #6]
 80082a8:	f003 0303 	and.w	r3, r3, #3
 80082ac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80082ae:	2300      	movs	r3, #0
 80082b0:	623b      	str	r3, [r7, #32]
 80082b2:	e014      	b.n	80082de <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80082b4:	69bb      	ldr	r3, [r7, #24]
 80082b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082be:	601a      	str	r2, [r3, #0]
    pDest++;
 80082c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c2:	3301      	adds	r3, #1
 80082c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80082c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c8:	3301      	adds	r3, #1
 80082ca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80082cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ce:	3301      	adds	r3, #1
 80082d0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80082d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d4:	3301      	adds	r3, #1
 80082d6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80082d8:	6a3b      	ldr	r3, [r7, #32]
 80082da:	3301      	adds	r3, #1
 80082dc:	623b      	str	r3, [r7, #32]
 80082de:	6a3a      	ldr	r2, [r7, #32]
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d3e6      	bcc.n	80082b4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80082e6:	8bfb      	ldrh	r3, [r7, #30]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d01e      	beq.n	800832a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80082ec:	2300      	movs	r3, #0
 80082ee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80082f0:	69bb      	ldr	r3, [r7, #24]
 80082f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082f6:	461a      	mov	r2, r3
 80082f8:	f107 0310 	add.w	r3, r7, #16
 80082fc:	6812      	ldr	r2, [r2, #0]
 80082fe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008300:	693a      	ldr	r2, [r7, #16]
 8008302:	6a3b      	ldr	r3, [r7, #32]
 8008304:	b2db      	uxtb	r3, r3
 8008306:	00db      	lsls	r3, r3, #3
 8008308:	fa22 f303 	lsr.w	r3, r2, r3
 800830c:	b2da      	uxtb	r2, r3
 800830e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008310:	701a      	strb	r2, [r3, #0]
      i++;
 8008312:	6a3b      	ldr	r3, [r7, #32]
 8008314:	3301      	adds	r3, #1
 8008316:	623b      	str	r3, [r7, #32]
      pDest++;
 8008318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831a:	3301      	adds	r3, #1
 800831c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800831e:	8bfb      	ldrh	r3, [r7, #30]
 8008320:	3b01      	subs	r3, #1
 8008322:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008324:	8bfb      	ldrh	r3, [r7, #30]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d1ea      	bne.n	8008300 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800832a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800832c:	4618      	mov	r0, r3
 800832e:	372c      	adds	r7, #44	; 0x2c
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008338:	b480      	push	{r7}
 800833a:	b085      	sub	sp, #20
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	785b      	ldrb	r3, [r3, #1]
 8008350:	2b01      	cmp	r3, #1
 8008352:	d12c      	bne.n	80083ae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	015a      	lsls	r2, r3, #5
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	4413      	add	r3, r2
 800835c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2b00      	cmp	r3, #0
 8008364:	db12      	blt.n	800838c <USB_EPSetStall+0x54>
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d00f      	beq.n	800838c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	015a      	lsls	r2, r3, #5
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	4413      	add	r3, r2
 8008374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	68ba      	ldr	r2, [r7, #8]
 800837c:	0151      	lsls	r1, r2, #5
 800837e:	68fa      	ldr	r2, [r7, #12]
 8008380:	440a      	add	r2, r1
 8008382:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008386:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800838a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	015a      	lsls	r2, r3, #5
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	4413      	add	r3, r2
 8008394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	68ba      	ldr	r2, [r7, #8]
 800839c:	0151      	lsls	r1, r2, #5
 800839e:	68fa      	ldr	r2, [r7, #12]
 80083a0:	440a      	add	r2, r1
 80083a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80083aa:	6013      	str	r3, [r2, #0]
 80083ac:	e02b      	b.n	8008406 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	015a      	lsls	r2, r3, #5
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	4413      	add	r3, r2
 80083b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	db12      	blt.n	80083e6 <USB_EPSetStall+0xae>
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00f      	beq.n	80083e6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	015a      	lsls	r2, r3, #5
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	4413      	add	r3, r2
 80083ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68ba      	ldr	r2, [r7, #8]
 80083d6:	0151      	lsls	r1, r2, #5
 80083d8:	68fa      	ldr	r2, [r7, #12]
 80083da:	440a      	add	r2, r1
 80083dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80083e4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	015a      	lsls	r2, r3, #5
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	4413      	add	r3, r2
 80083ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	68ba      	ldr	r2, [r7, #8]
 80083f6:	0151      	lsls	r1, r2, #5
 80083f8:	68fa      	ldr	r2, [r7, #12]
 80083fa:	440a      	add	r2, r1
 80083fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008400:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008404:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008406:	2300      	movs	r3, #0
}
 8008408:	4618      	mov	r0, r3
 800840a:	3714      	adds	r7, #20
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr

08008414 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008414:	b480      	push	{r7}
 8008416:	b085      	sub	sp, #20
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	785b      	ldrb	r3, [r3, #1]
 800842c:	2b01      	cmp	r3, #1
 800842e:	d128      	bne.n	8008482 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	015a      	lsls	r2, r3, #5
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	4413      	add	r3, r2
 8008438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	68ba      	ldr	r2, [r7, #8]
 8008440:	0151      	lsls	r1, r2, #5
 8008442:	68fa      	ldr	r2, [r7, #12]
 8008444:	440a      	add	r2, r1
 8008446:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800844a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800844e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	791b      	ldrb	r3, [r3, #4]
 8008454:	2b03      	cmp	r3, #3
 8008456:	d003      	beq.n	8008460 <USB_EPClearStall+0x4c>
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	791b      	ldrb	r3, [r3, #4]
 800845c:	2b02      	cmp	r3, #2
 800845e:	d138      	bne.n	80084d2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	015a      	lsls	r2, r3, #5
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	4413      	add	r3, r2
 8008468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	68ba      	ldr	r2, [r7, #8]
 8008470:	0151      	lsls	r1, r2, #5
 8008472:	68fa      	ldr	r2, [r7, #12]
 8008474:	440a      	add	r2, r1
 8008476:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800847a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800847e:	6013      	str	r3, [r2, #0]
 8008480:	e027      	b.n	80084d2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	015a      	lsls	r2, r3, #5
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	4413      	add	r3, r2
 800848a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	68ba      	ldr	r2, [r7, #8]
 8008492:	0151      	lsls	r1, r2, #5
 8008494:	68fa      	ldr	r2, [r7, #12]
 8008496:	440a      	add	r2, r1
 8008498:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800849c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80084a0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	791b      	ldrb	r3, [r3, #4]
 80084a6:	2b03      	cmp	r3, #3
 80084a8:	d003      	beq.n	80084b2 <USB_EPClearStall+0x9e>
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	791b      	ldrb	r3, [r3, #4]
 80084ae:	2b02      	cmp	r3, #2
 80084b0:	d10f      	bne.n	80084d2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	015a      	lsls	r2, r3, #5
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	4413      	add	r3, r2
 80084ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	68ba      	ldr	r2, [r7, #8]
 80084c2:	0151      	lsls	r1, r2, #5
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	440a      	add	r2, r1
 80084c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80084cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084d0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80084d2:	2300      	movs	r3, #0
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3714      	adds	r7, #20
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	460b      	mov	r3, r1
 80084ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	68fa      	ldr	r2, [r7, #12]
 80084fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084fe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008502:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	78fb      	ldrb	r3, [r7, #3]
 800850e:	011b      	lsls	r3, r3, #4
 8008510:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008514:	68f9      	ldr	r1, [r7, #12]
 8008516:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800851a:	4313      	orrs	r3, r2
 800851c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800851e:	2300      	movs	r3, #0
}
 8008520:	4618      	mov	r0, r3
 8008522:	3714      	adds	r7, #20
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr

0800852c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800852c:	b480      	push	{r7}
 800852e:	b085      	sub	sp, #20
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	68fa      	ldr	r2, [r7, #12]
 8008542:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008546:	f023 0303 	bic.w	r3, r3, #3
 800854a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800855a:	f023 0302 	bic.w	r3, r3, #2
 800855e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3714      	adds	r7, #20
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr

0800856e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800856e:	b480      	push	{r7}
 8008570:	b085      	sub	sp, #20
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	68fa      	ldr	r2, [r7, #12]
 8008584:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008588:	f023 0303 	bic.w	r3, r3, #3
 800858c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	68fa      	ldr	r2, [r7, #12]
 8008598:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800859c:	f043 0302 	orr.w	r3, r3, #2
 80085a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80085a2:	2300      	movs	r3, #0
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3714      	adds	r7, #20
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b085      	sub	sp, #20
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	695b      	ldr	r3, [r3, #20]
 80085bc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	699b      	ldr	r3, [r3, #24]
 80085c2:	68fa      	ldr	r2, [r7, #12]
 80085c4:	4013      	ands	r3, r2
 80085c6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80085c8:	68fb      	ldr	r3, [r7, #12]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3714      	adds	r7, #20
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr

080085d6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80085d6:	b480      	push	{r7}
 80085d8:	b085      	sub	sp, #20
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085f2:	69db      	ldr	r3, [r3, #28]
 80085f4:	68ba      	ldr	r2, [r7, #8]
 80085f6:	4013      	ands	r3, r2
 80085f8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	0c1b      	lsrs	r3, r3, #16
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3714      	adds	r7, #20
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr

0800860a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800860a:	b480      	push	{r7}
 800860c:	b085      	sub	sp, #20
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800861c:	699b      	ldr	r3, [r3, #24]
 800861e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008626:	69db      	ldr	r3, [r3, #28]
 8008628:	68ba      	ldr	r2, [r7, #8]
 800862a:	4013      	ands	r3, r2
 800862c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	b29b      	uxth	r3, r3
}
 8008632:	4618      	mov	r0, r3
 8008634:	3714      	adds	r7, #20
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr

0800863e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800863e:	b480      	push	{r7}
 8008640:	b085      	sub	sp, #20
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
 8008646:	460b      	mov	r3, r1
 8008648:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800864e:	78fb      	ldrb	r3, [r7, #3]
 8008650:	015a      	lsls	r2, r3, #5
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	4413      	add	r3, r2
 8008656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008664:	695b      	ldr	r3, [r3, #20]
 8008666:	68ba      	ldr	r2, [r7, #8]
 8008668:	4013      	ands	r3, r2
 800866a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800866c:	68bb      	ldr	r3, [r7, #8]
}
 800866e:	4618      	mov	r0, r3
 8008670:	3714      	adds	r7, #20
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr

0800867a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800867a:	b480      	push	{r7}
 800867c:	b087      	sub	sp, #28
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
 8008682:	460b      	mov	r3, r1
 8008684:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800869a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800869c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800869e:	78fb      	ldrb	r3, [r7, #3]
 80086a0:	f003 030f 	and.w	r3, r3, #15
 80086a4:	68fa      	ldr	r2, [r7, #12]
 80086a6:	fa22 f303 	lsr.w	r3, r2, r3
 80086aa:	01db      	lsls	r3, r3, #7
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	693a      	ldr	r2, [r7, #16]
 80086b0:	4313      	orrs	r3, r2
 80086b2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80086b4:	78fb      	ldrb	r3, [r7, #3]
 80086b6:	015a      	lsls	r2, r3, #5
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	4413      	add	r3, r2
 80086bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	693a      	ldr	r2, [r7, #16]
 80086c4:	4013      	ands	r3, r2
 80086c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80086c8:	68bb      	ldr	r3, [r7, #8]
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	371c      	adds	r7, #28
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr

080086d6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80086d6:	b480      	push	{r7}
 80086d8:	b083      	sub	sp, #12
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	695b      	ldr	r3, [r3, #20]
 80086e2:	f003 0301 	and.w	r3, r3, #1
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	370c      	adds	r7, #12
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr

080086f2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80086f2:	b480      	push	{r7}
 80086f4:	b085      	sub	sp, #20
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	68fa      	ldr	r2, [r7, #12]
 8008708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800870c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008710:	f023 0307 	bic.w	r3, r3, #7
 8008714:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	68fa      	ldr	r2, [r7, #12]
 8008720:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008728:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800872a:	2300      	movs	r3, #0
}
 800872c:	4618      	mov	r0, r3
 800872e:	3714      	adds	r7, #20
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008738:	b480      	push	{r7}
 800873a:	b087      	sub	sp, #28
 800873c:	af00      	add	r7, sp, #0
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	460b      	mov	r3, r1
 8008742:	607a      	str	r2, [r7, #4]
 8008744:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	333c      	adds	r3, #60	; 0x3c
 800874e:	3304      	adds	r3, #4
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	4a26      	ldr	r2, [pc, #152]	; (80087f0 <USB_EP0_OutStart+0xb8>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d90a      	bls.n	8008772 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008768:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800876c:	d101      	bne.n	8008772 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800876e:	2300      	movs	r3, #0
 8008770:	e037      	b.n	80087e2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008778:	461a      	mov	r2, r3
 800877a:	2300      	movs	r3, #0
 800877c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008784:	691b      	ldr	r3, [r3, #16]
 8008786:	697a      	ldr	r2, [r7, #20]
 8008788:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800878c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008790:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008798:	691b      	ldr	r3, [r3, #16]
 800879a:	697a      	ldr	r2, [r7, #20]
 800879c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087a0:	f043 0318 	orr.w	r3, r3, #24
 80087a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087ac:	691b      	ldr	r3, [r3, #16]
 80087ae:	697a      	ldr	r2, [r7, #20]
 80087b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087b4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80087b8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80087ba:	7afb      	ldrb	r3, [r7, #11]
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d10f      	bne.n	80087e0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087c6:	461a      	mov	r2, r3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	697a      	ldr	r2, [r7, #20]
 80087d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087da:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80087de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	371c      	adds	r7, #28
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr
 80087ee:	bf00      	nop
 80087f0:	4f54300a 	.word	0x4f54300a

080087f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b085      	sub	sp, #20
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80087fc:	2300      	movs	r3, #0
 80087fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	3301      	adds	r3, #1
 8008804:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	4a13      	ldr	r2, [pc, #76]	; (8008858 <USB_CoreReset+0x64>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d901      	bls.n	8008812 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800880e:	2303      	movs	r3, #3
 8008810:	e01b      	b.n	800884a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	2b00      	cmp	r3, #0
 8008818:	daf2      	bge.n	8008800 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800881a:	2300      	movs	r3, #0
 800881c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	691b      	ldr	r3, [r3, #16]
 8008822:	f043 0201 	orr.w	r2, r3, #1
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	3301      	adds	r3, #1
 800882e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	4a09      	ldr	r2, [pc, #36]	; (8008858 <USB_CoreReset+0x64>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d901      	bls.n	800883c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008838:	2303      	movs	r3, #3
 800883a:	e006      	b.n	800884a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	691b      	ldr	r3, [r3, #16]
 8008840:	f003 0301 	and.w	r3, r3, #1
 8008844:	2b01      	cmp	r3, #1
 8008846:	d0f0      	beq.n	800882a <USB_CoreReset+0x36>

  return HAL_OK;
 8008848:	2300      	movs	r3, #0
}
 800884a:	4618      	mov	r0, r3
 800884c:	3714      	adds	r7, #20
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr
 8008856:	bf00      	nop
 8008858:	00030d40 	.word	0x00030d40

0800885c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	460b      	mov	r3, r1
 8008866:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008868:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800886c:	f002 fc28 	bl	800b0c0 <USBD_static_malloc>
 8008870:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d109      	bne.n	800888c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	32b0      	adds	r2, #176	; 0xb0
 8008882:	2100      	movs	r1, #0
 8008884:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008888:	2302      	movs	r3, #2
 800888a:	e0d4      	b.n	8008a36 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800888c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008890:	2100      	movs	r1, #0
 8008892:	68f8      	ldr	r0, [r7, #12]
 8008894:	f002 fc82 	bl	800b19c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	32b0      	adds	r2, #176	; 0xb0
 80088a2:	68f9      	ldr	r1, [r7, #12]
 80088a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	32b0      	adds	r2, #176	; 0xb0
 80088b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	7c1b      	ldrb	r3, [r3, #16]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d138      	bne.n	8008936 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80088c4:	4b5e      	ldr	r3, [pc, #376]	; (8008a40 <USBD_CDC_Init+0x1e4>)
 80088c6:	7819      	ldrb	r1, [r3, #0]
 80088c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088cc:	2202      	movs	r2, #2
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f002 fad3 	bl	800ae7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80088d4:	4b5a      	ldr	r3, [pc, #360]	; (8008a40 <USBD_CDC_Init+0x1e4>)
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	f003 020f 	and.w	r2, r3, #15
 80088dc:	6879      	ldr	r1, [r7, #4]
 80088de:	4613      	mov	r3, r2
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	4413      	add	r3, r2
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	440b      	add	r3, r1
 80088e8:	3324      	adds	r3, #36	; 0x24
 80088ea:	2201      	movs	r2, #1
 80088ec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80088ee:	4b55      	ldr	r3, [pc, #340]	; (8008a44 <USBD_CDC_Init+0x1e8>)
 80088f0:	7819      	ldrb	r1, [r3, #0]
 80088f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088f6:	2202      	movs	r2, #2
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f002 fabe 	bl	800ae7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80088fe:	4b51      	ldr	r3, [pc, #324]	; (8008a44 <USBD_CDC_Init+0x1e8>)
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	f003 020f 	and.w	r2, r3, #15
 8008906:	6879      	ldr	r1, [r7, #4]
 8008908:	4613      	mov	r3, r2
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	4413      	add	r3, r2
 800890e:	009b      	lsls	r3, r3, #2
 8008910:	440b      	add	r3, r1
 8008912:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008916:	2201      	movs	r2, #1
 8008918:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800891a:	4b4b      	ldr	r3, [pc, #300]	; (8008a48 <USBD_CDC_Init+0x1ec>)
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	f003 020f 	and.w	r2, r3, #15
 8008922:	6879      	ldr	r1, [r7, #4]
 8008924:	4613      	mov	r3, r2
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	4413      	add	r3, r2
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	440b      	add	r3, r1
 800892e:	3326      	adds	r3, #38	; 0x26
 8008930:	2210      	movs	r2, #16
 8008932:	801a      	strh	r2, [r3, #0]
 8008934:	e035      	b.n	80089a2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008936:	4b42      	ldr	r3, [pc, #264]	; (8008a40 <USBD_CDC_Init+0x1e4>)
 8008938:	7819      	ldrb	r1, [r3, #0]
 800893a:	2340      	movs	r3, #64	; 0x40
 800893c:	2202      	movs	r2, #2
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f002 fa9b 	bl	800ae7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008944:	4b3e      	ldr	r3, [pc, #248]	; (8008a40 <USBD_CDC_Init+0x1e4>)
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	f003 020f 	and.w	r2, r3, #15
 800894c:	6879      	ldr	r1, [r7, #4]
 800894e:	4613      	mov	r3, r2
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	4413      	add	r3, r2
 8008954:	009b      	lsls	r3, r3, #2
 8008956:	440b      	add	r3, r1
 8008958:	3324      	adds	r3, #36	; 0x24
 800895a:	2201      	movs	r2, #1
 800895c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800895e:	4b39      	ldr	r3, [pc, #228]	; (8008a44 <USBD_CDC_Init+0x1e8>)
 8008960:	7819      	ldrb	r1, [r3, #0]
 8008962:	2340      	movs	r3, #64	; 0x40
 8008964:	2202      	movs	r2, #2
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f002 fa87 	bl	800ae7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800896c:	4b35      	ldr	r3, [pc, #212]	; (8008a44 <USBD_CDC_Init+0x1e8>)
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	f003 020f 	and.w	r2, r3, #15
 8008974:	6879      	ldr	r1, [r7, #4]
 8008976:	4613      	mov	r3, r2
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	4413      	add	r3, r2
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	440b      	add	r3, r1
 8008980:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008984:	2201      	movs	r2, #1
 8008986:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008988:	4b2f      	ldr	r3, [pc, #188]	; (8008a48 <USBD_CDC_Init+0x1ec>)
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	f003 020f 	and.w	r2, r3, #15
 8008990:	6879      	ldr	r1, [r7, #4]
 8008992:	4613      	mov	r3, r2
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	4413      	add	r3, r2
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	440b      	add	r3, r1
 800899c:	3326      	adds	r3, #38	; 0x26
 800899e:	2210      	movs	r2, #16
 80089a0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80089a2:	4b29      	ldr	r3, [pc, #164]	; (8008a48 <USBD_CDC_Init+0x1ec>)
 80089a4:	7819      	ldrb	r1, [r3, #0]
 80089a6:	2308      	movs	r3, #8
 80089a8:	2203      	movs	r2, #3
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f002 fa65 	bl	800ae7a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80089b0:	4b25      	ldr	r3, [pc, #148]	; (8008a48 <USBD_CDC_Init+0x1ec>)
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	f003 020f 	and.w	r2, r3, #15
 80089b8:	6879      	ldr	r1, [r7, #4]
 80089ba:	4613      	mov	r3, r2
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	4413      	add	r3, r2
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	440b      	add	r3, r1
 80089c4:	3324      	adds	r3, #36	; 0x24
 80089c6:	2201      	movs	r2, #1
 80089c8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	33b0      	adds	r3, #176	; 0xb0
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	4413      	add	r3, r2
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2200      	movs	r2, #0
 80089ea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d101      	bne.n	8008a04 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008a00:	2302      	movs	r3, #2
 8008a02:	e018      	b.n	8008a36 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	7c1b      	ldrb	r3, [r3, #16]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d10a      	bne.n	8008a22 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008a0c:	4b0d      	ldr	r3, [pc, #52]	; (8008a44 <USBD_CDC_Init+0x1e8>)
 8008a0e:	7819      	ldrb	r1, [r3, #0]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f002 fb1c 	bl	800b058 <USBD_LL_PrepareReceive>
 8008a20:	e008      	b.n	8008a34 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008a22:	4b08      	ldr	r3, [pc, #32]	; (8008a44 <USBD_CDC_Init+0x1e8>)
 8008a24:	7819      	ldrb	r1, [r3, #0]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008a2c:	2340      	movs	r3, #64	; 0x40
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f002 fb12 	bl	800b058 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008a34:	2300      	movs	r3, #0
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3710      	adds	r7, #16
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	20000093 	.word	0x20000093
 8008a44:	20000094 	.word	0x20000094
 8008a48:	20000095 	.word	0x20000095

08008a4c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	460b      	mov	r3, r1
 8008a56:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008a58:	4b3a      	ldr	r3, [pc, #232]	; (8008b44 <USBD_CDC_DeInit+0xf8>)
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f002 fa31 	bl	800aec6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008a64:	4b37      	ldr	r3, [pc, #220]	; (8008b44 <USBD_CDC_DeInit+0xf8>)
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	f003 020f 	and.w	r2, r3, #15
 8008a6c:	6879      	ldr	r1, [r7, #4]
 8008a6e:	4613      	mov	r3, r2
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	4413      	add	r3, r2
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	440b      	add	r3, r1
 8008a78:	3324      	adds	r3, #36	; 0x24
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008a7e:	4b32      	ldr	r3, [pc, #200]	; (8008b48 <USBD_CDC_DeInit+0xfc>)
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	4619      	mov	r1, r3
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f002 fa1e 	bl	800aec6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008a8a:	4b2f      	ldr	r3, [pc, #188]	; (8008b48 <USBD_CDC_DeInit+0xfc>)
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	f003 020f 	and.w	r2, r3, #15
 8008a92:	6879      	ldr	r1, [r7, #4]
 8008a94:	4613      	mov	r3, r2
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	4413      	add	r3, r2
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	440b      	add	r3, r1
 8008a9e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008aa6:	4b29      	ldr	r3, [pc, #164]	; (8008b4c <USBD_CDC_DeInit+0x100>)
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	4619      	mov	r1, r3
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f002 fa0a 	bl	800aec6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008ab2:	4b26      	ldr	r3, [pc, #152]	; (8008b4c <USBD_CDC_DeInit+0x100>)
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	f003 020f 	and.w	r2, r3, #15
 8008aba:	6879      	ldr	r1, [r7, #4]
 8008abc:	4613      	mov	r3, r2
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	4413      	add	r3, r2
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	440b      	add	r3, r1
 8008ac6:	3324      	adds	r3, #36	; 0x24
 8008ac8:	2200      	movs	r2, #0
 8008aca:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008acc:	4b1f      	ldr	r3, [pc, #124]	; (8008b4c <USBD_CDC_DeInit+0x100>)
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	f003 020f 	and.w	r2, r3, #15
 8008ad4:	6879      	ldr	r1, [r7, #4]
 8008ad6:	4613      	mov	r3, r2
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	4413      	add	r3, r2
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	440b      	add	r3, r1
 8008ae0:	3326      	adds	r3, #38	; 0x26
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	32b0      	adds	r2, #176	; 0xb0
 8008af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d01f      	beq.n	8008b38 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	33b0      	adds	r3, #176	; 0xb0
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	4413      	add	r3, r2
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	32b0      	adds	r2, #176	; 0xb0
 8008b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f002 fade 	bl	800b0dc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	32b0      	adds	r2, #176	; 0xb0
 8008b2a:	2100      	movs	r1, #0
 8008b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3708      	adds	r7, #8
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	20000093 	.word	0x20000093
 8008b48:	20000094 	.word	0x20000094
 8008b4c:	20000095 	.word	0x20000095

08008b50 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b086      	sub	sp, #24
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	32b0      	adds	r2, #176	; 0xb0
 8008b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b68:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b72:	2300      	movs	r3, #0
 8008b74:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d101      	bne.n	8008b80 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008b7c:	2303      	movs	r3, #3
 8008b7e:	e0bf      	b.n	8008d00 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d050      	beq.n	8008c2e <USBD_CDC_Setup+0xde>
 8008b8c:	2b20      	cmp	r3, #32
 8008b8e:	f040 80af 	bne.w	8008cf0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	88db      	ldrh	r3, [r3, #6]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d03a      	beq.n	8008c10 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	b25b      	sxtb	r3, r3
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	da1b      	bge.n	8008bdc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	33b0      	adds	r3, #176	; 0xb0
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	4413      	add	r3, r2
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	683a      	ldr	r2, [r7, #0]
 8008bb8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008bba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008bbc:	683a      	ldr	r2, [r7, #0]
 8008bbe:	88d2      	ldrh	r2, [r2, #6]
 8008bc0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	88db      	ldrh	r3, [r3, #6]
 8008bc6:	2b07      	cmp	r3, #7
 8008bc8:	bf28      	it	cs
 8008bca:	2307      	movcs	r3, #7
 8008bcc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008bce:	693b      	ldr	r3, [r7, #16]
 8008bd0:	89fa      	ldrh	r2, [r7, #14]
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f001 fd43 	bl	800a660 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008bda:	e090      	b.n	8008cfe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	785a      	ldrb	r2, [r3, #1]
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	88db      	ldrh	r3, [r3, #6]
 8008bea:	2b3f      	cmp	r3, #63	; 0x3f
 8008bec:	d803      	bhi.n	8008bf6 <USBD_CDC_Setup+0xa6>
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	88db      	ldrh	r3, [r3, #6]
 8008bf2:	b2da      	uxtb	r2, r3
 8008bf4:	e000      	b.n	8008bf8 <USBD_CDC_Setup+0xa8>
 8008bf6:	2240      	movs	r2, #64	; 0x40
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008bfe:	6939      	ldr	r1, [r7, #16]
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008c06:	461a      	mov	r2, r3
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f001 fd55 	bl	800a6b8 <USBD_CtlPrepareRx>
      break;
 8008c0e:	e076      	b.n	8008cfe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	33b0      	adds	r3, #176	; 0xb0
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	4413      	add	r3, r2
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	689b      	ldr	r3, [r3, #8]
 8008c22:	683a      	ldr	r2, [r7, #0]
 8008c24:	7850      	ldrb	r0, [r2, #1]
 8008c26:	2200      	movs	r2, #0
 8008c28:	6839      	ldr	r1, [r7, #0]
 8008c2a:	4798      	blx	r3
      break;
 8008c2c:	e067      	b.n	8008cfe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	785b      	ldrb	r3, [r3, #1]
 8008c32:	2b0b      	cmp	r3, #11
 8008c34:	d851      	bhi.n	8008cda <USBD_CDC_Setup+0x18a>
 8008c36:	a201      	add	r2, pc, #4	; (adr r2, 8008c3c <USBD_CDC_Setup+0xec>)
 8008c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c3c:	08008c6d 	.word	0x08008c6d
 8008c40:	08008ce9 	.word	0x08008ce9
 8008c44:	08008cdb 	.word	0x08008cdb
 8008c48:	08008cdb 	.word	0x08008cdb
 8008c4c:	08008cdb 	.word	0x08008cdb
 8008c50:	08008cdb 	.word	0x08008cdb
 8008c54:	08008cdb 	.word	0x08008cdb
 8008c58:	08008cdb 	.word	0x08008cdb
 8008c5c:	08008cdb 	.word	0x08008cdb
 8008c60:	08008cdb 	.word	0x08008cdb
 8008c64:	08008c97 	.word	0x08008c97
 8008c68:	08008cc1 	.word	0x08008cc1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c72:	b2db      	uxtb	r3, r3
 8008c74:	2b03      	cmp	r3, #3
 8008c76:	d107      	bne.n	8008c88 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008c78:	f107 030a 	add.w	r3, r7, #10
 8008c7c:	2202      	movs	r2, #2
 8008c7e:	4619      	mov	r1, r3
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f001 fced 	bl	800a660 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c86:	e032      	b.n	8008cee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008c88:	6839      	ldr	r1, [r7, #0]
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	f001 fc77 	bl	800a57e <USBD_CtlError>
            ret = USBD_FAIL;
 8008c90:	2303      	movs	r3, #3
 8008c92:	75fb      	strb	r3, [r7, #23]
          break;
 8008c94:	e02b      	b.n	8008cee <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	2b03      	cmp	r3, #3
 8008ca0:	d107      	bne.n	8008cb2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008ca2:	f107 030d 	add.w	r3, r7, #13
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	4619      	mov	r1, r3
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f001 fcd8 	bl	800a660 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008cb0:	e01d      	b.n	8008cee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008cb2:	6839      	ldr	r1, [r7, #0]
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f001 fc62 	bl	800a57e <USBD_CtlError>
            ret = USBD_FAIL;
 8008cba:	2303      	movs	r3, #3
 8008cbc:	75fb      	strb	r3, [r7, #23]
          break;
 8008cbe:	e016      	b.n	8008cee <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	2b03      	cmp	r3, #3
 8008cca:	d00f      	beq.n	8008cec <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008ccc:	6839      	ldr	r1, [r7, #0]
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f001 fc55 	bl	800a57e <USBD_CtlError>
            ret = USBD_FAIL;
 8008cd4:	2303      	movs	r3, #3
 8008cd6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008cd8:	e008      	b.n	8008cec <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008cda:	6839      	ldr	r1, [r7, #0]
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f001 fc4e 	bl	800a57e <USBD_CtlError>
          ret = USBD_FAIL;
 8008ce2:	2303      	movs	r3, #3
 8008ce4:	75fb      	strb	r3, [r7, #23]
          break;
 8008ce6:	e002      	b.n	8008cee <USBD_CDC_Setup+0x19e>
          break;
 8008ce8:	bf00      	nop
 8008cea:	e008      	b.n	8008cfe <USBD_CDC_Setup+0x1ae>
          break;
 8008cec:	bf00      	nop
      }
      break;
 8008cee:	e006      	b.n	8008cfe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008cf0:	6839      	ldr	r1, [r7, #0]
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f001 fc43 	bl	800a57e <USBD_CtlError>
      ret = USBD_FAIL;
 8008cf8:	2303      	movs	r3, #3
 8008cfa:	75fb      	strb	r3, [r7, #23]
      break;
 8008cfc:	bf00      	nop
  }

  return (uint8_t)ret;
 8008cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3718      	adds	r7, #24
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	460b      	mov	r3, r1
 8008d12:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d1a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	32b0      	adds	r2, #176	; 0xb0
 8008d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d101      	bne.n	8008d32 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008d2e:	2303      	movs	r3, #3
 8008d30:	e065      	b.n	8008dfe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	32b0      	adds	r2, #176	; 0xb0
 8008d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d40:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008d42:	78fb      	ldrb	r3, [r7, #3]
 8008d44:	f003 020f 	and.w	r2, r3, #15
 8008d48:	6879      	ldr	r1, [r7, #4]
 8008d4a:	4613      	mov	r3, r2
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	4413      	add	r3, r2
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	440b      	add	r3, r1
 8008d54:	3318      	adds	r3, #24
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d02f      	beq.n	8008dbc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008d5c:	78fb      	ldrb	r3, [r7, #3]
 8008d5e:	f003 020f 	and.w	r2, r3, #15
 8008d62:	6879      	ldr	r1, [r7, #4]
 8008d64:	4613      	mov	r3, r2
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	4413      	add	r3, r2
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	440b      	add	r3, r1
 8008d6e:	3318      	adds	r3, #24
 8008d70:	681a      	ldr	r2, [r3, #0]
 8008d72:	78fb      	ldrb	r3, [r7, #3]
 8008d74:	f003 010f 	and.w	r1, r3, #15
 8008d78:	68f8      	ldr	r0, [r7, #12]
 8008d7a:	460b      	mov	r3, r1
 8008d7c:	00db      	lsls	r3, r3, #3
 8008d7e:	440b      	add	r3, r1
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	4403      	add	r3, r0
 8008d84:	3348      	adds	r3, #72	; 0x48
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	fbb2 f1f3 	udiv	r1, r2, r3
 8008d8c:	fb01 f303 	mul.w	r3, r1, r3
 8008d90:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d112      	bne.n	8008dbc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008d96:	78fb      	ldrb	r3, [r7, #3]
 8008d98:	f003 020f 	and.w	r2, r3, #15
 8008d9c:	6879      	ldr	r1, [r7, #4]
 8008d9e:	4613      	mov	r3, r2
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	4413      	add	r3, r2
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	440b      	add	r3, r1
 8008da8:	3318      	adds	r3, #24
 8008daa:	2200      	movs	r2, #0
 8008dac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008dae:	78f9      	ldrb	r1, [r7, #3]
 8008db0:	2300      	movs	r3, #0
 8008db2:	2200      	movs	r2, #0
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f002 f92e 	bl	800b016 <USBD_LL_Transmit>
 8008dba:	e01f      	b.n	8008dfc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	33b0      	adds	r3, #176	; 0xb0
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	4413      	add	r3, r2
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	691b      	ldr	r3, [r3, #16]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d010      	beq.n	8008dfc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	33b0      	adds	r3, #176	; 0xb0
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	4413      	add	r3, r2
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	691b      	ldr	r3, [r3, #16]
 8008dec:	68ba      	ldr	r2, [r7, #8]
 8008dee:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008df2:	68ba      	ldr	r2, [r7, #8]
 8008df4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008df8:	78fa      	ldrb	r2, [r7, #3]
 8008dfa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008dfc:	2300      	movs	r3, #0
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3710      	adds	r7, #16
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008e06:	b580      	push	{r7, lr}
 8008e08:	b084      	sub	sp, #16
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
 8008e0e:	460b      	mov	r3, r1
 8008e10:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	32b0      	adds	r2, #176	; 0xb0
 8008e1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e20:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	32b0      	adds	r2, #176	; 0xb0
 8008e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d101      	bne.n	8008e38 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008e34:	2303      	movs	r3, #3
 8008e36:	e01a      	b.n	8008e6e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008e38:	78fb      	ldrb	r3, [r7, #3]
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f002 f92c 	bl	800b09a <USBD_LL_GetRxDataSize>
 8008e42:	4602      	mov	r2, r0
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	33b0      	adds	r3, #176	; 0xb0
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	4413      	add	r3, r2
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	68fa      	ldr	r2, [r7, #12]
 8008e5e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008e62:	68fa      	ldr	r2, [r7, #12]
 8008e64:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008e68:	4611      	mov	r1, r2
 8008e6a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008e6c:	2300      	movs	r3, #0
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3710      	adds	r7, #16
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b084      	sub	sp, #16
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	32b0      	adds	r2, #176	; 0xb0
 8008e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e8c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d101      	bne.n	8008e98 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008e94:	2303      	movs	r3, #3
 8008e96:	e025      	b.n	8008ee4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	33b0      	adds	r3, #176	; 0xb0
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	4413      	add	r3, r2
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d01a      	beq.n	8008ee2 <USBD_CDC_EP0_RxReady+0x6c>
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008eb2:	2bff      	cmp	r3, #255	; 0xff
 8008eb4:	d015      	beq.n	8008ee2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	33b0      	adds	r3, #176	; 0xb0
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	4413      	add	r3, r2
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	68fa      	ldr	r2, [r7, #12]
 8008eca:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008ece:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008ed0:	68fa      	ldr	r2, [r7, #12]
 8008ed2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008ed6:	b292      	uxth	r2, r2
 8008ed8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	22ff      	movs	r2, #255	; 0xff
 8008ede:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008ee2:	2300      	movs	r3, #0
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3710      	adds	r7, #16
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bd80      	pop	{r7, pc}

08008eec <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b086      	sub	sp, #24
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008ef4:	2182      	movs	r1, #130	; 0x82
 8008ef6:	4818      	ldr	r0, [pc, #96]	; (8008f58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008ef8:	f000 fd09 	bl	800990e <USBD_GetEpDesc>
 8008efc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008efe:	2101      	movs	r1, #1
 8008f00:	4815      	ldr	r0, [pc, #84]	; (8008f58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008f02:	f000 fd04 	bl	800990e <USBD_GetEpDesc>
 8008f06:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008f08:	2181      	movs	r1, #129	; 0x81
 8008f0a:	4813      	ldr	r0, [pc, #76]	; (8008f58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008f0c:	f000 fcff 	bl	800990e <USBD_GetEpDesc>
 8008f10:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d002      	beq.n	8008f1e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	2210      	movs	r2, #16
 8008f1c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d006      	beq.n	8008f32 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	2200      	movs	r2, #0
 8008f28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f2c:	711a      	strb	r2, [r3, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d006      	beq.n	8008f46 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f40:	711a      	strb	r2, [r3, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2243      	movs	r2, #67	; 0x43
 8008f4a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008f4c:	4b02      	ldr	r3, [pc, #8]	; (8008f58 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3718      	adds	r7, #24
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	20000050 	.word	0x20000050

08008f5c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b086      	sub	sp, #24
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008f64:	2182      	movs	r1, #130	; 0x82
 8008f66:	4818      	ldr	r0, [pc, #96]	; (8008fc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008f68:	f000 fcd1 	bl	800990e <USBD_GetEpDesc>
 8008f6c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008f6e:	2101      	movs	r1, #1
 8008f70:	4815      	ldr	r0, [pc, #84]	; (8008fc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008f72:	f000 fccc 	bl	800990e <USBD_GetEpDesc>
 8008f76:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008f78:	2181      	movs	r1, #129	; 0x81
 8008f7a:	4813      	ldr	r0, [pc, #76]	; (8008fc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008f7c:	f000 fcc7 	bl	800990e <USBD_GetEpDesc>
 8008f80:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d002      	beq.n	8008f8e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	2210      	movs	r2, #16
 8008f8c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d006      	beq.n	8008fa2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	2200      	movs	r2, #0
 8008f98:	711a      	strb	r2, [r3, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f042 0202 	orr.w	r2, r2, #2
 8008fa0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d006      	beq.n	8008fb6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2200      	movs	r2, #0
 8008fac:	711a      	strb	r2, [r3, #4]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f042 0202 	orr.w	r2, r2, #2
 8008fb4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2243      	movs	r2, #67	; 0x43
 8008fba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008fbc:	4b02      	ldr	r3, [pc, #8]	; (8008fc8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3718      	adds	r7, #24
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop
 8008fc8:	20000050 	.word	0x20000050

08008fcc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b086      	sub	sp, #24
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008fd4:	2182      	movs	r1, #130	; 0x82
 8008fd6:	4818      	ldr	r0, [pc, #96]	; (8009038 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008fd8:	f000 fc99 	bl	800990e <USBD_GetEpDesc>
 8008fdc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008fde:	2101      	movs	r1, #1
 8008fe0:	4815      	ldr	r0, [pc, #84]	; (8009038 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008fe2:	f000 fc94 	bl	800990e <USBD_GetEpDesc>
 8008fe6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008fe8:	2181      	movs	r1, #129	; 0x81
 8008fea:	4813      	ldr	r0, [pc, #76]	; (8009038 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008fec:	f000 fc8f 	bl	800990e <USBD_GetEpDesc>
 8008ff0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d002      	beq.n	8008ffe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	2210      	movs	r2, #16
 8008ffc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d006      	beq.n	8009012 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	2200      	movs	r2, #0
 8009008:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800900c:	711a      	strb	r2, [r3, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d006      	beq.n	8009026 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2200      	movs	r2, #0
 800901c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009020:	711a      	strb	r2, [r3, #4]
 8009022:	2200      	movs	r2, #0
 8009024:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2243      	movs	r2, #67	; 0x43
 800902a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800902c:	4b02      	ldr	r3, [pc, #8]	; (8009038 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800902e:	4618      	mov	r0, r3
 8009030:	3718      	adds	r7, #24
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop
 8009038:	20000050 	.word	0x20000050

0800903c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800903c:	b480      	push	{r7}
 800903e:	b083      	sub	sp, #12
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	220a      	movs	r2, #10
 8009048:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800904a:	4b03      	ldr	r3, [pc, #12]	; (8009058 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800904c:	4618      	mov	r0, r3
 800904e:	370c      	adds	r7, #12
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr
 8009058:	2000000c 	.word	0x2000000c

0800905c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d101      	bne.n	8009070 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800906c:	2303      	movs	r3, #3
 800906e:	e009      	b.n	8009084 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	33b0      	adds	r3, #176	; 0xb0
 800907a:	009b      	lsls	r3, r3, #2
 800907c:	4413      	add	r3, r2
 800907e:	683a      	ldr	r2, [r7, #0]
 8009080:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009082:	2300      	movs	r3, #0
}
 8009084:	4618      	mov	r0, r3
 8009086:	370c      	adds	r7, #12
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr

08009090 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009090:	b480      	push	{r7}
 8009092:	b087      	sub	sp, #28
 8009094:	af00      	add	r7, sp, #0
 8009096:	60f8      	str	r0, [r7, #12]
 8009098:	60b9      	str	r1, [r7, #8]
 800909a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	32b0      	adds	r2, #176	; 0xb0
 80090a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090aa:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d101      	bne.n	80090b6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80090b2:	2303      	movs	r3, #3
 80090b4:	e008      	b.n	80090c8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	68ba      	ldr	r2, [r7, #8]
 80090ba:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80090c6:	2300      	movs	r3, #0
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	371c      	adds	r7, #28
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b085      	sub	sp, #20
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	32b0      	adds	r2, #176	; 0xb0
 80090e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090ec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d101      	bne.n	80090f8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80090f4:	2303      	movs	r3, #3
 80090f6:	e004      	b.n	8009102 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	683a      	ldr	r2, [r7, #0]
 80090fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009100:	2300      	movs	r3, #0
}
 8009102:	4618      	mov	r0, r3
 8009104:	3714      	adds	r7, #20
 8009106:	46bd      	mov	sp, r7
 8009108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910c:	4770      	bx	lr
	...

08009110 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	32b0      	adds	r2, #176	; 0xb0
 8009122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009126:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	32b0      	adds	r2, #176	; 0xb0
 8009132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d101      	bne.n	800913e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800913a:	2303      	movs	r3, #3
 800913c:	e018      	b.n	8009170 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	7c1b      	ldrb	r3, [r3, #16]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d10a      	bne.n	800915c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009146:	4b0c      	ldr	r3, [pc, #48]	; (8009178 <USBD_CDC_ReceivePacket+0x68>)
 8009148:	7819      	ldrb	r1, [r3, #0]
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009150:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f001 ff7f 	bl	800b058 <USBD_LL_PrepareReceive>
 800915a:	e008      	b.n	800916e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800915c:	4b06      	ldr	r3, [pc, #24]	; (8009178 <USBD_CDC_ReceivePacket+0x68>)
 800915e:	7819      	ldrb	r1, [r3, #0]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009166:	2340      	movs	r3, #64	; 0x40
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f001 ff75 	bl	800b058 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800916e:	2300      	movs	r3, #0
}
 8009170:	4618      	mov	r0, r3
 8009172:	3710      	adds	r7, #16
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}
 8009178:	20000094 	.word	0x20000094

0800917c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b086      	sub	sp, #24
 8009180:	af00      	add	r7, sp, #0
 8009182:	60f8      	str	r0, [r7, #12]
 8009184:	60b9      	str	r1, [r7, #8]
 8009186:	4613      	mov	r3, r2
 8009188:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d101      	bne.n	8009194 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009190:	2303      	movs	r3, #3
 8009192:	e01f      	b.n	80091d4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2200      	movs	r2, #0
 8009198:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2200      	movs	r2, #0
 80091a0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2200      	movs	r2, #0
 80091a8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d003      	beq.n	80091ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	68ba      	ldr	r2, [r7, #8]
 80091b6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2201      	movs	r2, #1
 80091be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	79fa      	ldrb	r2, [r7, #7]
 80091c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80091c8:	68f8      	ldr	r0, [r7, #12]
 80091ca:	f001 fdef 	bl	800adac <USBD_LL_Init>
 80091ce:	4603      	mov	r3, r0
 80091d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80091d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3718      	adds	r7, #24
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80091e6:	2300      	movs	r3, #0
 80091e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d101      	bne.n	80091f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80091f0:	2303      	movs	r3, #3
 80091f2:	e025      	b.n	8009240 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	683a      	ldr	r2, [r7, #0]
 80091f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	32ae      	adds	r2, #174	; 0xae
 8009206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800920a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800920c:	2b00      	cmp	r3, #0
 800920e:	d00f      	beq.n	8009230 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	32ae      	adds	r2, #174	; 0xae
 800921a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800921e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009220:	f107 020e 	add.w	r2, r7, #14
 8009224:	4610      	mov	r0, r2
 8009226:	4798      	blx	r3
 8009228:	4602      	mov	r2, r0
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009236:	1c5a      	adds	r2, r3, #1
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800923e:	2300      	movs	r3, #0
}
 8009240:	4618      	mov	r0, r3
 8009242:	3710      	adds	r7, #16
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f001 fdf7 	bl	800ae44 <USBD_LL_Start>
 8009256:	4603      	mov	r3, r0
}
 8009258:	4618      	mov	r0, r3
 800925a:	3708      	adds	r7, #8
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009260:	b480      	push	{r7}
 8009262:	b083      	sub	sp, #12
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009268:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800926a:	4618      	mov	r0, r3
 800926c:	370c      	adds	r7, #12
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr

08009276 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009276:	b580      	push	{r7, lr}
 8009278:	b084      	sub	sp, #16
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
 800927e:	460b      	mov	r3, r1
 8009280:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009282:	2300      	movs	r3, #0
 8009284:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800928c:	2b00      	cmp	r3, #0
 800928e:	d009      	beq.n	80092a4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	78fa      	ldrb	r2, [r7, #3]
 800929a:	4611      	mov	r1, r2
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	4798      	blx	r3
 80092a0:	4603      	mov	r3, r0
 80092a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80092a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3710      	adds	r7, #16
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}

080092ae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80092ae:	b580      	push	{r7, lr}
 80092b0:	b084      	sub	sp, #16
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]
 80092b6:	460b      	mov	r3, r1
 80092b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80092ba:	2300      	movs	r3, #0
 80092bc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	78fa      	ldrb	r2, [r7, #3]
 80092c8:	4611      	mov	r1, r2
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	4798      	blx	r3
 80092ce:	4603      	mov	r3, r0
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d001      	beq.n	80092d8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80092d4:	2303      	movs	r3, #3
 80092d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80092d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3710      	adds	r7, #16
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b084      	sub	sp, #16
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
 80092ea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80092f2:	6839      	ldr	r1, [r7, #0]
 80092f4:	4618      	mov	r0, r3
 80092f6:	f001 f908 	bl	800a50a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2201      	movs	r2, #1
 80092fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009308:	461a      	mov	r2, r3
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009316:	f003 031f 	and.w	r3, r3, #31
 800931a:	2b02      	cmp	r3, #2
 800931c:	d01a      	beq.n	8009354 <USBD_LL_SetupStage+0x72>
 800931e:	2b02      	cmp	r3, #2
 8009320:	d822      	bhi.n	8009368 <USBD_LL_SetupStage+0x86>
 8009322:	2b00      	cmp	r3, #0
 8009324:	d002      	beq.n	800932c <USBD_LL_SetupStage+0x4a>
 8009326:	2b01      	cmp	r3, #1
 8009328:	d00a      	beq.n	8009340 <USBD_LL_SetupStage+0x5e>
 800932a:	e01d      	b.n	8009368 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009332:	4619      	mov	r1, r3
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 fb5f 	bl	80099f8 <USBD_StdDevReq>
 800933a:	4603      	mov	r3, r0
 800933c:	73fb      	strb	r3, [r7, #15]
      break;
 800933e:	e020      	b.n	8009382 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009346:	4619      	mov	r1, r3
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 fbc7 	bl	8009adc <USBD_StdItfReq>
 800934e:	4603      	mov	r3, r0
 8009350:	73fb      	strb	r3, [r7, #15]
      break;
 8009352:	e016      	b.n	8009382 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800935a:	4619      	mov	r1, r3
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 fc29 	bl	8009bb4 <USBD_StdEPReq>
 8009362:	4603      	mov	r3, r0
 8009364:	73fb      	strb	r3, [r7, #15]
      break;
 8009366:	e00c      	b.n	8009382 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800936e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009372:	b2db      	uxtb	r3, r3
 8009374:	4619      	mov	r1, r3
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f001 fdc4 	bl	800af04 <USBD_LL_StallEP>
 800937c:	4603      	mov	r3, r0
 800937e:	73fb      	strb	r3, [r7, #15]
      break;
 8009380:	bf00      	nop
  }

  return ret;
 8009382:	7bfb      	ldrb	r3, [r7, #15]
}
 8009384:	4618      	mov	r0, r3
 8009386:	3710      	adds	r7, #16
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b086      	sub	sp, #24
 8009390:	af00      	add	r7, sp, #0
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	460b      	mov	r3, r1
 8009396:	607a      	str	r2, [r7, #4]
 8009398:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800939a:	2300      	movs	r3, #0
 800939c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800939e:	7afb      	ldrb	r3, [r7, #11]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d16e      	bne.n	8009482 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80093aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80093b2:	2b03      	cmp	r3, #3
 80093b4:	f040 8098 	bne.w	80094e8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	689a      	ldr	r2, [r3, #8]
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	68db      	ldr	r3, [r3, #12]
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d913      	bls.n	80093ec <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	689a      	ldr	r2, [r3, #8]
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	68db      	ldr	r3, [r3, #12]
 80093cc:	1ad2      	subs	r2, r2, r3
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	68da      	ldr	r2, [r3, #12]
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	689b      	ldr	r3, [r3, #8]
 80093da:	4293      	cmp	r3, r2
 80093dc:	bf28      	it	cs
 80093de:	4613      	movcs	r3, r2
 80093e0:	461a      	mov	r2, r3
 80093e2:	6879      	ldr	r1, [r7, #4]
 80093e4:	68f8      	ldr	r0, [r7, #12]
 80093e6:	f001 f984 	bl	800a6f2 <USBD_CtlContinueRx>
 80093ea:	e07d      	b.n	80094e8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80093f2:	f003 031f 	and.w	r3, r3, #31
 80093f6:	2b02      	cmp	r3, #2
 80093f8:	d014      	beq.n	8009424 <USBD_LL_DataOutStage+0x98>
 80093fa:	2b02      	cmp	r3, #2
 80093fc:	d81d      	bhi.n	800943a <USBD_LL_DataOutStage+0xae>
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d002      	beq.n	8009408 <USBD_LL_DataOutStage+0x7c>
 8009402:	2b01      	cmp	r3, #1
 8009404:	d003      	beq.n	800940e <USBD_LL_DataOutStage+0x82>
 8009406:	e018      	b.n	800943a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009408:	2300      	movs	r3, #0
 800940a:	75bb      	strb	r3, [r7, #22]
            break;
 800940c:	e018      	b.n	8009440 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009414:	b2db      	uxtb	r3, r3
 8009416:	4619      	mov	r1, r3
 8009418:	68f8      	ldr	r0, [r7, #12]
 800941a:	f000 fa5e 	bl	80098da <USBD_CoreFindIF>
 800941e:	4603      	mov	r3, r0
 8009420:	75bb      	strb	r3, [r7, #22]
            break;
 8009422:	e00d      	b.n	8009440 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800942a:	b2db      	uxtb	r3, r3
 800942c:	4619      	mov	r1, r3
 800942e:	68f8      	ldr	r0, [r7, #12]
 8009430:	f000 fa60 	bl	80098f4 <USBD_CoreFindEP>
 8009434:	4603      	mov	r3, r0
 8009436:	75bb      	strb	r3, [r7, #22]
            break;
 8009438:	e002      	b.n	8009440 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800943a:	2300      	movs	r3, #0
 800943c:	75bb      	strb	r3, [r7, #22]
            break;
 800943e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009440:	7dbb      	ldrb	r3, [r7, #22]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d119      	bne.n	800947a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800944c:	b2db      	uxtb	r3, r3
 800944e:	2b03      	cmp	r3, #3
 8009450:	d113      	bne.n	800947a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009452:	7dba      	ldrb	r2, [r7, #22]
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	32ae      	adds	r2, #174	; 0xae
 8009458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800945c:	691b      	ldr	r3, [r3, #16]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d00b      	beq.n	800947a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009462:	7dba      	ldrb	r2, [r7, #22]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800946a:	7dba      	ldrb	r2, [r7, #22]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	32ae      	adds	r2, #174	; 0xae
 8009470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009474:	691b      	ldr	r3, [r3, #16]
 8009476:	68f8      	ldr	r0, [r7, #12]
 8009478:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800947a:	68f8      	ldr	r0, [r7, #12]
 800947c:	f001 f94a 	bl	800a714 <USBD_CtlSendStatus>
 8009480:	e032      	b.n	80094e8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009482:	7afb      	ldrb	r3, [r7, #11]
 8009484:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009488:	b2db      	uxtb	r3, r3
 800948a:	4619      	mov	r1, r3
 800948c:	68f8      	ldr	r0, [r7, #12]
 800948e:	f000 fa31 	bl	80098f4 <USBD_CoreFindEP>
 8009492:	4603      	mov	r3, r0
 8009494:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009496:	7dbb      	ldrb	r3, [r7, #22]
 8009498:	2bff      	cmp	r3, #255	; 0xff
 800949a:	d025      	beq.n	80094e8 <USBD_LL_DataOutStage+0x15c>
 800949c:	7dbb      	ldrb	r3, [r7, #22]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d122      	bne.n	80094e8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094a8:	b2db      	uxtb	r3, r3
 80094aa:	2b03      	cmp	r3, #3
 80094ac:	d117      	bne.n	80094de <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80094ae:	7dba      	ldrb	r2, [r7, #22]
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	32ae      	adds	r2, #174	; 0xae
 80094b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094b8:	699b      	ldr	r3, [r3, #24]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d00f      	beq.n	80094de <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80094be:	7dba      	ldrb	r2, [r7, #22]
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80094c6:	7dba      	ldrb	r2, [r7, #22]
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	32ae      	adds	r2, #174	; 0xae
 80094cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094d0:	699b      	ldr	r3, [r3, #24]
 80094d2:	7afa      	ldrb	r2, [r7, #11]
 80094d4:	4611      	mov	r1, r2
 80094d6:	68f8      	ldr	r0, [r7, #12]
 80094d8:	4798      	blx	r3
 80094da:	4603      	mov	r3, r0
 80094dc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80094de:	7dfb      	ldrb	r3, [r7, #23]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d001      	beq.n	80094e8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80094e4:	7dfb      	ldrb	r3, [r7, #23]
 80094e6:	e000      	b.n	80094ea <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80094e8:	2300      	movs	r3, #0
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3718      	adds	r7, #24
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}

080094f2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80094f2:	b580      	push	{r7, lr}
 80094f4:	b086      	sub	sp, #24
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	60f8      	str	r0, [r7, #12]
 80094fa:	460b      	mov	r3, r1
 80094fc:	607a      	str	r2, [r7, #4]
 80094fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009500:	7afb      	ldrb	r3, [r7, #11]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d16f      	bne.n	80095e6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	3314      	adds	r3, #20
 800950a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009512:	2b02      	cmp	r3, #2
 8009514:	d15a      	bne.n	80095cc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	689a      	ldr	r2, [r3, #8]
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	68db      	ldr	r3, [r3, #12]
 800951e:	429a      	cmp	r2, r3
 8009520:	d914      	bls.n	800954c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	689a      	ldr	r2, [r3, #8]
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	68db      	ldr	r3, [r3, #12]
 800952a:	1ad2      	subs	r2, r2, r3
 800952c:	693b      	ldr	r3, [r7, #16]
 800952e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	461a      	mov	r2, r3
 8009536:	6879      	ldr	r1, [r7, #4]
 8009538:	68f8      	ldr	r0, [r7, #12]
 800953a:	f001 f8ac 	bl	800a696 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800953e:	2300      	movs	r3, #0
 8009540:	2200      	movs	r2, #0
 8009542:	2100      	movs	r1, #0
 8009544:	68f8      	ldr	r0, [r7, #12]
 8009546:	f001 fd87 	bl	800b058 <USBD_LL_PrepareReceive>
 800954a:	e03f      	b.n	80095cc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	68da      	ldr	r2, [r3, #12]
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	689b      	ldr	r3, [r3, #8]
 8009554:	429a      	cmp	r2, r3
 8009556:	d11c      	bne.n	8009592 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	685a      	ldr	r2, [r3, #4]
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009560:	429a      	cmp	r2, r3
 8009562:	d316      	bcc.n	8009592 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	685a      	ldr	r2, [r3, #4]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800956e:	429a      	cmp	r2, r3
 8009570:	d20f      	bcs.n	8009592 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009572:	2200      	movs	r2, #0
 8009574:	2100      	movs	r1, #0
 8009576:	68f8      	ldr	r0, [r7, #12]
 8009578:	f001 f88d 	bl	800a696 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2200      	movs	r2, #0
 8009580:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009584:	2300      	movs	r3, #0
 8009586:	2200      	movs	r2, #0
 8009588:	2100      	movs	r1, #0
 800958a:	68f8      	ldr	r0, [r7, #12]
 800958c:	f001 fd64 	bl	800b058 <USBD_LL_PrepareReceive>
 8009590:	e01c      	b.n	80095cc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009598:	b2db      	uxtb	r3, r3
 800959a:	2b03      	cmp	r3, #3
 800959c:	d10f      	bne.n	80095be <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095a4:	68db      	ldr	r3, [r3, #12]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d009      	beq.n	80095be <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2200      	movs	r2, #0
 80095ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095b8:	68db      	ldr	r3, [r3, #12]
 80095ba:	68f8      	ldr	r0, [r7, #12]
 80095bc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80095be:	2180      	movs	r1, #128	; 0x80
 80095c0:	68f8      	ldr	r0, [r7, #12]
 80095c2:	f001 fc9f 	bl	800af04 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80095c6:	68f8      	ldr	r0, [r7, #12]
 80095c8:	f001 f8b7 	bl	800a73a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d03a      	beq.n	800964c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80095d6:	68f8      	ldr	r0, [r7, #12]
 80095d8:	f7ff fe42 	bl	8009260 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2200      	movs	r2, #0
 80095e0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80095e4:	e032      	b.n	800964c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80095e6:	7afb      	ldrb	r3, [r7, #11]
 80095e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	4619      	mov	r1, r3
 80095f0:	68f8      	ldr	r0, [r7, #12]
 80095f2:	f000 f97f 	bl	80098f4 <USBD_CoreFindEP>
 80095f6:	4603      	mov	r3, r0
 80095f8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80095fa:	7dfb      	ldrb	r3, [r7, #23]
 80095fc:	2bff      	cmp	r3, #255	; 0xff
 80095fe:	d025      	beq.n	800964c <USBD_LL_DataInStage+0x15a>
 8009600:	7dfb      	ldrb	r3, [r7, #23]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d122      	bne.n	800964c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800960c:	b2db      	uxtb	r3, r3
 800960e:	2b03      	cmp	r3, #3
 8009610:	d11c      	bne.n	800964c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009612:	7dfa      	ldrb	r2, [r7, #23]
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	32ae      	adds	r2, #174	; 0xae
 8009618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800961c:	695b      	ldr	r3, [r3, #20]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d014      	beq.n	800964c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009622:	7dfa      	ldrb	r2, [r7, #23]
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800962a:	7dfa      	ldrb	r2, [r7, #23]
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	32ae      	adds	r2, #174	; 0xae
 8009630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009634:	695b      	ldr	r3, [r3, #20]
 8009636:	7afa      	ldrb	r2, [r7, #11]
 8009638:	4611      	mov	r1, r2
 800963a:	68f8      	ldr	r0, [r7, #12]
 800963c:	4798      	blx	r3
 800963e:	4603      	mov	r3, r0
 8009640:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009642:	7dbb      	ldrb	r3, [r7, #22]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d001      	beq.n	800964c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009648:	7dbb      	ldrb	r3, [r7, #22]
 800964a:	e000      	b.n	800964e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800964c:	2300      	movs	r3, #0
}
 800964e:	4618      	mov	r0, r3
 8009650:	3718      	adds	r7, #24
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}

08009656 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009656:	b580      	push	{r7, lr}
 8009658:	b084      	sub	sp, #16
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800965e:	2300      	movs	r3, #0
 8009660:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2201      	movs	r2, #1
 8009666:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2200      	movs	r2, #0
 800966e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2200      	movs	r2, #0
 8009676:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	2200      	movs	r2, #0
 800967c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800968e:	2b00      	cmp	r3, #0
 8009690:	d014      	beq.n	80096bc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d00e      	beq.n	80096bc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	6852      	ldr	r2, [r2, #4]
 80096aa:	b2d2      	uxtb	r2, r2
 80096ac:	4611      	mov	r1, r2
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	4798      	blx	r3
 80096b2:	4603      	mov	r3, r0
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d001      	beq.n	80096bc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80096b8:	2303      	movs	r3, #3
 80096ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80096bc:	2340      	movs	r3, #64	; 0x40
 80096be:	2200      	movs	r2, #0
 80096c0:	2100      	movs	r1, #0
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f001 fbd9 	bl	800ae7a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2201      	movs	r2, #1
 80096cc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2240      	movs	r2, #64	; 0x40
 80096d4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80096d8:	2340      	movs	r3, #64	; 0x40
 80096da:	2200      	movs	r2, #0
 80096dc:	2180      	movs	r1, #128	; 0x80
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f001 fbcb 	bl	800ae7a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2201      	movs	r2, #1
 80096e8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2240      	movs	r2, #64	; 0x40
 80096ee:	621a      	str	r2, [r3, #32]

  return ret;
 80096f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3710      	adds	r7, #16
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80096fa:	b480      	push	{r7}
 80096fc:	b083      	sub	sp, #12
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
 8009702:	460b      	mov	r3, r1
 8009704:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	78fa      	ldrb	r2, [r7, #3]
 800970a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	370c      	adds	r7, #12
 8009712:	46bd      	mov	sp, r7
 8009714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009718:	4770      	bx	lr

0800971a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800971a:	b480      	push	{r7}
 800971c:	b083      	sub	sp, #12
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009728:	b2da      	uxtb	r2, r3
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2204      	movs	r2, #4
 8009734:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	370c      	adds	r7, #12
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr

08009746 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009746:	b480      	push	{r7}
 8009748:	b083      	sub	sp, #12
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009754:	b2db      	uxtb	r3, r3
 8009756:	2b04      	cmp	r3, #4
 8009758:	d106      	bne.n	8009768 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009760:	b2da      	uxtb	r2, r3
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009768:	2300      	movs	r3, #0
}
 800976a:	4618      	mov	r0, r3
 800976c:	370c      	adds	r7, #12
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr

08009776 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009776:	b580      	push	{r7, lr}
 8009778:	b082      	sub	sp, #8
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009784:	b2db      	uxtb	r3, r3
 8009786:	2b03      	cmp	r3, #3
 8009788:	d110      	bne.n	80097ac <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009790:	2b00      	cmp	r3, #0
 8009792:	d00b      	beq.n	80097ac <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800979a:	69db      	ldr	r3, [r3, #28]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d005      	beq.n	80097ac <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097a6:	69db      	ldr	r3, [r3, #28]
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80097ac:	2300      	movs	r3, #0
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3708      	adds	r7, #8
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}

080097b6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80097b6:	b580      	push	{r7, lr}
 80097b8:	b082      	sub	sp, #8
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
 80097be:	460b      	mov	r3, r1
 80097c0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	32ae      	adds	r2, #174	; 0xae
 80097cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d101      	bne.n	80097d8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80097d4:	2303      	movs	r3, #3
 80097d6:	e01c      	b.n	8009812 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097de:	b2db      	uxtb	r3, r3
 80097e0:	2b03      	cmp	r3, #3
 80097e2:	d115      	bne.n	8009810 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	32ae      	adds	r2, #174	; 0xae
 80097ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097f2:	6a1b      	ldr	r3, [r3, #32]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d00b      	beq.n	8009810 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	32ae      	adds	r2, #174	; 0xae
 8009802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009806:	6a1b      	ldr	r3, [r3, #32]
 8009808:	78fa      	ldrb	r2, [r7, #3]
 800980a:	4611      	mov	r1, r2
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009810:	2300      	movs	r3, #0
}
 8009812:	4618      	mov	r0, r3
 8009814:	3708      	adds	r7, #8
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}

0800981a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800981a:	b580      	push	{r7, lr}
 800981c:	b082      	sub	sp, #8
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
 8009822:	460b      	mov	r3, r1
 8009824:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	32ae      	adds	r2, #174	; 0xae
 8009830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d101      	bne.n	800983c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009838:	2303      	movs	r3, #3
 800983a:	e01c      	b.n	8009876 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009842:	b2db      	uxtb	r3, r3
 8009844:	2b03      	cmp	r3, #3
 8009846:	d115      	bne.n	8009874 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	32ae      	adds	r2, #174	; 0xae
 8009852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009858:	2b00      	cmp	r3, #0
 800985a:	d00b      	beq.n	8009874 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	32ae      	adds	r2, #174	; 0xae
 8009866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800986a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800986c:	78fa      	ldrb	r2, [r7, #3]
 800986e:	4611      	mov	r1, r2
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009874:	2300      	movs	r3, #0
}
 8009876:	4618      	mov	r0, r3
 8009878:	3708      	adds	r7, #8
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}

0800987e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800987e:	b480      	push	{r7}
 8009880:	b083      	sub	sp, #12
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009886:	2300      	movs	r3, #0
}
 8009888:	4618      	mov	r0, r3
 800988a:	370c      	adds	r7, #12
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr

08009894 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800989c:	2300      	movs	r3, #0
 800989e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2201      	movs	r2, #1
 80098a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d00e      	beq.n	80098d0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	687a      	ldr	r2, [r7, #4]
 80098bc:	6852      	ldr	r2, [r2, #4]
 80098be:	b2d2      	uxtb	r2, r2
 80098c0:	4611      	mov	r1, r2
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	4798      	blx	r3
 80098c6:	4603      	mov	r3, r0
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d001      	beq.n	80098d0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80098cc:	2303      	movs	r3, #3
 80098ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80098d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3710      	adds	r7, #16
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80098da:	b480      	push	{r7}
 80098dc:	b083      	sub	sp, #12
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
 80098e2:	460b      	mov	r3, r1
 80098e4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80098e6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	370c      	adds	r7, #12
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	460b      	mov	r3, r1
 80098fe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009900:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009902:	4618      	mov	r0, r3
 8009904:	370c      	adds	r7, #12
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr

0800990e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800990e:	b580      	push	{r7, lr}
 8009910:	b086      	sub	sp, #24
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
 8009916:	460b      	mov	r3, r1
 8009918:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009922:	2300      	movs	r3, #0
 8009924:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	885b      	ldrh	r3, [r3, #2]
 800992a:	b29a      	uxth	r2, r3
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	b29b      	uxth	r3, r3
 8009932:	429a      	cmp	r2, r3
 8009934:	d920      	bls.n	8009978 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	781b      	ldrb	r3, [r3, #0]
 800993a:	b29b      	uxth	r3, r3
 800993c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800993e:	e013      	b.n	8009968 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009940:	f107 030a 	add.w	r3, r7, #10
 8009944:	4619      	mov	r1, r3
 8009946:	6978      	ldr	r0, [r7, #20]
 8009948:	f000 f81b 	bl	8009982 <USBD_GetNextDesc>
 800994c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	785b      	ldrb	r3, [r3, #1]
 8009952:	2b05      	cmp	r3, #5
 8009954:	d108      	bne.n	8009968 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	789b      	ldrb	r3, [r3, #2]
 800995e:	78fa      	ldrb	r2, [r7, #3]
 8009960:	429a      	cmp	r2, r3
 8009962:	d008      	beq.n	8009976 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009964:	2300      	movs	r3, #0
 8009966:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	885b      	ldrh	r3, [r3, #2]
 800996c:	b29a      	uxth	r2, r3
 800996e:	897b      	ldrh	r3, [r7, #10]
 8009970:	429a      	cmp	r2, r3
 8009972:	d8e5      	bhi.n	8009940 <USBD_GetEpDesc+0x32>
 8009974:	e000      	b.n	8009978 <USBD_GetEpDesc+0x6a>
          break;
 8009976:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009978:	693b      	ldr	r3, [r7, #16]
}
 800997a:	4618      	mov	r0, r3
 800997c:	3718      	adds	r7, #24
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}

08009982 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009982:	b480      	push	{r7}
 8009984:	b085      	sub	sp, #20
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]
 800998a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	881a      	ldrh	r2, [r3, #0]
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	b29b      	uxth	r3, r3
 800999a:	4413      	add	r3, r2
 800999c:	b29a      	uxth	r2, r3
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	461a      	mov	r2, r3
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	4413      	add	r3, r2
 80099ac:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80099ae:	68fb      	ldr	r3, [r7, #12]
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3714      	adds	r7, #20
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr

080099bc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80099bc:	b480      	push	{r7}
 80099be:	b087      	sub	sp, #28
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	3301      	adds	r3, #1
 80099d2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80099da:	8a3b      	ldrh	r3, [r7, #16]
 80099dc:	021b      	lsls	r3, r3, #8
 80099de:	b21a      	sxth	r2, r3
 80099e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80099e4:	4313      	orrs	r3, r2
 80099e6:	b21b      	sxth	r3, r3
 80099e8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80099ea:	89fb      	ldrh	r3, [r7, #14]
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	371c      	adds	r7, #28
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr

080099f8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a02:	2300      	movs	r3, #0
 8009a04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	781b      	ldrb	r3, [r3, #0]
 8009a0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a0e:	2b40      	cmp	r3, #64	; 0x40
 8009a10:	d005      	beq.n	8009a1e <USBD_StdDevReq+0x26>
 8009a12:	2b40      	cmp	r3, #64	; 0x40
 8009a14:	d857      	bhi.n	8009ac6 <USBD_StdDevReq+0xce>
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d00f      	beq.n	8009a3a <USBD_StdDevReq+0x42>
 8009a1a:	2b20      	cmp	r3, #32
 8009a1c:	d153      	bne.n	8009ac6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	32ae      	adds	r2, #174	; 0xae
 8009a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a2c:	689b      	ldr	r3, [r3, #8]
 8009a2e:	6839      	ldr	r1, [r7, #0]
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	4798      	blx	r3
 8009a34:	4603      	mov	r3, r0
 8009a36:	73fb      	strb	r3, [r7, #15]
      break;
 8009a38:	e04a      	b.n	8009ad0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	785b      	ldrb	r3, [r3, #1]
 8009a3e:	2b09      	cmp	r3, #9
 8009a40:	d83b      	bhi.n	8009aba <USBD_StdDevReq+0xc2>
 8009a42:	a201      	add	r2, pc, #4	; (adr r2, 8009a48 <USBD_StdDevReq+0x50>)
 8009a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a48:	08009a9d 	.word	0x08009a9d
 8009a4c:	08009ab1 	.word	0x08009ab1
 8009a50:	08009abb 	.word	0x08009abb
 8009a54:	08009aa7 	.word	0x08009aa7
 8009a58:	08009abb 	.word	0x08009abb
 8009a5c:	08009a7b 	.word	0x08009a7b
 8009a60:	08009a71 	.word	0x08009a71
 8009a64:	08009abb 	.word	0x08009abb
 8009a68:	08009a93 	.word	0x08009a93
 8009a6c:	08009a85 	.word	0x08009a85
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009a70:	6839      	ldr	r1, [r7, #0]
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 fa3c 	bl	8009ef0 <USBD_GetDescriptor>
          break;
 8009a78:	e024      	b.n	8009ac4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009a7a:	6839      	ldr	r1, [r7, #0]
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f000 fba1 	bl	800a1c4 <USBD_SetAddress>
          break;
 8009a82:	e01f      	b.n	8009ac4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009a84:	6839      	ldr	r1, [r7, #0]
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 fbe0 	bl	800a24c <USBD_SetConfig>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	73fb      	strb	r3, [r7, #15]
          break;
 8009a90:	e018      	b.n	8009ac4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009a92:	6839      	ldr	r1, [r7, #0]
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 fc83 	bl	800a3a0 <USBD_GetConfig>
          break;
 8009a9a:	e013      	b.n	8009ac4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009a9c:	6839      	ldr	r1, [r7, #0]
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 fcb4 	bl	800a40c <USBD_GetStatus>
          break;
 8009aa4:	e00e      	b.n	8009ac4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009aa6:	6839      	ldr	r1, [r7, #0]
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f000 fce3 	bl	800a474 <USBD_SetFeature>
          break;
 8009aae:	e009      	b.n	8009ac4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009ab0:	6839      	ldr	r1, [r7, #0]
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f000 fd07 	bl	800a4c6 <USBD_ClrFeature>
          break;
 8009ab8:	e004      	b.n	8009ac4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009aba:	6839      	ldr	r1, [r7, #0]
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f000 fd5e 	bl	800a57e <USBD_CtlError>
          break;
 8009ac2:	bf00      	nop
      }
      break;
 8009ac4:	e004      	b.n	8009ad0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009ac6:	6839      	ldr	r1, [r7, #0]
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f000 fd58 	bl	800a57e <USBD_CtlError>
      break;
 8009ace:	bf00      	nop
  }

  return ret;
 8009ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3710      	adds	r7, #16
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
 8009ada:	bf00      	nop

08009adc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b084      	sub	sp, #16
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009af2:	2b40      	cmp	r3, #64	; 0x40
 8009af4:	d005      	beq.n	8009b02 <USBD_StdItfReq+0x26>
 8009af6:	2b40      	cmp	r3, #64	; 0x40
 8009af8:	d852      	bhi.n	8009ba0 <USBD_StdItfReq+0xc4>
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d001      	beq.n	8009b02 <USBD_StdItfReq+0x26>
 8009afe:	2b20      	cmp	r3, #32
 8009b00:	d14e      	bne.n	8009ba0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b08:	b2db      	uxtb	r3, r3
 8009b0a:	3b01      	subs	r3, #1
 8009b0c:	2b02      	cmp	r3, #2
 8009b0e:	d840      	bhi.n	8009b92 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	889b      	ldrh	r3, [r3, #4]
 8009b14:	b2db      	uxtb	r3, r3
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	d836      	bhi.n	8009b88 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	889b      	ldrh	r3, [r3, #4]
 8009b1e:	b2db      	uxtb	r3, r3
 8009b20:	4619      	mov	r1, r3
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f7ff fed9 	bl	80098da <USBD_CoreFindIF>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b2c:	7bbb      	ldrb	r3, [r7, #14]
 8009b2e:	2bff      	cmp	r3, #255	; 0xff
 8009b30:	d01d      	beq.n	8009b6e <USBD_StdItfReq+0x92>
 8009b32:	7bbb      	ldrb	r3, [r7, #14]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d11a      	bne.n	8009b6e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009b38:	7bba      	ldrb	r2, [r7, #14]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	32ae      	adds	r2, #174	; 0xae
 8009b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b42:	689b      	ldr	r3, [r3, #8]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d00f      	beq.n	8009b68 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009b48:	7bba      	ldrb	r2, [r7, #14]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009b50:	7bba      	ldrb	r2, [r7, #14]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	32ae      	adds	r2, #174	; 0xae
 8009b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	6839      	ldr	r1, [r7, #0]
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	4798      	blx	r3
 8009b62:	4603      	mov	r3, r0
 8009b64:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009b66:	e004      	b.n	8009b72 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009b68:	2303      	movs	r3, #3
 8009b6a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009b6c:	e001      	b.n	8009b72 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009b6e:	2303      	movs	r3, #3
 8009b70:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	88db      	ldrh	r3, [r3, #6]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d110      	bne.n	8009b9c <USBD_StdItfReq+0xc0>
 8009b7a:	7bfb      	ldrb	r3, [r7, #15]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d10d      	bne.n	8009b9c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 fdc7 	bl	800a714 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009b86:	e009      	b.n	8009b9c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009b88:	6839      	ldr	r1, [r7, #0]
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 fcf7 	bl	800a57e <USBD_CtlError>
          break;
 8009b90:	e004      	b.n	8009b9c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009b92:	6839      	ldr	r1, [r7, #0]
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f000 fcf2 	bl	800a57e <USBD_CtlError>
          break;
 8009b9a:	e000      	b.n	8009b9e <USBD_StdItfReq+0xc2>
          break;
 8009b9c:	bf00      	nop
      }
      break;
 8009b9e:	e004      	b.n	8009baa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009ba0:	6839      	ldr	r1, [r7, #0]
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 fceb 	bl	800a57e <USBD_CtlError>
      break;
 8009ba8:	bf00      	nop
  }

  return ret;
 8009baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3710      	adds	r7, #16
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b084      	sub	sp, #16
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	889b      	ldrh	r3, [r3, #4]
 8009bc6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009bd0:	2b40      	cmp	r3, #64	; 0x40
 8009bd2:	d007      	beq.n	8009be4 <USBD_StdEPReq+0x30>
 8009bd4:	2b40      	cmp	r3, #64	; 0x40
 8009bd6:	f200 817f 	bhi.w	8009ed8 <USBD_StdEPReq+0x324>
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d02a      	beq.n	8009c34 <USBD_StdEPReq+0x80>
 8009bde:	2b20      	cmp	r3, #32
 8009be0:	f040 817a 	bne.w	8009ed8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009be4:	7bbb      	ldrb	r3, [r7, #14]
 8009be6:	4619      	mov	r1, r3
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f7ff fe83 	bl	80098f4 <USBD_CoreFindEP>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009bf2:	7b7b      	ldrb	r3, [r7, #13]
 8009bf4:	2bff      	cmp	r3, #255	; 0xff
 8009bf6:	f000 8174 	beq.w	8009ee2 <USBD_StdEPReq+0x32e>
 8009bfa:	7b7b      	ldrb	r3, [r7, #13]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	f040 8170 	bne.w	8009ee2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009c02:	7b7a      	ldrb	r2, [r7, #13]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009c0a:	7b7a      	ldrb	r2, [r7, #13]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	32ae      	adds	r2, #174	; 0xae
 8009c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	f000 8163 	beq.w	8009ee2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009c1c:	7b7a      	ldrb	r2, [r7, #13]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	32ae      	adds	r2, #174	; 0xae
 8009c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c26:	689b      	ldr	r3, [r3, #8]
 8009c28:	6839      	ldr	r1, [r7, #0]
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	4798      	blx	r3
 8009c2e:	4603      	mov	r3, r0
 8009c30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009c32:	e156      	b.n	8009ee2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	785b      	ldrb	r3, [r3, #1]
 8009c38:	2b03      	cmp	r3, #3
 8009c3a:	d008      	beq.n	8009c4e <USBD_StdEPReq+0x9a>
 8009c3c:	2b03      	cmp	r3, #3
 8009c3e:	f300 8145 	bgt.w	8009ecc <USBD_StdEPReq+0x318>
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	f000 809b 	beq.w	8009d7e <USBD_StdEPReq+0x1ca>
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d03c      	beq.n	8009cc6 <USBD_StdEPReq+0x112>
 8009c4c:	e13e      	b.n	8009ecc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c54:	b2db      	uxtb	r3, r3
 8009c56:	2b02      	cmp	r3, #2
 8009c58:	d002      	beq.n	8009c60 <USBD_StdEPReq+0xac>
 8009c5a:	2b03      	cmp	r3, #3
 8009c5c:	d016      	beq.n	8009c8c <USBD_StdEPReq+0xd8>
 8009c5e:	e02c      	b.n	8009cba <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c60:	7bbb      	ldrb	r3, [r7, #14]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d00d      	beq.n	8009c82 <USBD_StdEPReq+0xce>
 8009c66:	7bbb      	ldrb	r3, [r7, #14]
 8009c68:	2b80      	cmp	r3, #128	; 0x80
 8009c6a:	d00a      	beq.n	8009c82 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009c6c:	7bbb      	ldrb	r3, [r7, #14]
 8009c6e:	4619      	mov	r1, r3
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f001 f947 	bl	800af04 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c76:	2180      	movs	r1, #128	; 0x80
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f001 f943 	bl	800af04 <USBD_LL_StallEP>
 8009c7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009c80:	e020      	b.n	8009cc4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009c82:	6839      	ldr	r1, [r7, #0]
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 fc7a 	bl	800a57e <USBD_CtlError>
              break;
 8009c8a:	e01b      	b.n	8009cc4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	885b      	ldrh	r3, [r3, #2]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d10e      	bne.n	8009cb2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009c94:	7bbb      	ldrb	r3, [r7, #14]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d00b      	beq.n	8009cb2 <USBD_StdEPReq+0xfe>
 8009c9a:	7bbb      	ldrb	r3, [r7, #14]
 8009c9c:	2b80      	cmp	r3, #128	; 0x80
 8009c9e:	d008      	beq.n	8009cb2 <USBD_StdEPReq+0xfe>
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	88db      	ldrh	r3, [r3, #6]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d104      	bne.n	8009cb2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ca8:	7bbb      	ldrb	r3, [r7, #14]
 8009caa:	4619      	mov	r1, r3
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f001 f929 	bl	800af04 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 fd2e 	bl	800a714 <USBD_CtlSendStatus>

              break;
 8009cb8:	e004      	b.n	8009cc4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009cba:	6839      	ldr	r1, [r7, #0]
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 fc5e 	bl	800a57e <USBD_CtlError>
              break;
 8009cc2:	bf00      	nop
          }
          break;
 8009cc4:	e107      	b.n	8009ed6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ccc:	b2db      	uxtb	r3, r3
 8009cce:	2b02      	cmp	r3, #2
 8009cd0:	d002      	beq.n	8009cd8 <USBD_StdEPReq+0x124>
 8009cd2:	2b03      	cmp	r3, #3
 8009cd4:	d016      	beq.n	8009d04 <USBD_StdEPReq+0x150>
 8009cd6:	e04b      	b.n	8009d70 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009cd8:	7bbb      	ldrb	r3, [r7, #14]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d00d      	beq.n	8009cfa <USBD_StdEPReq+0x146>
 8009cde:	7bbb      	ldrb	r3, [r7, #14]
 8009ce0:	2b80      	cmp	r3, #128	; 0x80
 8009ce2:	d00a      	beq.n	8009cfa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ce4:	7bbb      	ldrb	r3, [r7, #14]
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f001 f90b 	bl	800af04 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009cee:	2180      	movs	r1, #128	; 0x80
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f001 f907 	bl	800af04 <USBD_LL_StallEP>
 8009cf6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009cf8:	e040      	b.n	8009d7c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009cfa:	6839      	ldr	r1, [r7, #0]
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f000 fc3e 	bl	800a57e <USBD_CtlError>
              break;
 8009d02:	e03b      	b.n	8009d7c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	885b      	ldrh	r3, [r3, #2]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d136      	bne.n	8009d7a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009d0c:	7bbb      	ldrb	r3, [r7, #14]
 8009d0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d004      	beq.n	8009d20 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009d16:	7bbb      	ldrb	r3, [r7, #14]
 8009d18:	4619      	mov	r1, r3
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f001 f911 	bl	800af42 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 fcf7 	bl	800a714 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009d26:	7bbb      	ldrb	r3, [r7, #14]
 8009d28:	4619      	mov	r1, r3
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f7ff fde2 	bl	80098f4 <USBD_CoreFindEP>
 8009d30:	4603      	mov	r3, r0
 8009d32:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d34:	7b7b      	ldrb	r3, [r7, #13]
 8009d36:	2bff      	cmp	r3, #255	; 0xff
 8009d38:	d01f      	beq.n	8009d7a <USBD_StdEPReq+0x1c6>
 8009d3a:	7b7b      	ldrb	r3, [r7, #13]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d11c      	bne.n	8009d7a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009d40:	7b7a      	ldrb	r2, [r7, #13]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009d48:	7b7a      	ldrb	r2, [r7, #13]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	32ae      	adds	r2, #174	; 0xae
 8009d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d52:	689b      	ldr	r3, [r3, #8]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d010      	beq.n	8009d7a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009d58:	7b7a      	ldrb	r2, [r7, #13]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	32ae      	adds	r2, #174	; 0xae
 8009d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d62:	689b      	ldr	r3, [r3, #8]
 8009d64:	6839      	ldr	r1, [r7, #0]
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	4798      	blx	r3
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009d6e:	e004      	b.n	8009d7a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009d70:	6839      	ldr	r1, [r7, #0]
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 fc03 	bl	800a57e <USBD_CtlError>
              break;
 8009d78:	e000      	b.n	8009d7c <USBD_StdEPReq+0x1c8>
              break;
 8009d7a:	bf00      	nop
          }
          break;
 8009d7c:	e0ab      	b.n	8009ed6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d84:	b2db      	uxtb	r3, r3
 8009d86:	2b02      	cmp	r3, #2
 8009d88:	d002      	beq.n	8009d90 <USBD_StdEPReq+0x1dc>
 8009d8a:	2b03      	cmp	r3, #3
 8009d8c:	d032      	beq.n	8009df4 <USBD_StdEPReq+0x240>
 8009d8e:	e097      	b.n	8009ec0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d90:	7bbb      	ldrb	r3, [r7, #14]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d007      	beq.n	8009da6 <USBD_StdEPReq+0x1f2>
 8009d96:	7bbb      	ldrb	r3, [r7, #14]
 8009d98:	2b80      	cmp	r3, #128	; 0x80
 8009d9a:	d004      	beq.n	8009da6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009d9c:	6839      	ldr	r1, [r7, #0]
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 fbed 	bl	800a57e <USBD_CtlError>
                break;
 8009da4:	e091      	b.n	8009eca <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009da6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	da0b      	bge.n	8009dc6 <USBD_StdEPReq+0x212>
 8009dae:	7bbb      	ldrb	r3, [r7, #14]
 8009db0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009db4:	4613      	mov	r3, r2
 8009db6:	009b      	lsls	r3, r3, #2
 8009db8:	4413      	add	r3, r2
 8009dba:	009b      	lsls	r3, r3, #2
 8009dbc:	3310      	adds	r3, #16
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	4413      	add	r3, r2
 8009dc2:	3304      	adds	r3, #4
 8009dc4:	e00b      	b.n	8009dde <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009dc6:	7bbb      	ldrb	r3, [r7, #14]
 8009dc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009dcc:	4613      	mov	r3, r2
 8009dce:	009b      	lsls	r3, r3, #2
 8009dd0:	4413      	add	r3, r2
 8009dd2:	009b      	lsls	r3, r3, #2
 8009dd4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009dd8:	687a      	ldr	r2, [r7, #4]
 8009dda:	4413      	add	r3, r2
 8009ddc:	3304      	adds	r3, #4
 8009dde:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	2200      	movs	r2, #0
 8009de4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	2202      	movs	r2, #2
 8009dea:	4619      	mov	r1, r3
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 fc37 	bl	800a660 <USBD_CtlSendData>
              break;
 8009df2:	e06a      	b.n	8009eca <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009df4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	da11      	bge.n	8009e20 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009dfc:	7bbb      	ldrb	r3, [r7, #14]
 8009dfe:	f003 020f 	and.w	r2, r3, #15
 8009e02:	6879      	ldr	r1, [r7, #4]
 8009e04:	4613      	mov	r3, r2
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	4413      	add	r3, r2
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	440b      	add	r3, r1
 8009e0e:	3324      	adds	r3, #36	; 0x24
 8009e10:	881b      	ldrh	r3, [r3, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d117      	bne.n	8009e46 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009e16:	6839      	ldr	r1, [r7, #0]
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f000 fbb0 	bl	800a57e <USBD_CtlError>
                  break;
 8009e1e:	e054      	b.n	8009eca <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009e20:	7bbb      	ldrb	r3, [r7, #14]
 8009e22:	f003 020f 	and.w	r2, r3, #15
 8009e26:	6879      	ldr	r1, [r7, #4]
 8009e28:	4613      	mov	r3, r2
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	4413      	add	r3, r2
 8009e2e:	009b      	lsls	r3, r3, #2
 8009e30:	440b      	add	r3, r1
 8009e32:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009e36:	881b      	ldrh	r3, [r3, #0]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d104      	bne.n	8009e46 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009e3c:	6839      	ldr	r1, [r7, #0]
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 fb9d 	bl	800a57e <USBD_CtlError>
                  break;
 8009e44:	e041      	b.n	8009eca <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	da0b      	bge.n	8009e66 <USBD_StdEPReq+0x2b2>
 8009e4e:	7bbb      	ldrb	r3, [r7, #14]
 8009e50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e54:	4613      	mov	r3, r2
 8009e56:	009b      	lsls	r3, r3, #2
 8009e58:	4413      	add	r3, r2
 8009e5a:	009b      	lsls	r3, r3, #2
 8009e5c:	3310      	adds	r3, #16
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	4413      	add	r3, r2
 8009e62:	3304      	adds	r3, #4
 8009e64:	e00b      	b.n	8009e7e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e66:	7bbb      	ldrb	r3, [r7, #14]
 8009e68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e6c:	4613      	mov	r3, r2
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	4413      	add	r3, r2
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009e78:	687a      	ldr	r2, [r7, #4]
 8009e7a:	4413      	add	r3, r2
 8009e7c:	3304      	adds	r3, #4
 8009e7e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009e80:	7bbb      	ldrb	r3, [r7, #14]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d002      	beq.n	8009e8c <USBD_StdEPReq+0x2d8>
 8009e86:	7bbb      	ldrb	r3, [r7, #14]
 8009e88:	2b80      	cmp	r3, #128	; 0x80
 8009e8a:	d103      	bne.n	8009e94 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	601a      	str	r2, [r3, #0]
 8009e92:	e00e      	b.n	8009eb2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009e94:	7bbb      	ldrb	r3, [r7, #14]
 8009e96:	4619      	mov	r1, r3
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f001 f871 	bl	800af80 <USBD_LL_IsStallEP>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d003      	beq.n	8009eac <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	601a      	str	r2, [r3, #0]
 8009eaa:	e002      	b.n	8009eb2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	2202      	movs	r2, #2
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f000 fbd1 	bl	800a660 <USBD_CtlSendData>
              break;
 8009ebe:	e004      	b.n	8009eca <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009ec0:	6839      	ldr	r1, [r7, #0]
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f000 fb5b 	bl	800a57e <USBD_CtlError>
              break;
 8009ec8:	bf00      	nop
          }
          break;
 8009eca:	e004      	b.n	8009ed6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009ecc:	6839      	ldr	r1, [r7, #0]
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 fb55 	bl	800a57e <USBD_CtlError>
          break;
 8009ed4:	bf00      	nop
      }
      break;
 8009ed6:	e005      	b.n	8009ee4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009ed8:	6839      	ldr	r1, [r7, #0]
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 fb4f 	bl	800a57e <USBD_CtlError>
      break;
 8009ee0:	e000      	b.n	8009ee4 <USBD_StdEPReq+0x330>
      break;
 8009ee2:	bf00      	nop
  }

  return ret;
 8009ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3710      	adds	r7, #16
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
	...

08009ef0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b084      	sub	sp, #16
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009efa:	2300      	movs	r3, #0
 8009efc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009efe:	2300      	movs	r3, #0
 8009f00:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009f02:	2300      	movs	r3, #0
 8009f04:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	885b      	ldrh	r3, [r3, #2]
 8009f0a:	0a1b      	lsrs	r3, r3, #8
 8009f0c:	b29b      	uxth	r3, r3
 8009f0e:	3b01      	subs	r3, #1
 8009f10:	2b06      	cmp	r3, #6
 8009f12:	f200 8128 	bhi.w	800a166 <USBD_GetDescriptor+0x276>
 8009f16:	a201      	add	r2, pc, #4	; (adr r2, 8009f1c <USBD_GetDescriptor+0x2c>)
 8009f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f1c:	08009f39 	.word	0x08009f39
 8009f20:	08009f51 	.word	0x08009f51
 8009f24:	08009f91 	.word	0x08009f91
 8009f28:	0800a167 	.word	0x0800a167
 8009f2c:	0800a167 	.word	0x0800a167
 8009f30:	0800a107 	.word	0x0800a107
 8009f34:	0800a133 	.word	0x0800a133
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	7c12      	ldrb	r2, [r2, #16]
 8009f44:	f107 0108 	add.w	r1, r7, #8
 8009f48:	4610      	mov	r0, r2
 8009f4a:	4798      	blx	r3
 8009f4c:	60f8      	str	r0, [r7, #12]
      break;
 8009f4e:	e112      	b.n	800a176 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	7c1b      	ldrb	r3, [r3, #16]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d10d      	bne.n	8009f74 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f60:	f107 0208 	add.w	r2, r7, #8
 8009f64:	4610      	mov	r0, r2
 8009f66:	4798      	blx	r3
 8009f68:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	2202      	movs	r2, #2
 8009f70:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009f72:	e100      	b.n	800a176 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f7c:	f107 0208 	add.w	r2, r7, #8
 8009f80:	4610      	mov	r0, r2
 8009f82:	4798      	blx	r3
 8009f84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	3301      	adds	r3, #1
 8009f8a:	2202      	movs	r2, #2
 8009f8c:	701a      	strb	r2, [r3, #0]
      break;
 8009f8e:	e0f2      	b.n	800a176 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	885b      	ldrh	r3, [r3, #2]
 8009f94:	b2db      	uxtb	r3, r3
 8009f96:	2b05      	cmp	r3, #5
 8009f98:	f200 80ac 	bhi.w	800a0f4 <USBD_GetDescriptor+0x204>
 8009f9c:	a201      	add	r2, pc, #4	; (adr r2, 8009fa4 <USBD_GetDescriptor+0xb4>)
 8009f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fa2:	bf00      	nop
 8009fa4:	08009fbd 	.word	0x08009fbd
 8009fa8:	08009ff1 	.word	0x08009ff1
 8009fac:	0800a025 	.word	0x0800a025
 8009fb0:	0800a059 	.word	0x0800a059
 8009fb4:	0800a08d 	.word	0x0800a08d
 8009fb8:	0800a0c1 	.word	0x0800a0c1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d00b      	beq.n	8009fe0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fce:	685b      	ldr	r3, [r3, #4]
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	7c12      	ldrb	r2, [r2, #16]
 8009fd4:	f107 0108 	add.w	r1, r7, #8
 8009fd8:	4610      	mov	r0, r2
 8009fda:	4798      	blx	r3
 8009fdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fde:	e091      	b.n	800a104 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fe0:	6839      	ldr	r1, [r7, #0]
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f000 facb 	bl	800a57e <USBD_CtlError>
            err++;
 8009fe8:	7afb      	ldrb	r3, [r7, #11]
 8009fea:	3301      	adds	r3, #1
 8009fec:	72fb      	strb	r3, [r7, #11]
          break;
 8009fee:	e089      	b.n	800a104 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ff6:	689b      	ldr	r3, [r3, #8]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d00b      	beq.n	800a014 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	687a      	ldr	r2, [r7, #4]
 800a006:	7c12      	ldrb	r2, [r2, #16]
 800a008:	f107 0108 	add.w	r1, r7, #8
 800a00c:	4610      	mov	r0, r2
 800a00e:	4798      	blx	r3
 800a010:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a012:	e077      	b.n	800a104 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a014:	6839      	ldr	r1, [r7, #0]
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f000 fab1 	bl	800a57e <USBD_CtlError>
            err++;
 800a01c:	7afb      	ldrb	r3, [r7, #11]
 800a01e:	3301      	adds	r3, #1
 800a020:	72fb      	strb	r3, [r7, #11]
          break;
 800a022:	e06f      	b.n	800a104 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a02a:	68db      	ldr	r3, [r3, #12]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d00b      	beq.n	800a048 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a036:	68db      	ldr	r3, [r3, #12]
 800a038:	687a      	ldr	r2, [r7, #4]
 800a03a:	7c12      	ldrb	r2, [r2, #16]
 800a03c:	f107 0108 	add.w	r1, r7, #8
 800a040:	4610      	mov	r0, r2
 800a042:	4798      	blx	r3
 800a044:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a046:	e05d      	b.n	800a104 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a048:	6839      	ldr	r1, [r7, #0]
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f000 fa97 	bl	800a57e <USBD_CtlError>
            err++;
 800a050:	7afb      	ldrb	r3, [r7, #11]
 800a052:	3301      	adds	r3, #1
 800a054:	72fb      	strb	r3, [r7, #11]
          break;
 800a056:	e055      	b.n	800a104 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a05e:	691b      	ldr	r3, [r3, #16]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d00b      	beq.n	800a07c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a06a:	691b      	ldr	r3, [r3, #16]
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	7c12      	ldrb	r2, [r2, #16]
 800a070:	f107 0108 	add.w	r1, r7, #8
 800a074:	4610      	mov	r0, r2
 800a076:	4798      	blx	r3
 800a078:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a07a:	e043      	b.n	800a104 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a07c:	6839      	ldr	r1, [r7, #0]
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f000 fa7d 	bl	800a57e <USBD_CtlError>
            err++;
 800a084:	7afb      	ldrb	r3, [r7, #11]
 800a086:	3301      	adds	r3, #1
 800a088:	72fb      	strb	r3, [r7, #11]
          break;
 800a08a:	e03b      	b.n	800a104 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a092:	695b      	ldr	r3, [r3, #20]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d00b      	beq.n	800a0b0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a09e:	695b      	ldr	r3, [r3, #20]
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	7c12      	ldrb	r2, [r2, #16]
 800a0a4:	f107 0108 	add.w	r1, r7, #8
 800a0a8:	4610      	mov	r0, r2
 800a0aa:	4798      	blx	r3
 800a0ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0ae:	e029      	b.n	800a104 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0b0:	6839      	ldr	r1, [r7, #0]
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 fa63 	bl	800a57e <USBD_CtlError>
            err++;
 800a0b8:	7afb      	ldrb	r3, [r7, #11]
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	72fb      	strb	r3, [r7, #11]
          break;
 800a0be:	e021      	b.n	800a104 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0c6:	699b      	ldr	r3, [r3, #24]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d00b      	beq.n	800a0e4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0d2:	699b      	ldr	r3, [r3, #24]
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	7c12      	ldrb	r2, [r2, #16]
 800a0d8:	f107 0108 	add.w	r1, r7, #8
 800a0dc:	4610      	mov	r0, r2
 800a0de:	4798      	blx	r3
 800a0e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0e2:	e00f      	b.n	800a104 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0e4:	6839      	ldr	r1, [r7, #0]
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f000 fa49 	bl	800a57e <USBD_CtlError>
            err++;
 800a0ec:	7afb      	ldrb	r3, [r7, #11]
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	72fb      	strb	r3, [r7, #11]
          break;
 800a0f2:	e007      	b.n	800a104 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a0f4:	6839      	ldr	r1, [r7, #0]
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f000 fa41 	bl	800a57e <USBD_CtlError>
          err++;
 800a0fc:	7afb      	ldrb	r3, [r7, #11]
 800a0fe:	3301      	adds	r3, #1
 800a100:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a102:	bf00      	nop
      }
      break;
 800a104:	e037      	b.n	800a176 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	7c1b      	ldrb	r3, [r3, #16]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d109      	bne.n	800a122 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a116:	f107 0208 	add.w	r2, r7, #8
 800a11a:	4610      	mov	r0, r2
 800a11c:	4798      	blx	r3
 800a11e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a120:	e029      	b.n	800a176 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a122:	6839      	ldr	r1, [r7, #0]
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f000 fa2a 	bl	800a57e <USBD_CtlError>
        err++;
 800a12a:	7afb      	ldrb	r3, [r7, #11]
 800a12c:	3301      	adds	r3, #1
 800a12e:	72fb      	strb	r3, [r7, #11]
      break;
 800a130:	e021      	b.n	800a176 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	7c1b      	ldrb	r3, [r3, #16]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d10d      	bne.n	800a156 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a142:	f107 0208 	add.w	r2, r7, #8
 800a146:	4610      	mov	r0, r2
 800a148:	4798      	blx	r3
 800a14a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	3301      	adds	r3, #1
 800a150:	2207      	movs	r2, #7
 800a152:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a154:	e00f      	b.n	800a176 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a156:	6839      	ldr	r1, [r7, #0]
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f000 fa10 	bl	800a57e <USBD_CtlError>
        err++;
 800a15e:	7afb      	ldrb	r3, [r7, #11]
 800a160:	3301      	adds	r3, #1
 800a162:	72fb      	strb	r3, [r7, #11]
      break;
 800a164:	e007      	b.n	800a176 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a166:	6839      	ldr	r1, [r7, #0]
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f000 fa08 	bl	800a57e <USBD_CtlError>
      err++;
 800a16e:	7afb      	ldrb	r3, [r7, #11]
 800a170:	3301      	adds	r3, #1
 800a172:	72fb      	strb	r3, [r7, #11]
      break;
 800a174:	bf00      	nop
  }

  if (err != 0U)
 800a176:	7afb      	ldrb	r3, [r7, #11]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d11e      	bne.n	800a1ba <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	88db      	ldrh	r3, [r3, #6]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d016      	beq.n	800a1b2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a184:	893b      	ldrh	r3, [r7, #8]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d00e      	beq.n	800a1a8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	88da      	ldrh	r2, [r3, #6]
 800a18e:	893b      	ldrh	r3, [r7, #8]
 800a190:	4293      	cmp	r3, r2
 800a192:	bf28      	it	cs
 800a194:	4613      	movcs	r3, r2
 800a196:	b29b      	uxth	r3, r3
 800a198:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a19a:	893b      	ldrh	r3, [r7, #8]
 800a19c:	461a      	mov	r2, r3
 800a19e:	68f9      	ldr	r1, [r7, #12]
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f000 fa5d 	bl	800a660 <USBD_CtlSendData>
 800a1a6:	e009      	b.n	800a1bc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a1a8:	6839      	ldr	r1, [r7, #0]
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f000 f9e7 	bl	800a57e <USBD_CtlError>
 800a1b0:	e004      	b.n	800a1bc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f000 faae 	bl	800a714 <USBD_CtlSendStatus>
 800a1b8:	e000      	b.n	800a1bc <USBD_GetDescriptor+0x2cc>
    return;
 800a1ba:	bf00      	nop
  }
}
 800a1bc:	3710      	adds	r7, #16
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
 800a1c2:	bf00      	nop

0800a1c4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b084      	sub	sp, #16
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	889b      	ldrh	r3, [r3, #4]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d131      	bne.n	800a23a <USBD_SetAddress+0x76>
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	88db      	ldrh	r3, [r3, #6]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d12d      	bne.n	800a23a <USBD_SetAddress+0x76>
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	885b      	ldrh	r3, [r3, #2]
 800a1e2:	2b7f      	cmp	r3, #127	; 0x7f
 800a1e4:	d829      	bhi.n	800a23a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	885b      	ldrh	r3, [r3, #2]
 800a1ea:	b2db      	uxtb	r3, r3
 800a1ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1f0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1f8:	b2db      	uxtb	r3, r3
 800a1fa:	2b03      	cmp	r3, #3
 800a1fc:	d104      	bne.n	800a208 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a1fe:	6839      	ldr	r1, [r7, #0]
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f000 f9bc 	bl	800a57e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a206:	e01d      	b.n	800a244 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	7bfa      	ldrb	r2, [r7, #15]
 800a20c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a210:	7bfb      	ldrb	r3, [r7, #15]
 800a212:	4619      	mov	r1, r3
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f000 fedf 	bl	800afd8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 fa7a 	bl	800a714 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a220:	7bfb      	ldrb	r3, [r7, #15]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d004      	beq.n	800a230 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2202      	movs	r2, #2
 800a22a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a22e:	e009      	b.n	800a244 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2201      	movs	r2, #1
 800a234:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a238:	e004      	b.n	800a244 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a23a:	6839      	ldr	r1, [r7, #0]
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f000 f99e 	bl	800a57e <USBD_CtlError>
  }
}
 800a242:	bf00      	nop
 800a244:	bf00      	nop
 800a246:	3710      	adds	r7, #16
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b084      	sub	sp, #16
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a256:	2300      	movs	r3, #0
 800a258:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	885b      	ldrh	r3, [r3, #2]
 800a25e:	b2da      	uxtb	r2, r3
 800a260:	4b4e      	ldr	r3, [pc, #312]	; (800a39c <USBD_SetConfig+0x150>)
 800a262:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a264:	4b4d      	ldr	r3, [pc, #308]	; (800a39c <USBD_SetConfig+0x150>)
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d905      	bls.n	800a278 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a26c:	6839      	ldr	r1, [r7, #0]
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f000 f985 	bl	800a57e <USBD_CtlError>
    return USBD_FAIL;
 800a274:	2303      	movs	r3, #3
 800a276:	e08c      	b.n	800a392 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	2b02      	cmp	r3, #2
 800a282:	d002      	beq.n	800a28a <USBD_SetConfig+0x3e>
 800a284:	2b03      	cmp	r3, #3
 800a286:	d029      	beq.n	800a2dc <USBD_SetConfig+0x90>
 800a288:	e075      	b.n	800a376 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a28a:	4b44      	ldr	r3, [pc, #272]	; (800a39c <USBD_SetConfig+0x150>)
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d020      	beq.n	800a2d4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a292:	4b42      	ldr	r3, [pc, #264]	; (800a39c <USBD_SetConfig+0x150>)
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	461a      	mov	r2, r3
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a29c:	4b3f      	ldr	r3, [pc, #252]	; (800a39c <USBD_SetConfig+0x150>)
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f7fe ffe7 	bl	8009276 <USBD_SetClassConfig>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a2ac:	7bfb      	ldrb	r3, [r7, #15]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d008      	beq.n	800a2c4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a2b2:	6839      	ldr	r1, [r7, #0]
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f000 f962 	bl	800a57e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2202      	movs	r2, #2
 800a2be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a2c2:	e065      	b.n	800a390 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f000 fa25 	bl	800a714 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2203      	movs	r2, #3
 800a2ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a2d2:	e05d      	b.n	800a390 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f000 fa1d 	bl	800a714 <USBD_CtlSendStatus>
      break;
 800a2da:	e059      	b.n	800a390 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a2dc:	4b2f      	ldr	r3, [pc, #188]	; (800a39c <USBD_SetConfig+0x150>)
 800a2de:	781b      	ldrb	r3, [r3, #0]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d112      	bne.n	800a30a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2202      	movs	r2, #2
 800a2e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a2ec:	4b2b      	ldr	r3, [pc, #172]	; (800a39c <USBD_SetConfig+0x150>)
 800a2ee:	781b      	ldrb	r3, [r3, #0]
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a2f6:	4b29      	ldr	r3, [pc, #164]	; (800a39c <USBD_SetConfig+0x150>)
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f7fe ffd6 	bl	80092ae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f000 fa06 	bl	800a714 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a308:	e042      	b.n	800a390 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a30a:	4b24      	ldr	r3, [pc, #144]	; (800a39c <USBD_SetConfig+0x150>)
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	461a      	mov	r2, r3
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	429a      	cmp	r2, r3
 800a316:	d02a      	beq.n	800a36e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	685b      	ldr	r3, [r3, #4]
 800a31c:	b2db      	uxtb	r3, r3
 800a31e:	4619      	mov	r1, r3
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f7fe ffc4 	bl	80092ae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a326:	4b1d      	ldr	r3, [pc, #116]	; (800a39c <USBD_SetConfig+0x150>)
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	461a      	mov	r2, r3
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a330:	4b1a      	ldr	r3, [pc, #104]	; (800a39c <USBD_SetConfig+0x150>)
 800a332:	781b      	ldrb	r3, [r3, #0]
 800a334:	4619      	mov	r1, r3
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f7fe ff9d 	bl	8009276 <USBD_SetClassConfig>
 800a33c:	4603      	mov	r3, r0
 800a33e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a340:	7bfb      	ldrb	r3, [r7, #15]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d00f      	beq.n	800a366 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a346:	6839      	ldr	r1, [r7, #0]
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f000 f918 	bl	800a57e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	685b      	ldr	r3, [r3, #4]
 800a352:	b2db      	uxtb	r3, r3
 800a354:	4619      	mov	r1, r3
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f7fe ffa9 	bl	80092ae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2202      	movs	r2, #2
 800a360:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a364:	e014      	b.n	800a390 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 f9d4 	bl	800a714 <USBD_CtlSendStatus>
      break;
 800a36c:	e010      	b.n	800a390 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 f9d0 	bl	800a714 <USBD_CtlSendStatus>
      break;
 800a374:	e00c      	b.n	800a390 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a376:	6839      	ldr	r1, [r7, #0]
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f000 f900 	bl	800a57e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a37e:	4b07      	ldr	r3, [pc, #28]	; (800a39c <USBD_SetConfig+0x150>)
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	4619      	mov	r1, r3
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f7fe ff92 	bl	80092ae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a38a:	2303      	movs	r3, #3
 800a38c:	73fb      	strb	r3, [r7, #15]
      break;
 800a38e:	bf00      	nop
  }

  return ret;
 800a390:	7bfb      	ldrb	r3, [r7, #15]
}
 800a392:	4618      	mov	r0, r3
 800a394:	3710      	adds	r7, #16
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
 800a39a:	bf00      	nop
 800a39c:	20000430 	.word	0x20000430

0800a3a0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b082      	sub	sp, #8
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	88db      	ldrh	r3, [r3, #6]
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	d004      	beq.n	800a3bc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a3b2:	6839      	ldr	r1, [r7, #0]
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f000 f8e2 	bl	800a57e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a3ba:	e023      	b.n	800a404 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3c2:	b2db      	uxtb	r3, r3
 800a3c4:	2b02      	cmp	r3, #2
 800a3c6:	dc02      	bgt.n	800a3ce <USBD_GetConfig+0x2e>
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	dc03      	bgt.n	800a3d4 <USBD_GetConfig+0x34>
 800a3cc:	e015      	b.n	800a3fa <USBD_GetConfig+0x5a>
 800a3ce:	2b03      	cmp	r3, #3
 800a3d0:	d00b      	beq.n	800a3ea <USBD_GetConfig+0x4a>
 800a3d2:	e012      	b.n	800a3fa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	3308      	adds	r3, #8
 800a3de:	2201      	movs	r2, #1
 800a3e0:	4619      	mov	r1, r3
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f000 f93c 	bl	800a660 <USBD_CtlSendData>
        break;
 800a3e8:	e00c      	b.n	800a404 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	3304      	adds	r3, #4
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 f934 	bl	800a660 <USBD_CtlSendData>
        break;
 800a3f8:	e004      	b.n	800a404 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a3fa:	6839      	ldr	r1, [r7, #0]
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f000 f8be 	bl	800a57e <USBD_CtlError>
        break;
 800a402:	bf00      	nop
}
 800a404:	bf00      	nop
 800a406:	3708      	adds	r7, #8
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}

0800a40c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a41c:	b2db      	uxtb	r3, r3
 800a41e:	3b01      	subs	r3, #1
 800a420:	2b02      	cmp	r3, #2
 800a422:	d81e      	bhi.n	800a462 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	88db      	ldrh	r3, [r3, #6]
 800a428:	2b02      	cmp	r3, #2
 800a42a:	d004      	beq.n	800a436 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a42c:	6839      	ldr	r1, [r7, #0]
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f000 f8a5 	bl	800a57e <USBD_CtlError>
        break;
 800a434:	e01a      	b.n	800a46c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2201      	movs	r2, #1
 800a43a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a442:	2b00      	cmp	r3, #0
 800a444:	d005      	beq.n	800a452 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	68db      	ldr	r3, [r3, #12]
 800a44a:	f043 0202 	orr.w	r2, r3, #2
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	330c      	adds	r3, #12
 800a456:	2202      	movs	r2, #2
 800a458:	4619      	mov	r1, r3
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f000 f900 	bl	800a660 <USBD_CtlSendData>
      break;
 800a460:	e004      	b.n	800a46c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a462:	6839      	ldr	r1, [r7, #0]
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f000 f88a 	bl	800a57e <USBD_CtlError>
      break;
 800a46a:	bf00      	nop
  }
}
 800a46c:	bf00      	nop
 800a46e:	3708      	adds	r7, #8
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	885b      	ldrh	r3, [r3, #2]
 800a482:	2b01      	cmp	r3, #1
 800a484:	d107      	bne.n	800a496 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2201      	movs	r2, #1
 800a48a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f000 f940 	bl	800a714 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a494:	e013      	b.n	800a4be <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	885b      	ldrh	r3, [r3, #2]
 800a49a:	2b02      	cmp	r3, #2
 800a49c:	d10b      	bne.n	800a4b6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	889b      	ldrh	r3, [r3, #4]
 800a4a2:	0a1b      	lsrs	r3, r3, #8
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	b2da      	uxtb	r2, r3
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f000 f930 	bl	800a714 <USBD_CtlSendStatus>
}
 800a4b4:	e003      	b.n	800a4be <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a4b6:	6839      	ldr	r1, [r7, #0]
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f000 f860 	bl	800a57e <USBD_CtlError>
}
 800a4be:	bf00      	nop
 800a4c0:	3708      	adds	r7, #8
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}

0800a4c6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4c6:	b580      	push	{r7, lr}
 800a4c8:	b082      	sub	sp, #8
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
 800a4ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4d6:	b2db      	uxtb	r3, r3
 800a4d8:	3b01      	subs	r3, #1
 800a4da:	2b02      	cmp	r3, #2
 800a4dc:	d80b      	bhi.n	800a4f6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	885b      	ldrh	r3, [r3, #2]
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d10c      	bne.n	800a500 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 f910 	bl	800a714 <USBD_CtlSendStatus>
      }
      break;
 800a4f4:	e004      	b.n	800a500 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a4f6:	6839      	ldr	r1, [r7, #0]
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f000 f840 	bl	800a57e <USBD_CtlError>
      break;
 800a4fe:	e000      	b.n	800a502 <USBD_ClrFeature+0x3c>
      break;
 800a500:	bf00      	nop
  }
}
 800a502:	bf00      	nop
 800a504:	3708      	adds	r7, #8
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}

0800a50a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a50a:	b580      	push	{r7, lr}
 800a50c:	b084      	sub	sp, #16
 800a50e:	af00      	add	r7, sp, #0
 800a510:	6078      	str	r0, [r7, #4]
 800a512:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	781a      	ldrb	r2, [r3, #0]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	3301      	adds	r3, #1
 800a524:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	781a      	ldrb	r2, [r3, #0]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	3301      	adds	r3, #1
 800a532:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a534:	68f8      	ldr	r0, [r7, #12]
 800a536:	f7ff fa41 	bl	80099bc <SWAPBYTE>
 800a53a:	4603      	mov	r3, r0
 800a53c:	461a      	mov	r2, r3
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	3301      	adds	r3, #1
 800a546:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	3301      	adds	r3, #1
 800a54c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a54e:	68f8      	ldr	r0, [r7, #12]
 800a550:	f7ff fa34 	bl	80099bc <SWAPBYTE>
 800a554:	4603      	mov	r3, r0
 800a556:	461a      	mov	r2, r3
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	3301      	adds	r3, #1
 800a560:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	3301      	adds	r3, #1
 800a566:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a568:	68f8      	ldr	r0, [r7, #12]
 800a56a:	f7ff fa27 	bl	80099bc <SWAPBYTE>
 800a56e:	4603      	mov	r3, r0
 800a570:	461a      	mov	r2, r3
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	80da      	strh	r2, [r3, #6]
}
 800a576:	bf00      	nop
 800a578:	3710      	adds	r7, #16
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}

0800a57e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a57e:	b580      	push	{r7, lr}
 800a580:	b082      	sub	sp, #8
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
 800a586:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a588:	2180      	movs	r1, #128	; 0x80
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 fcba 	bl	800af04 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a590:	2100      	movs	r1, #0
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f000 fcb6 	bl	800af04 <USBD_LL_StallEP>
}
 800a598:	bf00      	nop
 800a59a:	3708      	adds	r7, #8
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b086      	sub	sp, #24
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	60f8      	str	r0, [r7, #12]
 800a5a8:	60b9      	str	r1, [r7, #8]
 800a5aa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d036      	beq.n	800a624 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a5ba:	6938      	ldr	r0, [r7, #16]
 800a5bc:	f000 f836 	bl	800a62c <USBD_GetLen>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	3301      	adds	r3, #1
 800a5c4:	b29b      	uxth	r3, r3
 800a5c6:	005b      	lsls	r3, r3, #1
 800a5c8:	b29a      	uxth	r2, r3
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a5ce:	7dfb      	ldrb	r3, [r7, #23]
 800a5d0:	68ba      	ldr	r2, [r7, #8]
 800a5d2:	4413      	add	r3, r2
 800a5d4:	687a      	ldr	r2, [r7, #4]
 800a5d6:	7812      	ldrb	r2, [r2, #0]
 800a5d8:	701a      	strb	r2, [r3, #0]
  idx++;
 800a5da:	7dfb      	ldrb	r3, [r7, #23]
 800a5dc:	3301      	adds	r3, #1
 800a5de:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a5e0:	7dfb      	ldrb	r3, [r7, #23]
 800a5e2:	68ba      	ldr	r2, [r7, #8]
 800a5e4:	4413      	add	r3, r2
 800a5e6:	2203      	movs	r2, #3
 800a5e8:	701a      	strb	r2, [r3, #0]
  idx++;
 800a5ea:	7dfb      	ldrb	r3, [r7, #23]
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a5f0:	e013      	b.n	800a61a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a5f2:	7dfb      	ldrb	r3, [r7, #23]
 800a5f4:	68ba      	ldr	r2, [r7, #8]
 800a5f6:	4413      	add	r3, r2
 800a5f8:	693a      	ldr	r2, [r7, #16]
 800a5fa:	7812      	ldrb	r2, [r2, #0]
 800a5fc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	3301      	adds	r3, #1
 800a602:	613b      	str	r3, [r7, #16]
    idx++;
 800a604:	7dfb      	ldrb	r3, [r7, #23]
 800a606:	3301      	adds	r3, #1
 800a608:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a60a:	7dfb      	ldrb	r3, [r7, #23]
 800a60c:	68ba      	ldr	r2, [r7, #8]
 800a60e:	4413      	add	r3, r2
 800a610:	2200      	movs	r2, #0
 800a612:	701a      	strb	r2, [r3, #0]
    idx++;
 800a614:	7dfb      	ldrb	r3, [r7, #23]
 800a616:	3301      	adds	r3, #1
 800a618:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	781b      	ldrb	r3, [r3, #0]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d1e7      	bne.n	800a5f2 <USBD_GetString+0x52>
 800a622:	e000      	b.n	800a626 <USBD_GetString+0x86>
    return;
 800a624:	bf00      	nop
  }
}
 800a626:	3718      	adds	r7, #24
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}

0800a62c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a62c:	b480      	push	{r7}
 800a62e:	b085      	sub	sp, #20
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a634:	2300      	movs	r3, #0
 800a636:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a63c:	e005      	b.n	800a64a <USBD_GetLen+0x1e>
  {
    len++;
 800a63e:	7bfb      	ldrb	r3, [r7, #15]
 800a640:	3301      	adds	r3, #1
 800a642:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	3301      	adds	r3, #1
 800a648:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	781b      	ldrb	r3, [r3, #0]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d1f5      	bne.n	800a63e <USBD_GetLen+0x12>
  }

  return len;
 800a652:	7bfb      	ldrb	r3, [r7, #15]
}
 800a654:	4618      	mov	r0, r3
 800a656:	3714      	adds	r7, #20
 800a658:	46bd      	mov	sp, r7
 800a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65e:	4770      	bx	lr

0800a660 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b084      	sub	sp, #16
 800a664:	af00      	add	r7, sp, #0
 800a666:	60f8      	str	r0, [r7, #12]
 800a668:	60b9      	str	r1, [r7, #8]
 800a66a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2202      	movs	r2, #2
 800a670:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	687a      	ldr	r2, [r7, #4]
 800a678:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	687a      	ldr	r2, [r7, #4]
 800a67e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	68ba      	ldr	r2, [r7, #8]
 800a684:	2100      	movs	r1, #0
 800a686:	68f8      	ldr	r0, [r7, #12]
 800a688:	f000 fcc5 	bl	800b016 <USBD_LL_Transmit>

  return USBD_OK;
 800a68c:	2300      	movs	r3, #0
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3710      	adds	r7, #16
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}

0800a696 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a696:	b580      	push	{r7, lr}
 800a698:	b084      	sub	sp, #16
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	60f8      	str	r0, [r7, #12]
 800a69e:	60b9      	str	r1, [r7, #8]
 800a6a0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	68ba      	ldr	r2, [r7, #8]
 800a6a6:	2100      	movs	r1, #0
 800a6a8:	68f8      	ldr	r0, [r7, #12]
 800a6aa:	f000 fcb4 	bl	800b016 <USBD_LL_Transmit>

  return USBD_OK;
 800a6ae:	2300      	movs	r3, #0
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3710      	adds	r7, #16
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b084      	sub	sp, #16
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2203      	movs	r2, #3
 800a6c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	687a      	ldr	r2, [r7, #4]
 800a6d0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	687a      	ldr	r2, [r7, #4]
 800a6d8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	68ba      	ldr	r2, [r7, #8]
 800a6e0:	2100      	movs	r1, #0
 800a6e2:	68f8      	ldr	r0, [r7, #12]
 800a6e4:	f000 fcb8 	bl	800b058 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a6e8:	2300      	movs	r3, #0
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3710      	adds	r7, #16
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}

0800a6f2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a6f2:	b580      	push	{r7, lr}
 800a6f4:	b084      	sub	sp, #16
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	60f8      	str	r0, [r7, #12]
 800a6fa:	60b9      	str	r1, [r7, #8]
 800a6fc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	68ba      	ldr	r2, [r7, #8]
 800a702:	2100      	movs	r1, #0
 800a704:	68f8      	ldr	r0, [r7, #12]
 800a706:	f000 fca7 	bl	800b058 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a70a:	2300      	movs	r3, #0
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3710      	adds	r7, #16
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b082      	sub	sp, #8
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2204      	movs	r2, #4
 800a720:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a724:	2300      	movs	r3, #0
 800a726:	2200      	movs	r2, #0
 800a728:	2100      	movs	r1, #0
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 fc73 	bl	800b016 <USBD_LL_Transmit>

  return USBD_OK;
 800a730:	2300      	movs	r3, #0
}
 800a732:	4618      	mov	r0, r3
 800a734:	3708      	adds	r7, #8
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}

0800a73a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a73a:	b580      	push	{r7, lr}
 800a73c:	b082      	sub	sp, #8
 800a73e:	af00      	add	r7, sp, #0
 800a740:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2205      	movs	r2, #5
 800a746:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a74a:	2300      	movs	r3, #0
 800a74c:	2200      	movs	r2, #0
 800a74e:	2100      	movs	r1, #0
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f000 fc81 	bl	800b058 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a756:	2300      	movs	r3, #0
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3708      	adds	r7, #8
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}

0800a760 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a764:	2200      	movs	r2, #0
 800a766:	4912      	ldr	r1, [pc, #72]	; (800a7b0 <MX_USB_DEVICE_Init+0x50>)
 800a768:	4812      	ldr	r0, [pc, #72]	; (800a7b4 <MX_USB_DEVICE_Init+0x54>)
 800a76a:	f7fe fd07 	bl	800917c <USBD_Init>
 800a76e:	4603      	mov	r3, r0
 800a770:	2b00      	cmp	r3, #0
 800a772:	d001      	beq.n	800a778 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a774:	f7f6 fc28 	bl	8000fc8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a778:	490f      	ldr	r1, [pc, #60]	; (800a7b8 <MX_USB_DEVICE_Init+0x58>)
 800a77a:	480e      	ldr	r0, [pc, #56]	; (800a7b4 <MX_USB_DEVICE_Init+0x54>)
 800a77c:	f7fe fd2e 	bl	80091dc <USBD_RegisterClass>
 800a780:	4603      	mov	r3, r0
 800a782:	2b00      	cmp	r3, #0
 800a784:	d001      	beq.n	800a78a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a786:	f7f6 fc1f 	bl	8000fc8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a78a:	490c      	ldr	r1, [pc, #48]	; (800a7bc <MX_USB_DEVICE_Init+0x5c>)
 800a78c:	4809      	ldr	r0, [pc, #36]	; (800a7b4 <MX_USB_DEVICE_Init+0x54>)
 800a78e:	f7fe fc65 	bl	800905c <USBD_CDC_RegisterInterface>
 800a792:	4603      	mov	r3, r0
 800a794:	2b00      	cmp	r3, #0
 800a796:	d001      	beq.n	800a79c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a798:	f7f6 fc16 	bl	8000fc8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a79c:	4805      	ldr	r0, [pc, #20]	; (800a7b4 <MX_USB_DEVICE_Init+0x54>)
 800a79e:	f7fe fd53 	bl	8009248 <USBD_Start>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d001      	beq.n	800a7ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a7a8:	f7f6 fc0e 	bl	8000fc8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a7ac:	bf00      	nop
 800a7ae:	bd80      	pop	{r7, pc}
 800a7b0:	200000ac 	.word	0x200000ac
 800a7b4:	20000434 	.word	0x20000434
 800a7b8:	20000018 	.word	0x20000018
 800a7bc:	20000098 	.word	0x20000098

0800a7c0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	4905      	ldr	r1, [pc, #20]	; (800a7dc <CDC_Init_FS+0x1c>)
 800a7c8:	4805      	ldr	r0, [pc, #20]	; (800a7e0 <CDC_Init_FS+0x20>)
 800a7ca:	f7fe fc61 	bl	8009090 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a7ce:	4905      	ldr	r1, [pc, #20]	; (800a7e4 <CDC_Init_FS+0x24>)
 800a7d0:	4803      	ldr	r0, [pc, #12]	; (800a7e0 <CDC_Init_FS+0x20>)
 800a7d2:	f7fe fc7f 	bl	80090d4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a7d6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	bd80      	pop	{r7, pc}
 800a7dc:	20000af8 	.word	0x20000af8
 800a7e0:	20000434 	.word	0x20000434
 800a7e4:	20000710 	.word	0x20000710

0800a7e8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a7ec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr

0800a7f8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b083      	sub	sp, #12
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	4603      	mov	r3, r0
 800a800:	6039      	str	r1, [r7, #0]
 800a802:	71fb      	strb	r3, [r7, #7]
 800a804:	4613      	mov	r3, r2
 800a806:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a808:	79fb      	ldrb	r3, [r7, #7]
 800a80a:	2b23      	cmp	r3, #35	; 0x23
 800a80c:	d84a      	bhi.n	800a8a4 <CDC_Control_FS+0xac>
 800a80e:	a201      	add	r2, pc, #4	; (adr r2, 800a814 <CDC_Control_FS+0x1c>)
 800a810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a814:	0800a8a5 	.word	0x0800a8a5
 800a818:	0800a8a5 	.word	0x0800a8a5
 800a81c:	0800a8a5 	.word	0x0800a8a5
 800a820:	0800a8a5 	.word	0x0800a8a5
 800a824:	0800a8a5 	.word	0x0800a8a5
 800a828:	0800a8a5 	.word	0x0800a8a5
 800a82c:	0800a8a5 	.word	0x0800a8a5
 800a830:	0800a8a5 	.word	0x0800a8a5
 800a834:	0800a8a5 	.word	0x0800a8a5
 800a838:	0800a8a5 	.word	0x0800a8a5
 800a83c:	0800a8a5 	.word	0x0800a8a5
 800a840:	0800a8a5 	.word	0x0800a8a5
 800a844:	0800a8a5 	.word	0x0800a8a5
 800a848:	0800a8a5 	.word	0x0800a8a5
 800a84c:	0800a8a5 	.word	0x0800a8a5
 800a850:	0800a8a5 	.word	0x0800a8a5
 800a854:	0800a8a5 	.word	0x0800a8a5
 800a858:	0800a8a5 	.word	0x0800a8a5
 800a85c:	0800a8a5 	.word	0x0800a8a5
 800a860:	0800a8a5 	.word	0x0800a8a5
 800a864:	0800a8a5 	.word	0x0800a8a5
 800a868:	0800a8a5 	.word	0x0800a8a5
 800a86c:	0800a8a5 	.word	0x0800a8a5
 800a870:	0800a8a5 	.word	0x0800a8a5
 800a874:	0800a8a5 	.word	0x0800a8a5
 800a878:	0800a8a5 	.word	0x0800a8a5
 800a87c:	0800a8a5 	.word	0x0800a8a5
 800a880:	0800a8a5 	.word	0x0800a8a5
 800a884:	0800a8a5 	.word	0x0800a8a5
 800a888:	0800a8a5 	.word	0x0800a8a5
 800a88c:	0800a8a5 	.word	0x0800a8a5
 800a890:	0800a8a5 	.word	0x0800a8a5
 800a894:	0800a8a5 	.word	0x0800a8a5
 800a898:	0800a8a5 	.word	0x0800a8a5
 800a89c:	0800a8a5 	.word	0x0800a8a5
 800a8a0:	0800a8a5 	.word	0x0800a8a5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a8a4:	bf00      	nop
  }

  return (USBD_OK);
 800a8a6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	370c      	adds	r7, #12
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr

0800a8b4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b082      	sub	sp, #8
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
 800a8bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a8be:	6879      	ldr	r1, [r7, #4]
 800a8c0:	4805      	ldr	r0, [pc, #20]	; (800a8d8 <CDC_Receive_FS+0x24>)
 800a8c2:	f7fe fc07 	bl	80090d4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a8c6:	4804      	ldr	r0, [pc, #16]	; (800a8d8 <CDC_Receive_FS+0x24>)
 800a8c8:	f7fe fc22 	bl	8009110 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a8cc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3708      	adds	r7, #8
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}
 800a8d6:	bf00      	nop
 800a8d8:	20000434 	.word	0x20000434

0800a8dc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b087      	sub	sp, #28
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	4613      	mov	r3, r2
 800a8e8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a8ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	371c      	adds	r7, #28
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fc:	4770      	bx	lr
	...

0800a900 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a900:	b480      	push	{r7}
 800a902:	b083      	sub	sp, #12
 800a904:	af00      	add	r7, sp, #0
 800a906:	4603      	mov	r3, r0
 800a908:	6039      	str	r1, [r7, #0]
 800a90a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	2212      	movs	r2, #18
 800a910:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a912:	4b03      	ldr	r3, [pc, #12]	; (800a920 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a914:	4618      	mov	r0, r3
 800a916:	370c      	adds	r7, #12
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr
 800a920:	200000c8 	.word	0x200000c8

0800a924 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a924:	b480      	push	{r7}
 800a926:	b083      	sub	sp, #12
 800a928:	af00      	add	r7, sp, #0
 800a92a:	4603      	mov	r3, r0
 800a92c:	6039      	str	r1, [r7, #0]
 800a92e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	2204      	movs	r2, #4
 800a934:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a936:	4b03      	ldr	r3, [pc, #12]	; (800a944 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a938:	4618      	mov	r0, r3
 800a93a:	370c      	adds	r7, #12
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr
 800a944:	200000dc 	.word	0x200000dc

0800a948 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b082      	sub	sp, #8
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	4603      	mov	r3, r0
 800a950:	6039      	str	r1, [r7, #0]
 800a952:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a954:	79fb      	ldrb	r3, [r7, #7]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d105      	bne.n	800a966 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a95a:	683a      	ldr	r2, [r7, #0]
 800a95c:	4907      	ldr	r1, [pc, #28]	; (800a97c <USBD_FS_ProductStrDescriptor+0x34>)
 800a95e:	4808      	ldr	r0, [pc, #32]	; (800a980 <USBD_FS_ProductStrDescriptor+0x38>)
 800a960:	f7ff fe1e 	bl	800a5a0 <USBD_GetString>
 800a964:	e004      	b.n	800a970 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a966:	683a      	ldr	r2, [r7, #0]
 800a968:	4904      	ldr	r1, [pc, #16]	; (800a97c <USBD_FS_ProductStrDescriptor+0x34>)
 800a96a:	4805      	ldr	r0, [pc, #20]	; (800a980 <USBD_FS_ProductStrDescriptor+0x38>)
 800a96c:	f7ff fe18 	bl	800a5a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a970:	4b02      	ldr	r3, [pc, #8]	; (800a97c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a972:	4618      	mov	r0, r3
 800a974:	3708      	adds	r7, #8
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}
 800a97a:	bf00      	nop
 800a97c:	20000ee0 	.word	0x20000ee0
 800a980:	0800c608 	.word	0x0800c608

0800a984 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b082      	sub	sp, #8
 800a988:	af00      	add	r7, sp, #0
 800a98a:	4603      	mov	r3, r0
 800a98c:	6039      	str	r1, [r7, #0]
 800a98e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a990:	683a      	ldr	r2, [r7, #0]
 800a992:	4904      	ldr	r1, [pc, #16]	; (800a9a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a994:	4804      	ldr	r0, [pc, #16]	; (800a9a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a996:	f7ff fe03 	bl	800a5a0 <USBD_GetString>
  return USBD_StrDesc;
 800a99a:	4b02      	ldr	r3, [pc, #8]	; (800a9a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3708      	adds	r7, #8
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}
 800a9a4:	20000ee0 	.word	0x20000ee0
 800a9a8:	0800c620 	.word	0x0800c620

0800a9ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b082      	sub	sp, #8
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	6039      	str	r1, [r7, #0]
 800a9b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	221a      	movs	r2, #26
 800a9bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a9be:	f000 f843 	bl	800aa48 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a9c2:	4b02      	ldr	r3, [pc, #8]	; (800a9cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3708      	adds	r7, #8
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}
 800a9cc:	200000e0 	.word	0x200000e0

0800a9d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b082      	sub	sp, #8
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	6039      	str	r1, [r7, #0]
 800a9da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a9dc:	79fb      	ldrb	r3, [r7, #7]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d105      	bne.n	800a9ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a9e2:	683a      	ldr	r2, [r7, #0]
 800a9e4:	4907      	ldr	r1, [pc, #28]	; (800aa04 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a9e6:	4808      	ldr	r0, [pc, #32]	; (800aa08 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a9e8:	f7ff fdda 	bl	800a5a0 <USBD_GetString>
 800a9ec:	e004      	b.n	800a9f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a9ee:	683a      	ldr	r2, [r7, #0]
 800a9f0:	4904      	ldr	r1, [pc, #16]	; (800aa04 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a9f2:	4805      	ldr	r0, [pc, #20]	; (800aa08 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a9f4:	f7ff fdd4 	bl	800a5a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a9f8:	4b02      	ldr	r3, [pc, #8]	; (800aa04 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3708      	adds	r7, #8
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}
 800aa02:	bf00      	nop
 800aa04:	20000ee0 	.word	0x20000ee0
 800aa08:	0800c634 	.word	0x0800c634

0800aa0c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b082      	sub	sp, #8
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	4603      	mov	r3, r0
 800aa14:	6039      	str	r1, [r7, #0]
 800aa16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aa18:	79fb      	ldrb	r3, [r7, #7]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d105      	bne.n	800aa2a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aa1e:	683a      	ldr	r2, [r7, #0]
 800aa20:	4907      	ldr	r1, [pc, #28]	; (800aa40 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aa22:	4808      	ldr	r0, [pc, #32]	; (800aa44 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aa24:	f7ff fdbc 	bl	800a5a0 <USBD_GetString>
 800aa28:	e004      	b.n	800aa34 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aa2a:	683a      	ldr	r2, [r7, #0]
 800aa2c:	4904      	ldr	r1, [pc, #16]	; (800aa40 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aa2e:	4805      	ldr	r0, [pc, #20]	; (800aa44 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aa30:	f7ff fdb6 	bl	800a5a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa34:	4b02      	ldr	r3, [pc, #8]	; (800aa40 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3708      	adds	r7, #8
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	20000ee0 	.word	0x20000ee0
 800aa44:	0800c640 	.word	0x0800c640

0800aa48 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b084      	sub	sp, #16
 800aa4c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800aa4e:	4b0f      	ldr	r3, [pc, #60]	; (800aa8c <Get_SerialNum+0x44>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800aa54:	4b0e      	ldr	r3, [pc, #56]	; (800aa90 <Get_SerialNum+0x48>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aa5a:	4b0e      	ldr	r3, [pc, #56]	; (800aa94 <Get_SerialNum+0x4c>)
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800aa60:	68fa      	ldr	r2, [r7, #12]
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	4413      	add	r3, r2
 800aa66:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d009      	beq.n	800aa82 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aa6e:	2208      	movs	r2, #8
 800aa70:	4909      	ldr	r1, [pc, #36]	; (800aa98 <Get_SerialNum+0x50>)
 800aa72:	68f8      	ldr	r0, [r7, #12]
 800aa74:	f000 f814 	bl	800aaa0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aa78:	2204      	movs	r2, #4
 800aa7a:	4908      	ldr	r1, [pc, #32]	; (800aa9c <Get_SerialNum+0x54>)
 800aa7c:	68b8      	ldr	r0, [r7, #8]
 800aa7e:	f000 f80f 	bl	800aaa0 <IntToUnicode>
  }
}
 800aa82:	bf00      	nop
 800aa84:	3710      	adds	r7, #16
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}
 800aa8a:	bf00      	nop
 800aa8c:	1fff7a10 	.word	0x1fff7a10
 800aa90:	1fff7a14 	.word	0x1fff7a14
 800aa94:	1fff7a18 	.word	0x1fff7a18
 800aa98:	200000e2 	.word	0x200000e2
 800aa9c:	200000f2 	.word	0x200000f2

0800aaa0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b087      	sub	sp, #28
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	60f8      	str	r0, [r7, #12]
 800aaa8:	60b9      	str	r1, [r7, #8]
 800aaaa:	4613      	mov	r3, r2
 800aaac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800aaae:	2300      	movs	r3, #0
 800aab0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800aab2:	2300      	movs	r3, #0
 800aab4:	75fb      	strb	r3, [r7, #23]
 800aab6:	e027      	b.n	800ab08 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	0f1b      	lsrs	r3, r3, #28
 800aabc:	2b09      	cmp	r3, #9
 800aabe:	d80b      	bhi.n	800aad8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	0f1b      	lsrs	r3, r3, #28
 800aac4:	b2da      	uxtb	r2, r3
 800aac6:	7dfb      	ldrb	r3, [r7, #23]
 800aac8:	005b      	lsls	r3, r3, #1
 800aaca:	4619      	mov	r1, r3
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	440b      	add	r3, r1
 800aad0:	3230      	adds	r2, #48	; 0x30
 800aad2:	b2d2      	uxtb	r2, r2
 800aad4:	701a      	strb	r2, [r3, #0]
 800aad6:	e00a      	b.n	800aaee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	0f1b      	lsrs	r3, r3, #28
 800aadc:	b2da      	uxtb	r2, r3
 800aade:	7dfb      	ldrb	r3, [r7, #23]
 800aae0:	005b      	lsls	r3, r3, #1
 800aae2:	4619      	mov	r1, r3
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	440b      	add	r3, r1
 800aae8:	3237      	adds	r2, #55	; 0x37
 800aaea:	b2d2      	uxtb	r2, r2
 800aaec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	011b      	lsls	r3, r3, #4
 800aaf2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800aaf4:	7dfb      	ldrb	r3, [r7, #23]
 800aaf6:	005b      	lsls	r3, r3, #1
 800aaf8:	3301      	adds	r3, #1
 800aafa:	68ba      	ldr	r2, [r7, #8]
 800aafc:	4413      	add	r3, r2
 800aafe:	2200      	movs	r2, #0
 800ab00:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ab02:	7dfb      	ldrb	r3, [r7, #23]
 800ab04:	3301      	adds	r3, #1
 800ab06:	75fb      	strb	r3, [r7, #23]
 800ab08:	7dfa      	ldrb	r2, [r7, #23]
 800ab0a:	79fb      	ldrb	r3, [r7, #7]
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d3d3      	bcc.n	800aab8 <IntToUnicode+0x18>
  }
}
 800ab10:	bf00      	nop
 800ab12:	bf00      	nop
 800ab14:	371c      	adds	r7, #28
 800ab16:	46bd      	mov	sp, r7
 800ab18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1c:	4770      	bx	lr
	...

0800ab20 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b08a      	sub	sp, #40	; 0x28
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab28:	f107 0314 	add.w	r3, r7, #20
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	601a      	str	r2, [r3, #0]
 800ab30:	605a      	str	r2, [r3, #4]
 800ab32:	609a      	str	r2, [r3, #8]
 800ab34:	60da      	str	r2, [r3, #12]
 800ab36:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ab40:	d13a      	bne.n	800abb8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ab42:	2300      	movs	r3, #0
 800ab44:	613b      	str	r3, [r7, #16]
 800ab46:	4b1e      	ldr	r3, [pc, #120]	; (800abc0 <HAL_PCD_MspInit+0xa0>)
 800ab48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab4a:	4a1d      	ldr	r2, [pc, #116]	; (800abc0 <HAL_PCD_MspInit+0xa0>)
 800ab4c:	f043 0301 	orr.w	r3, r3, #1
 800ab50:	6313      	str	r3, [r2, #48]	; 0x30
 800ab52:	4b1b      	ldr	r3, [pc, #108]	; (800abc0 <HAL_PCD_MspInit+0xa0>)
 800ab54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab56:	f003 0301 	and.w	r3, r3, #1
 800ab5a:	613b      	str	r3, [r7, #16]
 800ab5c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ab5e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ab62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab64:	2302      	movs	r3, #2
 800ab66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab6c:	2303      	movs	r3, #3
 800ab6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ab70:	230a      	movs	r3, #10
 800ab72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ab74:	f107 0314 	add.w	r3, r7, #20
 800ab78:	4619      	mov	r1, r3
 800ab7a:	4812      	ldr	r0, [pc, #72]	; (800abc4 <HAL_PCD_MspInit+0xa4>)
 800ab7c:	f7f8 f858 	bl	8002c30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ab80:	4b0f      	ldr	r3, [pc, #60]	; (800abc0 <HAL_PCD_MspInit+0xa0>)
 800ab82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab84:	4a0e      	ldr	r2, [pc, #56]	; (800abc0 <HAL_PCD_MspInit+0xa0>)
 800ab86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab8a:	6353      	str	r3, [r2, #52]	; 0x34
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	60fb      	str	r3, [r7, #12]
 800ab90:	4b0b      	ldr	r3, [pc, #44]	; (800abc0 <HAL_PCD_MspInit+0xa0>)
 800ab92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab94:	4a0a      	ldr	r2, [pc, #40]	; (800abc0 <HAL_PCD_MspInit+0xa0>)
 800ab96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ab9a:	6453      	str	r3, [r2, #68]	; 0x44
 800ab9c:	4b08      	ldr	r3, [pc, #32]	; (800abc0 <HAL_PCD_MspInit+0xa0>)
 800ab9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aba0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aba4:	60fb      	str	r3, [r7, #12]
 800aba6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 3, 0);
 800aba8:	2200      	movs	r2, #0
 800abaa:	2103      	movs	r1, #3
 800abac:	2043      	movs	r0, #67	; 0x43
 800abae:	f7f7 fc06 	bl	80023be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800abb2:	2043      	movs	r0, #67	; 0x43
 800abb4:	f7f7 fc1f 	bl	80023f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800abb8:	bf00      	nop
 800abba:	3728      	adds	r7, #40	; 0x28
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}
 800abc0:	40023800 	.word	0x40023800
 800abc4:	40020000 	.word	0x40020000

0800abc8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b082      	sub	sp, #8
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800abdc:	4619      	mov	r1, r3
 800abde:	4610      	mov	r0, r2
 800abe0:	f7fe fb7f 	bl	80092e2 <USBD_LL_SetupStage>
}
 800abe4:	bf00      	nop
 800abe6:	3708      	adds	r7, #8
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}

0800abec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b082      	sub	sp, #8
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	460b      	mov	r3, r1
 800abf6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800abfe:	78fa      	ldrb	r2, [r7, #3]
 800ac00:	6879      	ldr	r1, [r7, #4]
 800ac02:	4613      	mov	r3, r2
 800ac04:	00db      	lsls	r3, r3, #3
 800ac06:	4413      	add	r3, r2
 800ac08:	009b      	lsls	r3, r3, #2
 800ac0a:	440b      	add	r3, r1
 800ac0c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ac10:	681a      	ldr	r2, [r3, #0]
 800ac12:	78fb      	ldrb	r3, [r7, #3]
 800ac14:	4619      	mov	r1, r3
 800ac16:	f7fe fbb9 	bl	800938c <USBD_LL_DataOutStage>
}
 800ac1a:	bf00      	nop
 800ac1c:	3708      	adds	r7, #8
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}

0800ac22 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac22:	b580      	push	{r7, lr}
 800ac24:	b082      	sub	sp, #8
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	6078      	str	r0, [r7, #4]
 800ac2a:	460b      	mov	r3, r1
 800ac2c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ac34:	78fa      	ldrb	r2, [r7, #3]
 800ac36:	6879      	ldr	r1, [r7, #4]
 800ac38:	4613      	mov	r3, r2
 800ac3a:	00db      	lsls	r3, r3, #3
 800ac3c:	4413      	add	r3, r2
 800ac3e:	009b      	lsls	r3, r3, #2
 800ac40:	440b      	add	r3, r1
 800ac42:	334c      	adds	r3, #76	; 0x4c
 800ac44:	681a      	ldr	r2, [r3, #0]
 800ac46:	78fb      	ldrb	r3, [r7, #3]
 800ac48:	4619      	mov	r1, r3
 800ac4a:	f7fe fc52 	bl	80094f2 <USBD_LL_DataInStage>
}
 800ac4e:	bf00      	nop
 800ac50:	3708      	adds	r7, #8
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}

0800ac56 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac56:	b580      	push	{r7, lr}
 800ac58:	b082      	sub	sp, #8
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ac64:	4618      	mov	r0, r3
 800ac66:	f7fe fd86 	bl	8009776 <USBD_LL_SOF>
}
 800ac6a:	bf00      	nop
 800ac6c:	3708      	adds	r7, #8
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}

0800ac72 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac72:	b580      	push	{r7, lr}
 800ac74:	b084      	sub	sp, #16
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	68db      	ldr	r3, [r3, #12]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d102      	bne.n	800ac8c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ac86:	2300      	movs	r3, #0
 800ac88:	73fb      	strb	r3, [r7, #15]
 800ac8a:	e008      	b.n	800ac9e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	68db      	ldr	r3, [r3, #12]
 800ac90:	2b02      	cmp	r3, #2
 800ac92:	d102      	bne.n	800ac9a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ac94:	2301      	movs	r3, #1
 800ac96:	73fb      	strb	r3, [r7, #15]
 800ac98:	e001      	b.n	800ac9e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ac9a:	f7f6 f995 	bl	8000fc8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aca4:	7bfa      	ldrb	r2, [r7, #15]
 800aca6:	4611      	mov	r1, r2
 800aca8:	4618      	mov	r0, r3
 800acaa:	f7fe fd26 	bl	80096fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800acb4:	4618      	mov	r0, r3
 800acb6:	f7fe fcce 	bl	8009656 <USBD_LL_Reset>
}
 800acba:	bf00      	nop
 800acbc:	3710      	adds	r7, #16
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}
	...

0800acc4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b082      	sub	sp, #8
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800acd2:	4618      	mov	r0, r3
 800acd4:	f7fe fd21 	bl	800971a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	687a      	ldr	r2, [r7, #4]
 800ace4:	6812      	ldr	r2, [r2, #0]
 800ace6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800acea:	f043 0301 	orr.w	r3, r3, #1
 800acee:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6a1b      	ldr	r3, [r3, #32]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d005      	beq.n	800ad04 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800acf8:	4b04      	ldr	r3, [pc, #16]	; (800ad0c <HAL_PCD_SuspendCallback+0x48>)
 800acfa:	691b      	ldr	r3, [r3, #16]
 800acfc:	4a03      	ldr	r2, [pc, #12]	; (800ad0c <HAL_PCD_SuspendCallback+0x48>)
 800acfe:	f043 0306 	orr.w	r3, r3, #6
 800ad02:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ad04:	bf00      	nop
 800ad06:	3708      	adds	r7, #8
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}
 800ad0c:	e000ed00 	.word	0xe000ed00

0800ad10 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f7fe fd11 	bl	8009746 <USBD_LL_Resume>
}
 800ad24:	bf00      	nop
 800ad26:	3708      	adds	r7, #8
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b082      	sub	sp, #8
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	460b      	mov	r3, r1
 800ad36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ad3e:	78fa      	ldrb	r2, [r7, #3]
 800ad40:	4611      	mov	r1, r2
 800ad42:	4618      	mov	r0, r3
 800ad44:	f7fe fd69 	bl	800981a <USBD_LL_IsoOUTIncomplete>
}
 800ad48:	bf00      	nop
 800ad4a:	3708      	adds	r7, #8
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b082      	sub	sp, #8
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	460b      	mov	r3, r1
 800ad5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ad62:	78fa      	ldrb	r2, [r7, #3]
 800ad64:	4611      	mov	r1, r2
 800ad66:	4618      	mov	r0, r3
 800ad68:	f7fe fd25 	bl	80097b6 <USBD_LL_IsoINIncomplete>
}
 800ad6c:	bf00      	nop
 800ad6e:	3708      	adds	r7, #8
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ad82:	4618      	mov	r0, r3
 800ad84:	f7fe fd7b 	bl	800987e <USBD_LL_DevConnected>
}
 800ad88:	bf00      	nop
 800ad8a:	3708      	adds	r7, #8
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b082      	sub	sp, #8
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f7fe fd78 	bl	8009894 <USBD_LL_DevDisconnected>
}
 800ada4:	bf00      	nop
 800ada6:	3708      	adds	r7, #8
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}

0800adac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b082      	sub	sp, #8
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	781b      	ldrb	r3, [r3, #0]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d13c      	bne.n	800ae36 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800adbc:	4a20      	ldr	r2, [pc, #128]	; (800ae40 <USBD_LL_Init+0x94>)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	4a1e      	ldr	r2, [pc, #120]	; (800ae40 <USBD_LL_Init+0x94>)
 800adc8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800adcc:	4b1c      	ldr	r3, [pc, #112]	; (800ae40 <USBD_LL_Init+0x94>)
 800adce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800add2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800add4:	4b1a      	ldr	r3, [pc, #104]	; (800ae40 <USBD_LL_Init+0x94>)
 800add6:	2204      	movs	r2, #4
 800add8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800adda:	4b19      	ldr	r3, [pc, #100]	; (800ae40 <USBD_LL_Init+0x94>)
 800addc:	2202      	movs	r2, #2
 800adde:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ade0:	4b17      	ldr	r3, [pc, #92]	; (800ae40 <USBD_LL_Init+0x94>)
 800ade2:	2200      	movs	r2, #0
 800ade4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ade6:	4b16      	ldr	r3, [pc, #88]	; (800ae40 <USBD_LL_Init+0x94>)
 800ade8:	2202      	movs	r2, #2
 800adea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800adec:	4b14      	ldr	r3, [pc, #80]	; (800ae40 <USBD_LL_Init+0x94>)
 800adee:	2200      	movs	r2, #0
 800adf0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800adf2:	4b13      	ldr	r3, [pc, #76]	; (800ae40 <USBD_LL_Init+0x94>)
 800adf4:	2200      	movs	r2, #0
 800adf6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800adf8:	4b11      	ldr	r3, [pc, #68]	; (800ae40 <USBD_LL_Init+0x94>)
 800adfa:	2200      	movs	r2, #0
 800adfc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800adfe:	4b10      	ldr	r3, [pc, #64]	; (800ae40 <USBD_LL_Init+0x94>)
 800ae00:	2200      	movs	r2, #0
 800ae02:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ae04:	4b0e      	ldr	r3, [pc, #56]	; (800ae40 <USBD_LL_Init+0x94>)
 800ae06:	2200      	movs	r2, #0
 800ae08:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ae0a:	480d      	ldr	r0, [pc, #52]	; (800ae40 <USBD_LL_Init+0x94>)
 800ae0c:	f7f8 f8df 	bl	8002fce <HAL_PCD_Init>
 800ae10:	4603      	mov	r3, r0
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d001      	beq.n	800ae1a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ae16:	f7f6 f8d7 	bl	8000fc8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ae1a:	2180      	movs	r1, #128	; 0x80
 800ae1c:	4808      	ldr	r0, [pc, #32]	; (800ae40 <USBD_LL_Init+0x94>)
 800ae1e:	f7f9 fb36 	bl	800448e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ae22:	2240      	movs	r2, #64	; 0x40
 800ae24:	2100      	movs	r1, #0
 800ae26:	4806      	ldr	r0, [pc, #24]	; (800ae40 <USBD_LL_Init+0x94>)
 800ae28:	f7f9 faea 	bl	8004400 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ae2c:	2280      	movs	r2, #128	; 0x80
 800ae2e:	2101      	movs	r1, #1
 800ae30:	4803      	ldr	r0, [pc, #12]	; (800ae40 <USBD_LL_Init+0x94>)
 800ae32:	f7f9 fae5 	bl	8004400 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ae36:	2300      	movs	r3, #0
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3708      	adds	r7, #8
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}
 800ae40:	200010e0 	.word	0x200010e0

0800ae44 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b084      	sub	sp, #16
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae50:	2300      	movs	r3, #0
 800ae52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7f8 f9d4 	bl	8003208 <HAL_PCD_Start>
 800ae60:	4603      	mov	r3, r0
 800ae62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae64:	7bfb      	ldrb	r3, [r7, #15]
 800ae66:	4618      	mov	r0, r3
 800ae68:	f000 f942 	bl	800b0f0 <USBD_Get_USB_Status>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae70:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3710      	adds	r7, #16
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}

0800ae7a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ae7a:	b580      	push	{r7, lr}
 800ae7c:	b084      	sub	sp, #16
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
 800ae82:	4608      	mov	r0, r1
 800ae84:	4611      	mov	r1, r2
 800ae86:	461a      	mov	r2, r3
 800ae88:	4603      	mov	r3, r0
 800ae8a:	70fb      	strb	r3, [r7, #3]
 800ae8c:	460b      	mov	r3, r1
 800ae8e:	70bb      	strb	r3, [r7, #2]
 800ae90:	4613      	mov	r3, r2
 800ae92:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae94:	2300      	movs	r3, #0
 800ae96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800aea2:	78bb      	ldrb	r3, [r7, #2]
 800aea4:	883a      	ldrh	r2, [r7, #0]
 800aea6:	78f9      	ldrb	r1, [r7, #3]
 800aea8:	f7f8 fea5 	bl	8003bf6 <HAL_PCD_EP_Open>
 800aeac:	4603      	mov	r3, r0
 800aeae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aeb0:	7bfb      	ldrb	r3, [r7, #15]
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f000 f91c 	bl	800b0f0 <USBD_Get_USB_Status>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aebc:	7bbb      	ldrb	r3, [r7, #14]
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3710      	adds	r7, #16
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}

0800aec6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aec6:	b580      	push	{r7, lr}
 800aec8:	b084      	sub	sp, #16
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	6078      	str	r0, [r7, #4]
 800aece:	460b      	mov	r3, r1
 800aed0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aed2:	2300      	movs	r3, #0
 800aed4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aed6:	2300      	movs	r3, #0
 800aed8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aee0:	78fa      	ldrb	r2, [r7, #3]
 800aee2:	4611      	mov	r1, r2
 800aee4:	4618      	mov	r0, r3
 800aee6:	f7f8 feee 	bl	8003cc6 <HAL_PCD_EP_Close>
 800aeea:	4603      	mov	r3, r0
 800aeec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aeee:	7bfb      	ldrb	r3, [r7, #15]
 800aef0:	4618      	mov	r0, r3
 800aef2:	f000 f8fd 	bl	800b0f0 <USBD_Get_USB_Status>
 800aef6:	4603      	mov	r3, r0
 800aef8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aefa:	7bbb      	ldrb	r3, [r7, #14]
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3710      	adds	r7, #16
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}

0800af04 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b084      	sub	sp, #16
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
 800af0c:	460b      	mov	r3, r1
 800af0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af10:	2300      	movs	r3, #0
 800af12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af14:	2300      	movs	r3, #0
 800af16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800af1e:	78fa      	ldrb	r2, [r7, #3]
 800af20:	4611      	mov	r1, r2
 800af22:	4618      	mov	r0, r3
 800af24:	f7f8 ffc6 	bl	8003eb4 <HAL_PCD_EP_SetStall>
 800af28:	4603      	mov	r3, r0
 800af2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af2c:	7bfb      	ldrb	r3, [r7, #15]
 800af2e:	4618      	mov	r0, r3
 800af30:	f000 f8de 	bl	800b0f0 <USBD_Get_USB_Status>
 800af34:	4603      	mov	r3, r0
 800af36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af38:	7bbb      	ldrb	r3, [r7, #14]
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3710      	adds	r7, #16
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}

0800af42 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af42:	b580      	push	{r7, lr}
 800af44:	b084      	sub	sp, #16
 800af46:	af00      	add	r7, sp, #0
 800af48:	6078      	str	r0, [r7, #4]
 800af4a:	460b      	mov	r3, r1
 800af4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af4e:	2300      	movs	r3, #0
 800af50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af52:	2300      	movs	r3, #0
 800af54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800af5c:	78fa      	ldrb	r2, [r7, #3]
 800af5e:	4611      	mov	r1, r2
 800af60:	4618      	mov	r0, r3
 800af62:	f7f9 f80b 	bl	8003f7c <HAL_PCD_EP_ClrStall>
 800af66:	4603      	mov	r3, r0
 800af68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af6a:	7bfb      	ldrb	r3, [r7, #15]
 800af6c:	4618      	mov	r0, r3
 800af6e:	f000 f8bf 	bl	800b0f0 <USBD_Get_USB_Status>
 800af72:	4603      	mov	r3, r0
 800af74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af76:	7bbb      	ldrb	r3, [r7, #14]
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3710      	adds	r7, #16
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}

0800af80 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af80:	b480      	push	{r7}
 800af82:	b085      	sub	sp, #20
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	460b      	mov	r3, r1
 800af8a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800af92:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800af94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	da0b      	bge.n	800afb4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800af9c:	78fb      	ldrb	r3, [r7, #3]
 800af9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800afa2:	68f9      	ldr	r1, [r7, #12]
 800afa4:	4613      	mov	r3, r2
 800afa6:	00db      	lsls	r3, r3, #3
 800afa8:	4413      	add	r3, r2
 800afaa:	009b      	lsls	r3, r3, #2
 800afac:	440b      	add	r3, r1
 800afae:	333e      	adds	r3, #62	; 0x3e
 800afb0:	781b      	ldrb	r3, [r3, #0]
 800afb2:	e00b      	b.n	800afcc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800afb4:	78fb      	ldrb	r3, [r7, #3]
 800afb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800afba:	68f9      	ldr	r1, [r7, #12]
 800afbc:	4613      	mov	r3, r2
 800afbe:	00db      	lsls	r3, r3, #3
 800afc0:	4413      	add	r3, r2
 800afc2:	009b      	lsls	r3, r3, #2
 800afc4:	440b      	add	r3, r1
 800afc6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800afca:	781b      	ldrb	r3, [r3, #0]
  }
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3714      	adds	r7, #20
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr

0800afd8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b084      	sub	sp, #16
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	460b      	mov	r3, r1
 800afe2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afe4:	2300      	movs	r3, #0
 800afe6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afe8:	2300      	movs	r3, #0
 800afea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aff2:	78fa      	ldrb	r2, [r7, #3]
 800aff4:	4611      	mov	r1, r2
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7f8 fdd8 	bl	8003bac <HAL_PCD_SetAddress>
 800affc:	4603      	mov	r3, r0
 800affe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b000:	7bfb      	ldrb	r3, [r7, #15]
 800b002:	4618      	mov	r0, r3
 800b004:	f000 f874 	bl	800b0f0 <USBD_Get_USB_Status>
 800b008:	4603      	mov	r3, r0
 800b00a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b00c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b00e:	4618      	mov	r0, r3
 800b010:	3710      	adds	r7, #16
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}

0800b016 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b016:	b580      	push	{r7, lr}
 800b018:	b086      	sub	sp, #24
 800b01a:	af00      	add	r7, sp, #0
 800b01c:	60f8      	str	r0, [r7, #12]
 800b01e:	607a      	str	r2, [r7, #4]
 800b020:	603b      	str	r3, [r7, #0]
 800b022:	460b      	mov	r3, r1
 800b024:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b026:	2300      	movs	r3, #0
 800b028:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b02a:	2300      	movs	r3, #0
 800b02c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b034:	7af9      	ldrb	r1, [r7, #11]
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	687a      	ldr	r2, [r7, #4]
 800b03a:	f7f8 fef1 	bl	8003e20 <HAL_PCD_EP_Transmit>
 800b03e:	4603      	mov	r3, r0
 800b040:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b042:	7dfb      	ldrb	r3, [r7, #23]
 800b044:	4618      	mov	r0, r3
 800b046:	f000 f853 	bl	800b0f0 <USBD_Get_USB_Status>
 800b04a:	4603      	mov	r3, r0
 800b04c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b04e:	7dbb      	ldrb	r3, [r7, #22]
}
 800b050:	4618      	mov	r0, r3
 800b052:	3718      	adds	r7, #24
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}

0800b058 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b086      	sub	sp, #24
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	60f8      	str	r0, [r7, #12]
 800b060:	607a      	str	r2, [r7, #4]
 800b062:	603b      	str	r3, [r7, #0]
 800b064:	460b      	mov	r3, r1
 800b066:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b068:	2300      	movs	r3, #0
 800b06a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b06c:	2300      	movs	r3, #0
 800b06e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b076:	7af9      	ldrb	r1, [r7, #11]
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	687a      	ldr	r2, [r7, #4]
 800b07c:	f7f8 fe6d 	bl	8003d5a <HAL_PCD_EP_Receive>
 800b080:	4603      	mov	r3, r0
 800b082:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b084:	7dfb      	ldrb	r3, [r7, #23]
 800b086:	4618      	mov	r0, r3
 800b088:	f000 f832 	bl	800b0f0 <USBD_Get_USB_Status>
 800b08c:	4603      	mov	r3, r0
 800b08e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b090:	7dbb      	ldrb	r3, [r7, #22]
}
 800b092:	4618      	mov	r0, r3
 800b094:	3718      	adds	r7, #24
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}

0800b09a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b09a:	b580      	push	{r7, lr}
 800b09c:	b082      	sub	sp, #8
 800b09e:	af00      	add	r7, sp, #0
 800b0a0:	6078      	str	r0, [r7, #4]
 800b0a2:	460b      	mov	r3, r1
 800b0a4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b0ac:	78fa      	ldrb	r2, [r7, #3]
 800b0ae:	4611      	mov	r1, r2
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f7f8 fe9d 	bl	8003df0 <HAL_PCD_EP_GetRxCount>
 800b0b6:	4603      	mov	r3, r0
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3708      	adds	r7, #8
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}

0800b0c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b083      	sub	sp, #12
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b0c8:	4b03      	ldr	r3, [pc, #12]	; (800b0d8 <USBD_static_malloc+0x18>)
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	370c      	adds	r7, #12
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d4:	4770      	bx	lr
 800b0d6:	bf00      	nop
 800b0d8:	200015ec 	.word	0x200015ec

0800b0dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b0dc:	b480      	push	{r7}
 800b0de:	b083      	sub	sp, #12
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]

}
 800b0e4:	bf00      	nop
 800b0e6:	370c      	adds	r7, #12
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ee:	4770      	bx	lr

0800b0f0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	b085      	sub	sp, #20
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b0fe:	79fb      	ldrb	r3, [r7, #7]
 800b100:	2b03      	cmp	r3, #3
 800b102:	d817      	bhi.n	800b134 <USBD_Get_USB_Status+0x44>
 800b104:	a201      	add	r2, pc, #4	; (adr r2, 800b10c <USBD_Get_USB_Status+0x1c>)
 800b106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b10a:	bf00      	nop
 800b10c:	0800b11d 	.word	0x0800b11d
 800b110:	0800b123 	.word	0x0800b123
 800b114:	0800b129 	.word	0x0800b129
 800b118:	0800b12f 	.word	0x0800b12f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b11c:	2300      	movs	r3, #0
 800b11e:	73fb      	strb	r3, [r7, #15]
    break;
 800b120:	e00b      	b.n	800b13a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b122:	2303      	movs	r3, #3
 800b124:	73fb      	strb	r3, [r7, #15]
    break;
 800b126:	e008      	b.n	800b13a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b128:	2301      	movs	r3, #1
 800b12a:	73fb      	strb	r3, [r7, #15]
    break;
 800b12c:	e005      	b.n	800b13a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b12e:	2303      	movs	r3, #3
 800b130:	73fb      	strb	r3, [r7, #15]
    break;
 800b132:	e002      	b.n	800b13a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b134:	2303      	movs	r3, #3
 800b136:	73fb      	strb	r3, [r7, #15]
    break;
 800b138:	bf00      	nop
  }
  return usb_status;
 800b13a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3714      	adds	r7, #20
 800b140:	46bd      	mov	sp, r7
 800b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b146:	4770      	bx	lr

0800b148 <__errno>:
 800b148:	4b01      	ldr	r3, [pc, #4]	; (800b150 <__errno+0x8>)
 800b14a:	6818      	ldr	r0, [r3, #0]
 800b14c:	4770      	bx	lr
 800b14e:	bf00      	nop
 800b150:	200000fc 	.word	0x200000fc

0800b154 <__libc_init_array>:
 800b154:	b570      	push	{r4, r5, r6, lr}
 800b156:	4d0d      	ldr	r5, [pc, #52]	; (800b18c <__libc_init_array+0x38>)
 800b158:	4c0d      	ldr	r4, [pc, #52]	; (800b190 <__libc_init_array+0x3c>)
 800b15a:	1b64      	subs	r4, r4, r5
 800b15c:	10a4      	asrs	r4, r4, #2
 800b15e:	2600      	movs	r6, #0
 800b160:	42a6      	cmp	r6, r4
 800b162:	d109      	bne.n	800b178 <__libc_init_array+0x24>
 800b164:	4d0b      	ldr	r5, [pc, #44]	; (800b194 <__libc_init_array+0x40>)
 800b166:	4c0c      	ldr	r4, [pc, #48]	; (800b198 <__libc_init_array+0x44>)
 800b168:	f001 fa34 	bl	800c5d4 <_init>
 800b16c:	1b64      	subs	r4, r4, r5
 800b16e:	10a4      	asrs	r4, r4, #2
 800b170:	2600      	movs	r6, #0
 800b172:	42a6      	cmp	r6, r4
 800b174:	d105      	bne.n	800b182 <__libc_init_array+0x2e>
 800b176:	bd70      	pop	{r4, r5, r6, pc}
 800b178:	f855 3b04 	ldr.w	r3, [r5], #4
 800b17c:	4798      	blx	r3
 800b17e:	3601      	adds	r6, #1
 800b180:	e7ee      	b.n	800b160 <__libc_init_array+0xc>
 800b182:	f855 3b04 	ldr.w	r3, [r5], #4
 800b186:	4798      	blx	r3
 800b188:	3601      	adds	r6, #1
 800b18a:	e7f2      	b.n	800b172 <__libc_init_array+0x1e>
 800b18c:	0800c7c0 	.word	0x0800c7c0
 800b190:	0800c7c0 	.word	0x0800c7c0
 800b194:	0800c7c0 	.word	0x0800c7c0
 800b198:	0800c7c4 	.word	0x0800c7c4

0800b19c <memset>:
 800b19c:	4402      	add	r2, r0
 800b19e:	4603      	mov	r3, r0
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	d100      	bne.n	800b1a6 <memset+0xa>
 800b1a4:	4770      	bx	lr
 800b1a6:	f803 1b01 	strb.w	r1, [r3], #1
 800b1aa:	e7f9      	b.n	800b1a0 <memset+0x4>

0800b1ac <rand>:
 800b1ac:	4b16      	ldr	r3, [pc, #88]	; (800b208 <rand+0x5c>)
 800b1ae:	b510      	push	{r4, lr}
 800b1b0:	681c      	ldr	r4, [r3, #0]
 800b1b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b1b4:	b9b3      	cbnz	r3, 800b1e4 <rand+0x38>
 800b1b6:	2018      	movs	r0, #24
 800b1b8:	f000 f886 	bl	800b2c8 <malloc>
 800b1bc:	63a0      	str	r0, [r4, #56]	; 0x38
 800b1be:	b928      	cbnz	r0, 800b1cc <rand+0x20>
 800b1c0:	4602      	mov	r2, r0
 800b1c2:	4b12      	ldr	r3, [pc, #72]	; (800b20c <rand+0x60>)
 800b1c4:	4812      	ldr	r0, [pc, #72]	; (800b210 <rand+0x64>)
 800b1c6:	214e      	movs	r1, #78	; 0x4e
 800b1c8:	f000 f84e 	bl	800b268 <__assert_func>
 800b1cc:	4a11      	ldr	r2, [pc, #68]	; (800b214 <rand+0x68>)
 800b1ce:	4b12      	ldr	r3, [pc, #72]	; (800b218 <rand+0x6c>)
 800b1d0:	e9c0 2300 	strd	r2, r3, [r0]
 800b1d4:	4b11      	ldr	r3, [pc, #68]	; (800b21c <rand+0x70>)
 800b1d6:	6083      	str	r3, [r0, #8]
 800b1d8:	230b      	movs	r3, #11
 800b1da:	8183      	strh	r3, [r0, #12]
 800b1dc:	2201      	movs	r2, #1
 800b1de:	2300      	movs	r3, #0
 800b1e0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800b1e4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800b1e6:	4a0e      	ldr	r2, [pc, #56]	; (800b220 <rand+0x74>)
 800b1e8:	6920      	ldr	r0, [r4, #16]
 800b1ea:	6963      	ldr	r3, [r4, #20]
 800b1ec:	490d      	ldr	r1, [pc, #52]	; (800b224 <rand+0x78>)
 800b1ee:	4342      	muls	r2, r0
 800b1f0:	fb01 2203 	mla	r2, r1, r3, r2
 800b1f4:	fba0 0101 	umull	r0, r1, r0, r1
 800b1f8:	1c43      	adds	r3, r0, #1
 800b1fa:	eb42 0001 	adc.w	r0, r2, r1
 800b1fe:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800b202:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b206:	bd10      	pop	{r4, pc}
 800b208:	200000fc 	.word	0x200000fc
 800b20c:	0800c674 	.word	0x0800c674
 800b210:	0800c68b 	.word	0x0800c68b
 800b214:	abcd330e 	.word	0xabcd330e
 800b218:	e66d1234 	.word	0xe66d1234
 800b21c:	0005deec 	.word	0x0005deec
 800b220:	5851f42d 	.word	0x5851f42d
 800b224:	4c957f2d 	.word	0x4c957f2d

0800b228 <siprintf>:
 800b228:	b40e      	push	{r1, r2, r3}
 800b22a:	b500      	push	{lr}
 800b22c:	b09c      	sub	sp, #112	; 0x70
 800b22e:	ab1d      	add	r3, sp, #116	; 0x74
 800b230:	9002      	str	r0, [sp, #8]
 800b232:	9006      	str	r0, [sp, #24]
 800b234:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b238:	4809      	ldr	r0, [pc, #36]	; (800b260 <siprintf+0x38>)
 800b23a:	9107      	str	r1, [sp, #28]
 800b23c:	9104      	str	r1, [sp, #16]
 800b23e:	4909      	ldr	r1, [pc, #36]	; (800b264 <siprintf+0x3c>)
 800b240:	f853 2b04 	ldr.w	r2, [r3], #4
 800b244:	9105      	str	r1, [sp, #20]
 800b246:	6800      	ldr	r0, [r0, #0]
 800b248:	9301      	str	r3, [sp, #4]
 800b24a:	a902      	add	r1, sp, #8
 800b24c:	f000 f980 	bl	800b550 <_svfiprintf_r>
 800b250:	9b02      	ldr	r3, [sp, #8]
 800b252:	2200      	movs	r2, #0
 800b254:	701a      	strb	r2, [r3, #0]
 800b256:	b01c      	add	sp, #112	; 0x70
 800b258:	f85d eb04 	ldr.w	lr, [sp], #4
 800b25c:	b003      	add	sp, #12
 800b25e:	4770      	bx	lr
 800b260:	200000fc 	.word	0x200000fc
 800b264:	ffff0208 	.word	0xffff0208

0800b268 <__assert_func>:
 800b268:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b26a:	4614      	mov	r4, r2
 800b26c:	461a      	mov	r2, r3
 800b26e:	4b09      	ldr	r3, [pc, #36]	; (800b294 <__assert_func+0x2c>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	4605      	mov	r5, r0
 800b274:	68d8      	ldr	r0, [r3, #12]
 800b276:	b14c      	cbz	r4, 800b28c <__assert_func+0x24>
 800b278:	4b07      	ldr	r3, [pc, #28]	; (800b298 <__assert_func+0x30>)
 800b27a:	9100      	str	r1, [sp, #0]
 800b27c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b280:	4906      	ldr	r1, [pc, #24]	; (800b29c <__assert_func+0x34>)
 800b282:	462b      	mov	r3, r5
 800b284:	f000 f80e 	bl	800b2a4 <fiprintf>
 800b288:	f000 fe20 	bl	800becc <abort>
 800b28c:	4b04      	ldr	r3, [pc, #16]	; (800b2a0 <__assert_func+0x38>)
 800b28e:	461c      	mov	r4, r3
 800b290:	e7f3      	b.n	800b27a <__assert_func+0x12>
 800b292:	bf00      	nop
 800b294:	200000fc 	.word	0x200000fc
 800b298:	0800c6e6 	.word	0x0800c6e6
 800b29c:	0800c6f3 	.word	0x0800c6f3
 800b2a0:	0800c721 	.word	0x0800c721

0800b2a4 <fiprintf>:
 800b2a4:	b40e      	push	{r1, r2, r3}
 800b2a6:	b503      	push	{r0, r1, lr}
 800b2a8:	4601      	mov	r1, r0
 800b2aa:	ab03      	add	r3, sp, #12
 800b2ac:	4805      	ldr	r0, [pc, #20]	; (800b2c4 <fiprintf+0x20>)
 800b2ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2b2:	6800      	ldr	r0, [r0, #0]
 800b2b4:	9301      	str	r3, [sp, #4]
 800b2b6:	f000 fa75 	bl	800b7a4 <_vfiprintf_r>
 800b2ba:	b002      	add	sp, #8
 800b2bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2c0:	b003      	add	sp, #12
 800b2c2:	4770      	bx	lr
 800b2c4:	200000fc 	.word	0x200000fc

0800b2c8 <malloc>:
 800b2c8:	4b02      	ldr	r3, [pc, #8]	; (800b2d4 <malloc+0xc>)
 800b2ca:	4601      	mov	r1, r0
 800b2cc:	6818      	ldr	r0, [r3, #0]
 800b2ce:	f000 b86f 	b.w	800b3b0 <_malloc_r>
 800b2d2:	bf00      	nop
 800b2d4:	200000fc 	.word	0x200000fc

0800b2d8 <_free_r>:
 800b2d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b2da:	2900      	cmp	r1, #0
 800b2dc:	d044      	beq.n	800b368 <_free_r+0x90>
 800b2de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2e2:	9001      	str	r0, [sp, #4]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	f1a1 0404 	sub.w	r4, r1, #4
 800b2ea:	bfb8      	it	lt
 800b2ec:	18e4      	addlt	r4, r4, r3
 800b2ee:	f001 f83d 	bl	800c36c <__malloc_lock>
 800b2f2:	4a1e      	ldr	r2, [pc, #120]	; (800b36c <_free_r+0x94>)
 800b2f4:	9801      	ldr	r0, [sp, #4]
 800b2f6:	6813      	ldr	r3, [r2, #0]
 800b2f8:	b933      	cbnz	r3, 800b308 <_free_r+0x30>
 800b2fa:	6063      	str	r3, [r4, #4]
 800b2fc:	6014      	str	r4, [r2, #0]
 800b2fe:	b003      	add	sp, #12
 800b300:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b304:	f001 b838 	b.w	800c378 <__malloc_unlock>
 800b308:	42a3      	cmp	r3, r4
 800b30a:	d908      	bls.n	800b31e <_free_r+0x46>
 800b30c:	6825      	ldr	r5, [r4, #0]
 800b30e:	1961      	adds	r1, r4, r5
 800b310:	428b      	cmp	r3, r1
 800b312:	bf01      	itttt	eq
 800b314:	6819      	ldreq	r1, [r3, #0]
 800b316:	685b      	ldreq	r3, [r3, #4]
 800b318:	1949      	addeq	r1, r1, r5
 800b31a:	6021      	streq	r1, [r4, #0]
 800b31c:	e7ed      	b.n	800b2fa <_free_r+0x22>
 800b31e:	461a      	mov	r2, r3
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	b10b      	cbz	r3, 800b328 <_free_r+0x50>
 800b324:	42a3      	cmp	r3, r4
 800b326:	d9fa      	bls.n	800b31e <_free_r+0x46>
 800b328:	6811      	ldr	r1, [r2, #0]
 800b32a:	1855      	adds	r5, r2, r1
 800b32c:	42a5      	cmp	r5, r4
 800b32e:	d10b      	bne.n	800b348 <_free_r+0x70>
 800b330:	6824      	ldr	r4, [r4, #0]
 800b332:	4421      	add	r1, r4
 800b334:	1854      	adds	r4, r2, r1
 800b336:	42a3      	cmp	r3, r4
 800b338:	6011      	str	r1, [r2, #0]
 800b33a:	d1e0      	bne.n	800b2fe <_free_r+0x26>
 800b33c:	681c      	ldr	r4, [r3, #0]
 800b33e:	685b      	ldr	r3, [r3, #4]
 800b340:	6053      	str	r3, [r2, #4]
 800b342:	4421      	add	r1, r4
 800b344:	6011      	str	r1, [r2, #0]
 800b346:	e7da      	b.n	800b2fe <_free_r+0x26>
 800b348:	d902      	bls.n	800b350 <_free_r+0x78>
 800b34a:	230c      	movs	r3, #12
 800b34c:	6003      	str	r3, [r0, #0]
 800b34e:	e7d6      	b.n	800b2fe <_free_r+0x26>
 800b350:	6825      	ldr	r5, [r4, #0]
 800b352:	1961      	adds	r1, r4, r5
 800b354:	428b      	cmp	r3, r1
 800b356:	bf04      	itt	eq
 800b358:	6819      	ldreq	r1, [r3, #0]
 800b35a:	685b      	ldreq	r3, [r3, #4]
 800b35c:	6063      	str	r3, [r4, #4]
 800b35e:	bf04      	itt	eq
 800b360:	1949      	addeq	r1, r1, r5
 800b362:	6021      	streq	r1, [r4, #0]
 800b364:	6054      	str	r4, [r2, #4]
 800b366:	e7ca      	b.n	800b2fe <_free_r+0x26>
 800b368:	b003      	add	sp, #12
 800b36a:	bd30      	pop	{r4, r5, pc}
 800b36c:	2000180c 	.word	0x2000180c

0800b370 <sbrk_aligned>:
 800b370:	b570      	push	{r4, r5, r6, lr}
 800b372:	4e0e      	ldr	r6, [pc, #56]	; (800b3ac <sbrk_aligned+0x3c>)
 800b374:	460c      	mov	r4, r1
 800b376:	6831      	ldr	r1, [r6, #0]
 800b378:	4605      	mov	r5, r0
 800b37a:	b911      	cbnz	r1, 800b382 <sbrk_aligned+0x12>
 800b37c:	f000 fcd6 	bl	800bd2c <_sbrk_r>
 800b380:	6030      	str	r0, [r6, #0]
 800b382:	4621      	mov	r1, r4
 800b384:	4628      	mov	r0, r5
 800b386:	f000 fcd1 	bl	800bd2c <_sbrk_r>
 800b38a:	1c43      	adds	r3, r0, #1
 800b38c:	d00a      	beq.n	800b3a4 <sbrk_aligned+0x34>
 800b38e:	1cc4      	adds	r4, r0, #3
 800b390:	f024 0403 	bic.w	r4, r4, #3
 800b394:	42a0      	cmp	r0, r4
 800b396:	d007      	beq.n	800b3a8 <sbrk_aligned+0x38>
 800b398:	1a21      	subs	r1, r4, r0
 800b39a:	4628      	mov	r0, r5
 800b39c:	f000 fcc6 	bl	800bd2c <_sbrk_r>
 800b3a0:	3001      	adds	r0, #1
 800b3a2:	d101      	bne.n	800b3a8 <sbrk_aligned+0x38>
 800b3a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	bd70      	pop	{r4, r5, r6, pc}
 800b3ac:	20001810 	.word	0x20001810

0800b3b0 <_malloc_r>:
 800b3b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3b4:	1ccd      	adds	r5, r1, #3
 800b3b6:	f025 0503 	bic.w	r5, r5, #3
 800b3ba:	3508      	adds	r5, #8
 800b3bc:	2d0c      	cmp	r5, #12
 800b3be:	bf38      	it	cc
 800b3c0:	250c      	movcc	r5, #12
 800b3c2:	2d00      	cmp	r5, #0
 800b3c4:	4607      	mov	r7, r0
 800b3c6:	db01      	blt.n	800b3cc <_malloc_r+0x1c>
 800b3c8:	42a9      	cmp	r1, r5
 800b3ca:	d905      	bls.n	800b3d8 <_malloc_r+0x28>
 800b3cc:	230c      	movs	r3, #12
 800b3ce:	603b      	str	r3, [r7, #0]
 800b3d0:	2600      	movs	r6, #0
 800b3d2:	4630      	mov	r0, r6
 800b3d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3d8:	4e2e      	ldr	r6, [pc, #184]	; (800b494 <_malloc_r+0xe4>)
 800b3da:	f000 ffc7 	bl	800c36c <__malloc_lock>
 800b3de:	6833      	ldr	r3, [r6, #0]
 800b3e0:	461c      	mov	r4, r3
 800b3e2:	bb34      	cbnz	r4, 800b432 <_malloc_r+0x82>
 800b3e4:	4629      	mov	r1, r5
 800b3e6:	4638      	mov	r0, r7
 800b3e8:	f7ff ffc2 	bl	800b370 <sbrk_aligned>
 800b3ec:	1c43      	adds	r3, r0, #1
 800b3ee:	4604      	mov	r4, r0
 800b3f0:	d14d      	bne.n	800b48e <_malloc_r+0xde>
 800b3f2:	6834      	ldr	r4, [r6, #0]
 800b3f4:	4626      	mov	r6, r4
 800b3f6:	2e00      	cmp	r6, #0
 800b3f8:	d140      	bne.n	800b47c <_malloc_r+0xcc>
 800b3fa:	6823      	ldr	r3, [r4, #0]
 800b3fc:	4631      	mov	r1, r6
 800b3fe:	4638      	mov	r0, r7
 800b400:	eb04 0803 	add.w	r8, r4, r3
 800b404:	f000 fc92 	bl	800bd2c <_sbrk_r>
 800b408:	4580      	cmp	r8, r0
 800b40a:	d13a      	bne.n	800b482 <_malloc_r+0xd2>
 800b40c:	6821      	ldr	r1, [r4, #0]
 800b40e:	3503      	adds	r5, #3
 800b410:	1a6d      	subs	r5, r5, r1
 800b412:	f025 0503 	bic.w	r5, r5, #3
 800b416:	3508      	adds	r5, #8
 800b418:	2d0c      	cmp	r5, #12
 800b41a:	bf38      	it	cc
 800b41c:	250c      	movcc	r5, #12
 800b41e:	4629      	mov	r1, r5
 800b420:	4638      	mov	r0, r7
 800b422:	f7ff ffa5 	bl	800b370 <sbrk_aligned>
 800b426:	3001      	adds	r0, #1
 800b428:	d02b      	beq.n	800b482 <_malloc_r+0xd2>
 800b42a:	6823      	ldr	r3, [r4, #0]
 800b42c:	442b      	add	r3, r5
 800b42e:	6023      	str	r3, [r4, #0]
 800b430:	e00e      	b.n	800b450 <_malloc_r+0xa0>
 800b432:	6822      	ldr	r2, [r4, #0]
 800b434:	1b52      	subs	r2, r2, r5
 800b436:	d41e      	bmi.n	800b476 <_malloc_r+0xc6>
 800b438:	2a0b      	cmp	r2, #11
 800b43a:	d916      	bls.n	800b46a <_malloc_r+0xba>
 800b43c:	1961      	adds	r1, r4, r5
 800b43e:	42a3      	cmp	r3, r4
 800b440:	6025      	str	r5, [r4, #0]
 800b442:	bf18      	it	ne
 800b444:	6059      	strne	r1, [r3, #4]
 800b446:	6863      	ldr	r3, [r4, #4]
 800b448:	bf08      	it	eq
 800b44a:	6031      	streq	r1, [r6, #0]
 800b44c:	5162      	str	r2, [r4, r5]
 800b44e:	604b      	str	r3, [r1, #4]
 800b450:	4638      	mov	r0, r7
 800b452:	f104 060b 	add.w	r6, r4, #11
 800b456:	f000 ff8f 	bl	800c378 <__malloc_unlock>
 800b45a:	f026 0607 	bic.w	r6, r6, #7
 800b45e:	1d23      	adds	r3, r4, #4
 800b460:	1af2      	subs	r2, r6, r3
 800b462:	d0b6      	beq.n	800b3d2 <_malloc_r+0x22>
 800b464:	1b9b      	subs	r3, r3, r6
 800b466:	50a3      	str	r3, [r4, r2]
 800b468:	e7b3      	b.n	800b3d2 <_malloc_r+0x22>
 800b46a:	6862      	ldr	r2, [r4, #4]
 800b46c:	42a3      	cmp	r3, r4
 800b46e:	bf0c      	ite	eq
 800b470:	6032      	streq	r2, [r6, #0]
 800b472:	605a      	strne	r2, [r3, #4]
 800b474:	e7ec      	b.n	800b450 <_malloc_r+0xa0>
 800b476:	4623      	mov	r3, r4
 800b478:	6864      	ldr	r4, [r4, #4]
 800b47a:	e7b2      	b.n	800b3e2 <_malloc_r+0x32>
 800b47c:	4634      	mov	r4, r6
 800b47e:	6876      	ldr	r6, [r6, #4]
 800b480:	e7b9      	b.n	800b3f6 <_malloc_r+0x46>
 800b482:	230c      	movs	r3, #12
 800b484:	603b      	str	r3, [r7, #0]
 800b486:	4638      	mov	r0, r7
 800b488:	f000 ff76 	bl	800c378 <__malloc_unlock>
 800b48c:	e7a1      	b.n	800b3d2 <_malloc_r+0x22>
 800b48e:	6025      	str	r5, [r4, #0]
 800b490:	e7de      	b.n	800b450 <_malloc_r+0xa0>
 800b492:	bf00      	nop
 800b494:	2000180c 	.word	0x2000180c

0800b498 <__ssputs_r>:
 800b498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b49c:	688e      	ldr	r6, [r1, #8]
 800b49e:	429e      	cmp	r6, r3
 800b4a0:	4682      	mov	sl, r0
 800b4a2:	460c      	mov	r4, r1
 800b4a4:	4690      	mov	r8, r2
 800b4a6:	461f      	mov	r7, r3
 800b4a8:	d838      	bhi.n	800b51c <__ssputs_r+0x84>
 800b4aa:	898a      	ldrh	r2, [r1, #12]
 800b4ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b4b0:	d032      	beq.n	800b518 <__ssputs_r+0x80>
 800b4b2:	6825      	ldr	r5, [r4, #0]
 800b4b4:	6909      	ldr	r1, [r1, #16]
 800b4b6:	eba5 0901 	sub.w	r9, r5, r1
 800b4ba:	6965      	ldr	r5, [r4, #20]
 800b4bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b4c4:	3301      	adds	r3, #1
 800b4c6:	444b      	add	r3, r9
 800b4c8:	106d      	asrs	r5, r5, #1
 800b4ca:	429d      	cmp	r5, r3
 800b4cc:	bf38      	it	cc
 800b4ce:	461d      	movcc	r5, r3
 800b4d0:	0553      	lsls	r3, r2, #21
 800b4d2:	d531      	bpl.n	800b538 <__ssputs_r+0xa0>
 800b4d4:	4629      	mov	r1, r5
 800b4d6:	f7ff ff6b 	bl	800b3b0 <_malloc_r>
 800b4da:	4606      	mov	r6, r0
 800b4dc:	b950      	cbnz	r0, 800b4f4 <__ssputs_r+0x5c>
 800b4de:	230c      	movs	r3, #12
 800b4e0:	f8ca 3000 	str.w	r3, [sl]
 800b4e4:	89a3      	ldrh	r3, [r4, #12]
 800b4e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4ea:	81a3      	strh	r3, [r4, #12]
 800b4ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4f4:	6921      	ldr	r1, [r4, #16]
 800b4f6:	464a      	mov	r2, r9
 800b4f8:	f000 ff10 	bl	800c31c <memcpy>
 800b4fc:	89a3      	ldrh	r3, [r4, #12]
 800b4fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b502:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b506:	81a3      	strh	r3, [r4, #12]
 800b508:	6126      	str	r6, [r4, #16]
 800b50a:	6165      	str	r5, [r4, #20]
 800b50c:	444e      	add	r6, r9
 800b50e:	eba5 0509 	sub.w	r5, r5, r9
 800b512:	6026      	str	r6, [r4, #0]
 800b514:	60a5      	str	r5, [r4, #8]
 800b516:	463e      	mov	r6, r7
 800b518:	42be      	cmp	r6, r7
 800b51a:	d900      	bls.n	800b51e <__ssputs_r+0x86>
 800b51c:	463e      	mov	r6, r7
 800b51e:	6820      	ldr	r0, [r4, #0]
 800b520:	4632      	mov	r2, r6
 800b522:	4641      	mov	r1, r8
 800b524:	f000 ff08 	bl	800c338 <memmove>
 800b528:	68a3      	ldr	r3, [r4, #8]
 800b52a:	1b9b      	subs	r3, r3, r6
 800b52c:	60a3      	str	r3, [r4, #8]
 800b52e:	6823      	ldr	r3, [r4, #0]
 800b530:	4433      	add	r3, r6
 800b532:	6023      	str	r3, [r4, #0]
 800b534:	2000      	movs	r0, #0
 800b536:	e7db      	b.n	800b4f0 <__ssputs_r+0x58>
 800b538:	462a      	mov	r2, r5
 800b53a:	f000 ff23 	bl	800c384 <_realloc_r>
 800b53e:	4606      	mov	r6, r0
 800b540:	2800      	cmp	r0, #0
 800b542:	d1e1      	bne.n	800b508 <__ssputs_r+0x70>
 800b544:	6921      	ldr	r1, [r4, #16]
 800b546:	4650      	mov	r0, sl
 800b548:	f7ff fec6 	bl	800b2d8 <_free_r>
 800b54c:	e7c7      	b.n	800b4de <__ssputs_r+0x46>
	...

0800b550 <_svfiprintf_r>:
 800b550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b554:	4698      	mov	r8, r3
 800b556:	898b      	ldrh	r3, [r1, #12]
 800b558:	061b      	lsls	r3, r3, #24
 800b55a:	b09d      	sub	sp, #116	; 0x74
 800b55c:	4607      	mov	r7, r0
 800b55e:	460d      	mov	r5, r1
 800b560:	4614      	mov	r4, r2
 800b562:	d50e      	bpl.n	800b582 <_svfiprintf_r+0x32>
 800b564:	690b      	ldr	r3, [r1, #16]
 800b566:	b963      	cbnz	r3, 800b582 <_svfiprintf_r+0x32>
 800b568:	2140      	movs	r1, #64	; 0x40
 800b56a:	f7ff ff21 	bl	800b3b0 <_malloc_r>
 800b56e:	6028      	str	r0, [r5, #0]
 800b570:	6128      	str	r0, [r5, #16]
 800b572:	b920      	cbnz	r0, 800b57e <_svfiprintf_r+0x2e>
 800b574:	230c      	movs	r3, #12
 800b576:	603b      	str	r3, [r7, #0]
 800b578:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b57c:	e0d1      	b.n	800b722 <_svfiprintf_r+0x1d2>
 800b57e:	2340      	movs	r3, #64	; 0x40
 800b580:	616b      	str	r3, [r5, #20]
 800b582:	2300      	movs	r3, #0
 800b584:	9309      	str	r3, [sp, #36]	; 0x24
 800b586:	2320      	movs	r3, #32
 800b588:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b58c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b590:	2330      	movs	r3, #48	; 0x30
 800b592:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b73c <_svfiprintf_r+0x1ec>
 800b596:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b59a:	f04f 0901 	mov.w	r9, #1
 800b59e:	4623      	mov	r3, r4
 800b5a0:	469a      	mov	sl, r3
 800b5a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5a6:	b10a      	cbz	r2, 800b5ac <_svfiprintf_r+0x5c>
 800b5a8:	2a25      	cmp	r2, #37	; 0x25
 800b5aa:	d1f9      	bne.n	800b5a0 <_svfiprintf_r+0x50>
 800b5ac:	ebba 0b04 	subs.w	fp, sl, r4
 800b5b0:	d00b      	beq.n	800b5ca <_svfiprintf_r+0x7a>
 800b5b2:	465b      	mov	r3, fp
 800b5b4:	4622      	mov	r2, r4
 800b5b6:	4629      	mov	r1, r5
 800b5b8:	4638      	mov	r0, r7
 800b5ba:	f7ff ff6d 	bl	800b498 <__ssputs_r>
 800b5be:	3001      	adds	r0, #1
 800b5c0:	f000 80aa 	beq.w	800b718 <_svfiprintf_r+0x1c8>
 800b5c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5c6:	445a      	add	r2, fp
 800b5c8:	9209      	str	r2, [sp, #36]	; 0x24
 800b5ca:	f89a 3000 	ldrb.w	r3, [sl]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	f000 80a2 	beq.w	800b718 <_svfiprintf_r+0x1c8>
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b5da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5de:	f10a 0a01 	add.w	sl, sl, #1
 800b5e2:	9304      	str	r3, [sp, #16]
 800b5e4:	9307      	str	r3, [sp, #28]
 800b5e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5ea:	931a      	str	r3, [sp, #104]	; 0x68
 800b5ec:	4654      	mov	r4, sl
 800b5ee:	2205      	movs	r2, #5
 800b5f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5f4:	4851      	ldr	r0, [pc, #324]	; (800b73c <_svfiprintf_r+0x1ec>)
 800b5f6:	f7f4 fdeb 	bl	80001d0 <memchr>
 800b5fa:	9a04      	ldr	r2, [sp, #16]
 800b5fc:	b9d8      	cbnz	r0, 800b636 <_svfiprintf_r+0xe6>
 800b5fe:	06d0      	lsls	r0, r2, #27
 800b600:	bf44      	itt	mi
 800b602:	2320      	movmi	r3, #32
 800b604:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b608:	0711      	lsls	r1, r2, #28
 800b60a:	bf44      	itt	mi
 800b60c:	232b      	movmi	r3, #43	; 0x2b
 800b60e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b612:	f89a 3000 	ldrb.w	r3, [sl]
 800b616:	2b2a      	cmp	r3, #42	; 0x2a
 800b618:	d015      	beq.n	800b646 <_svfiprintf_r+0xf6>
 800b61a:	9a07      	ldr	r2, [sp, #28]
 800b61c:	4654      	mov	r4, sl
 800b61e:	2000      	movs	r0, #0
 800b620:	f04f 0c0a 	mov.w	ip, #10
 800b624:	4621      	mov	r1, r4
 800b626:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b62a:	3b30      	subs	r3, #48	; 0x30
 800b62c:	2b09      	cmp	r3, #9
 800b62e:	d94e      	bls.n	800b6ce <_svfiprintf_r+0x17e>
 800b630:	b1b0      	cbz	r0, 800b660 <_svfiprintf_r+0x110>
 800b632:	9207      	str	r2, [sp, #28]
 800b634:	e014      	b.n	800b660 <_svfiprintf_r+0x110>
 800b636:	eba0 0308 	sub.w	r3, r0, r8
 800b63a:	fa09 f303 	lsl.w	r3, r9, r3
 800b63e:	4313      	orrs	r3, r2
 800b640:	9304      	str	r3, [sp, #16]
 800b642:	46a2      	mov	sl, r4
 800b644:	e7d2      	b.n	800b5ec <_svfiprintf_r+0x9c>
 800b646:	9b03      	ldr	r3, [sp, #12]
 800b648:	1d19      	adds	r1, r3, #4
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	9103      	str	r1, [sp, #12]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	bfbb      	ittet	lt
 800b652:	425b      	neglt	r3, r3
 800b654:	f042 0202 	orrlt.w	r2, r2, #2
 800b658:	9307      	strge	r3, [sp, #28]
 800b65a:	9307      	strlt	r3, [sp, #28]
 800b65c:	bfb8      	it	lt
 800b65e:	9204      	strlt	r2, [sp, #16]
 800b660:	7823      	ldrb	r3, [r4, #0]
 800b662:	2b2e      	cmp	r3, #46	; 0x2e
 800b664:	d10c      	bne.n	800b680 <_svfiprintf_r+0x130>
 800b666:	7863      	ldrb	r3, [r4, #1]
 800b668:	2b2a      	cmp	r3, #42	; 0x2a
 800b66a:	d135      	bne.n	800b6d8 <_svfiprintf_r+0x188>
 800b66c:	9b03      	ldr	r3, [sp, #12]
 800b66e:	1d1a      	adds	r2, r3, #4
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	9203      	str	r2, [sp, #12]
 800b674:	2b00      	cmp	r3, #0
 800b676:	bfb8      	it	lt
 800b678:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b67c:	3402      	adds	r4, #2
 800b67e:	9305      	str	r3, [sp, #20]
 800b680:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b74c <_svfiprintf_r+0x1fc>
 800b684:	7821      	ldrb	r1, [r4, #0]
 800b686:	2203      	movs	r2, #3
 800b688:	4650      	mov	r0, sl
 800b68a:	f7f4 fda1 	bl	80001d0 <memchr>
 800b68e:	b140      	cbz	r0, 800b6a2 <_svfiprintf_r+0x152>
 800b690:	2340      	movs	r3, #64	; 0x40
 800b692:	eba0 000a 	sub.w	r0, r0, sl
 800b696:	fa03 f000 	lsl.w	r0, r3, r0
 800b69a:	9b04      	ldr	r3, [sp, #16]
 800b69c:	4303      	orrs	r3, r0
 800b69e:	3401      	adds	r4, #1
 800b6a0:	9304      	str	r3, [sp, #16]
 800b6a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6a6:	4826      	ldr	r0, [pc, #152]	; (800b740 <_svfiprintf_r+0x1f0>)
 800b6a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b6ac:	2206      	movs	r2, #6
 800b6ae:	f7f4 fd8f 	bl	80001d0 <memchr>
 800b6b2:	2800      	cmp	r0, #0
 800b6b4:	d038      	beq.n	800b728 <_svfiprintf_r+0x1d8>
 800b6b6:	4b23      	ldr	r3, [pc, #140]	; (800b744 <_svfiprintf_r+0x1f4>)
 800b6b8:	bb1b      	cbnz	r3, 800b702 <_svfiprintf_r+0x1b2>
 800b6ba:	9b03      	ldr	r3, [sp, #12]
 800b6bc:	3307      	adds	r3, #7
 800b6be:	f023 0307 	bic.w	r3, r3, #7
 800b6c2:	3308      	adds	r3, #8
 800b6c4:	9303      	str	r3, [sp, #12]
 800b6c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6c8:	4433      	add	r3, r6
 800b6ca:	9309      	str	r3, [sp, #36]	; 0x24
 800b6cc:	e767      	b.n	800b59e <_svfiprintf_r+0x4e>
 800b6ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6d2:	460c      	mov	r4, r1
 800b6d4:	2001      	movs	r0, #1
 800b6d6:	e7a5      	b.n	800b624 <_svfiprintf_r+0xd4>
 800b6d8:	2300      	movs	r3, #0
 800b6da:	3401      	adds	r4, #1
 800b6dc:	9305      	str	r3, [sp, #20]
 800b6de:	4619      	mov	r1, r3
 800b6e0:	f04f 0c0a 	mov.w	ip, #10
 800b6e4:	4620      	mov	r0, r4
 800b6e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6ea:	3a30      	subs	r2, #48	; 0x30
 800b6ec:	2a09      	cmp	r2, #9
 800b6ee:	d903      	bls.n	800b6f8 <_svfiprintf_r+0x1a8>
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d0c5      	beq.n	800b680 <_svfiprintf_r+0x130>
 800b6f4:	9105      	str	r1, [sp, #20]
 800b6f6:	e7c3      	b.n	800b680 <_svfiprintf_r+0x130>
 800b6f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6fc:	4604      	mov	r4, r0
 800b6fe:	2301      	movs	r3, #1
 800b700:	e7f0      	b.n	800b6e4 <_svfiprintf_r+0x194>
 800b702:	ab03      	add	r3, sp, #12
 800b704:	9300      	str	r3, [sp, #0]
 800b706:	462a      	mov	r2, r5
 800b708:	4b0f      	ldr	r3, [pc, #60]	; (800b748 <_svfiprintf_r+0x1f8>)
 800b70a:	a904      	add	r1, sp, #16
 800b70c:	4638      	mov	r0, r7
 800b70e:	f3af 8000 	nop.w
 800b712:	1c42      	adds	r2, r0, #1
 800b714:	4606      	mov	r6, r0
 800b716:	d1d6      	bne.n	800b6c6 <_svfiprintf_r+0x176>
 800b718:	89ab      	ldrh	r3, [r5, #12]
 800b71a:	065b      	lsls	r3, r3, #25
 800b71c:	f53f af2c 	bmi.w	800b578 <_svfiprintf_r+0x28>
 800b720:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b722:	b01d      	add	sp, #116	; 0x74
 800b724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b728:	ab03      	add	r3, sp, #12
 800b72a:	9300      	str	r3, [sp, #0]
 800b72c:	462a      	mov	r2, r5
 800b72e:	4b06      	ldr	r3, [pc, #24]	; (800b748 <_svfiprintf_r+0x1f8>)
 800b730:	a904      	add	r1, sp, #16
 800b732:	4638      	mov	r0, r7
 800b734:	f000 f9d4 	bl	800bae0 <_printf_i>
 800b738:	e7eb      	b.n	800b712 <_svfiprintf_r+0x1c2>
 800b73a:	bf00      	nop
 800b73c:	0800c722 	.word	0x0800c722
 800b740:	0800c72c 	.word	0x0800c72c
 800b744:	00000000 	.word	0x00000000
 800b748:	0800b499 	.word	0x0800b499
 800b74c:	0800c728 	.word	0x0800c728

0800b750 <__sfputc_r>:
 800b750:	6893      	ldr	r3, [r2, #8]
 800b752:	3b01      	subs	r3, #1
 800b754:	2b00      	cmp	r3, #0
 800b756:	b410      	push	{r4}
 800b758:	6093      	str	r3, [r2, #8]
 800b75a:	da08      	bge.n	800b76e <__sfputc_r+0x1e>
 800b75c:	6994      	ldr	r4, [r2, #24]
 800b75e:	42a3      	cmp	r3, r4
 800b760:	db01      	blt.n	800b766 <__sfputc_r+0x16>
 800b762:	290a      	cmp	r1, #10
 800b764:	d103      	bne.n	800b76e <__sfputc_r+0x1e>
 800b766:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b76a:	f000 baef 	b.w	800bd4c <__swbuf_r>
 800b76e:	6813      	ldr	r3, [r2, #0]
 800b770:	1c58      	adds	r0, r3, #1
 800b772:	6010      	str	r0, [r2, #0]
 800b774:	7019      	strb	r1, [r3, #0]
 800b776:	4608      	mov	r0, r1
 800b778:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b77c:	4770      	bx	lr

0800b77e <__sfputs_r>:
 800b77e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b780:	4606      	mov	r6, r0
 800b782:	460f      	mov	r7, r1
 800b784:	4614      	mov	r4, r2
 800b786:	18d5      	adds	r5, r2, r3
 800b788:	42ac      	cmp	r4, r5
 800b78a:	d101      	bne.n	800b790 <__sfputs_r+0x12>
 800b78c:	2000      	movs	r0, #0
 800b78e:	e007      	b.n	800b7a0 <__sfputs_r+0x22>
 800b790:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b794:	463a      	mov	r2, r7
 800b796:	4630      	mov	r0, r6
 800b798:	f7ff ffda 	bl	800b750 <__sfputc_r>
 800b79c:	1c43      	adds	r3, r0, #1
 800b79e:	d1f3      	bne.n	800b788 <__sfputs_r+0xa>
 800b7a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b7a4 <_vfiprintf_r>:
 800b7a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7a8:	460d      	mov	r5, r1
 800b7aa:	b09d      	sub	sp, #116	; 0x74
 800b7ac:	4614      	mov	r4, r2
 800b7ae:	4698      	mov	r8, r3
 800b7b0:	4606      	mov	r6, r0
 800b7b2:	b118      	cbz	r0, 800b7bc <_vfiprintf_r+0x18>
 800b7b4:	6983      	ldr	r3, [r0, #24]
 800b7b6:	b90b      	cbnz	r3, 800b7bc <_vfiprintf_r+0x18>
 800b7b8:	f000 fcaa 	bl	800c110 <__sinit>
 800b7bc:	4b89      	ldr	r3, [pc, #548]	; (800b9e4 <_vfiprintf_r+0x240>)
 800b7be:	429d      	cmp	r5, r3
 800b7c0:	d11b      	bne.n	800b7fa <_vfiprintf_r+0x56>
 800b7c2:	6875      	ldr	r5, [r6, #4]
 800b7c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7c6:	07d9      	lsls	r1, r3, #31
 800b7c8:	d405      	bmi.n	800b7d6 <_vfiprintf_r+0x32>
 800b7ca:	89ab      	ldrh	r3, [r5, #12]
 800b7cc:	059a      	lsls	r2, r3, #22
 800b7ce:	d402      	bmi.n	800b7d6 <_vfiprintf_r+0x32>
 800b7d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7d2:	f000 fd3b 	bl	800c24c <__retarget_lock_acquire_recursive>
 800b7d6:	89ab      	ldrh	r3, [r5, #12]
 800b7d8:	071b      	lsls	r3, r3, #28
 800b7da:	d501      	bpl.n	800b7e0 <_vfiprintf_r+0x3c>
 800b7dc:	692b      	ldr	r3, [r5, #16]
 800b7de:	b9eb      	cbnz	r3, 800b81c <_vfiprintf_r+0x78>
 800b7e0:	4629      	mov	r1, r5
 800b7e2:	4630      	mov	r0, r6
 800b7e4:	f000 fb04 	bl	800bdf0 <__swsetup_r>
 800b7e8:	b1c0      	cbz	r0, 800b81c <_vfiprintf_r+0x78>
 800b7ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7ec:	07dc      	lsls	r4, r3, #31
 800b7ee:	d50e      	bpl.n	800b80e <_vfiprintf_r+0x6a>
 800b7f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b7f4:	b01d      	add	sp, #116	; 0x74
 800b7f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7fa:	4b7b      	ldr	r3, [pc, #492]	; (800b9e8 <_vfiprintf_r+0x244>)
 800b7fc:	429d      	cmp	r5, r3
 800b7fe:	d101      	bne.n	800b804 <_vfiprintf_r+0x60>
 800b800:	68b5      	ldr	r5, [r6, #8]
 800b802:	e7df      	b.n	800b7c4 <_vfiprintf_r+0x20>
 800b804:	4b79      	ldr	r3, [pc, #484]	; (800b9ec <_vfiprintf_r+0x248>)
 800b806:	429d      	cmp	r5, r3
 800b808:	bf08      	it	eq
 800b80a:	68f5      	ldreq	r5, [r6, #12]
 800b80c:	e7da      	b.n	800b7c4 <_vfiprintf_r+0x20>
 800b80e:	89ab      	ldrh	r3, [r5, #12]
 800b810:	0598      	lsls	r0, r3, #22
 800b812:	d4ed      	bmi.n	800b7f0 <_vfiprintf_r+0x4c>
 800b814:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b816:	f000 fd1a 	bl	800c24e <__retarget_lock_release_recursive>
 800b81a:	e7e9      	b.n	800b7f0 <_vfiprintf_r+0x4c>
 800b81c:	2300      	movs	r3, #0
 800b81e:	9309      	str	r3, [sp, #36]	; 0x24
 800b820:	2320      	movs	r3, #32
 800b822:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b826:	f8cd 800c 	str.w	r8, [sp, #12]
 800b82a:	2330      	movs	r3, #48	; 0x30
 800b82c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b9f0 <_vfiprintf_r+0x24c>
 800b830:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b834:	f04f 0901 	mov.w	r9, #1
 800b838:	4623      	mov	r3, r4
 800b83a:	469a      	mov	sl, r3
 800b83c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b840:	b10a      	cbz	r2, 800b846 <_vfiprintf_r+0xa2>
 800b842:	2a25      	cmp	r2, #37	; 0x25
 800b844:	d1f9      	bne.n	800b83a <_vfiprintf_r+0x96>
 800b846:	ebba 0b04 	subs.w	fp, sl, r4
 800b84a:	d00b      	beq.n	800b864 <_vfiprintf_r+0xc0>
 800b84c:	465b      	mov	r3, fp
 800b84e:	4622      	mov	r2, r4
 800b850:	4629      	mov	r1, r5
 800b852:	4630      	mov	r0, r6
 800b854:	f7ff ff93 	bl	800b77e <__sfputs_r>
 800b858:	3001      	adds	r0, #1
 800b85a:	f000 80aa 	beq.w	800b9b2 <_vfiprintf_r+0x20e>
 800b85e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b860:	445a      	add	r2, fp
 800b862:	9209      	str	r2, [sp, #36]	; 0x24
 800b864:	f89a 3000 	ldrb.w	r3, [sl]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	f000 80a2 	beq.w	800b9b2 <_vfiprintf_r+0x20e>
 800b86e:	2300      	movs	r3, #0
 800b870:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b874:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b878:	f10a 0a01 	add.w	sl, sl, #1
 800b87c:	9304      	str	r3, [sp, #16]
 800b87e:	9307      	str	r3, [sp, #28]
 800b880:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b884:	931a      	str	r3, [sp, #104]	; 0x68
 800b886:	4654      	mov	r4, sl
 800b888:	2205      	movs	r2, #5
 800b88a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b88e:	4858      	ldr	r0, [pc, #352]	; (800b9f0 <_vfiprintf_r+0x24c>)
 800b890:	f7f4 fc9e 	bl	80001d0 <memchr>
 800b894:	9a04      	ldr	r2, [sp, #16]
 800b896:	b9d8      	cbnz	r0, 800b8d0 <_vfiprintf_r+0x12c>
 800b898:	06d1      	lsls	r1, r2, #27
 800b89a:	bf44      	itt	mi
 800b89c:	2320      	movmi	r3, #32
 800b89e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8a2:	0713      	lsls	r3, r2, #28
 800b8a4:	bf44      	itt	mi
 800b8a6:	232b      	movmi	r3, #43	; 0x2b
 800b8a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8ac:	f89a 3000 	ldrb.w	r3, [sl]
 800b8b0:	2b2a      	cmp	r3, #42	; 0x2a
 800b8b2:	d015      	beq.n	800b8e0 <_vfiprintf_r+0x13c>
 800b8b4:	9a07      	ldr	r2, [sp, #28]
 800b8b6:	4654      	mov	r4, sl
 800b8b8:	2000      	movs	r0, #0
 800b8ba:	f04f 0c0a 	mov.w	ip, #10
 800b8be:	4621      	mov	r1, r4
 800b8c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8c4:	3b30      	subs	r3, #48	; 0x30
 800b8c6:	2b09      	cmp	r3, #9
 800b8c8:	d94e      	bls.n	800b968 <_vfiprintf_r+0x1c4>
 800b8ca:	b1b0      	cbz	r0, 800b8fa <_vfiprintf_r+0x156>
 800b8cc:	9207      	str	r2, [sp, #28]
 800b8ce:	e014      	b.n	800b8fa <_vfiprintf_r+0x156>
 800b8d0:	eba0 0308 	sub.w	r3, r0, r8
 800b8d4:	fa09 f303 	lsl.w	r3, r9, r3
 800b8d8:	4313      	orrs	r3, r2
 800b8da:	9304      	str	r3, [sp, #16]
 800b8dc:	46a2      	mov	sl, r4
 800b8de:	e7d2      	b.n	800b886 <_vfiprintf_r+0xe2>
 800b8e0:	9b03      	ldr	r3, [sp, #12]
 800b8e2:	1d19      	adds	r1, r3, #4
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	9103      	str	r1, [sp, #12]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	bfbb      	ittet	lt
 800b8ec:	425b      	neglt	r3, r3
 800b8ee:	f042 0202 	orrlt.w	r2, r2, #2
 800b8f2:	9307      	strge	r3, [sp, #28]
 800b8f4:	9307      	strlt	r3, [sp, #28]
 800b8f6:	bfb8      	it	lt
 800b8f8:	9204      	strlt	r2, [sp, #16]
 800b8fa:	7823      	ldrb	r3, [r4, #0]
 800b8fc:	2b2e      	cmp	r3, #46	; 0x2e
 800b8fe:	d10c      	bne.n	800b91a <_vfiprintf_r+0x176>
 800b900:	7863      	ldrb	r3, [r4, #1]
 800b902:	2b2a      	cmp	r3, #42	; 0x2a
 800b904:	d135      	bne.n	800b972 <_vfiprintf_r+0x1ce>
 800b906:	9b03      	ldr	r3, [sp, #12]
 800b908:	1d1a      	adds	r2, r3, #4
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	9203      	str	r2, [sp, #12]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	bfb8      	it	lt
 800b912:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b916:	3402      	adds	r4, #2
 800b918:	9305      	str	r3, [sp, #20]
 800b91a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ba00 <_vfiprintf_r+0x25c>
 800b91e:	7821      	ldrb	r1, [r4, #0]
 800b920:	2203      	movs	r2, #3
 800b922:	4650      	mov	r0, sl
 800b924:	f7f4 fc54 	bl	80001d0 <memchr>
 800b928:	b140      	cbz	r0, 800b93c <_vfiprintf_r+0x198>
 800b92a:	2340      	movs	r3, #64	; 0x40
 800b92c:	eba0 000a 	sub.w	r0, r0, sl
 800b930:	fa03 f000 	lsl.w	r0, r3, r0
 800b934:	9b04      	ldr	r3, [sp, #16]
 800b936:	4303      	orrs	r3, r0
 800b938:	3401      	adds	r4, #1
 800b93a:	9304      	str	r3, [sp, #16]
 800b93c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b940:	482c      	ldr	r0, [pc, #176]	; (800b9f4 <_vfiprintf_r+0x250>)
 800b942:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b946:	2206      	movs	r2, #6
 800b948:	f7f4 fc42 	bl	80001d0 <memchr>
 800b94c:	2800      	cmp	r0, #0
 800b94e:	d03f      	beq.n	800b9d0 <_vfiprintf_r+0x22c>
 800b950:	4b29      	ldr	r3, [pc, #164]	; (800b9f8 <_vfiprintf_r+0x254>)
 800b952:	bb1b      	cbnz	r3, 800b99c <_vfiprintf_r+0x1f8>
 800b954:	9b03      	ldr	r3, [sp, #12]
 800b956:	3307      	adds	r3, #7
 800b958:	f023 0307 	bic.w	r3, r3, #7
 800b95c:	3308      	adds	r3, #8
 800b95e:	9303      	str	r3, [sp, #12]
 800b960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b962:	443b      	add	r3, r7
 800b964:	9309      	str	r3, [sp, #36]	; 0x24
 800b966:	e767      	b.n	800b838 <_vfiprintf_r+0x94>
 800b968:	fb0c 3202 	mla	r2, ip, r2, r3
 800b96c:	460c      	mov	r4, r1
 800b96e:	2001      	movs	r0, #1
 800b970:	e7a5      	b.n	800b8be <_vfiprintf_r+0x11a>
 800b972:	2300      	movs	r3, #0
 800b974:	3401      	adds	r4, #1
 800b976:	9305      	str	r3, [sp, #20]
 800b978:	4619      	mov	r1, r3
 800b97a:	f04f 0c0a 	mov.w	ip, #10
 800b97e:	4620      	mov	r0, r4
 800b980:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b984:	3a30      	subs	r2, #48	; 0x30
 800b986:	2a09      	cmp	r2, #9
 800b988:	d903      	bls.n	800b992 <_vfiprintf_r+0x1ee>
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d0c5      	beq.n	800b91a <_vfiprintf_r+0x176>
 800b98e:	9105      	str	r1, [sp, #20]
 800b990:	e7c3      	b.n	800b91a <_vfiprintf_r+0x176>
 800b992:	fb0c 2101 	mla	r1, ip, r1, r2
 800b996:	4604      	mov	r4, r0
 800b998:	2301      	movs	r3, #1
 800b99a:	e7f0      	b.n	800b97e <_vfiprintf_r+0x1da>
 800b99c:	ab03      	add	r3, sp, #12
 800b99e:	9300      	str	r3, [sp, #0]
 800b9a0:	462a      	mov	r2, r5
 800b9a2:	4b16      	ldr	r3, [pc, #88]	; (800b9fc <_vfiprintf_r+0x258>)
 800b9a4:	a904      	add	r1, sp, #16
 800b9a6:	4630      	mov	r0, r6
 800b9a8:	f3af 8000 	nop.w
 800b9ac:	4607      	mov	r7, r0
 800b9ae:	1c78      	adds	r0, r7, #1
 800b9b0:	d1d6      	bne.n	800b960 <_vfiprintf_r+0x1bc>
 800b9b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b9b4:	07d9      	lsls	r1, r3, #31
 800b9b6:	d405      	bmi.n	800b9c4 <_vfiprintf_r+0x220>
 800b9b8:	89ab      	ldrh	r3, [r5, #12]
 800b9ba:	059a      	lsls	r2, r3, #22
 800b9bc:	d402      	bmi.n	800b9c4 <_vfiprintf_r+0x220>
 800b9be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9c0:	f000 fc45 	bl	800c24e <__retarget_lock_release_recursive>
 800b9c4:	89ab      	ldrh	r3, [r5, #12]
 800b9c6:	065b      	lsls	r3, r3, #25
 800b9c8:	f53f af12 	bmi.w	800b7f0 <_vfiprintf_r+0x4c>
 800b9cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9ce:	e711      	b.n	800b7f4 <_vfiprintf_r+0x50>
 800b9d0:	ab03      	add	r3, sp, #12
 800b9d2:	9300      	str	r3, [sp, #0]
 800b9d4:	462a      	mov	r2, r5
 800b9d6:	4b09      	ldr	r3, [pc, #36]	; (800b9fc <_vfiprintf_r+0x258>)
 800b9d8:	a904      	add	r1, sp, #16
 800b9da:	4630      	mov	r0, r6
 800b9dc:	f000 f880 	bl	800bae0 <_printf_i>
 800b9e0:	e7e4      	b.n	800b9ac <_vfiprintf_r+0x208>
 800b9e2:	bf00      	nop
 800b9e4:	0800c778 	.word	0x0800c778
 800b9e8:	0800c798 	.word	0x0800c798
 800b9ec:	0800c758 	.word	0x0800c758
 800b9f0:	0800c722 	.word	0x0800c722
 800b9f4:	0800c72c 	.word	0x0800c72c
 800b9f8:	00000000 	.word	0x00000000
 800b9fc:	0800b77f 	.word	0x0800b77f
 800ba00:	0800c728 	.word	0x0800c728

0800ba04 <_printf_common>:
 800ba04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba08:	4616      	mov	r6, r2
 800ba0a:	4699      	mov	r9, r3
 800ba0c:	688a      	ldr	r2, [r1, #8]
 800ba0e:	690b      	ldr	r3, [r1, #16]
 800ba10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ba14:	4293      	cmp	r3, r2
 800ba16:	bfb8      	it	lt
 800ba18:	4613      	movlt	r3, r2
 800ba1a:	6033      	str	r3, [r6, #0]
 800ba1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ba20:	4607      	mov	r7, r0
 800ba22:	460c      	mov	r4, r1
 800ba24:	b10a      	cbz	r2, 800ba2a <_printf_common+0x26>
 800ba26:	3301      	adds	r3, #1
 800ba28:	6033      	str	r3, [r6, #0]
 800ba2a:	6823      	ldr	r3, [r4, #0]
 800ba2c:	0699      	lsls	r1, r3, #26
 800ba2e:	bf42      	ittt	mi
 800ba30:	6833      	ldrmi	r3, [r6, #0]
 800ba32:	3302      	addmi	r3, #2
 800ba34:	6033      	strmi	r3, [r6, #0]
 800ba36:	6825      	ldr	r5, [r4, #0]
 800ba38:	f015 0506 	ands.w	r5, r5, #6
 800ba3c:	d106      	bne.n	800ba4c <_printf_common+0x48>
 800ba3e:	f104 0a19 	add.w	sl, r4, #25
 800ba42:	68e3      	ldr	r3, [r4, #12]
 800ba44:	6832      	ldr	r2, [r6, #0]
 800ba46:	1a9b      	subs	r3, r3, r2
 800ba48:	42ab      	cmp	r3, r5
 800ba4a:	dc26      	bgt.n	800ba9a <_printf_common+0x96>
 800ba4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ba50:	1e13      	subs	r3, r2, #0
 800ba52:	6822      	ldr	r2, [r4, #0]
 800ba54:	bf18      	it	ne
 800ba56:	2301      	movne	r3, #1
 800ba58:	0692      	lsls	r2, r2, #26
 800ba5a:	d42b      	bmi.n	800bab4 <_printf_common+0xb0>
 800ba5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ba60:	4649      	mov	r1, r9
 800ba62:	4638      	mov	r0, r7
 800ba64:	47c0      	blx	r8
 800ba66:	3001      	adds	r0, #1
 800ba68:	d01e      	beq.n	800baa8 <_printf_common+0xa4>
 800ba6a:	6823      	ldr	r3, [r4, #0]
 800ba6c:	68e5      	ldr	r5, [r4, #12]
 800ba6e:	6832      	ldr	r2, [r6, #0]
 800ba70:	f003 0306 	and.w	r3, r3, #6
 800ba74:	2b04      	cmp	r3, #4
 800ba76:	bf08      	it	eq
 800ba78:	1aad      	subeq	r5, r5, r2
 800ba7a:	68a3      	ldr	r3, [r4, #8]
 800ba7c:	6922      	ldr	r2, [r4, #16]
 800ba7e:	bf0c      	ite	eq
 800ba80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba84:	2500      	movne	r5, #0
 800ba86:	4293      	cmp	r3, r2
 800ba88:	bfc4      	itt	gt
 800ba8a:	1a9b      	subgt	r3, r3, r2
 800ba8c:	18ed      	addgt	r5, r5, r3
 800ba8e:	2600      	movs	r6, #0
 800ba90:	341a      	adds	r4, #26
 800ba92:	42b5      	cmp	r5, r6
 800ba94:	d11a      	bne.n	800bacc <_printf_common+0xc8>
 800ba96:	2000      	movs	r0, #0
 800ba98:	e008      	b.n	800baac <_printf_common+0xa8>
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	4652      	mov	r2, sl
 800ba9e:	4649      	mov	r1, r9
 800baa0:	4638      	mov	r0, r7
 800baa2:	47c0      	blx	r8
 800baa4:	3001      	adds	r0, #1
 800baa6:	d103      	bne.n	800bab0 <_printf_common+0xac>
 800baa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800baac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bab0:	3501      	adds	r5, #1
 800bab2:	e7c6      	b.n	800ba42 <_printf_common+0x3e>
 800bab4:	18e1      	adds	r1, r4, r3
 800bab6:	1c5a      	adds	r2, r3, #1
 800bab8:	2030      	movs	r0, #48	; 0x30
 800baba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800babe:	4422      	add	r2, r4
 800bac0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bac4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bac8:	3302      	adds	r3, #2
 800baca:	e7c7      	b.n	800ba5c <_printf_common+0x58>
 800bacc:	2301      	movs	r3, #1
 800bace:	4622      	mov	r2, r4
 800bad0:	4649      	mov	r1, r9
 800bad2:	4638      	mov	r0, r7
 800bad4:	47c0      	blx	r8
 800bad6:	3001      	adds	r0, #1
 800bad8:	d0e6      	beq.n	800baa8 <_printf_common+0xa4>
 800bada:	3601      	adds	r6, #1
 800badc:	e7d9      	b.n	800ba92 <_printf_common+0x8e>
	...

0800bae0 <_printf_i>:
 800bae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bae4:	7e0f      	ldrb	r7, [r1, #24]
 800bae6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bae8:	2f78      	cmp	r7, #120	; 0x78
 800baea:	4691      	mov	r9, r2
 800baec:	4680      	mov	r8, r0
 800baee:	460c      	mov	r4, r1
 800baf0:	469a      	mov	sl, r3
 800baf2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800baf6:	d807      	bhi.n	800bb08 <_printf_i+0x28>
 800baf8:	2f62      	cmp	r7, #98	; 0x62
 800bafa:	d80a      	bhi.n	800bb12 <_printf_i+0x32>
 800bafc:	2f00      	cmp	r7, #0
 800bafe:	f000 80d8 	beq.w	800bcb2 <_printf_i+0x1d2>
 800bb02:	2f58      	cmp	r7, #88	; 0x58
 800bb04:	f000 80a3 	beq.w	800bc4e <_printf_i+0x16e>
 800bb08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bb10:	e03a      	b.n	800bb88 <_printf_i+0xa8>
 800bb12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bb16:	2b15      	cmp	r3, #21
 800bb18:	d8f6      	bhi.n	800bb08 <_printf_i+0x28>
 800bb1a:	a101      	add	r1, pc, #4	; (adr r1, 800bb20 <_printf_i+0x40>)
 800bb1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bb20:	0800bb79 	.word	0x0800bb79
 800bb24:	0800bb8d 	.word	0x0800bb8d
 800bb28:	0800bb09 	.word	0x0800bb09
 800bb2c:	0800bb09 	.word	0x0800bb09
 800bb30:	0800bb09 	.word	0x0800bb09
 800bb34:	0800bb09 	.word	0x0800bb09
 800bb38:	0800bb8d 	.word	0x0800bb8d
 800bb3c:	0800bb09 	.word	0x0800bb09
 800bb40:	0800bb09 	.word	0x0800bb09
 800bb44:	0800bb09 	.word	0x0800bb09
 800bb48:	0800bb09 	.word	0x0800bb09
 800bb4c:	0800bc99 	.word	0x0800bc99
 800bb50:	0800bbbd 	.word	0x0800bbbd
 800bb54:	0800bc7b 	.word	0x0800bc7b
 800bb58:	0800bb09 	.word	0x0800bb09
 800bb5c:	0800bb09 	.word	0x0800bb09
 800bb60:	0800bcbb 	.word	0x0800bcbb
 800bb64:	0800bb09 	.word	0x0800bb09
 800bb68:	0800bbbd 	.word	0x0800bbbd
 800bb6c:	0800bb09 	.word	0x0800bb09
 800bb70:	0800bb09 	.word	0x0800bb09
 800bb74:	0800bc83 	.word	0x0800bc83
 800bb78:	682b      	ldr	r3, [r5, #0]
 800bb7a:	1d1a      	adds	r2, r3, #4
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	602a      	str	r2, [r5, #0]
 800bb80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bb88:	2301      	movs	r3, #1
 800bb8a:	e0a3      	b.n	800bcd4 <_printf_i+0x1f4>
 800bb8c:	6820      	ldr	r0, [r4, #0]
 800bb8e:	6829      	ldr	r1, [r5, #0]
 800bb90:	0606      	lsls	r6, r0, #24
 800bb92:	f101 0304 	add.w	r3, r1, #4
 800bb96:	d50a      	bpl.n	800bbae <_printf_i+0xce>
 800bb98:	680e      	ldr	r6, [r1, #0]
 800bb9a:	602b      	str	r3, [r5, #0]
 800bb9c:	2e00      	cmp	r6, #0
 800bb9e:	da03      	bge.n	800bba8 <_printf_i+0xc8>
 800bba0:	232d      	movs	r3, #45	; 0x2d
 800bba2:	4276      	negs	r6, r6
 800bba4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bba8:	485e      	ldr	r0, [pc, #376]	; (800bd24 <_printf_i+0x244>)
 800bbaa:	230a      	movs	r3, #10
 800bbac:	e019      	b.n	800bbe2 <_printf_i+0x102>
 800bbae:	680e      	ldr	r6, [r1, #0]
 800bbb0:	602b      	str	r3, [r5, #0]
 800bbb2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bbb6:	bf18      	it	ne
 800bbb8:	b236      	sxthne	r6, r6
 800bbba:	e7ef      	b.n	800bb9c <_printf_i+0xbc>
 800bbbc:	682b      	ldr	r3, [r5, #0]
 800bbbe:	6820      	ldr	r0, [r4, #0]
 800bbc0:	1d19      	adds	r1, r3, #4
 800bbc2:	6029      	str	r1, [r5, #0]
 800bbc4:	0601      	lsls	r1, r0, #24
 800bbc6:	d501      	bpl.n	800bbcc <_printf_i+0xec>
 800bbc8:	681e      	ldr	r6, [r3, #0]
 800bbca:	e002      	b.n	800bbd2 <_printf_i+0xf2>
 800bbcc:	0646      	lsls	r6, r0, #25
 800bbce:	d5fb      	bpl.n	800bbc8 <_printf_i+0xe8>
 800bbd0:	881e      	ldrh	r6, [r3, #0]
 800bbd2:	4854      	ldr	r0, [pc, #336]	; (800bd24 <_printf_i+0x244>)
 800bbd4:	2f6f      	cmp	r7, #111	; 0x6f
 800bbd6:	bf0c      	ite	eq
 800bbd8:	2308      	moveq	r3, #8
 800bbda:	230a      	movne	r3, #10
 800bbdc:	2100      	movs	r1, #0
 800bbde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bbe2:	6865      	ldr	r5, [r4, #4]
 800bbe4:	60a5      	str	r5, [r4, #8]
 800bbe6:	2d00      	cmp	r5, #0
 800bbe8:	bfa2      	ittt	ge
 800bbea:	6821      	ldrge	r1, [r4, #0]
 800bbec:	f021 0104 	bicge.w	r1, r1, #4
 800bbf0:	6021      	strge	r1, [r4, #0]
 800bbf2:	b90e      	cbnz	r6, 800bbf8 <_printf_i+0x118>
 800bbf4:	2d00      	cmp	r5, #0
 800bbf6:	d04d      	beq.n	800bc94 <_printf_i+0x1b4>
 800bbf8:	4615      	mov	r5, r2
 800bbfa:	fbb6 f1f3 	udiv	r1, r6, r3
 800bbfe:	fb03 6711 	mls	r7, r3, r1, r6
 800bc02:	5dc7      	ldrb	r7, [r0, r7]
 800bc04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bc08:	4637      	mov	r7, r6
 800bc0a:	42bb      	cmp	r3, r7
 800bc0c:	460e      	mov	r6, r1
 800bc0e:	d9f4      	bls.n	800bbfa <_printf_i+0x11a>
 800bc10:	2b08      	cmp	r3, #8
 800bc12:	d10b      	bne.n	800bc2c <_printf_i+0x14c>
 800bc14:	6823      	ldr	r3, [r4, #0]
 800bc16:	07de      	lsls	r6, r3, #31
 800bc18:	d508      	bpl.n	800bc2c <_printf_i+0x14c>
 800bc1a:	6923      	ldr	r3, [r4, #16]
 800bc1c:	6861      	ldr	r1, [r4, #4]
 800bc1e:	4299      	cmp	r1, r3
 800bc20:	bfde      	ittt	le
 800bc22:	2330      	movle	r3, #48	; 0x30
 800bc24:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bc28:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800bc2c:	1b52      	subs	r2, r2, r5
 800bc2e:	6122      	str	r2, [r4, #16]
 800bc30:	f8cd a000 	str.w	sl, [sp]
 800bc34:	464b      	mov	r3, r9
 800bc36:	aa03      	add	r2, sp, #12
 800bc38:	4621      	mov	r1, r4
 800bc3a:	4640      	mov	r0, r8
 800bc3c:	f7ff fee2 	bl	800ba04 <_printf_common>
 800bc40:	3001      	adds	r0, #1
 800bc42:	d14c      	bne.n	800bcde <_printf_i+0x1fe>
 800bc44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc48:	b004      	add	sp, #16
 800bc4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc4e:	4835      	ldr	r0, [pc, #212]	; (800bd24 <_printf_i+0x244>)
 800bc50:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bc54:	6829      	ldr	r1, [r5, #0]
 800bc56:	6823      	ldr	r3, [r4, #0]
 800bc58:	f851 6b04 	ldr.w	r6, [r1], #4
 800bc5c:	6029      	str	r1, [r5, #0]
 800bc5e:	061d      	lsls	r5, r3, #24
 800bc60:	d514      	bpl.n	800bc8c <_printf_i+0x1ac>
 800bc62:	07df      	lsls	r7, r3, #31
 800bc64:	bf44      	itt	mi
 800bc66:	f043 0320 	orrmi.w	r3, r3, #32
 800bc6a:	6023      	strmi	r3, [r4, #0]
 800bc6c:	b91e      	cbnz	r6, 800bc76 <_printf_i+0x196>
 800bc6e:	6823      	ldr	r3, [r4, #0]
 800bc70:	f023 0320 	bic.w	r3, r3, #32
 800bc74:	6023      	str	r3, [r4, #0]
 800bc76:	2310      	movs	r3, #16
 800bc78:	e7b0      	b.n	800bbdc <_printf_i+0xfc>
 800bc7a:	6823      	ldr	r3, [r4, #0]
 800bc7c:	f043 0320 	orr.w	r3, r3, #32
 800bc80:	6023      	str	r3, [r4, #0]
 800bc82:	2378      	movs	r3, #120	; 0x78
 800bc84:	4828      	ldr	r0, [pc, #160]	; (800bd28 <_printf_i+0x248>)
 800bc86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bc8a:	e7e3      	b.n	800bc54 <_printf_i+0x174>
 800bc8c:	0659      	lsls	r1, r3, #25
 800bc8e:	bf48      	it	mi
 800bc90:	b2b6      	uxthmi	r6, r6
 800bc92:	e7e6      	b.n	800bc62 <_printf_i+0x182>
 800bc94:	4615      	mov	r5, r2
 800bc96:	e7bb      	b.n	800bc10 <_printf_i+0x130>
 800bc98:	682b      	ldr	r3, [r5, #0]
 800bc9a:	6826      	ldr	r6, [r4, #0]
 800bc9c:	6961      	ldr	r1, [r4, #20]
 800bc9e:	1d18      	adds	r0, r3, #4
 800bca0:	6028      	str	r0, [r5, #0]
 800bca2:	0635      	lsls	r5, r6, #24
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	d501      	bpl.n	800bcac <_printf_i+0x1cc>
 800bca8:	6019      	str	r1, [r3, #0]
 800bcaa:	e002      	b.n	800bcb2 <_printf_i+0x1d2>
 800bcac:	0670      	lsls	r0, r6, #25
 800bcae:	d5fb      	bpl.n	800bca8 <_printf_i+0x1c8>
 800bcb0:	8019      	strh	r1, [r3, #0]
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	6123      	str	r3, [r4, #16]
 800bcb6:	4615      	mov	r5, r2
 800bcb8:	e7ba      	b.n	800bc30 <_printf_i+0x150>
 800bcba:	682b      	ldr	r3, [r5, #0]
 800bcbc:	1d1a      	adds	r2, r3, #4
 800bcbe:	602a      	str	r2, [r5, #0]
 800bcc0:	681d      	ldr	r5, [r3, #0]
 800bcc2:	6862      	ldr	r2, [r4, #4]
 800bcc4:	2100      	movs	r1, #0
 800bcc6:	4628      	mov	r0, r5
 800bcc8:	f7f4 fa82 	bl	80001d0 <memchr>
 800bccc:	b108      	cbz	r0, 800bcd2 <_printf_i+0x1f2>
 800bcce:	1b40      	subs	r0, r0, r5
 800bcd0:	6060      	str	r0, [r4, #4]
 800bcd2:	6863      	ldr	r3, [r4, #4]
 800bcd4:	6123      	str	r3, [r4, #16]
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bcdc:	e7a8      	b.n	800bc30 <_printf_i+0x150>
 800bcde:	6923      	ldr	r3, [r4, #16]
 800bce0:	462a      	mov	r2, r5
 800bce2:	4649      	mov	r1, r9
 800bce4:	4640      	mov	r0, r8
 800bce6:	47d0      	blx	sl
 800bce8:	3001      	adds	r0, #1
 800bcea:	d0ab      	beq.n	800bc44 <_printf_i+0x164>
 800bcec:	6823      	ldr	r3, [r4, #0]
 800bcee:	079b      	lsls	r3, r3, #30
 800bcf0:	d413      	bmi.n	800bd1a <_printf_i+0x23a>
 800bcf2:	68e0      	ldr	r0, [r4, #12]
 800bcf4:	9b03      	ldr	r3, [sp, #12]
 800bcf6:	4298      	cmp	r0, r3
 800bcf8:	bfb8      	it	lt
 800bcfa:	4618      	movlt	r0, r3
 800bcfc:	e7a4      	b.n	800bc48 <_printf_i+0x168>
 800bcfe:	2301      	movs	r3, #1
 800bd00:	4632      	mov	r2, r6
 800bd02:	4649      	mov	r1, r9
 800bd04:	4640      	mov	r0, r8
 800bd06:	47d0      	blx	sl
 800bd08:	3001      	adds	r0, #1
 800bd0a:	d09b      	beq.n	800bc44 <_printf_i+0x164>
 800bd0c:	3501      	adds	r5, #1
 800bd0e:	68e3      	ldr	r3, [r4, #12]
 800bd10:	9903      	ldr	r1, [sp, #12]
 800bd12:	1a5b      	subs	r3, r3, r1
 800bd14:	42ab      	cmp	r3, r5
 800bd16:	dcf2      	bgt.n	800bcfe <_printf_i+0x21e>
 800bd18:	e7eb      	b.n	800bcf2 <_printf_i+0x212>
 800bd1a:	2500      	movs	r5, #0
 800bd1c:	f104 0619 	add.w	r6, r4, #25
 800bd20:	e7f5      	b.n	800bd0e <_printf_i+0x22e>
 800bd22:	bf00      	nop
 800bd24:	0800c733 	.word	0x0800c733
 800bd28:	0800c744 	.word	0x0800c744

0800bd2c <_sbrk_r>:
 800bd2c:	b538      	push	{r3, r4, r5, lr}
 800bd2e:	4d06      	ldr	r5, [pc, #24]	; (800bd48 <_sbrk_r+0x1c>)
 800bd30:	2300      	movs	r3, #0
 800bd32:	4604      	mov	r4, r0
 800bd34:	4608      	mov	r0, r1
 800bd36:	602b      	str	r3, [r5, #0]
 800bd38:	f7f5 fd66 	bl	8001808 <_sbrk>
 800bd3c:	1c43      	adds	r3, r0, #1
 800bd3e:	d102      	bne.n	800bd46 <_sbrk_r+0x1a>
 800bd40:	682b      	ldr	r3, [r5, #0]
 800bd42:	b103      	cbz	r3, 800bd46 <_sbrk_r+0x1a>
 800bd44:	6023      	str	r3, [r4, #0]
 800bd46:	bd38      	pop	{r3, r4, r5, pc}
 800bd48:	20001818 	.word	0x20001818

0800bd4c <__swbuf_r>:
 800bd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd4e:	460e      	mov	r6, r1
 800bd50:	4614      	mov	r4, r2
 800bd52:	4605      	mov	r5, r0
 800bd54:	b118      	cbz	r0, 800bd5e <__swbuf_r+0x12>
 800bd56:	6983      	ldr	r3, [r0, #24]
 800bd58:	b90b      	cbnz	r3, 800bd5e <__swbuf_r+0x12>
 800bd5a:	f000 f9d9 	bl	800c110 <__sinit>
 800bd5e:	4b21      	ldr	r3, [pc, #132]	; (800bde4 <__swbuf_r+0x98>)
 800bd60:	429c      	cmp	r4, r3
 800bd62:	d12b      	bne.n	800bdbc <__swbuf_r+0x70>
 800bd64:	686c      	ldr	r4, [r5, #4]
 800bd66:	69a3      	ldr	r3, [r4, #24]
 800bd68:	60a3      	str	r3, [r4, #8]
 800bd6a:	89a3      	ldrh	r3, [r4, #12]
 800bd6c:	071a      	lsls	r2, r3, #28
 800bd6e:	d52f      	bpl.n	800bdd0 <__swbuf_r+0x84>
 800bd70:	6923      	ldr	r3, [r4, #16]
 800bd72:	b36b      	cbz	r3, 800bdd0 <__swbuf_r+0x84>
 800bd74:	6923      	ldr	r3, [r4, #16]
 800bd76:	6820      	ldr	r0, [r4, #0]
 800bd78:	1ac0      	subs	r0, r0, r3
 800bd7a:	6963      	ldr	r3, [r4, #20]
 800bd7c:	b2f6      	uxtb	r6, r6
 800bd7e:	4283      	cmp	r3, r0
 800bd80:	4637      	mov	r7, r6
 800bd82:	dc04      	bgt.n	800bd8e <__swbuf_r+0x42>
 800bd84:	4621      	mov	r1, r4
 800bd86:	4628      	mov	r0, r5
 800bd88:	f000 f92e 	bl	800bfe8 <_fflush_r>
 800bd8c:	bb30      	cbnz	r0, 800bddc <__swbuf_r+0x90>
 800bd8e:	68a3      	ldr	r3, [r4, #8]
 800bd90:	3b01      	subs	r3, #1
 800bd92:	60a3      	str	r3, [r4, #8]
 800bd94:	6823      	ldr	r3, [r4, #0]
 800bd96:	1c5a      	adds	r2, r3, #1
 800bd98:	6022      	str	r2, [r4, #0]
 800bd9a:	701e      	strb	r6, [r3, #0]
 800bd9c:	6963      	ldr	r3, [r4, #20]
 800bd9e:	3001      	adds	r0, #1
 800bda0:	4283      	cmp	r3, r0
 800bda2:	d004      	beq.n	800bdae <__swbuf_r+0x62>
 800bda4:	89a3      	ldrh	r3, [r4, #12]
 800bda6:	07db      	lsls	r3, r3, #31
 800bda8:	d506      	bpl.n	800bdb8 <__swbuf_r+0x6c>
 800bdaa:	2e0a      	cmp	r6, #10
 800bdac:	d104      	bne.n	800bdb8 <__swbuf_r+0x6c>
 800bdae:	4621      	mov	r1, r4
 800bdb0:	4628      	mov	r0, r5
 800bdb2:	f000 f919 	bl	800bfe8 <_fflush_r>
 800bdb6:	b988      	cbnz	r0, 800bddc <__swbuf_r+0x90>
 800bdb8:	4638      	mov	r0, r7
 800bdba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdbc:	4b0a      	ldr	r3, [pc, #40]	; (800bde8 <__swbuf_r+0x9c>)
 800bdbe:	429c      	cmp	r4, r3
 800bdc0:	d101      	bne.n	800bdc6 <__swbuf_r+0x7a>
 800bdc2:	68ac      	ldr	r4, [r5, #8]
 800bdc4:	e7cf      	b.n	800bd66 <__swbuf_r+0x1a>
 800bdc6:	4b09      	ldr	r3, [pc, #36]	; (800bdec <__swbuf_r+0xa0>)
 800bdc8:	429c      	cmp	r4, r3
 800bdca:	bf08      	it	eq
 800bdcc:	68ec      	ldreq	r4, [r5, #12]
 800bdce:	e7ca      	b.n	800bd66 <__swbuf_r+0x1a>
 800bdd0:	4621      	mov	r1, r4
 800bdd2:	4628      	mov	r0, r5
 800bdd4:	f000 f80c 	bl	800bdf0 <__swsetup_r>
 800bdd8:	2800      	cmp	r0, #0
 800bdda:	d0cb      	beq.n	800bd74 <__swbuf_r+0x28>
 800bddc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bde0:	e7ea      	b.n	800bdb8 <__swbuf_r+0x6c>
 800bde2:	bf00      	nop
 800bde4:	0800c778 	.word	0x0800c778
 800bde8:	0800c798 	.word	0x0800c798
 800bdec:	0800c758 	.word	0x0800c758

0800bdf0 <__swsetup_r>:
 800bdf0:	4b32      	ldr	r3, [pc, #200]	; (800bebc <__swsetup_r+0xcc>)
 800bdf2:	b570      	push	{r4, r5, r6, lr}
 800bdf4:	681d      	ldr	r5, [r3, #0]
 800bdf6:	4606      	mov	r6, r0
 800bdf8:	460c      	mov	r4, r1
 800bdfa:	b125      	cbz	r5, 800be06 <__swsetup_r+0x16>
 800bdfc:	69ab      	ldr	r3, [r5, #24]
 800bdfe:	b913      	cbnz	r3, 800be06 <__swsetup_r+0x16>
 800be00:	4628      	mov	r0, r5
 800be02:	f000 f985 	bl	800c110 <__sinit>
 800be06:	4b2e      	ldr	r3, [pc, #184]	; (800bec0 <__swsetup_r+0xd0>)
 800be08:	429c      	cmp	r4, r3
 800be0a:	d10f      	bne.n	800be2c <__swsetup_r+0x3c>
 800be0c:	686c      	ldr	r4, [r5, #4]
 800be0e:	89a3      	ldrh	r3, [r4, #12]
 800be10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be14:	0719      	lsls	r1, r3, #28
 800be16:	d42c      	bmi.n	800be72 <__swsetup_r+0x82>
 800be18:	06dd      	lsls	r5, r3, #27
 800be1a:	d411      	bmi.n	800be40 <__swsetup_r+0x50>
 800be1c:	2309      	movs	r3, #9
 800be1e:	6033      	str	r3, [r6, #0]
 800be20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800be24:	81a3      	strh	r3, [r4, #12]
 800be26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be2a:	e03e      	b.n	800beaa <__swsetup_r+0xba>
 800be2c:	4b25      	ldr	r3, [pc, #148]	; (800bec4 <__swsetup_r+0xd4>)
 800be2e:	429c      	cmp	r4, r3
 800be30:	d101      	bne.n	800be36 <__swsetup_r+0x46>
 800be32:	68ac      	ldr	r4, [r5, #8]
 800be34:	e7eb      	b.n	800be0e <__swsetup_r+0x1e>
 800be36:	4b24      	ldr	r3, [pc, #144]	; (800bec8 <__swsetup_r+0xd8>)
 800be38:	429c      	cmp	r4, r3
 800be3a:	bf08      	it	eq
 800be3c:	68ec      	ldreq	r4, [r5, #12]
 800be3e:	e7e6      	b.n	800be0e <__swsetup_r+0x1e>
 800be40:	0758      	lsls	r0, r3, #29
 800be42:	d512      	bpl.n	800be6a <__swsetup_r+0x7a>
 800be44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be46:	b141      	cbz	r1, 800be5a <__swsetup_r+0x6a>
 800be48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be4c:	4299      	cmp	r1, r3
 800be4e:	d002      	beq.n	800be56 <__swsetup_r+0x66>
 800be50:	4630      	mov	r0, r6
 800be52:	f7ff fa41 	bl	800b2d8 <_free_r>
 800be56:	2300      	movs	r3, #0
 800be58:	6363      	str	r3, [r4, #52]	; 0x34
 800be5a:	89a3      	ldrh	r3, [r4, #12]
 800be5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800be60:	81a3      	strh	r3, [r4, #12]
 800be62:	2300      	movs	r3, #0
 800be64:	6063      	str	r3, [r4, #4]
 800be66:	6923      	ldr	r3, [r4, #16]
 800be68:	6023      	str	r3, [r4, #0]
 800be6a:	89a3      	ldrh	r3, [r4, #12]
 800be6c:	f043 0308 	orr.w	r3, r3, #8
 800be70:	81a3      	strh	r3, [r4, #12]
 800be72:	6923      	ldr	r3, [r4, #16]
 800be74:	b94b      	cbnz	r3, 800be8a <__swsetup_r+0x9a>
 800be76:	89a3      	ldrh	r3, [r4, #12]
 800be78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800be7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be80:	d003      	beq.n	800be8a <__swsetup_r+0x9a>
 800be82:	4621      	mov	r1, r4
 800be84:	4630      	mov	r0, r6
 800be86:	f000 fa09 	bl	800c29c <__smakebuf_r>
 800be8a:	89a0      	ldrh	r0, [r4, #12]
 800be8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be90:	f010 0301 	ands.w	r3, r0, #1
 800be94:	d00a      	beq.n	800beac <__swsetup_r+0xbc>
 800be96:	2300      	movs	r3, #0
 800be98:	60a3      	str	r3, [r4, #8]
 800be9a:	6963      	ldr	r3, [r4, #20]
 800be9c:	425b      	negs	r3, r3
 800be9e:	61a3      	str	r3, [r4, #24]
 800bea0:	6923      	ldr	r3, [r4, #16]
 800bea2:	b943      	cbnz	r3, 800beb6 <__swsetup_r+0xc6>
 800bea4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bea8:	d1ba      	bne.n	800be20 <__swsetup_r+0x30>
 800beaa:	bd70      	pop	{r4, r5, r6, pc}
 800beac:	0781      	lsls	r1, r0, #30
 800beae:	bf58      	it	pl
 800beb0:	6963      	ldrpl	r3, [r4, #20]
 800beb2:	60a3      	str	r3, [r4, #8]
 800beb4:	e7f4      	b.n	800bea0 <__swsetup_r+0xb0>
 800beb6:	2000      	movs	r0, #0
 800beb8:	e7f7      	b.n	800beaa <__swsetup_r+0xba>
 800beba:	bf00      	nop
 800bebc:	200000fc 	.word	0x200000fc
 800bec0:	0800c778 	.word	0x0800c778
 800bec4:	0800c798 	.word	0x0800c798
 800bec8:	0800c758 	.word	0x0800c758

0800becc <abort>:
 800becc:	b508      	push	{r3, lr}
 800bece:	2006      	movs	r0, #6
 800bed0:	f000 fab0 	bl	800c434 <raise>
 800bed4:	2001      	movs	r0, #1
 800bed6:	f7f5 fc1f 	bl	8001718 <_exit>
	...

0800bedc <__sflush_r>:
 800bedc:	898a      	ldrh	r2, [r1, #12]
 800bede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bee2:	4605      	mov	r5, r0
 800bee4:	0710      	lsls	r0, r2, #28
 800bee6:	460c      	mov	r4, r1
 800bee8:	d458      	bmi.n	800bf9c <__sflush_r+0xc0>
 800beea:	684b      	ldr	r3, [r1, #4]
 800beec:	2b00      	cmp	r3, #0
 800beee:	dc05      	bgt.n	800befc <__sflush_r+0x20>
 800bef0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	dc02      	bgt.n	800befc <__sflush_r+0x20>
 800bef6:	2000      	movs	r0, #0
 800bef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800befc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800befe:	2e00      	cmp	r6, #0
 800bf00:	d0f9      	beq.n	800bef6 <__sflush_r+0x1a>
 800bf02:	2300      	movs	r3, #0
 800bf04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bf08:	682f      	ldr	r7, [r5, #0]
 800bf0a:	602b      	str	r3, [r5, #0]
 800bf0c:	d032      	beq.n	800bf74 <__sflush_r+0x98>
 800bf0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bf10:	89a3      	ldrh	r3, [r4, #12]
 800bf12:	075a      	lsls	r2, r3, #29
 800bf14:	d505      	bpl.n	800bf22 <__sflush_r+0x46>
 800bf16:	6863      	ldr	r3, [r4, #4]
 800bf18:	1ac0      	subs	r0, r0, r3
 800bf1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bf1c:	b10b      	cbz	r3, 800bf22 <__sflush_r+0x46>
 800bf1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf20:	1ac0      	subs	r0, r0, r3
 800bf22:	2300      	movs	r3, #0
 800bf24:	4602      	mov	r2, r0
 800bf26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf28:	6a21      	ldr	r1, [r4, #32]
 800bf2a:	4628      	mov	r0, r5
 800bf2c:	47b0      	blx	r6
 800bf2e:	1c43      	adds	r3, r0, #1
 800bf30:	89a3      	ldrh	r3, [r4, #12]
 800bf32:	d106      	bne.n	800bf42 <__sflush_r+0x66>
 800bf34:	6829      	ldr	r1, [r5, #0]
 800bf36:	291d      	cmp	r1, #29
 800bf38:	d82c      	bhi.n	800bf94 <__sflush_r+0xb8>
 800bf3a:	4a2a      	ldr	r2, [pc, #168]	; (800bfe4 <__sflush_r+0x108>)
 800bf3c:	40ca      	lsrs	r2, r1
 800bf3e:	07d6      	lsls	r6, r2, #31
 800bf40:	d528      	bpl.n	800bf94 <__sflush_r+0xb8>
 800bf42:	2200      	movs	r2, #0
 800bf44:	6062      	str	r2, [r4, #4]
 800bf46:	04d9      	lsls	r1, r3, #19
 800bf48:	6922      	ldr	r2, [r4, #16]
 800bf4a:	6022      	str	r2, [r4, #0]
 800bf4c:	d504      	bpl.n	800bf58 <__sflush_r+0x7c>
 800bf4e:	1c42      	adds	r2, r0, #1
 800bf50:	d101      	bne.n	800bf56 <__sflush_r+0x7a>
 800bf52:	682b      	ldr	r3, [r5, #0]
 800bf54:	b903      	cbnz	r3, 800bf58 <__sflush_r+0x7c>
 800bf56:	6560      	str	r0, [r4, #84]	; 0x54
 800bf58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf5a:	602f      	str	r7, [r5, #0]
 800bf5c:	2900      	cmp	r1, #0
 800bf5e:	d0ca      	beq.n	800bef6 <__sflush_r+0x1a>
 800bf60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf64:	4299      	cmp	r1, r3
 800bf66:	d002      	beq.n	800bf6e <__sflush_r+0x92>
 800bf68:	4628      	mov	r0, r5
 800bf6a:	f7ff f9b5 	bl	800b2d8 <_free_r>
 800bf6e:	2000      	movs	r0, #0
 800bf70:	6360      	str	r0, [r4, #52]	; 0x34
 800bf72:	e7c1      	b.n	800bef8 <__sflush_r+0x1c>
 800bf74:	6a21      	ldr	r1, [r4, #32]
 800bf76:	2301      	movs	r3, #1
 800bf78:	4628      	mov	r0, r5
 800bf7a:	47b0      	blx	r6
 800bf7c:	1c41      	adds	r1, r0, #1
 800bf7e:	d1c7      	bne.n	800bf10 <__sflush_r+0x34>
 800bf80:	682b      	ldr	r3, [r5, #0]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d0c4      	beq.n	800bf10 <__sflush_r+0x34>
 800bf86:	2b1d      	cmp	r3, #29
 800bf88:	d001      	beq.n	800bf8e <__sflush_r+0xb2>
 800bf8a:	2b16      	cmp	r3, #22
 800bf8c:	d101      	bne.n	800bf92 <__sflush_r+0xb6>
 800bf8e:	602f      	str	r7, [r5, #0]
 800bf90:	e7b1      	b.n	800bef6 <__sflush_r+0x1a>
 800bf92:	89a3      	ldrh	r3, [r4, #12]
 800bf94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf98:	81a3      	strh	r3, [r4, #12]
 800bf9a:	e7ad      	b.n	800bef8 <__sflush_r+0x1c>
 800bf9c:	690f      	ldr	r7, [r1, #16]
 800bf9e:	2f00      	cmp	r7, #0
 800bfa0:	d0a9      	beq.n	800bef6 <__sflush_r+0x1a>
 800bfa2:	0793      	lsls	r3, r2, #30
 800bfa4:	680e      	ldr	r6, [r1, #0]
 800bfa6:	bf08      	it	eq
 800bfa8:	694b      	ldreq	r3, [r1, #20]
 800bfaa:	600f      	str	r7, [r1, #0]
 800bfac:	bf18      	it	ne
 800bfae:	2300      	movne	r3, #0
 800bfb0:	eba6 0807 	sub.w	r8, r6, r7
 800bfb4:	608b      	str	r3, [r1, #8]
 800bfb6:	f1b8 0f00 	cmp.w	r8, #0
 800bfba:	dd9c      	ble.n	800bef6 <__sflush_r+0x1a>
 800bfbc:	6a21      	ldr	r1, [r4, #32]
 800bfbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bfc0:	4643      	mov	r3, r8
 800bfc2:	463a      	mov	r2, r7
 800bfc4:	4628      	mov	r0, r5
 800bfc6:	47b0      	blx	r6
 800bfc8:	2800      	cmp	r0, #0
 800bfca:	dc06      	bgt.n	800bfda <__sflush_r+0xfe>
 800bfcc:	89a3      	ldrh	r3, [r4, #12]
 800bfce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfd2:	81a3      	strh	r3, [r4, #12]
 800bfd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bfd8:	e78e      	b.n	800bef8 <__sflush_r+0x1c>
 800bfda:	4407      	add	r7, r0
 800bfdc:	eba8 0800 	sub.w	r8, r8, r0
 800bfe0:	e7e9      	b.n	800bfb6 <__sflush_r+0xda>
 800bfe2:	bf00      	nop
 800bfe4:	20400001 	.word	0x20400001

0800bfe8 <_fflush_r>:
 800bfe8:	b538      	push	{r3, r4, r5, lr}
 800bfea:	690b      	ldr	r3, [r1, #16]
 800bfec:	4605      	mov	r5, r0
 800bfee:	460c      	mov	r4, r1
 800bff0:	b913      	cbnz	r3, 800bff8 <_fflush_r+0x10>
 800bff2:	2500      	movs	r5, #0
 800bff4:	4628      	mov	r0, r5
 800bff6:	bd38      	pop	{r3, r4, r5, pc}
 800bff8:	b118      	cbz	r0, 800c002 <_fflush_r+0x1a>
 800bffa:	6983      	ldr	r3, [r0, #24]
 800bffc:	b90b      	cbnz	r3, 800c002 <_fflush_r+0x1a>
 800bffe:	f000 f887 	bl	800c110 <__sinit>
 800c002:	4b14      	ldr	r3, [pc, #80]	; (800c054 <_fflush_r+0x6c>)
 800c004:	429c      	cmp	r4, r3
 800c006:	d11b      	bne.n	800c040 <_fflush_r+0x58>
 800c008:	686c      	ldr	r4, [r5, #4]
 800c00a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d0ef      	beq.n	800bff2 <_fflush_r+0xa>
 800c012:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c014:	07d0      	lsls	r0, r2, #31
 800c016:	d404      	bmi.n	800c022 <_fflush_r+0x3a>
 800c018:	0599      	lsls	r1, r3, #22
 800c01a:	d402      	bmi.n	800c022 <_fflush_r+0x3a>
 800c01c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c01e:	f000 f915 	bl	800c24c <__retarget_lock_acquire_recursive>
 800c022:	4628      	mov	r0, r5
 800c024:	4621      	mov	r1, r4
 800c026:	f7ff ff59 	bl	800bedc <__sflush_r>
 800c02a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c02c:	07da      	lsls	r2, r3, #31
 800c02e:	4605      	mov	r5, r0
 800c030:	d4e0      	bmi.n	800bff4 <_fflush_r+0xc>
 800c032:	89a3      	ldrh	r3, [r4, #12]
 800c034:	059b      	lsls	r3, r3, #22
 800c036:	d4dd      	bmi.n	800bff4 <_fflush_r+0xc>
 800c038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c03a:	f000 f908 	bl	800c24e <__retarget_lock_release_recursive>
 800c03e:	e7d9      	b.n	800bff4 <_fflush_r+0xc>
 800c040:	4b05      	ldr	r3, [pc, #20]	; (800c058 <_fflush_r+0x70>)
 800c042:	429c      	cmp	r4, r3
 800c044:	d101      	bne.n	800c04a <_fflush_r+0x62>
 800c046:	68ac      	ldr	r4, [r5, #8]
 800c048:	e7df      	b.n	800c00a <_fflush_r+0x22>
 800c04a:	4b04      	ldr	r3, [pc, #16]	; (800c05c <_fflush_r+0x74>)
 800c04c:	429c      	cmp	r4, r3
 800c04e:	bf08      	it	eq
 800c050:	68ec      	ldreq	r4, [r5, #12]
 800c052:	e7da      	b.n	800c00a <_fflush_r+0x22>
 800c054:	0800c778 	.word	0x0800c778
 800c058:	0800c798 	.word	0x0800c798
 800c05c:	0800c758 	.word	0x0800c758

0800c060 <std>:
 800c060:	2300      	movs	r3, #0
 800c062:	b510      	push	{r4, lr}
 800c064:	4604      	mov	r4, r0
 800c066:	e9c0 3300 	strd	r3, r3, [r0]
 800c06a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c06e:	6083      	str	r3, [r0, #8]
 800c070:	8181      	strh	r1, [r0, #12]
 800c072:	6643      	str	r3, [r0, #100]	; 0x64
 800c074:	81c2      	strh	r2, [r0, #14]
 800c076:	6183      	str	r3, [r0, #24]
 800c078:	4619      	mov	r1, r3
 800c07a:	2208      	movs	r2, #8
 800c07c:	305c      	adds	r0, #92	; 0x5c
 800c07e:	f7ff f88d 	bl	800b19c <memset>
 800c082:	4b05      	ldr	r3, [pc, #20]	; (800c098 <std+0x38>)
 800c084:	6263      	str	r3, [r4, #36]	; 0x24
 800c086:	4b05      	ldr	r3, [pc, #20]	; (800c09c <std+0x3c>)
 800c088:	62a3      	str	r3, [r4, #40]	; 0x28
 800c08a:	4b05      	ldr	r3, [pc, #20]	; (800c0a0 <std+0x40>)
 800c08c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c08e:	4b05      	ldr	r3, [pc, #20]	; (800c0a4 <std+0x44>)
 800c090:	6224      	str	r4, [r4, #32]
 800c092:	6323      	str	r3, [r4, #48]	; 0x30
 800c094:	bd10      	pop	{r4, pc}
 800c096:	bf00      	nop
 800c098:	0800c46d 	.word	0x0800c46d
 800c09c:	0800c48f 	.word	0x0800c48f
 800c0a0:	0800c4c7 	.word	0x0800c4c7
 800c0a4:	0800c4eb 	.word	0x0800c4eb

0800c0a8 <_cleanup_r>:
 800c0a8:	4901      	ldr	r1, [pc, #4]	; (800c0b0 <_cleanup_r+0x8>)
 800c0aa:	f000 b8af 	b.w	800c20c <_fwalk_reent>
 800c0ae:	bf00      	nop
 800c0b0:	0800bfe9 	.word	0x0800bfe9

0800c0b4 <__sfmoreglue>:
 800c0b4:	b570      	push	{r4, r5, r6, lr}
 800c0b6:	2268      	movs	r2, #104	; 0x68
 800c0b8:	1e4d      	subs	r5, r1, #1
 800c0ba:	4355      	muls	r5, r2
 800c0bc:	460e      	mov	r6, r1
 800c0be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c0c2:	f7ff f975 	bl	800b3b0 <_malloc_r>
 800c0c6:	4604      	mov	r4, r0
 800c0c8:	b140      	cbz	r0, 800c0dc <__sfmoreglue+0x28>
 800c0ca:	2100      	movs	r1, #0
 800c0cc:	e9c0 1600 	strd	r1, r6, [r0]
 800c0d0:	300c      	adds	r0, #12
 800c0d2:	60a0      	str	r0, [r4, #8]
 800c0d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c0d8:	f7ff f860 	bl	800b19c <memset>
 800c0dc:	4620      	mov	r0, r4
 800c0de:	bd70      	pop	{r4, r5, r6, pc}

0800c0e0 <__sfp_lock_acquire>:
 800c0e0:	4801      	ldr	r0, [pc, #4]	; (800c0e8 <__sfp_lock_acquire+0x8>)
 800c0e2:	f000 b8b3 	b.w	800c24c <__retarget_lock_acquire_recursive>
 800c0e6:	bf00      	nop
 800c0e8:	20001815 	.word	0x20001815

0800c0ec <__sfp_lock_release>:
 800c0ec:	4801      	ldr	r0, [pc, #4]	; (800c0f4 <__sfp_lock_release+0x8>)
 800c0ee:	f000 b8ae 	b.w	800c24e <__retarget_lock_release_recursive>
 800c0f2:	bf00      	nop
 800c0f4:	20001815 	.word	0x20001815

0800c0f8 <__sinit_lock_acquire>:
 800c0f8:	4801      	ldr	r0, [pc, #4]	; (800c100 <__sinit_lock_acquire+0x8>)
 800c0fa:	f000 b8a7 	b.w	800c24c <__retarget_lock_acquire_recursive>
 800c0fe:	bf00      	nop
 800c100:	20001816 	.word	0x20001816

0800c104 <__sinit_lock_release>:
 800c104:	4801      	ldr	r0, [pc, #4]	; (800c10c <__sinit_lock_release+0x8>)
 800c106:	f000 b8a2 	b.w	800c24e <__retarget_lock_release_recursive>
 800c10a:	bf00      	nop
 800c10c:	20001816 	.word	0x20001816

0800c110 <__sinit>:
 800c110:	b510      	push	{r4, lr}
 800c112:	4604      	mov	r4, r0
 800c114:	f7ff fff0 	bl	800c0f8 <__sinit_lock_acquire>
 800c118:	69a3      	ldr	r3, [r4, #24]
 800c11a:	b11b      	cbz	r3, 800c124 <__sinit+0x14>
 800c11c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c120:	f7ff bff0 	b.w	800c104 <__sinit_lock_release>
 800c124:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c128:	6523      	str	r3, [r4, #80]	; 0x50
 800c12a:	4b13      	ldr	r3, [pc, #76]	; (800c178 <__sinit+0x68>)
 800c12c:	4a13      	ldr	r2, [pc, #76]	; (800c17c <__sinit+0x6c>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	62a2      	str	r2, [r4, #40]	; 0x28
 800c132:	42a3      	cmp	r3, r4
 800c134:	bf04      	itt	eq
 800c136:	2301      	moveq	r3, #1
 800c138:	61a3      	streq	r3, [r4, #24]
 800c13a:	4620      	mov	r0, r4
 800c13c:	f000 f820 	bl	800c180 <__sfp>
 800c140:	6060      	str	r0, [r4, #4]
 800c142:	4620      	mov	r0, r4
 800c144:	f000 f81c 	bl	800c180 <__sfp>
 800c148:	60a0      	str	r0, [r4, #8]
 800c14a:	4620      	mov	r0, r4
 800c14c:	f000 f818 	bl	800c180 <__sfp>
 800c150:	2200      	movs	r2, #0
 800c152:	60e0      	str	r0, [r4, #12]
 800c154:	2104      	movs	r1, #4
 800c156:	6860      	ldr	r0, [r4, #4]
 800c158:	f7ff ff82 	bl	800c060 <std>
 800c15c:	68a0      	ldr	r0, [r4, #8]
 800c15e:	2201      	movs	r2, #1
 800c160:	2109      	movs	r1, #9
 800c162:	f7ff ff7d 	bl	800c060 <std>
 800c166:	68e0      	ldr	r0, [r4, #12]
 800c168:	2202      	movs	r2, #2
 800c16a:	2112      	movs	r1, #18
 800c16c:	f7ff ff78 	bl	800c060 <std>
 800c170:	2301      	movs	r3, #1
 800c172:	61a3      	str	r3, [r4, #24]
 800c174:	e7d2      	b.n	800c11c <__sinit+0xc>
 800c176:	bf00      	nop
 800c178:	0800c670 	.word	0x0800c670
 800c17c:	0800c0a9 	.word	0x0800c0a9

0800c180 <__sfp>:
 800c180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c182:	4607      	mov	r7, r0
 800c184:	f7ff ffac 	bl	800c0e0 <__sfp_lock_acquire>
 800c188:	4b1e      	ldr	r3, [pc, #120]	; (800c204 <__sfp+0x84>)
 800c18a:	681e      	ldr	r6, [r3, #0]
 800c18c:	69b3      	ldr	r3, [r6, #24]
 800c18e:	b913      	cbnz	r3, 800c196 <__sfp+0x16>
 800c190:	4630      	mov	r0, r6
 800c192:	f7ff ffbd 	bl	800c110 <__sinit>
 800c196:	3648      	adds	r6, #72	; 0x48
 800c198:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c19c:	3b01      	subs	r3, #1
 800c19e:	d503      	bpl.n	800c1a8 <__sfp+0x28>
 800c1a0:	6833      	ldr	r3, [r6, #0]
 800c1a2:	b30b      	cbz	r3, 800c1e8 <__sfp+0x68>
 800c1a4:	6836      	ldr	r6, [r6, #0]
 800c1a6:	e7f7      	b.n	800c198 <__sfp+0x18>
 800c1a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c1ac:	b9d5      	cbnz	r5, 800c1e4 <__sfp+0x64>
 800c1ae:	4b16      	ldr	r3, [pc, #88]	; (800c208 <__sfp+0x88>)
 800c1b0:	60e3      	str	r3, [r4, #12]
 800c1b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c1b6:	6665      	str	r5, [r4, #100]	; 0x64
 800c1b8:	f000 f847 	bl	800c24a <__retarget_lock_init_recursive>
 800c1bc:	f7ff ff96 	bl	800c0ec <__sfp_lock_release>
 800c1c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c1c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c1c8:	6025      	str	r5, [r4, #0]
 800c1ca:	61a5      	str	r5, [r4, #24]
 800c1cc:	2208      	movs	r2, #8
 800c1ce:	4629      	mov	r1, r5
 800c1d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c1d4:	f7fe ffe2 	bl	800b19c <memset>
 800c1d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c1dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c1e0:	4620      	mov	r0, r4
 800c1e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1e4:	3468      	adds	r4, #104	; 0x68
 800c1e6:	e7d9      	b.n	800c19c <__sfp+0x1c>
 800c1e8:	2104      	movs	r1, #4
 800c1ea:	4638      	mov	r0, r7
 800c1ec:	f7ff ff62 	bl	800c0b4 <__sfmoreglue>
 800c1f0:	4604      	mov	r4, r0
 800c1f2:	6030      	str	r0, [r6, #0]
 800c1f4:	2800      	cmp	r0, #0
 800c1f6:	d1d5      	bne.n	800c1a4 <__sfp+0x24>
 800c1f8:	f7ff ff78 	bl	800c0ec <__sfp_lock_release>
 800c1fc:	230c      	movs	r3, #12
 800c1fe:	603b      	str	r3, [r7, #0]
 800c200:	e7ee      	b.n	800c1e0 <__sfp+0x60>
 800c202:	bf00      	nop
 800c204:	0800c670 	.word	0x0800c670
 800c208:	ffff0001 	.word	0xffff0001

0800c20c <_fwalk_reent>:
 800c20c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c210:	4606      	mov	r6, r0
 800c212:	4688      	mov	r8, r1
 800c214:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c218:	2700      	movs	r7, #0
 800c21a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c21e:	f1b9 0901 	subs.w	r9, r9, #1
 800c222:	d505      	bpl.n	800c230 <_fwalk_reent+0x24>
 800c224:	6824      	ldr	r4, [r4, #0]
 800c226:	2c00      	cmp	r4, #0
 800c228:	d1f7      	bne.n	800c21a <_fwalk_reent+0xe>
 800c22a:	4638      	mov	r0, r7
 800c22c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c230:	89ab      	ldrh	r3, [r5, #12]
 800c232:	2b01      	cmp	r3, #1
 800c234:	d907      	bls.n	800c246 <_fwalk_reent+0x3a>
 800c236:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c23a:	3301      	adds	r3, #1
 800c23c:	d003      	beq.n	800c246 <_fwalk_reent+0x3a>
 800c23e:	4629      	mov	r1, r5
 800c240:	4630      	mov	r0, r6
 800c242:	47c0      	blx	r8
 800c244:	4307      	orrs	r7, r0
 800c246:	3568      	adds	r5, #104	; 0x68
 800c248:	e7e9      	b.n	800c21e <_fwalk_reent+0x12>

0800c24a <__retarget_lock_init_recursive>:
 800c24a:	4770      	bx	lr

0800c24c <__retarget_lock_acquire_recursive>:
 800c24c:	4770      	bx	lr

0800c24e <__retarget_lock_release_recursive>:
 800c24e:	4770      	bx	lr

0800c250 <__swhatbuf_r>:
 800c250:	b570      	push	{r4, r5, r6, lr}
 800c252:	460e      	mov	r6, r1
 800c254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c258:	2900      	cmp	r1, #0
 800c25a:	b096      	sub	sp, #88	; 0x58
 800c25c:	4614      	mov	r4, r2
 800c25e:	461d      	mov	r5, r3
 800c260:	da08      	bge.n	800c274 <__swhatbuf_r+0x24>
 800c262:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c266:	2200      	movs	r2, #0
 800c268:	602a      	str	r2, [r5, #0]
 800c26a:	061a      	lsls	r2, r3, #24
 800c26c:	d410      	bmi.n	800c290 <__swhatbuf_r+0x40>
 800c26e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c272:	e00e      	b.n	800c292 <__swhatbuf_r+0x42>
 800c274:	466a      	mov	r2, sp
 800c276:	f000 f95f 	bl	800c538 <_fstat_r>
 800c27a:	2800      	cmp	r0, #0
 800c27c:	dbf1      	blt.n	800c262 <__swhatbuf_r+0x12>
 800c27e:	9a01      	ldr	r2, [sp, #4]
 800c280:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c284:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c288:	425a      	negs	r2, r3
 800c28a:	415a      	adcs	r2, r3
 800c28c:	602a      	str	r2, [r5, #0]
 800c28e:	e7ee      	b.n	800c26e <__swhatbuf_r+0x1e>
 800c290:	2340      	movs	r3, #64	; 0x40
 800c292:	2000      	movs	r0, #0
 800c294:	6023      	str	r3, [r4, #0]
 800c296:	b016      	add	sp, #88	; 0x58
 800c298:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c29c <__smakebuf_r>:
 800c29c:	898b      	ldrh	r3, [r1, #12]
 800c29e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c2a0:	079d      	lsls	r5, r3, #30
 800c2a2:	4606      	mov	r6, r0
 800c2a4:	460c      	mov	r4, r1
 800c2a6:	d507      	bpl.n	800c2b8 <__smakebuf_r+0x1c>
 800c2a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c2ac:	6023      	str	r3, [r4, #0]
 800c2ae:	6123      	str	r3, [r4, #16]
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	6163      	str	r3, [r4, #20]
 800c2b4:	b002      	add	sp, #8
 800c2b6:	bd70      	pop	{r4, r5, r6, pc}
 800c2b8:	ab01      	add	r3, sp, #4
 800c2ba:	466a      	mov	r2, sp
 800c2bc:	f7ff ffc8 	bl	800c250 <__swhatbuf_r>
 800c2c0:	9900      	ldr	r1, [sp, #0]
 800c2c2:	4605      	mov	r5, r0
 800c2c4:	4630      	mov	r0, r6
 800c2c6:	f7ff f873 	bl	800b3b0 <_malloc_r>
 800c2ca:	b948      	cbnz	r0, 800c2e0 <__smakebuf_r+0x44>
 800c2cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2d0:	059a      	lsls	r2, r3, #22
 800c2d2:	d4ef      	bmi.n	800c2b4 <__smakebuf_r+0x18>
 800c2d4:	f023 0303 	bic.w	r3, r3, #3
 800c2d8:	f043 0302 	orr.w	r3, r3, #2
 800c2dc:	81a3      	strh	r3, [r4, #12]
 800c2de:	e7e3      	b.n	800c2a8 <__smakebuf_r+0xc>
 800c2e0:	4b0d      	ldr	r3, [pc, #52]	; (800c318 <__smakebuf_r+0x7c>)
 800c2e2:	62b3      	str	r3, [r6, #40]	; 0x28
 800c2e4:	89a3      	ldrh	r3, [r4, #12]
 800c2e6:	6020      	str	r0, [r4, #0]
 800c2e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2ec:	81a3      	strh	r3, [r4, #12]
 800c2ee:	9b00      	ldr	r3, [sp, #0]
 800c2f0:	6163      	str	r3, [r4, #20]
 800c2f2:	9b01      	ldr	r3, [sp, #4]
 800c2f4:	6120      	str	r0, [r4, #16]
 800c2f6:	b15b      	cbz	r3, 800c310 <__smakebuf_r+0x74>
 800c2f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2fc:	4630      	mov	r0, r6
 800c2fe:	f000 f92d 	bl	800c55c <_isatty_r>
 800c302:	b128      	cbz	r0, 800c310 <__smakebuf_r+0x74>
 800c304:	89a3      	ldrh	r3, [r4, #12]
 800c306:	f023 0303 	bic.w	r3, r3, #3
 800c30a:	f043 0301 	orr.w	r3, r3, #1
 800c30e:	81a3      	strh	r3, [r4, #12]
 800c310:	89a0      	ldrh	r0, [r4, #12]
 800c312:	4305      	orrs	r5, r0
 800c314:	81a5      	strh	r5, [r4, #12]
 800c316:	e7cd      	b.n	800c2b4 <__smakebuf_r+0x18>
 800c318:	0800c0a9 	.word	0x0800c0a9

0800c31c <memcpy>:
 800c31c:	440a      	add	r2, r1
 800c31e:	4291      	cmp	r1, r2
 800c320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c324:	d100      	bne.n	800c328 <memcpy+0xc>
 800c326:	4770      	bx	lr
 800c328:	b510      	push	{r4, lr}
 800c32a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c32e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c332:	4291      	cmp	r1, r2
 800c334:	d1f9      	bne.n	800c32a <memcpy+0xe>
 800c336:	bd10      	pop	{r4, pc}

0800c338 <memmove>:
 800c338:	4288      	cmp	r0, r1
 800c33a:	b510      	push	{r4, lr}
 800c33c:	eb01 0402 	add.w	r4, r1, r2
 800c340:	d902      	bls.n	800c348 <memmove+0x10>
 800c342:	4284      	cmp	r4, r0
 800c344:	4623      	mov	r3, r4
 800c346:	d807      	bhi.n	800c358 <memmove+0x20>
 800c348:	1e43      	subs	r3, r0, #1
 800c34a:	42a1      	cmp	r1, r4
 800c34c:	d008      	beq.n	800c360 <memmove+0x28>
 800c34e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c352:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c356:	e7f8      	b.n	800c34a <memmove+0x12>
 800c358:	4402      	add	r2, r0
 800c35a:	4601      	mov	r1, r0
 800c35c:	428a      	cmp	r2, r1
 800c35e:	d100      	bne.n	800c362 <memmove+0x2a>
 800c360:	bd10      	pop	{r4, pc}
 800c362:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c366:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c36a:	e7f7      	b.n	800c35c <memmove+0x24>

0800c36c <__malloc_lock>:
 800c36c:	4801      	ldr	r0, [pc, #4]	; (800c374 <__malloc_lock+0x8>)
 800c36e:	f7ff bf6d 	b.w	800c24c <__retarget_lock_acquire_recursive>
 800c372:	bf00      	nop
 800c374:	20001814 	.word	0x20001814

0800c378 <__malloc_unlock>:
 800c378:	4801      	ldr	r0, [pc, #4]	; (800c380 <__malloc_unlock+0x8>)
 800c37a:	f7ff bf68 	b.w	800c24e <__retarget_lock_release_recursive>
 800c37e:	bf00      	nop
 800c380:	20001814 	.word	0x20001814

0800c384 <_realloc_r>:
 800c384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c388:	4680      	mov	r8, r0
 800c38a:	4614      	mov	r4, r2
 800c38c:	460e      	mov	r6, r1
 800c38e:	b921      	cbnz	r1, 800c39a <_realloc_r+0x16>
 800c390:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c394:	4611      	mov	r1, r2
 800c396:	f7ff b80b 	b.w	800b3b0 <_malloc_r>
 800c39a:	b92a      	cbnz	r2, 800c3a8 <_realloc_r+0x24>
 800c39c:	f7fe ff9c 	bl	800b2d8 <_free_r>
 800c3a0:	4625      	mov	r5, r4
 800c3a2:	4628      	mov	r0, r5
 800c3a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3a8:	f000 f8fa 	bl	800c5a0 <_malloc_usable_size_r>
 800c3ac:	4284      	cmp	r4, r0
 800c3ae:	4607      	mov	r7, r0
 800c3b0:	d802      	bhi.n	800c3b8 <_realloc_r+0x34>
 800c3b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c3b6:	d812      	bhi.n	800c3de <_realloc_r+0x5a>
 800c3b8:	4621      	mov	r1, r4
 800c3ba:	4640      	mov	r0, r8
 800c3bc:	f7fe fff8 	bl	800b3b0 <_malloc_r>
 800c3c0:	4605      	mov	r5, r0
 800c3c2:	2800      	cmp	r0, #0
 800c3c4:	d0ed      	beq.n	800c3a2 <_realloc_r+0x1e>
 800c3c6:	42bc      	cmp	r4, r7
 800c3c8:	4622      	mov	r2, r4
 800c3ca:	4631      	mov	r1, r6
 800c3cc:	bf28      	it	cs
 800c3ce:	463a      	movcs	r2, r7
 800c3d0:	f7ff ffa4 	bl	800c31c <memcpy>
 800c3d4:	4631      	mov	r1, r6
 800c3d6:	4640      	mov	r0, r8
 800c3d8:	f7fe ff7e 	bl	800b2d8 <_free_r>
 800c3dc:	e7e1      	b.n	800c3a2 <_realloc_r+0x1e>
 800c3de:	4635      	mov	r5, r6
 800c3e0:	e7df      	b.n	800c3a2 <_realloc_r+0x1e>

0800c3e2 <_raise_r>:
 800c3e2:	291f      	cmp	r1, #31
 800c3e4:	b538      	push	{r3, r4, r5, lr}
 800c3e6:	4604      	mov	r4, r0
 800c3e8:	460d      	mov	r5, r1
 800c3ea:	d904      	bls.n	800c3f6 <_raise_r+0x14>
 800c3ec:	2316      	movs	r3, #22
 800c3ee:	6003      	str	r3, [r0, #0]
 800c3f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c3f4:	bd38      	pop	{r3, r4, r5, pc}
 800c3f6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c3f8:	b112      	cbz	r2, 800c400 <_raise_r+0x1e>
 800c3fa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c3fe:	b94b      	cbnz	r3, 800c414 <_raise_r+0x32>
 800c400:	4620      	mov	r0, r4
 800c402:	f000 f831 	bl	800c468 <_getpid_r>
 800c406:	462a      	mov	r2, r5
 800c408:	4601      	mov	r1, r0
 800c40a:	4620      	mov	r0, r4
 800c40c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c410:	f000 b818 	b.w	800c444 <_kill_r>
 800c414:	2b01      	cmp	r3, #1
 800c416:	d00a      	beq.n	800c42e <_raise_r+0x4c>
 800c418:	1c59      	adds	r1, r3, #1
 800c41a:	d103      	bne.n	800c424 <_raise_r+0x42>
 800c41c:	2316      	movs	r3, #22
 800c41e:	6003      	str	r3, [r0, #0]
 800c420:	2001      	movs	r0, #1
 800c422:	e7e7      	b.n	800c3f4 <_raise_r+0x12>
 800c424:	2400      	movs	r4, #0
 800c426:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c42a:	4628      	mov	r0, r5
 800c42c:	4798      	blx	r3
 800c42e:	2000      	movs	r0, #0
 800c430:	e7e0      	b.n	800c3f4 <_raise_r+0x12>
	...

0800c434 <raise>:
 800c434:	4b02      	ldr	r3, [pc, #8]	; (800c440 <raise+0xc>)
 800c436:	4601      	mov	r1, r0
 800c438:	6818      	ldr	r0, [r3, #0]
 800c43a:	f7ff bfd2 	b.w	800c3e2 <_raise_r>
 800c43e:	bf00      	nop
 800c440:	200000fc 	.word	0x200000fc

0800c444 <_kill_r>:
 800c444:	b538      	push	{r3, r4, r5, lr}
 800c446:	4d07      	ldr	r5, [pc, #28]	; (800c464 <_kill_r+0x20>)
 800c448:	2300      	movs	r3, #0
 800c44a:	4604      	mov	r4, r0
 800c44c:	4608      	mov	r0, r1
 800c44e:	4611      	mov	r1, r2
 800c450:	602b      	str	r3, [r5, #0]
 800c452:	f7f5 f951 	bl	80016f8 <_kill>
 800c456:	1c43      	adds	r3, r0, #1
 800c458:	d102      	bne.n	800c460 <_kill_r+0x1c>
 800c45a:	682b      	ldr	r3, [r5, #0]
 800c45c:	b103      	cbz	r3, 800c460 <_kill_r+0x1c>
 800c45e:	6023      	str	r3, [r4, #0]
 800c460:	bd38      	pop	{r3, r4, r5, pc}
 800c462:	bf00      	nop
 800c464:	20001818 	.word	0x20001818

0800c468 <_getpid_r>:
 800c468:	f7f5 b93e 	b.w	80016e8 <_getpid>

0800c46c <__sread>:
 800c46c:	b510      	push	{r4, lr}
 800c46e:	460c      	mov	r4, r1
 800c470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c474:	f000 f89c 	bl	800c5b0 <_read_r>
 800c478:	2800      	cmp	r0, #0
 800c47a:	bfab      	itete	ge
 800c47c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c47e:	89a3      	ldrhlt	r3, [r4, #12]
 800c480:	181b      	addge	r3, r3, r0
 800c482:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c486:	bfac      	ite	ge
 800c488:	6563      	strge	r3, [r4, #84]	; 0x54
 800c48a:	81a3      	strhlt	r3, [r4, #12]
 800c48c:	bd10      	pop	{r4, pc}

0800c48e <__swrite>:
 800c48e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c492:	461f      	mov	r7, r3
 800c494:	898b      	ldrh	r3, [r1, #12]
 800c496:	05db      	lsls	r3, r3, #23
 800c498:	4605      	mov	r5, r0
 800c49a:	460c      	mov	r4, r1
 800c49c:	4616      	mov	r6, r2
 800c49e:	d505      	bpl.n	800c4ac <__swrite+0x1e>
 800c4a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4a4:	2302      	movs	r3, #2
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	f000 f868 	bl	800c57c <_lseek_r>
 800c4ac:	89a3      	ldrh	r3, [r4, #12]
 800c4ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c4b6:	81a3      	strh	r3, [r4, #12]
 800c4b8:	4632      	mov	r2, r6
 800c4ba:	463b      	mov	r3, r7
 800c4bc:	4628      	mov	r0, r5
 800c4be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4c2:	f000 b817 	b.w	800c4f4 <_write_r>

0800c4c6 <__sseek>:
 800c4c6:	b510      	push	{r4, lr}
 800c4c8:	460c      	mov	r4, r1
 800c4ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4ce:	f000 f855 	bl	800c57c <_lseek_r>
 800c4d2:	1c43      	adds	r3, r0, #1
 800c4d4:	89a3      	ldrh	r3, [r4, #12]
 800c4d6:	bf15      	itete	ne
 800c4d8:	6560      	strne	r0, [r4, #84]	; 0x54
 800c4da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c4de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c4e2:	81a3      	strheq	r3, [r4, #12]
 800c4e4:	bf18      	it	ne
 800c4e6:	81a3      	strhne	r3, [r4, #12]
 800c4e8:	bd10      	pop	{r4, pc}

0800c4ea <__sclose>:
 800c4ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4ee:	f000 b813 	b.w	800c518 <_close_r>
	...

0800c4f4 <_write_r>:
 800c4f4:	b538      	push	{r3, r4, r5, lr}
 800c4f6:	4d07      	ldr	r5, [pc, #28]	; (800c514 <_write_r+0x20>)
 800c4f8:	4604      	mov	r4, r0
 800c4fa:	4608      	mov	r0, r1
 800c4fc:	4611      	mov	r1, r2
 800c4fe:	2200      	movs	r2, #0
 800c500:	602a      	str	r2, [r5, #0]
 800c502:	461a      	mov	r2, r3
 800c504:	f7f5 f92f 	bl	8001766 <_write>
 800c508:	1c43      	adds	r3, r0, #1
 800c50a:	d102      	bne.n	800c512 <_write_r+0x1e>
 800c50c:	682b      	ldr	r3, [r5, #0]
 800c50e:	b103      	cbz	r3, 800c512 <_write_r+0x1e>
 800c510:	6023      	str	r3, [r4, #0]
 800c512:	bd38      	pop	{r3, r4, r5, pc}
 800c514:	20001818 	.word	0x20001818

0800c518 <_close_r>:
 800c518:	b538      	push	{r3, r4, r5, lr}
 800c51a:	4d06      	ldr	r5, [pc, #24]	; (800c534 <_close_r+0x1c>)
 800c51c:	2300      	movs	r3, #0
 800c51e:	4604      	mov	r4, r0
 800c520:	4608      	mov	r0, r1
 800c522:	602b      	str	r3, [r5, #0]
 800c524:	f7f5 f93b 	bl	800179e <_close>
 800c528:	1c43      	adds	r3, r0, #1
 800c52a:	d102      	bne.n	800c532 <_close_r+0x1a>
 800c52c:	682b      	ldr	r3, [r5, #0]
 800c52e:	b103      	cbz	r3, 800c532 <_close_r+0x1a>
 800c530:	6023      	str	r3, [r4, #0]
 800c532:	bd38      	pop	{r3, r4, r5, pc}
 800c534:	20001818 	.word	0x20001818

0800c538 <_fstat_r>:
 800c538:	b538      	push	{r3, r4, r5, lr}
 800c53a:	4d07      	ldr	r5, [pc, #28]	; (800c558 <_fstat_r+0x20>)
 800c53c:	2300      	movs	r3, #0
 800c53e:	4604      	mov	r4, r0
 800c540:	4608      	mov	r0, r1
 800c542:	4611      	mov	r1, r2
 800c544:	602b      	str	r3, [r5, #0]
 800c546:	f7f5 f936 	bl	80017b6 <_fstat>
 800c54a:	1c43      	adds	r3, r0, #1
 800c54c:	d102      	bne.n	800c554 <_fstat_r+0x1c>
 800c54e:	682b      	ldr	r3, [r5, #0]
 800c550:	b103      	cbz	r3, 800c554 <_fstat_r+0x1c>
 800c552:	6023      	str	r3, [r4, #0]
 800c554:	bd38      	pop	{r3, r4, r5, pc}
 800c556:	bf00      	nop
 800c558:	20001818 	.word	0x20001818

0800c55c <_isatty_r>:
 800c55c:	b538      	push	{r3, r4, r5, lr}
 800c55e:	4d06      	ldr	r5, [pc, #24]	; (800c578 <_isatty_r+0x1c>)
 800c560:	2300      	movs	r3, #0
 800c562:	4604      	mov	r4, r0
 800c564:	4608      	mov	r0, r1
 800c566:	602b      	str	r3, [r5, #0]
 800c568:	f7f5 f935 	bl	80017d6 <_isatty>
 800c56c:	1c43      	adds	r3, r0, #1
 800c56e:	d102      	bne.n	800c576 <_isatty_r+0x1a>
 800c570:	682b      	ldr	r3, [r5, #0]
 800c572:	b103      	cbz	r3, 800c576 <_isatty_r+0x1a>
 800c574:	6023      	str	r3, [r4, #0]
 800c576:	bd38      	pop	{r3, r4, r5, pc}
 800c578:	20001818 	.word	0x20001818

0800c57c <_lseek_r>:
 800c57c:	b538      	push	{r3, r4, r5, lr}
 800c57e:	4d07      	ldr	r5, [pc, #28]	; (800c59c <_lseek_r+0x20>)
 800c580:	4604      	mov	r4, r0
 800c582:	4608      	mov	r0, r1
 800c584:	4611      	mov	r1, r2
 800c586:	2200      	movs	r2, #0
 800c588:	602a      	str	r2, [r5, #0]
 800c58a:	461a      	mov	r2, r3
 800c58c:	f7f5 f92e 	bl	80017ec <_lseek>
 800c590:	1c43      	adds	r3, r0, #1
 800c592:	d102      	bne.n	800c59a <_lseek_r+0x1e>
 800c594:	682b      	ldr	r3, [r5, #0]
 800c596:	b103      	cbz	r3, 800c59a <_lseek_r+0x1e>
 800c598:	6023      	str	r3, [r4, #0]
 800c59a:	bd38      	pop	{r3, r4, r5, pc}
 800c59c:	20001818 	.word	0x20001818

0800c5a0 <_malloc_usable_size_r>:
 800c5a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5a4:	1f18      	subs	r0, r3, #4
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	bfbc      	itt	lt
 800c5aa:	580b      	ldrlt	r3, [r1, r0]
 800c5ac:	18c0      	addlt	r0, r0, r3
 800c5ae:	4770      	bx	lr

0800c5b0 <_read_r>:
 800c5b0:	b538      	push	{r3, r4, r5, lr}
 800c5b2:	4d07      	ldr	r5, [pc, #28]	; (800c5d0 <_read_r+0x20>)
 800c5b4:	4604      	mov	r4, r0
 800c5b6:	4608      	mov	r0, r1
 800c5b8:	4611      	mov	r1, r2
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	602a      	str	r2, [r5, #0]
 800c5be:	461a      	mov	r2, r3
 800c5c0:	f7f5 f8b4 	bl	800172c <_read>
 800c5c4:	1c43      	adds	r3, r0, #1
 800c5c6:	d102      	bne.n	800c5ce <_read_r+0x1e>
 800c5c8:	682b      	ldr	r3, [r5, #0]
 800c5ca:	b103      	cbz	r3, 800c5ce <_read_r+0x1e>
 800c5cc:	6023      	str	r3, [r4, #0]
 800c5ce:	bd38      	pop	{r3, r4, r5, pc}
 800c5d0:	20001818 	.word	0x20001818

0800c5d4 <_init>:
 800c5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5d6:	bf00      	nop
 800c5d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5da:	bc08      	pop	{r3}
 800c5dc:	469e      	mov	lr, r3
 800c5de:	4770      	bx	lr

0800c5e0 <_fini>:
 800c5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5e2:	bf00      	nop
 800c5e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5e6:	bc08      	pop	{r3}
 800c5e8:	469e      	mov	lr, r3
 800c5ea:	4770      	bx	lr
